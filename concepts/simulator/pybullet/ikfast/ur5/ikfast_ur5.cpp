/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-12-30 21:05:28.534876
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

#include "Python.h"

#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x11);
x15=((0.09465)*x11);
x16=((1.0)*x6);
x17=((1.0)*x5);
x18=((1.0)*x8);
x19=((0.39225)*x2);
x20=((0.2023)*x5);
x21=((0.2023)*x6);
x22=((1.0)*x0);
x23=((0.425)*x1);
x24=(x1*x3);
x25=(x11*x8);
x26=(x11*x4);
x27=(x1*x2);
x28=(x3*x4);
x29=(x0*x10);
x30=(x2*x4);
x31=(x10*x14);
x32=(x22*x24);
x33=(x14*x24);
x34=(x27+x28);
x35=((((-1.0)*x30))+(((1.0)*x24)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x0*x30)));
x39=((((-1.0)*x33))+((x2*x26)));
x40=(x22*((x27+x28)));
x41=(x14*((x27+x28)));
x42=(x38*x5);
x43=(x41*x6);
x44=(((x35*x5))+((x6*(((((-1.0)*x27))+(((-1.0)*x28)))))));
x45=(x42+((x40*x6)));
x46=(x43+((x39*x5)));
x47=(((x16*(((((-1.0)*x32))+((x22*x30))))))+(((-1.0)*x17*x40)));
x48=((((-1.0)*x17*x41))+((x16*(((((-1.0)*x33))+((x14*x30)))))));
eerot[0]=(((x47*x7))+((x9*(((((-1.0)*x18*x45))+x31)))));
eerot[1]=(((x7*(((((-1.0)*x31))+((x45*x8))))))+((x47*x9)));
eerot[2]=(((x10*x45))+x25);
eetrans[0]=(((x5*((((x13*x28))+((x13*x27))))))+(((0.10915)*x11))+(((-1.0)*x0*x23))+(((-1.0)*x12*x24))+((x10*((((x20*x38))+((x21*x40))))))+((x6*(((((-1.0)*x13*x30))+((x13*x24))))))+((x12*x30))+(((0.2023)*x25)));
eerot[3]=(((x48*x7))+((x9*(((((-1.0)*x18*x46))+(((-1.0)*x10*x22)))))));
eerot[4]=(((x7*((((x46*x8))+x29))))+((x48*x9)));
eerot[5]=(((x10*x46))+(((-1.0)*x0*x18)));
eetrans[1]=(((x19*x26))+((x5*((((x15*x27))+((x15*x28))))))+(((-0.10915)*x0))+(((-0.39225)*x11*x24))+((x6*((((x15*x24))+(((-1.0)*x15*x30))))))+(((-1.0)*x11*x23))+(((-0.2023)*x0*x8))+((x10*((((x20*x39))+((x21*x41)))))));
eerot[6]=(((x44*x7))+((x8*x9*((x37+x36)))));
eerot[7]=(((x44*x9))+((x7*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x17*x34))+(((-1.0)*x16*x35)))));
eetrans[2]=((0.089159)+(((-1.0)*x1*x19))+((x5*(((((-0.09465)*x24))+(((0.09465)*x30))))))+(((-0.425)*x4))+((x10*(((((-1.0)*x20*x34))+(((-1.0)*x21*x35))))))+((x6*(((((0.09465)*x28))+(((0.09465)*x27))))))+(((-0.39225)*x28)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-1.0)*px))+(((0.2023)*r02)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-1.0)*py))+(((0.2023)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+pz+(((-0.2023)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.1893)*npx);
IkReal x53=((0.1893)*npy);
IkReal x54=((0.09465)*r22);
IkReal x55=((0.09465)*r21);
IkReal x56=((-0.09465)*r20);
IkReal x57=((-1.0)*r20);
IkReal x58=((-1.0)*rxp0_2);
IkReal x59=((-0.09465)*r21);
IkReal x60=((-1.0)*r21);
IkReal x61=((-1.0)*rxp1_2);
IkReal x62=((-1.0)*npx);
IkReal x63=((-1.0)*r22);
IkReal x64=((-1.0)*npz);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x57;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x58;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x57;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x58;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x59;
matrixinvcoeffs[33]=x53;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x60;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x61;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x59;
matrixinvcoeffs[51]=x53;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x60;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x61;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x63;
matrixinvcoeffs[76]=x54;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x64;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x54;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x61;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x59;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x61;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x55;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x57;
matrixinvcoeffs[133]=x62;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x57;
matrixinvcoeffs[151]=x62;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x63;
matrixinvcoeffs[165]=x64;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x54;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x63;
matrixinvcoeffs[183]=x64;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x60;
matrixinvcoeffs[204]=x55;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x61;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x55;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x62;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x57;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x58;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x65=pz*pz;
IkReal x66=pp*pp;
IkReal x67=((0.1893)*pz);
IkReal x68=((1.7)*pz);
IkReal x69=(gclwh15_9*npx);
IkReal x70=(gclwh6_11*r21);
IkReal x71=(pp*r22);
IkReal x72=((0.00702803935125)*r21);
IkReal x73=(gclwh5_9*npz);
IkReal x74=(gclwh8_11*r20);
IkReal x75=(npy*pz);
IkReal x76=((3.60823078949063e-5)*r22);
IkReal x77=(gclwh14_3*rxp0_2);
IkReal x78=((0.000977833645875)*r20);
IkReal x79=(npz*pz);
IkReal x80=((0.000977833645875)*r21);
IkReal x81=(gclwh10_12*r22);
IkReal x82=(gclwh10_2*rxp2_2);
IkReal x83=((0.00076243651125)*rxp1_2);
IkReal x84=((0.00600991575645741)*r20);
IkReal x85=((0.154705425)*rxp1_2);
IkReal x86=((0.017917245)*r21);
IkReal x87=(gclwh6_11*rxp1_2);
IkReal x88=((0.3786)*rxp1_2);
IkReal x89=(gclwh7_0*rxp1_2);
IkReal x90=((0.7572)*rxp1_2);
IkReal x91=((0.154705425)*rxp2_2);
IkReal x92=((2.0)*gclwh11_10);
IkReal x93=(gclwh12_8*r21);
IkReal x94=((0.81725)*pp);
IkReal x95=(pp*pz);
IkReal x96=(gclwh14_2*r20);
IkReal x97=(pp*r21);
IkReal x98=((2.0)*gclwh4_11);
IkReal x99=(gclwh8_12*r20);
IkReal x100=(npx*pz);
IkReal x101=(gclwh14_8*rxp0_2);
IkReal x102=((0.1893)*rxp2_2);
IkReal x103=(gclwh5_9*rxp2_2);
IkReal x104=((0.020662095)*rxp1_2);
IkReal x105=((0.007321434238125)*r21);
IkReal x106=((1.6345)*pz);
IkReal x107=((0.0089586225)*pz);
IkReal x108=(gclwh13_0*r21);
IkReal x109=(gclwh5_9*r22);
IkReal x110=(gclwh11_10*r22);
IkReal x111=(gclwh11_13*r22);
IkReal x112=((1.0)*r21);
IkReal x113=((0.3786)*rxp0_2);
IkReal x114=(gclwh14_14*rxp0_2);
IkReal x115=(pp*r20);
IkReal x116=((0.00195566729175)*r22);
IkReal x117=(gclwh15_10*rxp0_2);
IkReal x118=(gclwh14_8*r20);
IkReal x119=(gclwh12_8*rxp1_2);
IkReal x120=((2.0)*gclwh9_10);
IkReal x121=((2.0)*gclwh15_10);
IkReal x122=(gclwh5_15*rxp2_2);
IkReal x123=((2.0)*gclwh13_10);
IkReal x124=((0.00702803935125)*r20);
IkReal x125=(gclwh13_9*r21);
IkReal x126=(gclwh5_0*r22);
IkReal x127=((0.01464286847625)*r20);
IkReal x128=(gclwh15_1*r20);
IkReal x129=((0.000977833645875)*r22);
IkReal x130=((0.0089586225)*r20);
IkReal x131=((2.0)*gclwh10_11);
IkReal x132=(gclwh5_10*r22);
IkReal x133=((2.0)*pp);
IkReal x134=(gclwh15_9*r20);
IkReal x135=(gclwh1_3*r20);
IkReal x136=((0.00195566729175)*r20);
IkReal x137=(gclwh4_3*rxp2_2);
IkReal x138=((0.2183)*gclwh13_15);
IkReal x139=((2.0)*gclwh7_10);
IkReal x140=(gclwh15_0*r20);
IkReal x141=(gclwh9_0*r20);
IkReal x142=(gclwh15_15*rxp0_2);
IkReal x143=(gclwh2_1*r21);
IkReal x144=((4.0)*gclwh11_10);
IkReal x145=((0.30941085)*rxp0_2);
IkReal x146=(gclwh9_0*rxp0_2);
IkReal x147=(gclwh5_10*rxp2_2);
IkReal x148=((0.2183)*gclwh12_14);
IkReal x149=((0.2183)*gclwh14_14);
IkReal x150=(gclwh4_2*rxp2_2);
IkReal x151=((0.03275)*pp);
IkReal x152=((0.006199575)*rxp1_2);
IkReal x153=(gclwh12_2*rxp1_2);
IkReal x154=(gclwh5_0*rxp2_2);
IkReal x155=((3.60823078949063e-5)*r21);
IkReal x156=(gclwh14_11*rxp0_2);
IkReal x157=((0.020662095)*rxp0_2);
IkReal x158=(gclwh14_8*npx);
IkReal x159=((4.0)*gclwh9_10);
IkReal x160=((0.00195566729175)*r21);
IkReal x161=(gclwh8_12*rxp0_2);
IkReal x162=((0.01464286847625)*r21);
IkReal x163=((0.3786)*rxp2_2);
IkReal x164=((0.01464286847625)*r22);
IkReal x165=(gclwh7_13*r21);
IkReal x166=((4.0)*gclwh7_10);
IkReal x167=(gclwh13_0*rxp1_2);
IkReal x168=((0.1893)*rxp1_2);
IkReal x169=(gclwh6_2*r21);
IkReal x170=(gclwh5_1*rxp2_2);
IkReal x171=(gclwh8_2*rxp0_2);
IkReal x172=(gclwh9_10*r20);
IkReal x173=((4.0)*pp);
IkReal x174=(gclwh15_1*rxp0_2);
IkReal x175=(gclwh9_13*r20);
IkReal x176=((0.0089586225)*r21);
IkReal x177=(gclwh0_0*r20);
IkReal x178=(gclwh10_11*r22);
IkReal x179=((2.0)*gclwh12_11);
IkReal x180=((0.0655)*pz);
IkReal x181=((0.006199575)*rxp2_2);
IkReal x182=(gclwh12_14*rxp1_2);
IkReal x183=(gclwh15_0*rxp0_2);
IkReal x184=((2.0)*npx);
IkReal x185=(gclwh9_13*rxp0_2);
IkReal x186=((1.0)*pp);
IkReal x187=((4.0)*gclwh10_11);
IkReal x188=(gclwh15_9*rxp0_2);
IkReal x189=((3.60823078949063e-5)*r20);
IkReal x190=((0.00702803935125)*r22);
IkReal x191=(gclwh8_2*r20);
IkReal x192=((0.2183)*gclwh5_15);
IkReal x193=(gclwh10_2*r22);
IkReal x194=(gclwh5_1*r22);
IkReal x195=(gclwh13_9*rxp1_2);
IkReal x196=((2.0)*gclwh5_10);
IkReal x197=((0.020662095)*rxp2_2);
IkReal x198=(gclwh4_8*r22);
IkReal x199=((0.017917245)*r20);
IkReal x200=(gclwh7_0*r21);
IkReal x201=((0.00600991575645741)*r21);
IkReal x202=(gclwh11_0*r22);
IkReal x203=(gclwh6_12*r21);
IkReal x204=((0.2183)*gclwh15_15);
IkReal x205=(gclwh11_0*rxp2_2);
IkReal x206=((0.2183)*gclwh4_14);
IkReal x207=(gclwh4_14*rxp2_2);
IkReal x208=(gclwh6_2*rxp1_2);
IkReal x209=((0.1893)*rxp0_2);
IkReal x210=(gclwh4_8*rxp2_2);
IkReal x211=((0.12699240901125)*rxp1_2);
IkReal x212=(gclwh14_2*rxp0_2);
IkReal x213=(gclwh4_3*r22);
IkReal x214=((0.1893)*pp);
IkReal x215=(gclwh13_15*rxp1_2);
IkReal x216=(gclwh1_2*r20);
IkReal x217=((2.0)*gclwh14_11);
IkReal x218=(gclwh4_11*r22);
IkReal x219=((0.020662095)*x114);
IkReal x220=(gclwh6_5*x80);
IkReal x221=(gclwh8_5*x78);
IkReal x222=(gclwh12_14*x104);
IkReal x223=(gclwh10_5*x129);
IkReal x224=(gclwh4_14*x197);
IkReal x225=((0.0089586225)*x70);
IkReal x226=(gclwh12_11*x168);
IkReal x227=((0.017917245)*x119);
IkReal x228=((0.017917245)*x210);
IkReal x229=(gclwh4_11*x102);
IkReal x230=((0.0089586225)*x74);
IkReal x231=((0.1893)*x156);
IkReal x232=((0.0089586225)*x178);
IkReal x233=((0.017917245)*x101);
IkReal x234=((0.017917245)*x103);
IkReal x235=((0.0089586225)*x110);
IkReal x236=((0.1893)*x117);
IkReal x237=((0.017917245)*x195);
IkReal x238=(gclwh9_10*x130);
IkReal x239=((0.017917245)*x188);
IkReal x240=(gclwh13_10*x168);
IkReal x241=(gclwh7_10*x176);
IkReal x242=(gclwh5_10*x102);
IkReal x243=((0.020662095)*x142);
IkReal x244=(gclwh7_7*x80);
IkReal x245=(gclwh9_7*x78);
IkReal x246=(gclwh13_15*x104);
IkReal x247=((0.020662095)*x122);
IkReal x248=(gclwh11_7*x129);
IkReal x249=(gclwh10_5*x197);
IkReal x250=(gclwh8_5*x157);
IkReal x251=(gclwh14_14*x78);
IkReal x252=(gclwh6_5*x104);
IkReal x253=(gclwh4_14*x129);
IkReal x254=(gclwh12_14*x80);
IkReal x255=(gclwh8_11*x209);
IkReal x256=((0.000847933619625)*x93);
IkReal x257=(gclwh12_11*x176);
IkReal x258=(gclwh10_11*x102);
IkReal x259=((0.0089586225)*x218);
IkReal x260=((0.000847933619625)*x198);
IkReal x261=((0.1893)*x87);
IkReal x262=(gclwh14_11*x130);
IkReal x263=((0.000847933619625)*x118);
IkReal x264=(gclwh9_10*x209);
IkReal x265=(gclwh13_10*x176);
IkReal x266=(gclwh11_10*x102);
IkReal x267=((0.000847933619625)*x134);
IkReal x268=((0.0089586225)*x132);
IkReal x269=((0.000847933619625)*x109);
IkReal x270=(gclwh7_10*x168);
IkReal x271=((0.000847933619625)*x125);
IkReal x272=(gclwh15_10*x130);
IkReal x273=(gclwh5_15*x129);
IkReal x274=(gclwh7_7*x104);
IkReal x275=(gclwh13_15*x80);
IkReal x276=(gclwh15_15*x78);
IkReal x277=(gclwh9_7*x157);
IkReal x278=(gclwh11_7*x197);
IkReal x279=((0.017917245)*x178);
IkReal x280=(gclwh14_11*x113);
IkReal x281=((0.017917245)*x74);
IkReal x282=((0.04132419)*x114);
IkReal x283=((0.04132419)*x182);
IkReal x284=((0.04132419)*x207);
IkReal x285=(gclwh4_11*x163);
IkReal x286=((0.017917245)*x70);
IkReal x287=(gclwh12_11*x88);
IkReal x288=((0.04132419)*x122);
IkReal x289=((0.04132419)*x215);
IkReal x290=((0.04132419)*x142);
IkReal x291=((0.017917245)*x172);
IkReal x292=(gclwh15_10*x113);
IkReal x293=((0.017917245)*x110);
IkReal x294=(gclwh7_10*x86);
IkReal x295=((0.3786)*x147);
IkReal x296=(gclwh13_10*x88);
IkReal x297=((0.3786)*x87);
IkReal x298=(gclwh14_11*x199);
IkReal x299=(gclwh14_14*x136);
IkReal x300=(gclwh4_14*x116);
IkReal x301=(gclwh12_14*x160);
IkReal x302=(gclwh14_8*x115);
IkReal x303=((2.0)*x65);
IkReal x304=((1.0)*x66);
IkReal x305=(r21*x66);
IkReal x306=((0.2183)*gclwh10_5*x79);
IkReal x307=((0.2183)*gclwh8_5*x100);
IkReal x308=((0.10915)*gclwh6_5*x97);
IkReal x309=((0.2183)*gclwh6_5*x75);
IkReal x310=((0.10915)*gclwh8_5*x115);
IkReal x311=((0.10915)*gclwh10_5*x71);
IkReal x312=(gclwh12_3*pp*x168);
IkReal x313=(x131*x79);
IkReal x314=(x107*x191);
IkReal x315=((2.0)*gclwh8_11*x100);
IkReal x316=(gclwh10_2*pz*x71);
IkReal x317=(x212*x67);
IkReal x318=(x191*x95);
IkReal x319=(gclwh4_3*pp*x102);
IkReal x320=(x107*x193);
IkReal x321=(x153*x67);
IkReal x322=((2.0)*gclwh6_11*x75);
IkReal x323=(x150*x67);
IkReal x324=(x214*x77);
IkReal x325=(x107*x169);
IkReal x326=(gclwh13_1*pp*x168);
IkReal x327=(x107*x202);
IkReal x328=(x107*x141);
IkReal x329=(gclwh5_1*pp*x102);
IkReal x330=(x183*x67);
IkReal x331=(gclwh11_0*pz*x71);
IkReal x332=(x139*x75);
IkReal x333=(x141*x95);
IkReal x334=(x79*x92);
IkReal x335=(x174*x214);
IkReal x336=(x100*x120);
IkReal x337=(x107*x200);
IkReal x338=(x167*x67);
IkReal x339=(x154*x67);
IkReal x340=((0.10915)*gclwh7_7*x97);
IkReal x341=((0.2183)*gclwh9_7*x100);
IkReal x342=((0.2183)*gclwh11_7*x79);
IkReal x343=((0.10915)*gclwh9_7*x115);
IkReal x344=((0.2183)*gclwh7_7*x75);
IkReal x345=((0.10915)*gclwh11_7*x71);
IkReal x346=((0.10915)*gclwh14_14*x115);
IkReal x347=(x206*x79);
IkReal x348=(x148*x75);
IkReal x349=((0.10915)*gclwh12_14*x97);
IkReal x350=(x100*x149);
IkReal x351=((0.10915)*gclwh4_14*x71);
IkReal x352=((0.09465)*gclwh4_8*x71);
IkReal x353=(x95*x96);
IkReal x354=(gclwh12_3*x305);
IkReal x355=(x208*x67);
IkReal x356=(gclwh3_3*x305);
IkReal x357=(x135*x66);
IkReal x358=(gclwh3_2*r21*x107);
IkReal x359=(x100*x217);
IkReal x360=(x158*x67);
IkReal x361=(x107*x96);
IkReal x362=((0.09465)*pp*x93);
IkReal x363=(x213*x66);
IkReal x364=(x107*x216);
IkReal x365=(x171*x67);
IkReal x366=(x79*x98);
IkReal x367=(gclwh4_2*r22*x107);
IkReal x368=(gclwh4_8*npz*x67);
IkReal x369=(gclwh12_2*r21*x107);
IkReal x370=(x67*x82);
IkReal x371=((0.09465)*x302);
IkReal x372=(x179*x75);
IkReal x373=(gclwh12_8*npy*x67);
IkReal x374=(x128*x66);
IkReal x375=(x67*x73);
IkReal x376=(gclwh5_0*pz*x71);
IkReal x377=(gclwh13_9*npy*x67);
IkReal x378=(x107*x126);
IkReal x379=(x108*x95);
IkReal x380=((0.09465)*gclwh15_9*x115);
IkReal x381=(x100*x121);
IkReal x382=(x107*x108);
IkReal x383=(x143*x66);
IkReal x384=(gclwh2_0*r21*x107);
IkReal x385=(x146*x67);
IkReal x386=(x205*x67);
IkReal x387=(gclwh0_1*r20*x66);
IkReal x388=(x107*x177);
IkReal x389=((0.09465)*gclwh5_9*x71);
IkReal x390=(x67*x89);
IkReal x391=((0.09465)*gclwh13_9*x97);
IkReal x392=(x107*x140);
IkReal x393=(x67*x69);
IkReal x394=(x196*x79);
IkReal x395=(x123*x75);
IkReal x396=((0.10915)*gclwh13_15*x97);
IkReal x397=((0.10915)*gclwh5_15*x71);
IkReal x398=(x100*x204);
IkReal x399=((0.10915)*gclwh15_15*x115);
IkReal x400=(x192*x79);
IkReal x401=(x138*x75);
IkReal x402=(x133*x74);
IkReal x403=(x131*x71);
IkReal x404=((4.0)*gclwh6_11*x75);
IkReal x405=((4.0)*gclwh8_11*x100);
IkReal x406=(x133*x70);
IkReal x407=(x187*x79);
IkReal x408=(x71*x92);
IkReal x409=(x166*x75);
IkReal x410=(x115*x120);
IkReal x411=(x139*x97);
IkReal x412=(x100*x159);
IkReal x413=(x144*x79);
IkReal x414=(x115*x217);
IkReal x415=((4.0)*gclwh12_11*x75);
IkReal x416=((4.0)*gclwh4_11*x79);
IkReal x417=(x115*x149);
IkReal x418=((0.4366)*gclwh12_14*x75);
IkReal x419=((0.4366)*gclwh4_14*x79);
IkReal x420=(x148*x97);
IkReal x421=((0.4366)*gclwh14_14*x100);
IkReal x422=(x206*x71);
IkReal x423=(gclwh6_2*npy*x303);
IkReal x424=(gclwh6_2*x112*x95);
IkReal x425=(gclwh10_2*npz*x303);
IkReal x426=(gclwh8_2*x184*x65);
IkReal x427=(gclwh7_0*npy*x303);
IkReal x428=(gclwh9_0*x184*x65);
IkReal x429=(gclwh11_0*npz*x303);
IkReal x430=(gclwh7_0*x112*x95);
IkReal x431=(gclwh12_2*npy*x303);
IkReal x432=(gclwh3_2*npy*x303);
IkReal x433=(gclwh1_2*x184*x65);
IkReal x434=(gclwh14_3*x184*x95);
IkReal x435=(gclwh4_2*npz*x303);
IkReal x436=(gclwh4_3*x133*x79);
IkReal x437=(gclwh12_2*x112*x95);
IkReal x438=((1.0)*x216*x95);
IkReal x439=(gclwh3_3*x133*x75);
IkReal x440=((1.0)*gclwh4_2*pz*x71);
IkReal x441=(gclwh1_3*x184*x95);
IkReal x442=(gclwh3_2*x112*x95);
IkReal x443=(gclwh12_3*x133*x75);
IkReal x444=(gclwh14_2*x184*x65);
IkReal x445=(gclwh14_3*r20*x304);
IkReal x446=(gclwh0_0*x184*x65);
IkReal x447=(gclwh2_0*npy*x303);
IkReal x448=(gclwh5_1*x133*x79);
IkReal x449=(gclwh13_1*x133*x75);
IkReal x450=(gclwh15_0*x184*x65);
IkReal x451=(gclwh2_1*x133*x75);
IkReal x452=(gclwh0_1*x184*x95);
IkReal x453=(gclwh5_0*npz*x303);
IkReal x454=(gclwh13_0*npy*x303);
IkReal x455=((1.0)*x177*x95);
IkReal x456=((1.0)*x140*x95);
IkReal x457=(gclwh2_0*x112*x95);
IkReal x458=(gclwh13_1*x112*x66);
IkReal x459=(x194*x304);
IkReal x460=(gclwh15_1*x184*x95);
IkReal x461=(x284+x283);
IkReal x462=(x289+x288);
IkReal x463=(x250+x249);
IkReal x464=(x222+x224);
IkReal x465=(x247+x246);
IkReal x466=(x277+x278);
IkReal x467=(x322+x232+x230+x231);
IkReal x468=(x332+x238+x236+x235);
IkReal x469=(x395+x394+x272+x270);
IkReal x470=(x372+x366+x261+x262);
IkReal x471=(x299+x417+x418+x419);
IkReal x472=(x308+x306+x307+x220);
IkReal x473=(x346+x347+x348+x251);
IkReal x474=(x399+x276+x401+x400);
IkReal x475=(x342+x340+x341+x244);
IkReal x476=(x381+x265+x264+x266+x268);
IkReal x477=(x359+x258+x259+x255+x257);
IkReal x478=(x315+x313+x229+x225+x226);
IkReal x479=(x336+x334+x242+x241+x240);
IkReal x480=(x351+x350+x349+x254+x253);
IkReal x481=(x397+x396+x398+x275+x273);
IkReal x482=(x343+x344+x345+x245+x248);
IkReal x483=(x300+x301+x422+x421+x420);
IkReal x484=(x298+x297+x416+x414+x415);
IkReal x485=(x309+x311+x310+x221+x223);
IkReal x486=(x287+x286+x285+x405+x407+x406);
IkReal x487=(x294+x295+x296+x412+x413+x411);
IkReal x488=(x291+x292+x293+x409+x408+x410);
IkReal x489=(x279+x281+x280+x403+x402+x404);
IkReal x490=(((x179*x97))+((x71*x98))+(((4.0)*gclwh14_11*x100))+((gclwh12_11*x86))+(((0.017917245)*x218))+((gclwh10_11*x163))+((gclwh8_11*x113)));
IkReal x491=(x324+x325+x321+x323+x233+x426+x425+x424);
IkReal x492=(x339+x338+x337+x335+x239+x429+x428+x430);
IkReal x493=(x320+x319+x318+x314+x317+x316+x312+x228+x227+x423);
IkReal x494=(x333+x331+x330+x326+x327+x328+x329+x237+x234+x427);
IkReal x495=(x389+x391+x390+x393+x392+x269+x271+x458+x459+x456+x457+x454+x455+x452+x453+x451+x460);
IkReal x496=(x353+x352+x355+x354+x357+x356+x358+x360+x361+x362+x363+x364+x256+x260+x431+x432+x433+x434+x435+x67);
IkReal x497=(x373+x371+x370+x368+x369+x365+x367+x263+x438+x439+x436+x437+x445+x444+x441+x440+x443+x442);
IkReal x498=(x386+x387+x384+x385+x382+x383+x380+x388+x379+x378+x377+x376+x375+x374+x267+x449+x448+x447+x446+x450+x67);
op[0]=((((-0.81725)*gclwh10_12*x71))+(((1.6345)*gclwh8_12*x100))+(((1.6345)*gclwh10_12*x79))+(((-1.0)*x94*x99))+(((-1.0)*x485))+((gclwh6_12*x105))+(((-0.007321434238125)*x99))+(((-1.6345)*gclwh6_12*x75))+(((-0.007321434238125)*x81))+(((-1.0)*gclwh4_8*x91))+x464+x472+((x203*x94))+(((0.154705425)*x101))+(((-1.0)*x219))+(((-1.0)*gclwh12_8*x85)));
op[1]=((((-1.0)*x491))+(((-1.0)*x478))+((gclwh10_11*x71))+(((-0.12699240901125)*x137))+(((-1.0)*gclwh12_3*x211))+x493+x467+(((-1.0)*x186*x70))+((pp*x74))+(((0.12699240901125)*x77)));
op[2]=((-0.17125635)+(((-1.0)*x486))+x489);
op[3]=((((-1.569)*gclwh8_2*x100))+((gclwh8_2*x124))+(((-0.160905)*x101))+(((0.7845)*gclwh8_2*x115))+(((-1.0)*gclwh6_2*x72))+((gclwh10_2*x190))+(((-0.7845)*gclwh6_2*x97))+(((-0.14850585)*x150))+(((-0.14850585)*x153))+(((-1.569)*gclwh10_2*x79))+(((-1.0)*x461))+(((0.160905)*x119))+(((0.14850585)*x212))+x282+(((0.7845)*gclwh10_2*x71))+(((0.160905)*x210))+(((1.569)*gclwh6_2*x75)));
op[4]=((((-1.0)*x151*x99))+(((-0.0655)*gclwh6_12*x75))+(((0.0655)*gclwh8_12*x100))+(((-1.0)*x485))+(((0.03275)*gclwh6_12*x97))+(((-1.0)*x464))+(((-0.000293394886875)*x99))+x219+((gclwh4_8*x181))+(((-0.000293394886875)*x81))+x472+(((-0.006199575)*x101))+(((0.0655)*gclwh10_12*x79))+(((0.006199575)*x119))+(((-0.03275)*gclwh10_12*x71))+(((0.000293394886875)*x203)));
op[5]=((((-1.0)*gclwh10_11*x71))+(((-1.0)*x491))+(((-1.0)*x467))+x493+x478+(((-1.0)*gclwh12_3*x83))+(((-0.00076243651125)*x137))+(((0.00076243651125)*x77))+(((-1.0)*x186*x74))+((pp*x70)));
op[6]=((((0.12699240901125)*x174))+(((-1.0)*x492))+(((-1.0)*gclwh9_10*x115))+((gclwh7_10*x97))+(((-1.0)*x468))+(((-1.0)*gclwh11_10*x71))+x494+x479+(((-1.0)*gclwh13_1*x211))+(((-0.12699240901125)*x170)));
op[7]=(((gclwh7_13*x105))+(((-0.81725)*gclwh11_13*x71))+(((-1.0)*gclwh13_9*x85))+(((1.6345)*gclwh9_13*x100))+(((-1.0)*x482))+(((0.154705425)*x188))+(((-1.0)*x175*x94))+x465+x475+(((-1.0)*gclwh5_9*x91))+((x165*x94))+(((-0.007321434238125)*x111))+(((-1.0)*x243))+(((-0.007321434238125)*x175))+(((1.6345)*gclwh11_13*x79))+(((-1.6345)*gclwh7_13*x75)));
op[8]=(((gclwh11_0*x190))+(((-0.160905)*x195))+(((0.160905)*x188))+(((-1.0)*gclwh7_0*x72))+(((-0.160905)*x103))+(((0.14850585)*x183))+(((1.569)*gclwh7_0*x75))+(((-1.0)*x290))+(((-0.14850585)*x154))+(((-0.14850585)*x167))+((gclwh9_0*x124))+x462+(((-1.569)*gclwh11_0*x79))+(((-1.569)*gclwh9_0*x100))+(((-0.7845)*gclwh7_0*x97))+(((0.7845)*gclwh11_0*x71))+(((0.7845)*gclwh9_0*x115)));
op[9]=((-0.17125635)+(((-1.0)*x487))+x488);
op[10]=((((-1.0)*x492))+((gclwh11_10*x71))+(((-1.0)*gclwh7_10*x97))+(((-1.0)*x479))+x494+x468+(((0.00076243651125)*x174))+((gclwh9_10*x115))+(((-0.00076243651125)*x170))+(((-1.0)*gclwh13_1*x83)));
op[11]=((((0.000293394886875)*x165))+(((-0.03275)*gclwh9_13*x115))+(((0.03275)*gclwh7_13*x97))+(((-0.006199575)*x188))+(((-1.0)*x482))+(((-0.0655)*gclwh7_13*x75))+(((-0.03275)*gclwh11_13*x71))+(((-1.0)*x465))+((gclwh13_9*x152))+(((0.0655)*gclwh11_13*x79))+x243+(((-0.000293394886875)*x111))+x475+(((-0.000293394886875)*x175))+(((0.006199575)*x103))+(((0.0655)*gclwh9_13*x100)));
op[12]=((((1.6345)*gclwh4_8*x79))+(((1.6345)*gclwh12_8*x75))+(((0.154705425)*x161))+(((-1.6345)*gclwh14_8*x100))+(((-0.007321434238125)*x93))+(((-1.0)*x473))+(((-0.81725)*gclwh4_8*x71))+((gclwh10_12*x91))+x480+x463+((x118*x94))+(((0.007321434238125)*x118))+(((-1.0)*x93*x94))+(((-1.0)*x252))+(((-1.0)*gclwh6_12*x85))+(((-0.007321434238125)*x198)));
op[13]=((-0.679811285)+((gclwh3_3*x201))+(((1.341705325)*gclwh12_3*x75))+(((-1.0)*x497))+(((-1.0)*gclwh12_3*x201))+(((1.341705325)*gclwh4_3*x79))+(((-0.66189404)*gclwh12_3*x97))+(((-1.0)*x477))+(((-0.66189404)*gclwh4_3*x71))+(((-1.341705325)*gclwh14_3*x100))+(((-0.679811285)*gclwh1_3*x115))+(((-0.679811285)*gclwh3_3*x97))+(((1.341705325)*gclwh3_3*x75))+x496+x470+((gclwh1_3*x84))+((gclwh14_3*x84))+((gclwh14_11*x115))+(((-1.0)*gclwh12_11*x97))+(((1.341705325)*gclwh1_3*x100))+(((-0.00600991575645741)*x213))+(((-1.0)*gclwh4_11*x71))+(((0.66189404)*gclwh14_3*x115)));
op[14]=((-0.07735732)+(((-1.0)*x490))+x484);
op[15]=((((-0.7845)*gclwh4_2*x71))+(((-0.85)*x302))+(((0.85)*gclwh4_8*x71))+(((-1.0)*gclwh4_2*x190))+(((1.569)*gclwh3_2*x75))+(((0.7845)*pp*x96))+(((-1.0)*x483))+(((-0.14850585)*x82))+((gclwh3_2*x72))+(((-0.7845)*gclwh12_2*x97))+(((-0.007614829125)*x118))+(((1.569)*gclwh12_2*x75))+(((0.00702803935125)*x96))+(((0.85)*pp*x93))+(((-0.14850585)*x171))+(((0.007614829125)*x93))+x471+(((0.007614829125)*x198))+(((-0.7845)*gclwh1_2*x115))+((x158*x68))+(((1.569)*gclwh4_2*x79))+(((-0.7845)*gclwh3_2*x97))+(((-1.0)*gclwh12_2*x72))+(((-1.0)*gclwh12_8*npy*x68))+((gclwh1_2*x124))+(((-1.0)*gclwh4_8*npz*x68))+(((0.14850585)*x208))+(((1.569)*gclwh1_2*x100))+(((-1.569)*gclwh14_2*x100)));
op[16]=((((-1.0)*gclwh6_12*x152))+(((-1.0)*x480))+(((0.03275)*gclwh4_8*x71))+(((-0.0655)*gclwh12_8*x75))+(((-0.0655)*gclwh4_8*x79))+(((0.0655)*gclwh14_8*x100))+(((-0.03275)*x302))+(((0.006199575)*x161))+((gclwh10_12*x181))+(((-0.000293394886875)*x118))+(((0.000293394886875)*x93))+x463+x473+((x151*x93))+(((0.000293394886875)*x198))+(((-1.0)*x252)));
op[17]=((0.012986285)+(((0.008055325)*gclwh1_3*x100))+(((-0.00493096)*gclwh14_3*x115))+(((-1.0)*gclwh14_11*x115))+(((0.008055325)*gclwh3_3*x75))+(((-1.0)*x497))+(((-0.008055325)*gclwh14_3*x100))+(((-1.0)*x470))+(((-0.012986285)*gclwh3_3*x97))+(((0.008055325)*gclwh12_3*x75))+x496+x477+(((0.008055325)*gclwh4_3*x79))+((gclwh3_3*x155))+(((0.00493096)*gclwh12_3*x97))+(((0.00493096)*gclwh4_3*x71))+(((3.60823078949063e-5)*x135))+(((-1.0)*gclwh4_3*x76))+(((-0.012986285)*gclwh1_3*x115))+((gclwh12_11*x97))+((gclwh14_3*x189))+((gclwh4_11*x71))+(((-1.0)*gclwh12_3*x155)));
op[18]=((0.679811285)+((gclwh13_1*x201))+(((-1.0)*x495))+(((0.00600991575645741)*x194))+(((-0.66189404)*gclwh15_1*x115))+(((0.00600991575645741)*x143))+(((-1.0)*gclwh15_1*x84))+(((-0.679811285)*gclwh0_1*x115))+(((-1.341705325)*gclwh5_1*x79))+(((-1.0)*x476))+(((-1.341705325)*gclwh13_1*x75))+(((-1.0)*gclwh5_10*x71))+(((1.341705325)*gclwh15_1*x100))+(((-1.0)*gclwh13_10*x97))+((gclwh0_1*x84))+((gclwh15_10*x115))+x498+x469+(((1.341705325)*gclwh0_1*x100))+(((0.66189404)*gclwh13_1*x97))+(((1.341705325)*gclwh2_1*x75))+(((-0.679811285)*gclwh2_1*x97))+(((0.66189404)*gclwh5_1*x71)));
op[19]=((((-1.0)*x481))+((x125*x94))+(((-1.0)*x466))+(((-0.154705425)*x185))+x274+(((-1.0)*gclwh11_13*x91))+(((-1.0)*x106*x73))+x474+(((-0.007321434238125)*x134))+((x106*x69))+(((-1.6345)*gclwh13_9*x75))+(((0.007321434238125)*x109))+((gclwh7_13*x85))+((gclwh13_9*x105))+(((-1.0)*x134*x94))+(((0.81725)*gclwh5_9*x71)));
op[20]=((((-0.7845)*gclwh15_0*x115))+((gclwh15_15*x136))+(((-0.85)*gclwh15_9*x115))+((gclwh0_0*x124))+(((0.007614829125)*x109))+(((-0.007614829125)*x134))+(((-0.14850585)*x89))+(((-0.7845)*gclwh2_0*x97))+(((-1.0)*x192*x71))+(((0.4366)*gclwh13_15*x75))+(((0.007614829125)*x125))+(((-1.569)*gclwh5_0*x79))+(((1.569)*gclwh0_0*x100))+(((1.569)*gclwh15_0*x100))+(((0.14850585)*x146))+(((-0.7845)*gclwh0_0*x115))+((gclwh2_0*x72))+(((-1.0)*gclwh15_0*x124))+((x68*x69))+((gclwh13_0*x72))+(((-1.0)*gclwh13_15*x160))+(((1.569)*gclwh2_0*x75))+(((0.85)*gclwh5_9*x71))+(((-1.0)*gclwh5_15*x116))+(((-1.0)*x138*x97))+(((0.4366)*gclwh5_15*x79))+(((-1.0)*x68*x73))+(((0.85)*gclwh13_9*x97))+(((0.7845)*gclwh5_0*x71))+(((0.00702803935125)*x126))+(((0.14850585)*x205))+(((-1.0)*gclwh13_9*npy*x68))+(((0.7845)*gclwh13_0*x97))+(((-1.569)*gclwh13_0*x75))+((x115*x204))+(((-0.4366)*gclwh15_15*x100)));
op[21]=((-0.07735732)+((gclwh11_10*x163))+((x196*x71))+(((-1.0)*x115*x121))+(((-4.0)*gclwh13_10*x75))+(((-1.0)*gclwh15_10*x199))+(((0.017917245)*x132))+(((4.0)*gclwh15_10*x100))+((gclwh9_10*x113))+((gclwh13_10*x86))+(((-4.0)*gclwh5_10*x79))+((x123*x97))+(((-1.0)*gclwh7_10*x88)));
op[22]=((-0.012986285)+((gclwh5_1*x76))+(((0.008055325)*gclwh15_1*x100))+(((0.008055325)*gclwh2_1*x75))+(((3.60823078949063e-5)*x143))+(((-1.0)*x495))+(((-1.0)*gclwh15_10*x115))+(((0.008055325)*gclwh0_1*x100))+(((-0.00493096)*gclwh5_1*x71))+(((-0.012986285)*gclwh2_1*x97))+(((-0.008055325)*gclwh5_1*x79))+(((-1.0)*x469))+((gclwh5_10*x71))+(((-0.012986285)*gclwh0_1*x115))+x498+x476+((gclwh0_1*x189))+(((0.00493096)*gclwh15_1*x115))+(((-0.00493096)*gclwh13_1*x97))+((gclwh13_10*x97))+(((-3.60823078949063e-5)*x128))+(((-0.008055325)*gclwh13_1*x75))+((gclwh13_1*x155)));
op[23]=((((0.0655)*gclwh13_9*x75))+(((-0.006199575)*x185))+(((0.03275)*gclwh15_9*x115))+(((-0.03275)*gclwh13_9*x97))+((x180*x73))+(((-0.000293394886875)*x125))+((gclwh7_13*x152))+(((-1.0)*x474))+(((0.000293394886875)*x134))+(((-1.0)*x466))+(((-0.000293394886875)*x109))+x274+x481+(((-0.03275)*gclwh5_9*x71))+(((-1.0)*gclwh11_13*x181))+(((-1.0)*x180*x69)));
op[24]=((-0.35681135)+(((-1.0)*x486))+x489);
op[25]=(((gclwh8_2*x127))+(((-3.269)*gclwh8_2*x100))+((gclwh10_2*x164))+(((-1.0)*gclwh6_2*x162))+(((-1.0)*x461))+(((3.269)*gclwh6_2*x75))+(((-3.269)*gclwh10_2*x79))+(((-0.30941085)*x153))+(((-0.30941085)*x150))+x282+((gclwh14_2*x145))+(((-1.6345)*gclwh6_2*x97))+(((1.6345)*gclwh8_2*x115))+(((1.6345)*gclwh10_2*x71)));
op[26]=((((1.569)*pp*x99))+(((0.08264838)*x114))+(((1.569)*gclwh10_12*x71))+(((-3.138)*gclwh10_12*x79))+(((-3.138)*gclwh8_12*x100))+(((-0.0140560787025)*x203))+(((-1.569)*gclwh6_12*x97))+(((0.0140560787025)*x81))+(((-0.08264838)*x182))+(((0.0140560787025)*x99))+(((-0.08264838)*x207))+(((3.138)*gclwh6_12*x75)));
op[27]=(((x173*x70))+(((-0.03583449)*x74))+(((-1.0)*x173*x74))+(((8.0)*gclwh10_11*x79))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x178))+(((0.03583449)*x70))+(((-0.7572)*x156))+(((-8.0)*gclwh6_11*x75))+((gclwh12_11*x90))+(((8.0)*gclwh8_11*x100))+(((-1.0)*x187*x71)));
op[28]=((-0.01429865)+(((-1.0)*x489))+x486);
op[29]=((((-0.00058678977375)*x169))+(((0.00058678977375)*x191))+(((0.00058678977375)*x193))+(((0.0655)*gclwh8_2*x115))+(((0.01239915)*x212))+(((-0.131)*gclwh8_2*x100))+x461+(((-0.0655)*gclwh6_2*x97))+(((-1.0)*x282))+(((0.131)*gclwh6_2*x75))+(((-0.131)*gclwh10_2*x79))+(((-0.01239915)*x150))+(((-0.01239915)*x153))+(((0.0655)*gclwh10_2*x71)));
op[30]=((((-3.269)*gclwh9_0*x100))+(((-1.6345)*gclwh7_0*x97))+(((1.6345)*gclwh11_0*x71))+(((-1.0)*x290))+(((-0.30941085)*x167))+(((3.269)*gclwh7_0*x75))+(((-1.0)*gclwh7_0*x162))+(((-0.30941085)*x154))+(((1.6345)*gclwh9_0*x115))+((gclwh9_0*x127))+x462+(((-3.269)*gclwh11_0*x79))+((gclwh15_0*x145))+((gclwh11_0*x164)));
op[31]=((-0.35681135)+(((-1.0)*x487))+x488);
op[32]=((((0.03583449)*x172))+(((-1.0)*gclwh13_10*x90))+(((-8.0)*gclwh9_10*x100))+(((-0.03583449)*gclwh7_10*r21))+((x144*x71))+(((0.03583449)*x110))+((x115*x159))+(((-8.0)*gclwh11_10*x79))+(((-1.0)*x166*x97))+(((8.0)*gclwh7_10*x75))+(((-0.7572)*x147))+(((0.7572)*x117)));
op[33]=((((-0.0140560787025)*x165))+(((-3.138)*gclwh11_13*x79))+(((1.569)*gclwh9_13*x115))+(((0.0140560787025)*x111))+(((-0.08264838)*x215))+(((-3.138)*gclwh9_13*x100))+(((0.08264838)*x142))+(((3.138)*gclwh7_13*x75))+(((1.569)*gclwh11_13*x71))+(((0.0140560787025)*x175))+(((-1.569)*gclwh7_13*x97))+(((-0.08264838)*x122)));
op[34]=((((-0.0655)*gclwh7_0*x97))+(((-0.131)*gclwh9_0*x100))+(((0.00058678977375)*x141))+(((0.131)*gclwh7_0*x75))+(((-1.0)*x462))+x290+(((-0.131)*gclwh11_0*x79))+(((0.0655)*gclwh9_0*x115))+(((-0.00058678977375)*x200))+(((0.00058678977375)*x202))+(((0.0655)*gclwh11_0*x71))+(((-0.01239915)*x167))+(((-0.01239915)*x154))+(((0.01239915)*x183)));
op[35]=((-0.01429865)+(((-1.0)*x488))+x487);
op[36]=((1.31196768)+(((-1.0)*x490))+x484);
op[37]=((((-1.6345)*gclwh3_2*x97))+(((-1.0)*gclwh12_2*x162))+(((3.269)*gclwh12_2*x75))+(((0.30941085)*x208))+(((-3.269)*gclwh14_2*x100))+(((-1.0)*x483))+(((-1.0)*gclwh4_2*x164))+(((-1.6345)*gclwh1_2*x115))+(((0.01464286847625)*x96))+(((3.269)*gclwh1_2*x100))+x471+(((-1.6345)*gclwh12_2*x97))+(((-1.6345)*gclwh4_2*x71))+(((3.269)*gclwh3_2*x75))+(((-0.30941085)*x82))+((gclwh1_2*x127))+((gclwh3_2*x162))+(((-1.0)*gclwh8_2*x145))+(((1.6345)*pp*x96))+(((3.269)*gclwh4_2*x79)));
IkReal x499=pz*pz;
IkReal x500=pp*pp;
IkReal x501=((0.1893)*pz);
IkReal x502=((1.7)*pz);
IkReal x503=(gclwh15_9*npx);
IkReal x504=(pp*r21);
IkReal x505=(pp*r22);
IkReal x506=((0.00702803935125)*r21);
IkReal x507=(gclwh5_9*npz);
IkReal x508=(pp*r20);
IkReal x509=(npy*pz);
IkReal x510=((4.0)*gclwh12_11);
IkReal x511=((3.60823078949063e-5)*r22);
IkReal x512=(gclwh14_3*rxp0_2);
IkReal x513=((0.000977833645875)*r20);
IkReal x514=(npz*pz);
IkReal x515=((0.000977833645875)*r21);
IkReal x516=(gclwh10_2*rxp2_2);
IkReal x517=((0.00076243651125)*rxp1_2);
IkReal x518=((0.00600991575645741)*r20);
IkReal x519=((0.154705425)*rxp1_2);
IkReal x520=((0.4366)*gclwh5_15);
IkReal x521=(gclwh6_11*rxp1_2);
IkReal x522=(gclwh7_0*rxp1_2);
IkReal x523=((0.154705425)*rxp2_2);
IkReal x524=((2.0)*gclwh11_10);
IkReal x525=((0.2970117)*rxp1_2);
IkReal x526=((0.017917245)*r21);
IkReal x527=(gclwh14_2*pz);
IkReal x528=(gclwh12_8*r21);
IkReal x529=(gclwh14_2*rxp0_2);
IkReal x530=((2.0)*gclwh4_11);
IkReal x531=((0.007321434238125)*r20);
IkReal x532=(npx*pz);
IkReal x533=((0.4366)*gclwh15_15);
IkReal x534=(gclwh10_11*rxp2_2);
IkReal x535=(gclwh5_9*rxp2_2);
IkReal x536=((0.020662095)*rxp1_2);
IkReal x537=((0.007321434238125)*r21);
IkReal x538=(gclwh0_0*r20);
IkReal x539=((0.0089586225)*r21);
IkReal x540=(gclwh13_0*pz);
IkReal x541=((1.6345)*pz);
IkReal x542=((0.007321434238125)*r22);
IkReal x543=((1.0)*pz);
IkReal x544=(gclwh14_14*rxp0_2);
IkReal x545=(gclwh4_14*r22);
IkReal x546=((0.1893)*rxp0_2);
IkReal x547=((0.00058678977375)*r22);
IkReal x548=(gclwh12_8*rxp1_2);
IkReal x549=((2.0)*gclwh9_10);
IkReal x550=((0.1893)*rxp2_2);
IkReal x551=((2.0)*gclwh15_10);
IkReal x552=((4.0)*gclwh14_11);
IkReal x553=(gclwh5_15*rxp2_2);
IkReal x554=((0.020662095)*rxp0_2);
IkReal x555=((2.0)*gclwh13_10);
IkReal x556=((0.3786)*rxp1_2);
IkReal x557=(gclwh9_0*r20);
IkReal x558=(gclwh13_9*r21);
IkReal x559=(gclwh15_1*r20);
IkReal x560=((0.000977833645875)*r22);
IkReal x561=((0.006199575)*rxp0_2);
IkReal x562=(gclwh6_2*rxp1_2);
IkReal x563=((0.0089586225)*r20);
IkReal x564=((2.0)*gclwh10_11);
IkReal x565=((2.0)*pp);
IkReal x566=((0.00058678977375)*r21);
IkReal x567=(gclwh1_3*r20);
IkReal x568=(gclwh14_14*r20);
IkReal x569=(gclwh9_0*rxp0_2);
IkReal x570=(gclwh4_3*rxp2_2);
IkReal x571=(gclwh5_0*r22);
IkReal x572=((0.03583449)*r20);
IkReal x573=((0.00058678977375)*r20);
IkReal x574=((0.2183)*gclwh13_15);
IkReal x575=((2.0)*gclwh7_10);
IkReal x576=(gclwh2_1*r21);
IkReal x577=((4.0)*gclwh15_10);
IkReal x578=((0.0089586225)*pz);
IkReal x579=((0.2183)*gclwh12_14);
IkReal x580=((0.2183)*gclwh14_14);
IkReal x581=(gclwh11_0*rxp2_2);
IkReal x582=(gclwh8_2*rxp0_2);
IkReal x583=((0.3786)*rxp2_2);
IkReal x584=(gclwh12_2*rxp1_2);
IkReal x585=(gclwh5_0*rxp2_2);
IkReal x586=((3.60823078949063e-5)*r21);
IkReal x587=(gclwh15_9*r20);
IkReal x588=((0.3786)*rxp0_2);
IkReal x589=((0.006199575)*rxp1_2);
IkReal x590=(gclwh14_8*npx);
IkReal x591=(gclwh13_15*r21);
IkReal x592=((0.017917245)*r20);
IkReal x593=(gclwh5_15*r22);
IkReal x594=((0.000293394886875)*r21);
IkReal x595=(gclwh13_0*rxp1_2);
IkReal x596=(gclwh7_10*rxp1_2);
IkReal x597=((0.000293394886875)*r22);
IkReal x598=(gclwh5_1*rxp2_2);
IkReal x599=((0.154705425)*rxp0_2);
IkReal x600=((0.4366)*gclwh13_15);
IkReal x601=((0.0089586225)*r22);
IkReal x602=((0.2970117)*rxp2_2);
IkReal x603=(gclwh5_9*r22);
IkReal x604=((0.7572)*rxp0_2);
IkReal x605=((4.0)*gclwh4_11);
IkReal x606=(gclwh15_1*rxp0_2);
IkReal x607=((0.000293394886875)*r20);
IkReal x608=((2.0)*gclwh6_11);
IkReal x609=((0.4366)*gclwh12_14);
IkReal x610=((0.017917245)*r22);
IkReal x611=(gclwh15_0*r20);
IkReal x612=(gclwh15_15*r20);
IkReal x613=((2.0)*gclwh12_11);
IkReal x614=(gclwh14_8*rxp0_2);
IkReal x615=((0.0655)*pz);
IkReal x616=((0.006199575)*rxp2_2);
IkReal x617=((0.04132419)*rxp1_2);
IkReal x618=((0.4366)*gclwh4_14);
IkReal x619=(gclwh15_0*rxp0_2);
IkReal x620=(gclwh14_8*r20);
IkReal x621=((0.03583449)*r22);
IkReal x622=((2.0)*gclwh8_11);
IkReal x623=((4.0)*gclwh13_10);
IkReal x624=(gclwh15_9*rxp0_2);
IkReal x625=((3.60823078949063e-5)*r20);
IkReal x626=((0.00702803935125)*r22);
IkReal x627=((0.2183)*gclwh5_15);
IkReal x628=(gclwh5_1*r22);
IkReal x629=((4.0)*gclwh5_10);
IkReal x630=(gclwh13_9*rxp1_2);
IkReal x631=((2.0)*gclwh5_10);
IkReal x632=((0.4366)*gclwh14_14);
IkReal x633=((0.020662095)*rxp2_2);
IkReal x634=(gclwh4_8*r22);
IkReal x635=(gclwh4_2*rxp2_2);
IkReal x636=((0.00600991575645741)*r21);
IkReal x637=((0.2183)*gclwh15_15);
IkReal x638=((0.2183)*gclwh4_14);
IkReal x639=((0.00702803935125)*r20);
IkReal x640=(gclwh12_14*r21);
IkReal x641=(gclwh4_8*rxp2_2);
IkReal x642=((0.2970117)*rxp0_2);
IkReal x643=(gclwh8_2*pz);
IkReal x644=(gclwh13_1*rxp1_2);
IkReal x645=((0.1893)*pp);
IkReal x646=(gclwh12_3*rxp1_2);
IkReal x647=((0.01464286847625)*r21);
IkReal x648=((0.1893)*rxp1_2);
IkReal x649=(gclwh4_3*r22);
IkReal x650=((2.0)*gclwh14_11);
IkReal x651=((0.03583449)*r21);
IkReal x652=((0.00195566729175)*x591);
IkReal x653=((0.00195566729175)*x593);
IkReal x654=((0.00195566729175)*x612);
IkReal x655=(gclwh15_10*x592);
IkReal x656=(gclwh7_10*x556);
IkReal x657=(gclwh5_10*x610);
IkReal x658=(gclwh9_10*x588);
IkReal x659=(gclwh13_10*x526);
IkReal x660=(gclwh11_10*x583);
IkReal x661=(gclwh12_14*x536);
IkReal x662=(gclwh6_5*x515);
IkReal x663=(gclwh4_14*x633);
IkReal x664=(gclwh8_5*x513);
IkReal x665=((0.020662095)*x544);
IkReal x666=(gclwh10_5*x560);
IkReal x667=((0.017917245)*x548);
IkReal x668=(gclwh8_11*x563);
IkReal x669=(gclwh14_11*x546);
IkReal x670=((0.017917245)*x641);
IkReal x671=(gclwh10_11*x601);
IkReal x672=(gclwh6_11*x539);
IkReal x673=(gclwh12_11*x648);
IkReal x674=(gclwh4_11*x550);
IkReal x675=((0.017917245)*x614);
IkReal x676=((0.017917245)*x535);
IkReal x677=(gclwh13_10*x648);
IkReal x678=(gclwh7_10*x539);
IkReal x679=(gclwh5_10*x550);
IkReal x680=((0.017917245)*x630);
IkReal x681=((0.017917245)*x624);
IkReal x682=(gclwh11_10*x601);
IkReal x683=(gclwh15_10*x546);
IkReal x684=(gclwh9_10*x563);
IkReal x685=(gclwh13_15*x536);
IkReal x686=((0.020662095)*x553);
IkReal x687=(gclwh7_7*x515);
IkReal x688=(gclwh9_7*x513);
IkReal x689=(gclwh15_15*x554);
IkReal x690=(gclwh11_7*x560);
IkReal x691=(gclwh12_11*x526);
IkReal x692=((0.3786)*x534);
IkReal x693=(gclwh4_11*x610);
IkReal x694=(gclwh8_11*x588);
IkReal x695=((0.00195566729175)*x545);
IkReal x696=((0.00195566729175)*x640);
IkReal x697=((0.00195566729175)*x568);
IkReal x698=((0.000977833645875)*x545);
IkReal x699=(gclwh10_5*x633);
IkReal x700=(gclwh12_14*x515);
IkReal x701=(gclwh8_5*x554);
IkReal x702=(gclwh6_5*x536);
IkReal x703=(gclwh14_14*x513);
IkReal x704=((0.000847933619625)*x528);
IkReal x705=((0.1893)*x521);
IkReal x706=(gclwh14_11*x563);
IkReal x707=((0.000847933619625)*x634);
IkReal x708=(gclwh8_11*x546);
IkReal x709=(gclwh12_11*x539);
IkReal x710=((0.1893)*x534);
IkReal x711=(gclwh4_11*x601);
IkReal x712=((0.000847933619625)*x620);
IkReal x713=((0.1893)*x596);
IkReal x714=(gclwh15_10*x563);
IkReal x715=((0.000847933619625)*x587);
IkReal x716=((0.000847933619625)*x603);
IkReal x717=(gclwh9_10*x546);
IkReal x718=(gclwh13_10*x539);
IkReal x719=((0.000847933619625)*x558);
IkReal x720=(gclwh11_10*x550);
IkReal x721=(gclwh5_10*x601);
IkReal x722=(gclwh15_15*x513);
IkReal x723=(gclwh7_7*x536);
IkReal x724=(gclwh5_15*x560);
IkReal x725=(gclwh9_7*x554);
IkReal x726=(gclwh11_7*x633);
IkReal x727=(gclwh13_15*x515);
IkReal x728=((2.0)*x499);
IkReal x729=(r21*x500);
IkReal x730=((1.0)*x500);
IkReal x731=(x504*x574);
IkReal x732=(x532*x533);
IkReal x733=(x505*x627);
IkReal x734=(x509*x600);
IkReal x735=(x508*x637);
IkReal x736=(x514*x520);
IkReal x737=(x508*x551);
IkReal x738=(x514*x629);
IkReal x739=(x509*x623);
IkReal x740=(x504*x555);
IkReal x741=(x532*x577);
IkReal x742=(x505*x631);
IkReal x743=((0.2183)*gclwh10_5*x514);
IkReal x744=((0.2183)*gclwh8_5*x532);
IkReal x745=((0.10915)*gclwh6_5*x504);
IkReal x746=((0.2183)*gclwh6_5*x509);
IkReal x747=((0.10915)*gclwh8_5*x508);
IkReal x748=((0.10915)*gclwh10_5*x505);
IkReal x749=(x645*x646);
IkReal x750=(x509*x608);
IkReal x751=(x563*x643);
IkReal x752=(gclwh10_2*pz*x505);
IkReal x753=(x501*x529);
IkReal x754=(x508*x643);
IkReal x755=(gclwh4_3*pp*x550);
IkReal x756=(gclwh10_2*r22*x578);
IkReal x757=(x501*x584);
IkReal x758=(x514*x564);
IkReal x759=(x501*x635);
IkReal x760=(x512*x645);
IkReal x761=(x532*x622);
IkReal x762=(gclwh6_2*pz*x539);
IkReal x763=(x644*x645);
IkReal x764=(x514*x524);
IkReal x765=(x532*x549);
IkReal x766=(gclwh11_0*r22*x578);
IkReal x767=(x557*x578);
IkReal x768=(gclwh5_1*pp*x550);
IkReal x769=(x501*x619);
IkReal x770=(gclwh11_0*pz*x505);
IkReal x771=(gclwh9_0*pz*x508);
IkReal x772=(gclwh15_1*pp*x546);
IkReal x773=(gclwh7_0*pz*x539);
IkReal x774=(x501*x595);
IkReal x775=(x501*x585);
IkReal x776=(x509*x575);
IkReal x777=((0.10915)*gclwh7_7*x504);
IkReal x778=((0.2183)*gclwh9_7*x532);
IkReal x779=((0.2183)*gclwh11_7*x514);
IkReal x780=((0.10915)*gclwh9_7*x508);
IkReal x781=((0.2183)*gclwh7_7*x509);
IkReal x782=((0.10915)*gclwh11_7*x505);
IkReal x783=(x505*x530);
IkReal x784=(x504*x613);
IkReal x785=(x532*x552);
IkReal x786=(x504*x579);
IkReal x787=(x532*x632);
IkReal x788=(x505*x638);
IkReal x789=(x508*x580);
IkReal x790=(x509*x609);
IkReal x791=(x514*x618);
IkReal x792=((0.10915)*gclwh12_14*x504);
IkReal x793=(x532*x580);
IkReal x794=((0.10915)*gclwh4_14*x505);
IkReal x795=((0.10915)*gclwh14_14*x508);
IkReal x796=(x514*x638);
IkReal x797=(x509*x579);
IkReal x798=((0.09465)*gclwh4_8*x505);
IkReal x799=(x508*x527);
IkReal x800=(gclwh12_3*x729);
IkReal x801=(x514*x530);
IkReal x802=(x501*x562);
IkReal x803=(gclwh3_3*x729);
IkReal x804=(x500*x567);
IkReal x805=(gclwh3_2*pz*x539);
IkReal x806=(x501*x590);
IkReal x807=(x527*x563);
IkReal x808=((0.09465)*gclwh12_8*x504);
IkReal x809=(x500*x649);
IkReal x810=(gclwh1_2*pz*x563);
IkReal x811=(x509*x613);
IkReal x812=(x501*x582);
IkReal x813=(gclwh4_2*r22*x578);
IkReal x814=(gclwh4_8*npz*x501);
IkReal x815=(gclwh12_2*pz*x539);
IkReal x816=(x501*x516);
IkReal x817=(x532*x650);
IkReal x818=((0.09465)*gclwh14_8*x508);
IkReal x819=(gclwh12_8*npy*x501);
IkReal x820=(x500*x559);
IkReal x821=(x501*x507);
IkReal x822=(gclwh5_0*pz*x505);
IkReal x823=(gclwh13_9*npy*x501);
IkReal x824=(x571*x578);
IkReal x825=(x504*x540);
IkReal x826=((0.09465)*gclwh15_9*x508);
IkReal x827=(x539*x540);
IkReal x828=(x500*x576);
IkReal x829=(x514*x631);
IkReal x830=(gclwh2_0*pz*x539);
IkReal x831=(x501*x569);
IkReal x832=(x509*x555);
IkReal x833=(x501*x581);
IkReal x834=(gclwh0_1*r20*x500);
IkReal x835=(x538*x578);
IkReal x836=((0.09465)*gclwh5_9*x505);
IkReal x837=(x501*x522);
IkReal x838=((0.09465)*gclwh13_9*x504);
IkReal x839=(gclwh15_0*pz*x563);
IkReal x840=(x501*x503);
IkReal x841=(x532*x551);
IkReal x842=((0.10915)*gclwh15_15*x508);
IkReal x843=(x514*x627);
IkReal x844=(x509*x574);
IkReal x845=((0.10915)*gclwh13_15*x504);
IkReal x846=((0.10915)*gclwh5_15*x505);
IkReal x847=(x532*x637);
IkReal x848=(gclwh6_2*npy*x728);
IkReal x849=(gclwh6_2*x504*x543);
IkReal x850=(gclwh10_2*npz*x728);
IkReal x851=(gclwh8_2*npx*x728);
IkReal x852=(gclwh7_0*npy*x728);
IkReal x853=(gclwh9_0*npx*x728);
IkReal x854=(gclwh11_0*npz*x728);
IkReal x855=(gclwh7_0*x504*x543);
IkReal x856=(gclwh12_2*npy*x728);
IkReal x857=(gclwh3_2*npy*x728);
IkReal x858=(gclwh1_2*npx*x728);
IkReal x859=(gclwh14_3*x532*x565);
IkReal x860=(gclwh4_2*npz*x728);
IkReal x861=(gclwh4_3*x514*x565);
IkReal x862=(gclwh12_2*x504*x543);
IkReal x863=(gclwh1_2*x508*x543);
IkReal x864=(gclwh3_3*x509*x565);
IkReal x865=(gclwh4_2*x505*x543);
IkReal x866=(gclwh1_3*x532*x565);
IkReal x867=(gclwh3_2*x504*x543);
IkReal x868=(gclwh12_3*x509*x565);
IkReal x869=(gclwh14_2*npx*x728);
IkReal x870=(gclwh14_3*r20*x730);
IkReal x871=(gclwh0_0*npx*x728);
IkReal x872=(gclwh2_0*npy*x728);
IkReal x873=(gclwh5_1*x514*x565);
IkReal x874=(gclwh13_1*x509*x565);
IkReal x875=(gclwh15_0*npx*x728);
IkReal x876=(gclwh2_1*x509*x565);
IkReal x877=(gclwh0_1*x532*x565);
IkReal x878=(gclwh5_0*npz*x728);
IkReal x879=(gclwh13_0*npy*x728);
IkReal x880=(gclwh0_0*x508*x543);
IkReal x881=(gclwh15_0*x508*x543);
IkReal x882=(gclwh2_0*x504*x543);
IkReal x883=((1.0)*gclwh13_1*x729);
IkReal x884=(x628*x730);
IkReal x885=(gclwh15_1*x532*x565);
IkReal x886=(x661+x663);
IkReal x887=(x699+x701);
IkReal x888=(x686+x685);
IkReal x889=(x725+x726);
IkReal x890=(x683+x682+x684+x776);
IkReal x891=(x669+x668+x671+x750);
IkReal x892=(x706+x705+x811+x801);
IkReal x893=(x713+x714+x829+x832);
IkReal x894=(x654+x736+x735+x734);
IkReal x895=(x662+x744+x745+x743);
IkReal x896=(x703+x795+x797+x796);
IkReal x897=(x697+x791+x790+x789);
IkReal x898=(x687+x777+x779+x778);
IkReal x899=(x722+x843+x842+x844);
IkReal x900=(x718+x717+x720+x721+x841);
IkReal x901=(x711+x710+x708+x709+x817);
IkReal x902=(x678+x679+x677+x764+x765);
IkReal x903=(x672+x673+x674+x758+x761);
IkReal x904=(((x514*x605))+((x508*x650))+((gclwh14_11*x592))+(((0.3786)*x521))+((x509*x510)));
IkReal x905=(x695+x696+x786+x787+x788);
IkReal x906=(x655+x656+x737+x739+x738);
IkReal x907=(x698+x700+x793+x792+x794);
IkReal x908=(x724+x727+x845+x847+x846);
IkReal x909=(x664+x666+x746+x747+x748);
IkReal x910=(x652+x653+x733+x732+x731);
IkReal x911=(x688+x690+x782+x780+x781);
IkReal x912=(x657+x658+x659+x660+x742+x740+x741);
IkReal x913=(x694+x691+x692+x693+x783+x784+x785);
IkReal x914=(x681+x773+x772+x775+x774+x853+x854+x855);
IkReal x915=(x675+x757+x759+x760+x762+x850+x851+x849);
IkReal x916=(x676+x680+x771+x770+x768+x769+x766+x767+x763+x852);
IkReal x917=(x667+x670+x755+x754+x756+x751+x753+x752+x749+x848);
IkReal x918=(x719+x716+x878+x879+x876+x877+x885+x884+x881+x880+x883+x882+x836+x837+x838+x839+x840);
IkReal x919=(x501+x707+x704+x799+x798+x856+x857+x858+x859+x860+x810+x809+x808+x805+x804+x807+x806+x800+x803+x802);
IkReal x920=(x712+x869+x868+x867+x866+x865+x864+x863+x862+x861+x870+x818+x819+x816+x814+x815+x812+x813);
IkReal x921=(x501+x715+x871+x872+x873+x874+x875+x828+x823+x822+x821+x820+x827+x826+x825+x824+x834+x835+x830+x831+x833);
op[38]=((((-1.0)*x505*x618))+(((0.8732)*gclwh4_14*x514))+(((-1.0)*gclwh8_12*x642))+((x508*x632))+(((0.0039113345835)*x568))+(((0.8732)*gclwh12_14*x509))+(((-1.0)*gclwh10_12*x602))+(((-0.0039113345835)*x545))+(((-0.8732)*gclwh14_14*x532))+(((-0.0039113345835)*x640))+((gclwh6_12*x525))+(((-1.0)*x504*x609)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x532))+((gclwh8_11*x604))+(((-8.0)*gclwh4_11*x514))+((x504*x510))+(((0.7572)*x534))+((gclwh4_11*x621))+(((-1.0)*x508*x552))+(((-8.0)*gclwh12_11*x509))+((x505*x605))+(((-0.7572)*x521))+((gclwh12_11*x651))+(((-1.0)*gclwh14_11*x572)));
op[40]=((0.02168232)+(((-1.0)*x904))+x913);
op[41]=(((gclwh3_2*x566))+(((-0.131)*npx*x527))+(((-1.0)*gclwh12_2*x566))+((gclwh1_2*x573))+((gclwh14_2*x573))+(((-0.0655)*gclwh1_2*x508))+(((-0.01239915)*x582))+(((-1.0)*x897))+(((0.131)*gclwh4_2*x514))+(((0.0655)*gclwh14_2*x508))+(((-0.0655)*gclwh12_2*x504))+(((0.131)*gclwh12_2*x509))+(((0.131)*gclwh1_2*x532))+(((-0.0655)*gclwh4_2*x505))+x905+(((-0.0655)*gclwh3_2*x504))+(((-0.01239915)*x516))+(((0.131)*gclwh3_2*x509))+(((0.01239915)*x562))+(((-1.0)*gclwh4_2*x547)));
op[42]=((((3.269)*gclwh15_0*x532))+(((-3.269)*gclwh13_0*x509))+(((-0.30941085)*x522))+(((-1.6345)*gclwh15_0*x508))+(((3.269)*gclwh0_0*x532))+(((0.30941085)*x569))+(((0.30941085)*x581))+(((1.6345)*gclwh13_0*x504))+(((-1.0)*x910))+(((-1.6345)*gclwh0_0*x508))+((gclwh13_0*x647))+(((0.01464286847625)*x571))+(((-0.01464286847625)*x611))+((gclwh2_0*x647))+(((0.01464286847625)*x538))+x894+(((3.269)*gclwh2_0*x509))+(((-1.6345)*gclwh2_0*x504))+(((-3.269)*gclwh5_0*x514))+(((1.6345)*gclwh5_0*x505)));
op[43]=((1.31196768)+(((-1.0)*x906))+x912);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+((x505*x629))+(((-8.0)*gclwh13_10*x509))+((gclwh13_10*x651))+(((-0.7572)*x596))+(((8.0)*gclwh15_10*x532))+((x504*x623))+((gclwh9_10*x604))+(((-8.0)*gclwh5_10*x514))+((gclwh5_10*x621))+(((-1.0)*gclwh15_10*x572))+(((-1.0)*x508*x577)));
op[45]=(((gclwh11_13*x602))+((gclwh9_13*x642))+(((0.8732)*gclwh15_15*x532))+((x504*x600))+(((-1.0)*gclwh7_13*x525))+(((0.0039113345835)*x591))+(((0.0039113345835)*x593))+(((-0.8732)*gclwh13_15*x509))+(((-0.0039113345835)*x612))+(((-1.0)*x508*x533))+((x505*x520))+(((-0.8732)*gclwh5_15*x514)));
op[46]=((((0.131)*gclwh2_0*x509))+(((0.131)*gclwh15_0*x532))+(((-1.0)*gclwh15_0*x573))+(((-0.0655)*gclwh15_0*x508))+(((-0.0655)*gclwh0_0*x508))+(((-0.131)*gclwh5_0*x514))+(((0.131)*gclwh0_0*x532))+(((0.00058678977375)*x538))+(((-0.131)*gclwh13_0*x509))+(((-0.01239915)*x522))+((gclwh5_0*x547))+(((-1.0)*x894))+(((0.01239915)*x581))+((gclwh13_0*x566))+((gclwh2_0*x566))+(((-0.0655)*gclwh2_0*x504))+(((0.0655)*gclwh13_0*x504))+x910+(((0.0655)*gclwh5_0*x505))+(((0.01239915)*x569)));
op[47]=((0.02168232)+(((-1.0)*x912))+x906);
op[48]=((((-1.0)*gclwh4_8*x523))+(((-1.0)*gclwh12_8*x519))+((gclwh10_12*x542))+((gclwh8_12*x531))+(((-1.6345)*gclwh10_12*x514))+(((-1.0)*x909))+(((0.81725)*gclwh8_12*x508))+(((-1.0)*x886))+((gclwh14_8*x599))+(((0.81725)*gclwh10_12*x505))+x665+(((-1.6345)*gclwh8_12*x532))+(((1.6345)*gclwh6_12*x509))+(((-1.0)*gclwh6_12*x537))+x895+(((-0.81725)*gclwh6_12*x504)));
op[49]=((((0.12699240901125)*x512))+(((-1.0)*gclwh10_11*x505))+(((-1.0)*x891))+(((-1.0)*x915))+(((-0.12699240901125)*x646))+((gclwh6_11*x504))+(((-0.12699240901125)*x570))+x917+x903+(((-1.0)*gclwh8_11*x508)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x514))+((gclwh12_11*x556))+((gclwh6_11*x526))+(((4.0)*gclwh8_11*x532))+((x504*x608))+(((-4.0)*gclwh6_11*x509))+(((-1.0)*gclwh8_11*x592))+(((-1.0)*gclwh14_11*x588))+(((-1.0)*gclwh10_11*x610))+(((-1.0)*x508*x622))+((gclwh4_11*x583))+(((-1.0)*x505*x564)));
op[51]=((((0.14850585)*x584))+(((-0.160905)*x614))+(((-1.0)*gclwh8_2*x639))+(((-0.14850585)*x529))+((gclwh6_2*x506))+(((0.7845)*gclwh6_2*x504))+(((-1.0)*gclwh10_2*x626))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x641))+(((0.160905)*x548))+(((-0.7845)*gclwh8_2*x508))+((gclwh12_14*x617))+(((0.14850585)*x635))+(((1.569)*gclwh10_2*x514))+(((1.569)*gclwh8_2*x532))+(((-1.569)*gclwh6_2*x509))+(((-0.04132419)*x544))+(((-0.7845)*gclwh10_2*x505)));
op[52]=((((-0.0655)*gclwh10_12*x514))+(((-1.0)*gclwh14_8*x561))+(((-0.0655)*gclwh8_12*x532))+(((0.0655)*gclwh6_12*x509))+(((-0.03275)*gclwh6_12*x504))+(((-1.0)*x909))+((gclwh4_8*x616))+(((0.03275)*gclwh8_12*x508))+((gclwh10_12*x597))+(((-1.0)*gclwh6_12*x594))+(((-1.0)*x665))+(((0.006199575)*x548))+(((0.03275)*gclwh10_12*x505))+x886+x895+((gclwh8_12*x607)));
op[53]=(((gclwh8_11*x508))+(((-1.0)*gclwh6_11*x504))+(((-1.0)*x903))+(((-1.0)*x915))+((gclwh10_11*x505))+(((-0.00076243651125)*x570))+x891+x917+(((0.00076243651125)*x512))+(((-1.0)*gclwh12_3*x517)));
op[54]=(((gclwh11_10*x505))+((gclwh9_10*x508))+(((-1.0)*x902))+(((-1.0)*x914))+(((-0.12699240901125)*x598))+(((-1.0)*gclwh7_10*x504))+(((-0.12699240901125)*x644))+(((0.12699240901125)*x606))+x890+x916);
op[55]=((((-1.0)*gclwh13_9*x519))+(((-1.6345)*gclwh9_13*x532))+(((0.81725)*gclwh11_13*x505))+(((0.81725)*gclwh9_13*x508))+(((-1.0)*gclwh5_9*x523))+(((-1.0)*x911))+(((-1.0)*gclwh7_13*x537))+(((-1.6345)*gclwh11_13*x514))+(((-1.0)*x888))+(((-0.81725)*gclwh7_13*x504))+(((1.6345)*gclwh7_13*x509))+x689+((gclwh11_13*x542))+((gclwh15_9*x599))+x898+((gclwh9_13*x531)));
op[56]=((((-1.0)*gclwh13_15*x617))+(((-0.7845)*gclwh11_0*x505))+(((0.14850585)*x585))+(((-0.04132419)*x553))+(((-0.00702803935125)*x557))+(((-1.569)*gclwh7_0*x509))+(((-1.0)*gclwh11_0*x626))+((gclwh7_0*x506))+(((0.160905)*x624))+(((-0.14850585)*x619))+(((1.569)*gclwh9_0*x532))+(((-0.160905)*x630))+(((0.04132419)*gclwh15_15*rxp0_2))+(((0.7845)*gclwh7_0*x504))+(((0.14850585)*x595))+(((-0.160905)*x535))+(((-0.7845)*gclwh9_0*x508))+(((1.569)*gclwh11_0*x514)));
op[57]=((0.17125635)+((gclwh5_10*x583))+((gclwh13_10*x556))+(((-1.0)*gclwh15_10*x588))+((x504*x575))+(((-1.0)*gclwh11_10*x610))+(((-1.0)*x505*x524))+(((4.0)*gclwh11_10*x514))+((gclwh7_10*x526))+(((-1.0)*x508*x549))+(((-4.0)*gclwh7_10*x509))+(((4.0)*gclwh9_10*x532))+(((-1.0)*gclwh9_10*x592)));
op[58]=((((-1.0)*gclwh11_10*x505))+((gclwh7_10*x504))+(((-1.0)*x890))+(((-1.0)*x914))+(((-1.0)*gclwh13_1*x517))+(((-1.0)*gclwh9_10*x508))+(((0.00076243651125)*x606))+x916+x902+(((-0.00076243651125)*x598)));
op[59]=((((-0.0655)*gclwh9_13*x532))+(((0.03275)*gclwh9_13*x508))+(((-1.0)*x689))+(((-0.03275)*gclwh7_13*x504))+(((-1.0)*x911))+(((-0.0655)*gclwh11_13*x514))+(((0.0655)*gclwh7_13*x509))+(((0.006199575)*x535))+(((-1.0)*gclwh7_13*x594))+x888+x898+((gclwh9_13*x607))+((gclwh13_9*x589))+((gclwh11_13*x597))+(((-1.0)*gclwh15_9*x561))+(((0.03275)*gclwh11_13*x505)));
op[60]=((((-1.0)*gclwh4_8*x542))+(((1.6345)*gclwh12_8*x509))+(((-1.0)*x907))+((gclwh6_12*x519))+(((-0.81725)*gclwh4_8*x505))+(((-0.007321434238125)*x528))+(((-1.0)*gclwh8_12*x599))+(((-1.0)*x702))+(((-0.81725)*gclwh12_8*x504))+(((0.81725)*gclwh14_8*x508))+((gclwh14_8*x531))+(((1.6345)*gclwh4_8*x514))+x887+x896+(((-1.0)*gclwh10_12*x523))+(((-1.6345)*gclwh14_8*x532)));
op[61]=((0.679811285)+(((-1.0)*x920))+((gclwh3_3*x636))+(((-0.66189404)*gclwh12_3*x504))+(((-1.0)*gclwh14_11*x508))+(((-0.00600991575645741)*x649))+(((1.341705325)*gclwh12_3*x509))+(((-1.0)*x892))+((gclwh14_3*x518))+(((0.66189404)*gclwh14_3*x508))+(((-0.66189404)*gclwh4_3*x505))+(((1.341705325)*gclwh3_3*x509))+((gclwh12_11*x504))+(((1.341705325)*gclwh1_3*x532))+(((-0.679811285)*gclwh3_3*x504))+(((-1.0)*gclwh12_3*x636))+(((1.341705325)*gclwh4_3*x514))+(((-0.679811285)*gclwh1_3*x508))+(((-1.341705325)*gclwh14_3*x532))+x919+x901+((gclwh4_11*x505))+((gclwh1_3*x518)));
op[62]=((0.07735732)+(((-1.0)*x904))+x913);
op[63]=((((-0.14850585)*x562))+(((-1.569)*gclwh12_2*x509))+(((-1.569)*gclwh1_2*x532))+(((-0.85)*gclwh14_8*x508))+(((0.7845)*gclwh12_2*x504))+(((0.14850585)*x582))+(((0.85)*gclwh4_8*x505))+(((-1.569)*gclwh4_2*x514))+(((-1.0)*gclwh12_8*npy*x502))+(((-1.0)*gclwh4_8*npz*x502))+(((-1.0)*gclwh1_2*x639))+(((0.14850585)*x516))+(((-1.0)*x897))+(((0.7845)*gclwh3_2*x504))+(((-0.7845)*gclwh14_2*x508))+((x502*x590))+((gclwh12_2*x506))+(((0.85)*gclwh12_8*x504))+(((1.569)*npx*x527))+(((0.007614829125)*x528))+(((0.7845)*gclwh1_2*x508))+(((0.7845)*gclwh4_2*x505))+x905+(((0.007614829125)*x634))+(((-0.007614829125)*x620))+(((-1.0)*gclwh14_2*x639))+(((-1.0)*gclwh3_2*x506))+((gclwh4_2*x626))+(((-1.569)*gclwh3_2*x509)));
op[64]=((((-1.0)*gclwh14_8*x607))+(((-0.0655)*gclwh4_8*x514))+(((0.0655)*gclwh14_8*x532))+(((0.000293394886875)*x528))+(((-1.0)*x896))+(((0.03275)*gclwh12_8*x504))+((gclwh4_8*x597))+(((-0.0655)*gclwh12_8*x509))+(((-1.0)*x702))+((gclwh6_12*x589))+x887+(((-0.03275)*gclwh14_8*x508))+(((-1.0)*gclwh10_12*x616))+x907+(((0.03275)*gclwh4_8*x505))+(((-1.0)*gclwh8_12*x561)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x509))+(((-1.0)*x920))+(((3.60823078949063e-5)*x567))+(((-1.0)*gclwh12_11*x504))+(((0.00493096)*gclwh12_3*x504))+((gclwh14_11*x508))+(((-1.0)*x901))+((gclwh3_3*x586))+(((-1.0)*gclwh4_3*x511))+(((-1.0)*gclwh12_3*x586))+(((-1.0)*gclwh4_11*x505))+(((-0.008055325)*gclwh14_3*x532))+(((0.008055325)*gclwh12_3*x509))+(((0.008055325)*gclwh1_3*x532))+(((-0.00493096)*gclwh14_3*x508))+(((0.00493096)*gclwh4_3*x505))+x892+(((0.008055325)*gclwh4_3*x514))+(((-0.012986285)*gclwh3_3*x504))+x919+((gclwh14_3*x625))+(((-0.012986285)*gclwh1_3*x508)));
op[66]=((-0.679811285)+((gclwh0_1*x518))+((gclwh13_1*x636))+(((1.341705325)*gclwh15_1*x532))+(((-1.0)*gclwh15_1*x518))+(((1.341705325)*gclwh0_1*x532))+(((-1.0)*x893))+(((-1.0)*gclwh15_10*x508))+(((-1.0)*x918))+(((-0.679811285)*gclwh0_1*x508))+(((0.00600991575645741)*x576))+(((-0.66189404)*gclwh15_1*x508))+(((-1.341705325)*gclwh13_1*x509))+((gclwh5_10*x505))+(((-0.679811285)*gclwh2_1*x504))+(((0.66189404)*gclwh13_1*x504))+(((-1.341705325)*gclwh5_1*x514))+((gclwh13_10*x504))+x921+x900+(((0.66189404)*gclwh5_1*x505))+(((0.00600991575645741)*x628))+(((1.341705325)*gclwh2_1*x509)));
op[67]=((((-1.0)*x507*x541))+(((0.81725)*gclwh13_9*x504))+((gclwh9_13*x599))+(((-1.0)*x899))+(((-1.0)*x889))+((gclwh13_9*x537))+(((0.81725)*gclwh5_9*x505))+((x503*x541))+(((-1.0)*gclwh15_9*x531))+((gclwh11_13*x523))+x723+(((-0.81725)*gclwh15_9*x508))+((gclwh5_9*x542))+x908+(((-1.6345)*gclwh13_9*x509))+(((-1.0)*gclwh7_13*x519)));
op[68]=((((-1.0)*gclwh13_0*x506))+(((0.85)*gclwh13_9*x504))+(((-0.14850585)*x569))+(((-0.85)*gclwh15_9*x508))+(((-0.00702803935125)*x571))+(((-1.569)*gclwh0_0*x532))+(((-1.569)*gclwh2_0*x509))+(((0.7845)*gclwh2_0*x504))+(((-1.0)*x894))+(((-0.7845)*gclwh5_0*x505))+(((-1.0)*x502*x507))+(((1.569)*gclwh5_0*x514))+(((-1.0)*gclwh13_9*npy*x502))+(((0.007614829125)*x603))+(((0.00702803935125)*x611))+(((0.85)*gclwh5_9*x505))+(((0.14850585)*x522))+(((0.007614829125)*x558))+(((-1.569)*gclwh15_0*x532))+(((-0.7845)*gclwh13_0*x504))+(((0.7845)*gclwh15_0*x508))+((x502*x503))+(((-0.007614829125)*x587))+(((-1.0)*gclwh2_0*x506))+(((1.569)*gclwh13_0*x509))+(((0.7845)*gclwh0_0*x508))+(((-0.14850585)*x581))+x910+(((-0.00702803935125)*x538)));
op[69]=((0.07735732)+(((-1.0)*x912))+x906);
op[70]=((0.012986285)+((gclwh0_1*x625))+((gclwh13_1*x586))+(((-1.0)*gclwh5_10*x505))+(((0.008055325)*gclwh0_1*x532))+(((-1.0)*x900))+(((-1.0)*x918))+(((-0.00493096)*gclwh13_1*x504))+(((3.60823078949063e-5)*x576))+(((0.00493096)*gclwh15_1*x508))+(((-0.012986285)*gclwh0_1*x508))+(((0.008055325)*gclwh2_1*x509))+(((0.008055325)*gclwh15_1*x532))+(((-0.008055325)*gclwh5_1*x514))+(((-3.60823078949063e-5)*x559))+(((-0.00493096)*gclwh5_1*x505))+x893+(((-1.0)*gclwh13_10*x504))+((gclwh5_1*x511))+(((-0.012986285)*gclwh2_1*x504))+x921+(((-0.008055325)*gclwh13_1*x509))+((gclwh15_10*x508)));
op[71]=((((-1.0)*gclwh7_13*x589))+(((0.0655)*gclwh13_9*x509))+((gclwh11_13*x616))+(((-1.0)*x908))+(((-1.0)*x889))+(((-0.03275)*gclwh13_9*x504))+(((0.03275)*gclwh15_9*x508))+((gclwh9_13*x561))+(((-1.0)*gclwh5_9*x597))+(((0.000293394886875)*x587))+((x507*x615))+x723+x899+(((-0.000293394886875)*x558))+(((-1.0)*x503*x615))+(((-0.03275)*gclwh5_9*x505)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x922=htj1*htj1;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+x922),-1);
if(!x923.valid){
continue;
}
cj1array[numsolutions]=((x923.value)*(((1.0)+(((-1.0)*x922)))));
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x924.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x924.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x925=htj2*htj2;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+x925),-1);
if(!x926.valid){
continue;
}
cj2array[numsolutions]=((x926.value)*(((1.0)+(((-1.0)*x925)))));
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x927.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x927.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x928=htj3*htj3;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+x928),-1);
if(!x929.valid){
continue;
}
cj3array[numsolutions]=((x929.value)*(((1.0)+(((-1.0)*x928)))));
CheckValue<IkReal> x930=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x930.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x930.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break;
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x931=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x931);
rxp1_0=(pz*r11);
rxp1_1=(r01*x931);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x932=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x932);
rxp1_0=(pz*r11);
rxp1_1=(r01*x932);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x933=IKPowWithIntegerCheck(r22,-1);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934=IKPowWithIntegerCheck(sj3,-1);
if(!x934.valid){
continue;
}
sj4array[0]=((x933.value)*(x934.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x935=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x935);
rxp1_0=(pz*r11);
rxp1_1=(r01*x935);
IkReal x936=((16.0)*sj4);
IkReal x937=(cj1*cj2);
IkReal x938=((4.0)*sj3);
IkReal x939=((8.0)*sj4);
IkReal x940=((4.0)*cj4);
IkReal x941=(sj1*sj2);
IkReal x942=((4.0)*sj4);
IkReal x943=(cj3*r02);
IkReal x944=((16.0)*sj3);
IkReal x945=((8.0)*sj3);
IkReal x946=((12.0)*cj4);
IkReal x947=((12.0)*sj4);
IkReal x948=(cj3*r12);
IkReal x949=(r11*x938);
IkReal x950=(r01*x938);
IkReal x951=(r01*x941);
IkReal x952=(cj3*cj4*r01);
IkReal x953=(cj3*cj4*r11);
IkReal x954=(cj3*r10*x940);
IkReal x955=(x947*x948);
IkReal x956=(cj3*r00*x940);
IkReal x957=(x943*x947);
IkReal x958=(r00*x941*x942);
IkReal x959=(r02*x941*x946);
IkReal x960=(r00*x937*x942);
IkReal x961=(r02*x937*x946);
IkReal x962=(r10*x941*x942);
IkReal x963=(r12*x937*x946);
IkReal x964=(r12*x941*x946);
IkReal x965=(r10*x937*x942);
IkReal x966=(x960+x949);
IkReal x967=(x962+x950);
IkReal x968=(x958+x954);
IkReal x969=(x961+x955);
IkReal x970=(x965+x956);
IkReal x971=(x964+x957);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x942*x948))+((r02*x940*x941))+x966+(((-1.0)*x968))+(((-1.0)*r02*x937*x940)))))))+(((0.5)*(IKabs((x970+x963+(((-1.0)*x967))+(((-1.0)*x971)))))))+(((0.5)*(IKabs((x966+x959+(((-1.0)*x969))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((((r11*x936*x941))+(((-1.0)*r00*x944))+(((-1.0)*r11*x936*x937))+(((-16.0)*x952)))))))+(((0.5)*(IKabs((x968+x959+(((-1.0)*x966))+(((-1.0)*x969)))))))+(((0.5)*(IKabs((x963+x967+(((-1.0)*x970))+(((-1.0)*x971)))))))+(((0.5)*(IKabs((((r01*x936*x937))+(((-16.0)*x953))+(((-1.0)*r10*x944))+(((-1.0)*x936*x951)))))))+(IKabs((((r01*x937*x939))+(((-8.0)*x953))+(((-1.0)*x939*x951))+(((-1.0)*r10*x945)))))+(IKabs(((((-1.0)*r00*x945))+(((-1.0)*r11*x937*x939))+(((-8.0)*x952))+((r11*x939*x941)))))+(((0.5)*(IKabs(((((-1.0)*x942*x943))+(((-1.0)*r12*x940*x941))+((r12*x937*x940))+x967+(((-1.0)*x970))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x972=(r10*sj3);
IkReal x973=(r01*sj4);
IkReal x974=(cj1*cj2);
IkReal x975=(cj3*cj4);
IkReal x976=(sj1*sj2);
IkReal x977=(cj4*r02);
IkReal x978=((4.0)*r11*sj3);
IkReal x979=(cj3*r12*sj4);
IkReal x980=((4.0)*r00*sj4);
IkReal x981=((4.0)*r10*x975);
IkReal x982=((12.0)*x979);
IkReal x983=((4.0)*x979);
IkReal x984=(x974*x980);
IkReal x985=(x976*x980);
IkReal x986=((12.0)*x976*x977);
IkReal x987=((12.0)*x974*x977);
IkReal x988=((4.0)*x976*x977);
IkReal x989=((4.0)*x974*x977);
IkReal x990=(x984+x978);
IkReal x991=(x985+x981);
IkReal x992=(x989+x983);
IkReal x993=(x987+x982);
IkReal x994=((((8.0)*x973*x974))+(((-8.0)*x972))+(((-8.0)*r11*x975))+(((-8.0)*x973*x976)));
op[0]=((((-1.0)*x991))+(((-1.0)*x992))+x990+x988);
op[1]=x994;
op[2]=((((-1.0)*x991))+(((-1.0)*x993))+x990+x986);
op[3]=((((-16.0)*r11*x975))+(((16.0)*x973*x974))+(((-16.0)*x972))+(((-16.0)*x973*x976)));
op[4]=((((-1.0)*x993))+(((-1.0)*x990))+x991+x986);
op[5]=x994;
op[6]=((((-1.0)*x992))+(((-1.0)*x990))+x991+x988);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x995=(cj1*cj2);
IkReal x996=((4.0)*cj4);
IkReal x997=(sj1*sj2);
IkReal x998=((4.0)*sj4);
IkReal x999=(r00*sj3);
IkReal x1000=(cj3*r02);
IkReal x1001=((4.0)*r01*sj3);
IkReal x1002=((16.0)*r11*sj4);
IkReal x1003=(cj3*cj4*r01);
IkReal x1004=((12.0)*cj4*r12);
IkReal x1005=((8.0)*r11*sj4);
IkReal x1006=(cj3*r00*x996);
IkReal x1007=((12.0)*sj4*x1000);
IkReal x1008=(x1000*x998);
IkReal x1009=(r10*x995*x998);
IkReal x1010=(r10*x997*x998);
IkReal x1011=(x1004*x995);
IkReal x1012=(x1004*x997);
IkReal x1013=(r12*x995*x996);
IkReal x1014=(r12*x996*x997);
IkReal x1015=(x1010+x1001);
IkReal x1016=(x1009+x1006);
IkReal x1017=(x1014+x1008);
IkReal x1018=(x1012+x1007);
IkReal x1019=((((-8.0)*x1003))+(((-1.0)*x1005*x995))+((x1005*x997))+(((-8.0)*x999)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x1015+x1013+(((-1.0)*x1017))+(((-1.0)*x1016))))))+x1016+x1013+(((-1.0)*x1017))+(((-1.0)*x1015))+((x1019*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1016+x1011+(((-1.0)*x1018))+(((-1.0)*x1015))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1003))+(((-1.0)*x1002*x995))+(((-16.0)*x999))+((x1002*x997))))))+((htj5*x1019))+(((htj5*htj5*htj5*htj5)*((x1015+x1011+(((-1.0)*x1018))+(((-1.0)*x1016)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1020=(cj5*sj4);
IkReal x1021=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1021))+(((-1.0)*r00*x1020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1021))+((cj4*r12))+((r10*x1020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1021))+(((-1.0)*r00*x1020))))+IKsqr(((((-1.0)*r11*x1021))+((cj4*r12))+((r10*x1020))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1021))+(((-1.0)*r00*x1020))), ((((-1.0)*r11*x1021))+((cj4*r12))+((r10*x1020))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1022=IKcos(j0);
IkReal x1023=IKsin(j0);
IkReal x1024=(r02*sj4);
IkReal x1025=((1.0)*sj3);
IkReal x1026=(r12*sj4);
IkReal x1027=(cj3*cj4);
IkReal x1028=((1.0)*cj5);
IkReal x1029=(r11*sj5);
IkReal x1030=((1.0)*cj1);
IkReal x1031=((0.39225)*sj1);
IkReal x1032=(cj5*r01);
IkReal x1033=(r01*sj5);
IkReal x1034=(r00*sj5);
IkReal x1035=((1.0)*sj1);
IkReal x1036=((0.39225)*cj2);
IkReal x1037=(cj5*r11);
IkReal x1038=(r10*sj5);
IkReal x1039=((1.0)*cj4);
IkReal x1040=(sj2*x1022);
IkReal x1041=(sj2*x1023);
IkReal x1042=(cj4*cj5*sj3);
IkReal x1043=(cj1*x1022);
IkReal x1044=(cj2*x1022);
IkReal x1045=(cj1*x1023);
IkReal x1046=(cj2*x1023);
evalcond[0]=(x1022+((sj4*x1029))+(((-1.0)*r12*x1039))+(((-1.0)*r10*sj4*x1028)));
evalcond[1]=(((sj4*x1033))+(((-1.0)*r00*sj4*x1028))+(((-1.0)*x1023))+(((-1.0)*r02*x1039)));
evalcond[2]=((((-0.10915)*x1023))+(((-1.0)*x1031*x1040))+(((-1.0)*px))+((x1036*x1043))+(((-0.09465)*x1034))+(((-0.09465)*x1032))+(((0.425)*x1043)));
evalcond[3]=((((-1.0)*x1031*x1041))+(((0.10915)*x1022))+(((-1.0)*py))+((x1036*x1045))+(((-0.09465)*x1037))+(((-0.09465)*x1038))+(((0.425)*x1045)));
evalcond[4]=(((sj3*x1032))+((sj3*x1034))+((sj1*x1040))+((x1027*x1033))+(((-1.0)*r00*x1027*x1028))+(((-1.0)*x1030*x1044))+((cj3*x1024)));
evalcond[5]=(((sj3*x1038))+((sj3*x1037))+((sj1*x1041))+(((-1.0)*r10*x1027*x1028))+((x1027*x1029))+(((-1.0)*x1030*x1046))+((cj3*x1026)));
evalcond[6]=(((cj3*x1034))+((cj3*x1032))+((r00*x1042))+(((-1.0)*x1035*x1044))+(((-1.0)*cj4*x1025*x1033))+(((-1.0)*x1024*x1025))+(((-1.0)*x1030*x1040)));
evalcond[7]=(((cj3*x1037))+((cj3*x1038))+((r10*x1042))+(((-1.0)*x1035*x1046))+(((-1.0)*x1025*x1026))+(((-1.0)*cj4*x1025*x1029))+(((-1.0)*x1030*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(cj3,-1);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(r22,-1);
if(!x1048.valid){
continue;
}
sj4array[0]=((-1.0)*(x1047.value)*(x1048.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1049=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1049);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1049);
IkReal x1050=((16.0)*sj4);
IkReal x1051=(cj1*cj2);
IkReal x1052=((4.0)*sj3);
IkReal x1053=((8.0)*sj4);
IkReal x1054=((4.0)*cj4);
IkReal x1055=(sj1*sj2);
IkReal x1056=((4.0)*sj4);
IkReal x1057=(cj3*r02);
IkReal x1058=((16.0)*sj3);
IkReal x1059=((8.0)*sj3);
IkReal x1060=((12.0)*cj4);
IkReal x1061=((12.0)*sj4);
IkReal x1062=(cj3*r12);
IkReal x1063=(r11*x1052);
IkReal x1064=(r01*x1052);
IkReal x1065=(r01*x1055);
IkReal x1066=(cj3*cj4*r01);
IkReal x1067=(cj3*cj4*r11);
IkReal x1068=(cj3*r10*x1054);
IkReal x1069=(x1061*x1062);
IkReal x1070=(cj3*r00*x1054);
IkReal x1071=(x1057*x1061);
IkReal x1072=(r00*x1055*x1056);
IkReal x1073=(r02*x1055*x1060);
IkReal x1074=(r00*x1051*x1056);
IkReal x1075=(r02*x1051*x1060);
IkReal x1076=(r10*x1055*x1056);
IkReal x1077=(r12*x1051*x1060);
IkReal x1078=(r12*x1055*x1060);
IkReal x1079=(r10*x1051*x1056);
IkReal x1080=(x1074+x1063);
IkReal x1081=(x1076+x1064);
IkReal x1082=(x1072+x1068);
IkReal x1083=(x1075+x1069);
IkReal x1084=(x1079+x1070);
IkReal x1085=(x1078+x1071);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r00*x1058))+(((-1.0)*r11*x1050*x1051))+((r11*x1050*x1055))+(((-16.0)*x1066)))))))+(((0.5)*(IKabs((x1081+(((-1.0)*r12*x1054*x1055))+(((-1.0)*x1056*x1057))+((r12*x1051*x1054))+(((-1.0)*x1084)))))))+(IKabs((((r01*x1051*x1053))+(((-1.0)*r10*x1059))+(((-1.0)*x1053*x1065))+(((-8.0)*x1067)))))+(((0.5)*(IKabs((x1073+x1080+(((-1.0)*x1083))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1073+x1082+(((-1.0)*x1083))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((((r01*x1050*x1051))+(((-1.0)*r10*x1058))+(((-16.0)*x1067))+(((-1.0)*x1050*x1065)))))))+(IKabs(((((-1.0)*r00*x1059))+((r11*x1053*x1055))+(((-1.0)*r11*x1051*x1053))+(((-8.0)*x1066)))))+(((0.5)*(IKabs((x1077+x1081+(((-1.0)*x1084))+(((-1.0)*x1085)))))))+(((0.5)*(IKabs((x1080+(((-1.0)*r02*x1051*x1054))+(((-1.0)*x1056*x1062))+((r02*x1054*x1055))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1077+x1084+(((-1.0)*x1085))+(((-1.0)*x1081))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1086=(r10*sj3);
IkReal x1087=(r01*sj4);
IkReal x1088=(cj1*cj2);
IkReal x1089=(cj3*cj4);
IkReal x1090=(sj1*sj2);
IkReal x1091=(cj4*r02);
IkReal x1092=((4.0)*r11*sj3);
IkReal x1093=(cj3*r12*sj4);
IkReal x1094=((4.0)*r00*sj4);
IkReal x1095=((4.0)*r10*x1089);
IkReal x1096=((12.0)*x1093);
IkReal x1097=((4.0)*x1093);
IkReal x1098=(x1088*x1094);
IkReal x1099=(x1090*x1094);
IkReal x1100=((12.0)*x1090*x1091);
IkReal x1101=((12.0)*x1088*x1091);
IkReal x1102=((4.0)*x1090*x1091);
IkReal x1103=((4.0)*x1088*x1091);
IkReal x1104=(x1092+x1098);
IkReal x1105=(x1095+x1099);
IkReal x1106=(x1103+x1097);
IkReal x1107=(x1101+x1096);
IkReal x1108=((((8.0)*x1087*x1088))+(((-8.0)*x1087*x1090))+(((-8.0)*r11*x1089))+(((-8.0)*x1086)));
op[0]=(x1104+x1102+(((-1.0)*x1105))+(((-1.0)*x1106)));
op[1]=x1108;
op[2]=(x1104+x1100+(((-1.0)*x1105))+(((-1.0)*x1107)));
op[3]=((((-16.0)*x1087*x1090))+(((-16.0)*x1086))+(((-16.0)*r11*x1089))+(((16.0)*x1087*x1088)));
op[4]=(x1105+x1100+(((-1.0)*x1104))+(((-1.0)*x1107)));
op[5]=x1108;
op[6]=(x1105+x1102+(((-1.0)*x1104))+(((-1.0)*x1106)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1109=(cj1*cj2);
IkReal x1110=((4.0)*cj4);
IkReal x1111=(sj1*sj2);
IkReal x1112=((4.0)*sj4);
IkReal x1113=(r00*sj3);
IkReal x1114=(cj3*r02);
IkReal x1115=((4.0)*r01*sj3);
IkReal x1116=((16.0)*r11*sj4);
IkReal x1117=(cj3*cj4*r01);
IkReal x1118=((12.0)*cj4*r12);
IkReal x1119=((8.0)*r11*sj4);
IkReal x1120=(cj3*r00*x1110);
IkReal x1121=((12.0)*sj4*x1114);
IkReal x1122=(x1112*x1114);
IkReal x1123=(r10*x1109*x1112);
IkReal x1124=(r10*x1111*x1112);
IkReal x1125=(x1109*x1118);
IkReal x1126=(x1111*x1118);
IkReal x1127=(r12*x1109*x1110);
IkReal x1128=(r12*x1110*x1111);
IkReal x1129=(x1115+x1124);
IkReal x1130=(x1120+x1123);
IkReal x1131=(x1128+x1122);
IkReal x1132=(x1121+x1126);
IkReal x1133=(((x1111*x1119))+(((-1.0)*x1109*x1119))+(((-8.0)*x1117))+(((-8.0)*x1113)));
j5evalpoly[0]=(x1127+x1130+(((htj5*htj5*htj5)*((((x1111*x1116))+(((-1.0)*x1109*x1116))+(((-16.0)*x1117))+(((-16.0)*x1113))))))+((x1133*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1125+x1130+(((-1.0)*x1132))+(((-1.0)*x1129))))))+(((-1.0)*x1131))+(((htj5*htj5*htj5*htj5)*((x1129+x1125+(((-1.0)*x1130))+(((-1.0)*x1132))))))+(((-1.0)*x1129))+((htj5*x1133))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1129+x1127+(((-1.0)*x1130))+(((-1.0)*x1131)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1134=(cj5*sj4);
IkReal x1135=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1135))+(((-1.0)*r00*x1134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1135))+((r10*x1134))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1135))+(((-1.0)*r00*x1134))))+IKsqr(((((-1.0)*r11*x1135))+((r10*x1134))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1135))+(((-1.0)*r00*x1134))), ((((-1.0)*r11*x1135))+((r10*x1134))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1136=IKcos(j0);
IkReal x1137=IKsin(j0);
IkReal x1138=(r02*sj4);
IkReal x1139=((1.0)*sj3);
IkReal x1140=(r12*sj4);
IkReal x1141=(cj3*cj4);
IkReal x1142=((1.0)*cj5);
IkReal x1143=(r11*sj5);
IkReal x1144=((1.0)*cj1);
IkReal x1145=((0.39225)*sj1);
IkReal x1146=(cj5*r01);
IkReal x1147=(r01*sj5);
IkReal x1148=(r00*sj5);
IkReal x1149=((1.0)*sj1);
IkReal x1150=((0.39225)*cj2);
IkReal x1151=(cj5*r11);
IkReal x1152=(r10*sj5);
IkReal x1153=((1.0)*cj4);
IkReal x1154=(sj2*x1136);
IkReal x1155=(sj2*x1137);
IkReal x1156=(cj4*cj5*sj3);
IkReal x1157=(cj1*x1136);
IkReal x1158=(cj2*x1136);
IkReal x1159=(cj1*x1137);
IkReal x1160=(cj2*x1137);
evalcond[0]=(((sj4*x1143))+x1136+(((-1.0)*r10*sj4*x1142))+(((-1.0)*r12*x1153)));
evalcond[1]=(((sj4*x1147))+(((-1.0)*r02*x1153))+(((-1.0)*r00*sj4*x1142))+(((-1.0)*x1137)));
evalcond[2]=((((0.425)*x1157))+(((-1.0)*px))+(((-0.10915)*x1137))+((x1150*x1157))+(((-0.09465)*x1148))+(((-0.09465)*x1146))+(((-1.0)*x1145*x1154)));
evalcond[3]=((((0.425)*x1159))+(((0.10915)*x1136))+(((-1.0)*py))+((x1150*x1159))+(((-1.0)*x1145*x1155))+(((-0.09465)*x1151))+(((-0.09465)*x1152)));
evalcond[4]=((((-1.0)*x1144*x1158))+((cj3*x1138))+((x1141*x1147))+(((-1.0)*r00*x1141*x1142))+((sj3*x1148))+((sj3*x1146))+((sj1*x1154)));
evalcond[5]=((((-1.0)*x1144*x1160))+((x1141*x1143))+((cj3*x1140))+((sj3*x1151))+((sj3*x1152))+((sj1*x1155))+(((-1.0)*r10*x1141*x1142)));
evalcond[6]=(((r00*x1156))+(((-1.0)*x1144*x1154))+(((-1.0)*x1149*x1158))+((cj3*x1146))+((cj3*x1148))+(((-1.0)*x1138*x1139))+(((-1.0)*cj4*x1139*x1147)));
evalcond[7]=((((-1.0)*x1144*x1155))+((cj3*x1151))+((cj3*x1152))+(((-1.0)*x1149*x1160))+(((-1.0)*cj4*x1139*x1143))+(((-1.0)*x1139*x1140))+((r10*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1164=IKPowWithIntegerCheck(r22,-1);
if(!x1164.valid){
continue;
}
sj4array[0]=((-1.0)*(x1164.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
IkReal x1166=x1167.value;
j5array[0]=((-1.0)*x1166);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1166)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1168=(cj5*sj4);
IkReal x1169=(sj4*sj5);
if( IKabs((((r01*x1169))+(((-1.0)*r00*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1168))+(((-1.0)*r11*x1169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1169))+(((-1.0)*r00*x1168))))+IKsqr((((r10*x1168))+(((-1.0)*r11*x1169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1169))+(((-1.0)*r00*x1168))), (((r10*x1168))+(((-1.0)*r11*x1169))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j0);
IkReal x1171=IKsin(j0);
IkReal x1172=(cj5*r01);
IkReal x1173=(sj4*sj5);
IkReal x1174=(cj5*r11);
IkReal x1175=((0.425)*cj1);
IkReal x1176=(r00*sj5);
IkReal x1177=(r10*sj5);
IkReal x1178=((1.0)*cj1*sj2);
IkReal x1179=((1.0)*cj2*sj1);
IkReal x1180=((1.0)*cj5*sj4);
evalcond[0]=(x1170+(((-1.0)*r10*x1180))+((r11*x1173)));
evalcond[1]=(((r01*x1173))+(((-1.0)*r00*x1180))+(((-1.0)*x1171)));
evalcond[2]=(x1176+x1172+(((-1.0)*x1170*x1179))+(((-1.0)*x1170*x1178)));
evalcond[3]=(x1177+x1174+(((-1.0)*x1171*x1178))+(((-1.0)*x1171*x1179)));
evalcond[4]=((((-0.10915)*x1171))+(((-0.09465)*x1172))+(((-0.09465)*x1176))+(((-1.0)*px))+((x1170*x1175)));
evalcond[5]=((((-0.09465)*x1174))+(((-0.09465)*x1177))+(((0.10915)*x1170))+(((-1.0)*py))+((x1171*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(r22,-1);
if(!x1182.valid){
continue;
}
sj4array[0]=((x1182.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal x1184=x1185.value;
j5array[0]=((-1.0)*x1184);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1184)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1186=(cj5*sj4);
IkReal x1187=(sj4*sj5);
if( IKabs((((r01*x1187))+(((-1.0)*r00*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1186))+(((-1.0)*r11*x1187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1187))+(((-1.0)*r00*x1186))))+IKsqr((((r10*x1186))+(((-1.0)*r11*x1187))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1187))+(((-1.0)*r00*x1186))), (((r10*x1186))+(((-1.0)*r11*x1187))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1188=IKcos(j0);
IkReal x1189=IKsin(j0);
IkReal x1190=(sj4*sj5);
IkReal x1191=(cj5*r11);
IkReal x1192=((1.0)*sj5);
IkReal x1193=((0.425)*cj1);
IkReal x1194=((0.09465)*sj5);
IkReal x1195=((1.0)*cj5);
IkReal x1196=((1.0)*cj1*sj2);
IkReal x1197=((1.0)*cj2*sj1);
evalcond[0]=(x1188+((r11*x1190))+(((-1.0)*r10*sj4*x1195)));
evalcond[1]=((((-1.0)*r00*sj4*x1195))+((r01*x1190))+(((-1.0)*x1189)));
evalcond[2]=((((-1.0)*r00*x1194))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1189))+((x1188*x1193))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x1191))+(((0.10915)*x1188))+((x1189*x1193))+(((-1.0)*r10*x1194))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*r00*x1192))+(((-1.0)*x1188*x1196))+(((-1.0)*x1188*x1197))+(((-1.0)*r01*x1195)));
evalcond[5]=((((-1.0)*x1189*x1197))+(((-1.0)*x1189*x1196))+(((-1.0)*r10*x1192))+(((-1.0)*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(r22,-1);
if(!x1199.valid){
continue;
}
sj4array[0]=((x1199.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
IkReal x1201=x1202.value;
j5array[0]=((-1.0)*x1201);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1201)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1203=(cj5*sj4);
IkReal x1204=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1203))+((r01*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1203))+(((-1.0)*r11*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1203))+((r01*x1204))))+IKsqr((((r10*x1203))+(((-1.0)*r11*x1204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1203))+((r01*x1204))), (((r10*x1203))+(((-1.0)*r11*x1204))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j0);
IkReal x1206=IKsin(j0);
IkReal x1207=(cj5*r01);
IkReal x1208=(sj4*sj5);
IkReal x1209=(r00*sj5);
IkReal x1210=(sj1*sj2);
IkReal x1211=(cj5*r11);
IkReal x1212=((0.39225)*cj2);
IkReal x1213=(r10*sj5);
IkReal x1214=((0.39225)*x1210);
IkReal x1215=(cj1*x1205);
IkReal x1216=((1.0)*x1206);
IkReal x1217=((1.0)*cj5*sj4);
IkReal x1218=(cj1*x1206);
evalcond[0]=(x1205+((r11*x1208))+(((-1.0)*r10*x1217)));
evalcond[1]=((((-1.0)*r00*x1217))+((r01*x1208))+(((-1.0)*x1216)));
evalcond[2]=(x1209+x1207+(((-1.0)*cj2*x1215))+((x1205*x1210)));
evalcond[3]=(x1213+x1211+((x1206*x1210))+(((-1.0)*cj1*cj2*x1216)));
evalcond[4]=(((x1212*x1215))+(((0.425)*x1215))+(((-0.10915)*x1206))+(((-1.0)*px))+(((-1.0)*x1205*x1214))+(((-0.09465)*x1209))+(((-0.09465)*x1207)));
evalcond[5]=(((x1212*x1218))+(((0.425)*x1218))+(((-0.09465)*x1213))+(((-0.09465)*x1211))+(((-1.0)*x1206*x1214))+(((0.10915)*x1205))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(r22,-1);
if(!x1220.valid){
continue;
}
sj4array[0]=((-1.0)*(x1220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1221=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1221);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1221);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
IkReal x1222=x1223.value;
j5array[0]=((-1.0)*x1222);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1222)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1224=(cj5*sj4);
IkReal x1225=(sj4*sj5);
if( IKabs((((r01*x1225))+(((-1.0)*r00*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1225))+((r10*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1225))+(((-1.0)*r00*x1224))))+IKsqr(((((-1.0)*r11*x1225))+((r10*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1225))+(((-1.0)*r00*x1224))), ((((-1.0)*r11*x1225))+((r10*x1224))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
IkReal x1228=(sj4*sj5);
IkReal x1229=(cj5*r11);
IkReal x1230=(cj5*r01);
IkReal x1231=((1.0)*sj5);
IkReal x1232=((0.09465)*sj5);
IkReal x1233=(sj1*sj2);
IkReal x1234=((0.39225)*cj2);
IkReal x1235=((0.39225)*x1233);
IkReal x1236=((1.0)*x1227);
IkReal x1237=(cj1*x1226);
IkReal x1238=((1.0)*cj5*sj4);
IkReal x1239=(cj1*x1227);
evalcond[0]=(x1226+(((-1.0)*r10*x1238))+((r11*x1228)));
evalcond[1]=((((-1.0)*r00*x1238))+((r01*x1228))+(((-1.0)*x1236)));
evalcond[2]=((((-1.0)*r00*x1231))+(((-1.0)*x1230))+((x1226*x1233))+(((-1.0)*cj2*x1237)));
evalcond[3]=((((-1.0)*cj1*cj2*x1236))+(((-1.0)*x1229))+(((-1.0)*r10*x1231))+((x1227*x1233)));
evalcond[4]=((((-1.0)*r00*x1232))+((x1234*x1237))+(((-1.0)*x1226*x1235))+(((-1.0)*px))+(((-0.09465)*x1230))+(((0.425)*x1237))+(((-0.10915)*x1227)));
evalcond[5]=(((x1234*x1239))+(((-1.0)*x1227*x1235))+(((-1.0)*py))+(((-0.09465)*x1229))+(((0.425)*x1239))+(((0.10915)*x1226))+(((-1.0)*r10*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1240=IKPowWithIntegerCheck(r22,-1);
if(!x1240.valid){
continue;
}
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(sj3,-1);
if(!x1241.valid){
continue;
}
sj4array[0]=((x1240.value)*(x1241.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1242=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1242);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1242);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1243=((4.0)*r01);
IkReal x1244=((16.0)*r00);
IkReal x1245=(cj3*sj2);
IkReal x1246=((8.0)*r00);
IkReal x1247=(cj2*cj3);
IkReal x1248=(cj4*r01);
IkReal x1249=((16.0)*cj1);
IkReal x1250=((8.0)*sj1);
IkReal x1251=((16.0)*sj1);
IkReal x1252=((8.0)*cj1);
IkReal x1253=(sj2*sj3);
IkReal x1254=(cj2*sj3);
IkReal x1255=(sj1*x1254);
IkReal x1256=((4.0)*cj4*r00);
IkReal x1257=(((x1243*x1255))+((sj1*x1243*x1245))+((cj1*x1243*x1253))+((sj1*x1253*x1256)));
IkReal x1258=(((cj1*x1243*x1247))+((cj1*x1245*x1256))+((sj1*x1247*x1256))+((cj1*x1254*x1256)));
IkReal x1259=((((-1.0)*x1257))+x1258);
IkReal x1260=(((x1246*x1255))+((cj1*x1246*x1253))+((x1248*x1252*x1254))+((x1247*x1248*x1250))+(((-1.0)*cj1*x1246*x1247))+(((-1.0)*x1248*x1250*x1253))+((x1245*x1248*x1252))+((sj1*x1245*x1246)));
IkReal x1261=((((-1.0)*x1258))+x1257);
op[0]=x1259;
op[1]=x1260;
op[2]=x1259;
op[3]=(((cj1*x1244*x1253))+((sj1*x1244*x1245))+(((-1.0)*cj1*x1244*x1247))+((x1248*x1249*x1254))+((x1247*x1248*x1251))+((x1245*x1248*x1249))+(((-1.0)*x1248*x1251*x1253))+((x1244*x1255)));
op[4]=x1261;
op[5]=x1260;
op[6]=x1261;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1262=(cj5*sj4);
IkReal x1263=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1262))+((r01*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1262))+(((-1.0)*r11*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1262))+((r01*x1263))))+IKsqr((((r10*x1262))+(((-1.0)*r11*x1263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1262))+((r01*x1263))), (((r10*x1262))+(((-1.0)*r11*x1263))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1264=IKcos(j0);
IkReal x1265=IKsin(j0);
IkReal x1266=((0.39225)*sj1);
IkReal x1267=((1.0)*cj3);
IkReal x1268=((1.0)*cj1);
IkReal x1269=(r11*sj5);
IkReal x1270=(cj5*r01);
IkReal x1271=(cj5*r11);
IkReal x1272=(r01*sj5);
IkReal x1273=(cj3*cj4);
IkReal x1274=(r00*sj5);
IkReal x1275=((0.39225)*cj2);
IkReal x1276=((1.0)*sj1);
IkReal x1277=(r10*sj5);
IkReal x1278=(sj2*x1264);
IkReal x1279=(cj4*cj5*r00);
IkReal x1280=(cj1*x1265);
IkReal x1281=(sj2*x1265);
IkReal x1282=(cj4*cj5*r10);
IkReal x1283=((1.0)*cj4*sj3);
IkReal x1284=(cj1*x1264);
IkReal x1285=(cj2*x1264);
IkReal x1286=((1.0)*cj5*sj4);
evalcond[0]=(x1264+((sj4*x1269))+(((-1.0)*r10*x1286)));
evalcond[1]=(((sj4*x1272))+(((-1.0)*r00*x1286))+(((-1.0)*x1265)));
evalcond[2]=(((sj3*x1274))+((sj3*x1270))+(((-1.0)*x1267*x1279))+((sj1*x1278))+((x1272*x1273))+(((-1.0)*x1268*x1285)));
evalcond[3]=(((sj3*x1277))+((sj3*x1271))+((x1269*x1273))+(((-1.0)*cj2*x1265*x1268))+(((-1.0)*x1267*x1282))+((sj1*x1281)));
evalcond[4]=(((sj3*x1279))+(((-1.0)*x1268*x1278))+(((-1.0)*x1276*x1285))+((cj3*x1270))+((cj3*x1274))+(((-1.0)*x1272*x1283)));
evalcond[5]=((((-1.0)*cj2*x1265*x1276))+(((-1.0)*x1269*x1283))+((cj3*x1271))+((cj3*x1277))+((sj3*x1282))+(((-1.0)*x1268*x1281)));
evalcond[6]=((((0.425)*x1284))+(((-0.09465)*x1274))+(((-0.09465)*x1270))+(((-0.10915)*x1265))+(((-1.0)*x1266*x1278))+((x1275*x1284))+(((-1.0)*px)));
evalcond[7]=((((0.425)*x1280))+(((-0.09465)*x1277))+(((-0.09465)*x1271))+(((-1.0)*x1266*x1281))+(((0.10915)*x1264))+((x1275*x1280))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(cj3,-1);
if(!x1287.valid){
continue;
}
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(r22,-1);
if(!x1288.valid){
continue;
}
sj4array[0]=((-1.0)*(x1287.value)*(x1288.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1289=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1289);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1289);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1290=((4.0)*r01);
IkReal x1291=((16.0)*r00);
IkReal x1292=(cj3*sj2);
IkReal x1293=((8.0)*r00);
IkReal x1294=(cj2*cj3);
IkReal x1295=(cj4*r01);
IkReal x1296=((16.0)*cj1);
IkReal x1297=((8.0)*sj1);
IkReal x1298=((16.0)*sj1);
IkReal x1299=((8.0)*cj1);
IkReal x1300=(sj2*sj3);
IkReal x1301=(cj2*sj3);
IkReal x1302=(sj1*x1301);
IkReal x1303=((4.0)*cj4*r00);
IkReal x1304=(((x1290*x1302))+((cj1*x1290*x1300))+((sj1*x1300*x1303))+((sj1*x1290*x1292)));
IkReal x1305=(((cj1*x1301*x1303))+((sj1*x1294*x1303))+((cj1*x1292*x1303))+((cj1*x1290*x1294)));
IkReal x1306=(x1305+(((-1.0)*x1304)));
IkReal x1307=(((x1295*x1299*x1301))+((x1292*x1295*x1299))+(((-1.0)*cj1*x1293*x1294))+(((-1.0)*x1295*x1297*x1300))+((x1293*x1302))+((x1294*x1295*x1297))+((cj1*x1293*x1300))+((sj1*x1292*x1293)));
IkReal x1308=(x1304+(((-1.0)*x1305)));
op[0]=x1306;
op[1]=x1307;
op[2]=x1306;
op[3]=(((x1291*x1302))+((x1292*x1295*x1296))+(((-1.0)*x1295*x1298*x1300))+(((-1.0)*cj1*x1291*x1294))+((cj1*x1291*x1300))+((x1294*x1295*x1298))+((sj1*x1291*x1292))+((x1295*x1296*x1301)));
op[4]=x1308;
op[5]=x1307;
op[6]=x1308;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1309=(cj5*sj4);
IkReal x1310=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1309))+((r01*x1310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1310))+((r10*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1309))+((r01*x1310))))+IKsqr(((((-1.0)*r11*x1310))+((r10*x1309))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1309))+((r01*x1310))), ((((-1.0)*r11*x1310))+((r10*x1309))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1311=IKcos(j0);
IkReal x1312=IKsin(j0);
IkReal x1313=((0.39225)*sj1);
IkReal x1314=((1.0)*cj3);
IkReal x1315=((1.0)*cj1);
IkReal x1316=(r11*sj5);
IkReal x1317=(cj5*r01);
IkReal x1318=(cj5*r11);
IkReal x1319=(r01*sj5);
IkReal x1320=(cj3*cj4);
IkReal x1321=(r00*sj5);
IkReal x1322=((0.39225)*cj2);
IkReal x1323=((1.0)*sj1);
IkReal x1324=(r10*sj5);
IkReal x1325=(sj2*x1311);
IkReal x1326=(cj4*cj5*r00);
IkReal x1327=(cj1*x1312);
IkReal x1328=(sj2*x1312);
IkReal x1329=(cj4*cj5*r10);
IkReal x1330=((1.0)*cj4*sj3);
IkReal x1331=(cj1*x1311);
IkReal x1332=(cj2*x1311);
IkReal x1333=((1.0)*cj5*sj4);
evalcond[0]=(x1311+((sj4*x1316))+(((-1.0)*r10*x1333)));
evalcond[1]=((((-1.0)*x1312))+((sj4*x1319))+(((-1.0)*r00*x1333)));
evalcond[2]=(((sj3*x1317))+((sj3*x1321))+(((-1.0)*x1314*x1326))+((x1319*x1320))+(((-1.0)*x1315*x1332))+((sj1*x1325)));
evalcond[3]=(((x1316*x1320))+((sj3*x1318))+((sj3*x1324))+(((-1.0)*x1314*x1329))+(((-1.0)*cj2*x1312*x1315))+((sj1*x1328)));
evalcond[4]=((((-1.0)*x1315*x1325))+((sj3*x1326))+(((-1.0)*x1319*x1330))+(((-1.0)*x1323*x1332))+((cj3*x1317))+((cj3*x1321)));
evalcond[5]=((((-1.0)*x1315*x1328))+((sj3*x1329))+(((-1.0)*x1316*x1330))+(((-1.0)*cj2*x1312*x1323))+((cj3*x1318))+((cj3*x1324)));
evalcond[6]=((((-1.0)*x1313*x1325))+(((-0.10915)*x1312))+(((0.425)*x1331))+(((-1.0)*px))+((x1322*x1331))+(((-0.09465)*x1317))+(((-0.09465)*x1321)));
evalcond[7]=((((-1.0)*x1313*x1328))+(((0.10915)*x1311))+((x1322*x1327))+(((-1.0)*py))+(((-0.09465)*x1318))+(((-0.09465)*x1324))+(((0.425)*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1336 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1336.valid){
continue;
}
IkReal x1334=((1.0)*(x1336.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1337.valid){
continue;
}
if( (((-1.0)*(x1337.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1337.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1335=((-1.0)*(IKasin(((-1.0)*(x1337.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1334))+(((-1.0)*x1335)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1335))+(((-1.0)*x1334)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1338=cj5*cj5;
IkReal x1339=r21*r21;
IkReal x1340=(sj3*x1338);
IkReal x1341=(((sj3*(r22*r22)))+(((-1.0)*x1339*x1340))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1339))+((x1340*(r20*r20))));
j4eval[0]=x1341;
j4eval[1]=IKsign(x1341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1342=cj5*cj5;
IkReal x1343=r21*r21;
IkReal x1344=((1.0)*cj3);
IkReal x1345=(cj3*x1342);
IkReal x1346=((((-1.0)*x1344*(r22*r22)))+(((-1.0)*x1343*x1344))+((x1343*x1345))+(((-1.0)*x1342*x1344*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1346;
j4eval[1]=IKsign(x1346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1347=cj1*cj1;
IkReal x1348=cj2*cj2;
IkReal x1349=(cj1*sj1*sj2);
IkReal x1350=(cj2*x1347);
IkReal x1351=(x1347*x1348);
j0eval[0]=((6.19369221392727)+x1347+(((-11.4971359451148)*cj2*x1349))+(((-5.74856797255738)*x1348))+(((12.4570625281677)*x1350))+(((11.4971359451148)*x1351))+(((-12.4570625281677)*x1349)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1348))+(((133365000.0)*x1350))+(((-123088050.0)*cj2*x1349))+(((123088050.0)*x1351))+(((10705975.0)*x1347))+(((-133365000.0)*x1349))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1352=((1.0)*cj5);
IkReal x1353=((1.0)*sj5);
IkReal x1354=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1354;
j0eval[1]=((IKabs(((((-1.0)*r10*x1353))+(((-1.0)*r11*x1352)))))+(IKabs(((((-1.0)*r00*x1353))+(((-1.0)*r01*x1352))))));
j0eval[2]=IKsign(x1354);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1355=cj5*cj5;
IkReal x1356=r21*r21;
IkReal x1357=(sj1*sj2);
IkReal x1358=(r21*sj5);
IkReal x1359=(cj5*r20);
IkReal x1360=(cj1*cj2);
IkReal x1361=(x1356+(r22*r22)+((x1355*(r20*r20)))+(((-2.0)*x1358*x1359))+(((-1.0)*x1355*x1356)));
j4eval[0]=x1361;
j4eval[1]=IKsign(x1361);
j4eval[2]=((IKabs((((r22*x1357))+(((-1.0)*r22*x1360)))))+(IKabs((((x1357*x1358))+(((-1.0)*x1357*x1359))+((x1359*x1360))+(((-1.0)*x1358*x1360))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1362=IKsin(j0);
IkReal x1363=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1362))+(((0.425)*x1363)));
evalcond[1]=((((0.10915)*x1363))+(((-1.0)*py))+(((0.425)*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1364)));
j4eval[0]=x1365;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1364))))));
j4eval[2]=IKsign(x1365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1366=((1.0)*cj5);
IkReal x1367=((((-1.0)*r11*x1366))+(((-1.0)*r10*sj5)));
j4eval[0]=x1367;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1366))))));
j4eval[2]=IKsign(x1367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1368=cj5*cj5;
IkReal x1369=((1.0)*sj5);
IkReal x1370=(cj5*r20);
IkReal x1371=(r11*r21);
IkReal x1372=((((-1.0)*r11*x1369*x1370))+x1371+((r10*r20*x1368))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1369))+(((-1.0)*x1368*x1371)));
j4eval[0]=x1372;
j4eval[1]=IKsign(x1372);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1369))+((cj0*x1370))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1373=cj5*cj5;
IkReal x1374=((1.0)*sj5);
IkReal x1375=(cj5*r20);
IkReal x1376=(r11*r21);
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1374))+((cj0*x1375)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign((x1376+(((-1.0)*x1373*x1376))+((r10*r20*x1373))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1374))+(((-1.0)*r11*x1374*x1375)))),-1);
if(!x1378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1377.value)+(((1.5707963267949)*(x1378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1379=IKsin(j4);
IkReal x1380=IKcos(j4);
IkReal x1381=((1.0)*sj0);
IkReal x1382=(cj5*r00);
IkReal x1383=(r11*sj5);
IkReal x1384=(cj5*r10);
IkReal x1385=(r21*sj5);
IkReal x1386=(cj5*r20);
IkReal x1387=(r01*sj5);
IkReal x1388=((1.0)*x1380);
IkReal x1389=((1.0)*x1379);
evalcond[0]=(((x1379*x1385))+(((-1.0)*r22*x1388))+(((-1.0)*x1386*x1389)));
evalcond[1]=(((x1380*x1386))+(((-1.0)*r22*x1389))+(((-1.0)*x1385*x1388)));
evalcond[2]=((((-1.0)*r12*x1388))+cj0+(((-1.0)*x1384*x1389))+((x1379*x1383)));
evalcond[3]=((((-1.0)*x1381))+(((-1.0)*r02*x1388))+(((-1.0)*x1382*x1389))+((x1379*x1387)));
evalcond[4]=(((x1380*x1382))+(((-1.0)*r02*x1389))+(((-1.0)*x1387*x1388))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1389))+(((-1.0)*x1381))+((x1380*x1384))+(((-1.0)*x1383*x1388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1390=((1.0)*cj5);
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1390)))),-1);
if(!x1392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1391.value)+(((1.5707963267949)*(x1392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1393=IKsin(j4);
IkReal x1394=IKcos(j4);
IkReal x1395=((1.0)*sj0);
IkReal x1396=(cj5*r00);
IkReal x1397=(r11*sj5);
IkReal x1398=(cj5*r10);
IkReal x1399=(r21*sj5);
IkReal x1400=(cj5*r20);
IkReal x1401=(r01*sj5);
IkReal x1402=((1.0)*x1394);
IkReal x1403=((1.0)*x1393);
evalcond[0]=(((x1393*x1399))+(((-1.0)*r22*x1402))+(((-1.0)*x1400*x1403)));
evalcond[1]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1403))+((x1394*x1400)));
evalcond[2]=((((-1.0)*r12*x1402))+((x1393*x1397))+cj0+(((-1.0)*x1398*x1403)));
evalcond[3]=(((x1393*x1401))+(((-1.0)*r02*x1402))+(((-1.0)*x1396*x1403))+(((-1.0)*x1395)));
evalcond[4]=(((x1394*x1396))+(((-1.0)*r02*x1403))+(((-1.0)*x1401*x1402))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1403))+((x1394*x1398))+(((-1.0)*x1397*x1402))+(((-1.0)*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1404=((1.0)*cj5);
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1404)))),-1);
if(!x1406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1405.value)+(((1.5707963267949)*(x1406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1407=IKsin(j4);
IkReal x1408=IKcos(j4);
IkReal x1409=((1.0)*sj0);
IkReal x1410=(cj5*r00);
IkReal x1411=(r11*sj5);
IkReal x1412=(cj5*r10);
IkReal x1413=(r21*sj5);
IkReal x1414=(cj5*r20);
IkReal x1415=(r01*sj5);
IkReal x1416=((1.0)*x1408);
IkReal x1417=((1.0)*x1407);
evalcond[0]=(((x1407*x1413))+(((-1.0)*r22*x1416))+(((-1.0)*x1414*x1417)));
evalcond[1]=((((-1.0)*x1413*x1416))+(((-1.0)*r22*x1417))+((x1408*x1414)));
evalcond[2]=(((x1407*x1411))+cj0+(((-1.0)*x1412*x1417))+(((-1.0)*r12*x1416)));
evalcond[3]=(((x1407*x1415))+(((-1.0)*r02*x1416))+(((-1.0)*x1409))+(((-1.0)*x1410*x1417)));
evalcond[4]=((((-1.0)*x1415*x1416))+(((-1.0)*r02*x1417))+((x1408*x1410))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1409))+(((-1.0)*x1411*x1416))+(((-1.0)*r12*x1417))+((x1408*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1418=IKsin(j0);
IkReal x1419=IKcos(j0);
evalcond[0]=((((-0.10915)*x1418))+(((0.425)*x1419))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1419))+(((0.425)*x1418))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1420=((1.0)*cj5);
IkReal x1421=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1420)));
j4eval[0]=x1421;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1420)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1422=cj5*cj5;
IkReal x1423=((1.0)*r21);
IkReal x1424=(cj5*sj5);
IkReal x1425=((1.0)*r20);
IkReal x1426=((((-1.0)*r01*x1422*x1423))+(((-1.0)*r01*x1424*x1425))+((r00*r20*x1422))+((r01*r21))+(((-1.0)*r00*x1423*x1424))+((r02*r22)));
j4eval[0]=x1426;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1425))))));
j4eval[2]=IKsign(x1426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1427=cj5*cj5;
IkReal x1428=(r21*sj5);
IkReal x1429=(r11*r21);
IkReal x1430=((1.0)*cj5*r20);
IkReal x1431=((((-1.0)*x1427*x1429))+(((-1.0)*r11*sj5*x1430))+((r12*r22))+(((-1.0)*cj5*r10*x1428))+x1429+((r10*r20*x1427)));
j4eval[0]=x1431;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1430))+((sj0*x1428)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1432=cj5*cj5;
IkReal x1433=(r21*sj5);
IkReal x1434=(r11*r21);
IkReal x1435=((1.0)*cj5*r20);
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1435))+((sj0*x1433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1433))+((r10*r20*x1432))+(((-1.0)*r11*sj5*x1435))+((r12*r22))+(((-1.0)*x1432*x1434))+x1434)),-1);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1436.value)+(((1.5707963267949)*(x1437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKsin(j4);
IkReal x1439=IKcos(j4);
IkReal x1440=(r11*sj5);
IkReal x1441=(cj5*r00);
IkReal x1442=(cj5*r10);
IkReal x1443=(r21*sj5);
IkReal x1444=(cj5*r20);
IkReal x1445=(r01*sj5);
IkReal x1446=((1.0)*x1439);
IkReal x1447=((1.0)*x1438);
evalcond[0]=(((x1438*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1444*x1447)));
evalcond[1]=((((-1.0)*r22*x1447))+((x1439*x1444))+(((-1.0)*x1443*x1446)));
evalcond[2]=(((x1438*x1440))+cj0+(((-1.0)*r12*x1446))+(((-1.0)*x1442*x1447)));
evalcond[3]=(((x1439*x1441))+(((-1.0)*x1445*x1446))+cj0+(((-1.0)*r02*x1447)));
evalcond[4]=(sj0+((x1439*x1442))+(((-1.0)*r12*x1447))+(((-1.0)*x1440*x1446)));
evalcond[5]=(((x1438*x1445))+(((-1.0)*sj0))+(((-1.0)*x1441*x1447))+(((-1.0)*r02*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1448=cj5*cj5;
IkReal x1449=((1.0)*r21);
IkReal x1450=(cj5*sj5);
IkReal x1451=((1.0)*r20);
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453=IKPowWithIntegerCheck(IKsign((((r00*r20*x1448))+((r01*r21))+(((-1.0)*r01*x1448*x1449))+(((-1.0)*r01*x1450*x1451))+(((-1.0)*r00*x1449*x1450))+((r02*r22)))),-1);
if(!x1453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1452.value)+(((1.5707963267949)*(x1453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1454=IKsin(j4);
IkReal x1455=IKcos(j4);
IkReal x1456=(r11*sj5);
IkReal x1457=(cj5*r00);
IkReal x1458=(cj5*r10);
IkReal x1459=(r21*sj5);
IkReal x1460=(cj5*r20);
IkReal x1461=(r01*sj5);
IkReal x1462=((1.0)*x1455);
IkReal x1463=((1.0)*x1454);
evalcond[0]=(((x1454*x1459))+(((-1.0)*r22*x1462))+(((-1.0)*x1460*x1463)));
evalcond[1]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1463))+((x1455*x1460)));
evalcond[2]=((((-1.0)*x1458*x1463))+cj0+((x1454*x1456))+(((-1.0)*r12*x1462)));
evalcond[3]=(((x1455*x1457))+(((-1.0)*r02*x1463))+cj0+(((-1.0)*x1461*x1462)));
evalcond[4]=(((x1455*x1458))+sj0+(((-1.0)*x1456*x1462))+(((-1.0)*r12*x1463)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1462))+((x1454*x1461))+(((-1.0)*x1457*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1464=((1.0)*cj5);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1464)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j4);
IkReal x1468=IKcos(j4);
IkReal x1469=(r11*sj5);
IkReal x1470=(cj5*r00);
IkReal x1471=(cj5*r10);
IkReal x1472=(r21*sj5);
IkReal x1473=(cj5*r20);
IkReal x1474=(r01*sj5);
IkReal x1475=((1.0)*x1468);
IkReal x1476=((1.0)*x1467);
evalcond[0]=((((-1.0)*r22*x1475))+((x1467*x1472))+(((-1.0)*x1473*x1476)));
evalcond[1]=((((-1.0)*r22*x1476))+((x1468*x1473))+(((-1.0)*x1472*x1475)));
evalcond[2]=((((-1.0)*x1471*x1476))+cj0+(((-1.0)*r12*x1475))+((x1467*x1469)));
evalcond[3]=(cj0+(((-1.0)*x1474*x1475))+(((-1.0)*r02*x1476))+((x1468*x1470)));
evalcond[4]=(sj0+(((-1.0)*r12*x1476))+(((-1.0)*x1469*x1475))+((x1468*x1471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1470*x1476))+((x1467*x1474))+(((-1.0)*r02*x1475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1477=((1.0)*cj5);
IkReal x1478=((((-1.0)*r01*x1477))+(((-1.0)*r00*sj5)));
j4eval[0]=x1478;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1477)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1479=((1.0)*cj5);
IkReal x1480=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1479)));
j4eval[0]=x1480;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1479))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1481=cj5*cj5;
IkReal x1482=((1.0)*sj5);
IkReal x1483=(cj5*r20);
IkReal x1484=(r11*r21);
IkReal x1485=((((-1.0)*r11*x1482*x1483))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1482))+(((-1.0)*x1481*x1484))+x1484+((r10*r20*x1481)));
j4eval[0]=x1485;
j4eval[1]=IKsign(x1485);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1482))+((cj0*x1483)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1486=cj5*cj5;
IkReal x1487=((1.0)*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=(r11*r21);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1487))+((cj0*x1488)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x1486*x1489))+(((-1.0)*cj5*r10*r21*x1487))+(((-1.0)*r11*x1487*x1488))+x1489+((r10*r20*x1486)))),-1);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j4);
IkReal x1493=IKcos(j4);
IkReal x1494=((1.0)*sj0);
IkReal x1495=(cj5*r00);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=(r21*sj5);
IkReal x1499=(cj5*r20);
IkReal x1500=(r01*sj5);
IkReal x1501=((1.0)*x1493);
IkReal x1502=((1.0)*x1492);
evalcond[0]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1501))+((x1492*x1498)));
evalcond[1]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502))+((x1493*x1499)));
evalcond[2]=(cj0+((x1492*x1496))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1501)));
evalcond[3]=(((x1492*x1500))+(((-1.0)*x1494))+(((-1.0)*r02*x1501))+(((-1.0)*x1495*x1502)));
evalcond[4]=((((-1.0)*r02*x1502))+((x1493*x1495))+(((-1.0)*x1500*x1501))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494))+((x1493*x1497))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1503=((1.0)*cj5);
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
CheckValue<IkReal> x1505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1503)))),-1);
if(!x1505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1504.value)+(((1.5707963267949)*(x1505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=((1.0)*sj0);
IkReal x1509=(cj5*r00);
IkReal x1510=(r11*sj5);
IkReal x1511=(cj5*r10);
IkReal x1512=(r21*sj5);
IkReal x1513=(cj5*r20);
IkReal x1514=(r01*sj5);
IkReal x1515=((1.0)*x1507);
IkReal x1516=((1.0)*x1506);
evalcond[0]=((((-1.0)*r22*x1515))+(((-1.0)*x1513*x1516))+((x1506*x1512)));
evalcond[1]=((((-1.0)*r22*x1516))+((x1507*x1513))+(((-1.0)*x1512*x1515)));
evalcond[2]=(cj0+((x1506*x1510))+(((-1.0)*x1511*x1516))+(((-1.0)*r12*x1515)));
evalcond[3]=((((-1.0)*x1508))+((x1506*x1514))+(((-1.0)*r02*x1515))+(((-1.0)*x1509*x1516)));
evalcond[4]=(((x1507*x1509))+(((-1.0)*r02*x1516))+(((-1.0)*x1514*x1515))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1508))+((x1507*x1511))+(((-1.0)*x1510*x1515))+(((-1.0)*r12*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1517=((1.0)*cj5);
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1517))+(((-1.0)*r00*sj5)))),-1);
if(!x1518.valid){
continue;
}
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1517))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1518.value)))+(x1519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1520=IKsin(j4);
IkReal x1521=IKcos(j4);
IkReal x1522=((1.0)*sj0);
IkReal x1523=(cj5*r00);
IkReal x1524=(r11*sj5);
IkReal x1525=(cj5*r10);
IkReal x1526=(r21*sj5);
IkReal x1527=(cj5*r20);
IkReal x1528=(r01*sj5);
IkReal x1529=((1.0)*x1521);
IkReal x1530=((1.0)*x1520);
evalcond[0]=((((-1.0)*r22*x1529))+((x1520*x1526))+(((-1.0)*x1527*x1530)));
evalcond[1]=((((-1.0)*r22*x1530))+((x1521*x1527))+(((-1.0)*x1526*x1529)));
evalcond[2]=((((-1.0)*r12*x1529))+cj0+(((-1.0)*x1525*x1530))+((x1520*x1524)));
evalcond[3]=((((-1.0)*x1522))+(((-1.0)*r02*x1529))+((x1520*x1528))+(((-1.0)*x1523*x1530)));
evalcond[4]=((((-1.0)*r02*x1530))+((x1521*x1523))+(((-1.0)*x1528*x1529))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1524*x1529))+(((-1.0)*r12*x1530))+(((-1.0)*x1522))+((x1521*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1531=((1.0)*cj5);
IkReal x1532=((((-1.0)*r01*x1531))+(((-1.0)*r00*sj5)));
j4eval[0]=x1532;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1531)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1533=cj5*cj5;
IkReal x1534=((1.0)*r21);
IkReal x1535=(cj5*sj5);
IkReal x1536=((1.0)*r20);
IkReal x1537=((((-1.0)*r00*x1534*x1535))+(((-1.0)*r01*x1533*x1534))+((r01*r21))+(((-1.0)*r01*x1535*x1536))+((r02*r22))+((r00*r20*x1533)));
j4eval[0]=x1537;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1536)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1538=cj5*cj5;
IkReal x1539=(r21*sj5);
IkReal x1540=(r11*r21);
IkReal x1541=((1.0)*cj5*r20);
IkReal x1542=((((-1.0)*r11*sj5*x1541))+((r12*r22))+x1540+(((-1.0)*cj5*r10*x1539))+((r10*r20*x1538))+(((-1.0)*x1538*x1540)));
j4eval[0]=x1542;
j4eval[1]=((IKabs((((sj0*x1539))+(((-1.0)*sj0*x1541)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1543=cj5*cj5;
IkReal x1544=(r21*sj5);
IkReal x1545=(r11*r21);
IkReal x1546=((1.0)*cj5*r20);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1544))+(((-1.0)*sj0*x1546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1544))+(((-1.0)*r11*sj5*x1546))+((r12*r22))+x1545+((r10*r20*x1543))+(((-1.0)*x1543*x1545)))),-1);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1547.value)+(((1.5707963267949)*(x1548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=(r11*sj5);
IkReal x1552=(cj5*r00);
IkReal x1553=(cj5*r10);
IkReal x1554=(r21*sj5);
IkReal x1555=(cj5*r20);
IkReal x1556=(r01*sj5);
IkReal x1557=((1.0)*x1550);
IkReal x1558=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1557))+(((-1.0)*x1555*x1558))+((x1549*x1554)));
evalcond[1]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1554*x1557)));
evalcond[2]=(cj0+(((-1.0)*x1553*x1558))+((x1549*x1551))+(((-1.0)*r12*x1557)));
evalcond[3]=(cj0+((x1550*x1552))+(((-1.0)*r02*x1558))+(((-1.0)*x1556*x1557)));
evalcond[4]=(sj0+((x1550*x1553))+(((-1.0)*r12*x1558))+(((-1.0)*x1551*x1557)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1552*x1558))+(((-1.0)*r02*x1557))+((x1549*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1559=cj5*cj5;
IkReal x1560=((1.0)*r21);
IkReal x1561=(cj5*sj5);
IkReal x1562=((1.0)*r20);
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1560*x1561))+((r01*r21))+(((-1.0)*r01*x1561*x1562))+((r00*r20*x1559))+(((-1.0)*r01*x1559*x1560))+((r02*r22)))),-1);
if(!x1563.valid){
continue;
}
CheckValue<IkReal> x1564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1563.value)))+(x1564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1565=IKsin(j4);
IkReal x1566=IKcos(j4);
IkReal x1567=(r11*sj5);
IkReal x1568=(cj5*r00);
IkReal x1569=(cj5*r10);
IkReal x1570=(r21*sj5);
IkReal x1571=(cj5*r20);
IkReal x1572=(r01*sj5);
IkReal x1573=((1.0)*x1566);
IkReal x1574=((1.0)*x1565);
evalcond[0]=((((-1.0)*x1571*x1574))+(((-1.0)*r22*x1573))+((x1565*x1570)));
evalcond[1]=(((x1566*x1571))+(((-1.0)*x1570*x1573))+(((-1.0)*r22*x1574)));
evalcond[2]=(cj0+(((-1.0)*x1569*x1574))+(((-1.0)*r12*x1573))+((x1565*x1567)));
evalcond[3]=(((x1566*x1568))+(((-1.0)*r02*x1574))+cj0+(((-1.0)*x1572*x1573)));
evalcond[4]=(((x1566*x1569))+sj0+(((-1.0)*x1567*x1573))+(((-1.0)*r12*x1574)));
evalcond[5]=((((-1.0)*r02*x1573))+(((-1.0)*sj0))+(((-1.0)*x1568*x1574))+((x1565*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1575=((1.0)*cj5);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1575)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=(r11*sj5);
IkReal x1581=(cj5*r00);
IkReal x1582=(cj5*r10);
IkReal x1583=(r21*sj5);
IkReal x1584=(cj5*r20);
IkReal x1585=(r01*sj5);
IkReal x1586=((1.0)*x1579);
IkReal x1587=((1.0)*x1578);
evalcond[0]=((((-1.0)*x1584*x1587))+(((-1.0)*r22*x1586))+((x1578*x1583)));
evalcond[1]=((((-1.0)*r22*x1587))+((x1579*x1584))+(((-1.0)*x1583*x1586)));
evalcond[2]=(cj0+((x1578*x1580))+(((-1.0)*r12*x1586))+(((-1.0)*x1582*x1587)));
evalcond[3]=((((-1.0)*x1585*x1586))+cj0+(((-1.0)*r02*x1587))+((x1579*x1581)));
evalcond[4]=((((-1.0)*x1580*x1586))+sj0+((x1579*x1582))+(((-1.0)*r12*x1587)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1586))+(((-1.0)*x1581*x1587))+((x1578*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1588=IKcos(j0);
IkReal x1589=IKsin(j0);
evalcond[0]=((((-0.425)*x1588))+(((-1.0)*px))+(((-0.10915)*x1589)));
evalcond[1]=((((-0.425)*x1589))+(((-1.0)*py))+(((0.10915)*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1590=((1.0)*cj5);
IkReal x1591=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1590)));
j4eval[0]=x1591;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1590))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1592=cj5*cj5;
IkReal x1593=((1.0)*r21);
IkReal x1594=(cj5*sj5);
IkReal x1595=((1.0)*r20);
IkReal x1596=((((-1.0)*r01*x1594*x1595))+((r01*r21))+(((-1.0)*r01*x1592*x1593))+(((-1.0)*r00*x1593*x1594))+((r00*r20*x1592))+((r02*r22)));
j4eval[0]=x1596;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1595)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1597=cj5*cj5;
IkReal x1598=(r21*sj5);
IkReal x1599=(r11*r21);
IkReal x1600=((1.0)*cj5*r20);
IkReal x1601=(((r10*r20*x1597))+(((-1.0)*r11*sj5*x1600))+((r12*r22))+(((-1.0)*x1597*x1599))+x1599+(((-1.0)*cj5*r10*x1598)));
j4eval[0]=x1601;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1600))+((sj0*x1598))))));
j4eval[2]=IKsign(x1601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=cj5*cj5;
IkReal x1603=(r21*sj5);
IkReal x1604=(r11*r21);
IkReal x1605=((1.0)*cj5*r20);
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1605))+((sj0*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1603))+((r10*r20*x1602))+x1604+(((-1.0)*r11*sj5*x1605))+((r12*r22))+(((-1.0)*x1602*x1604)))),-1);
if(!x1607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1606.value)+(((1.5707963267949)*(x1607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1608=IKsin(j4);
IkReal x1609=IKcos(j4);
IkReal x1610=(r11*sj5);
IkReal x1611=(cj5*r00);
IkReal x1612=(cj5*r10);
IkReal x1613=(r21*sj5);
IkReal x1614=(cj5*r20);
IkReal x1615=(r01*sj5);
IkReal x1616=((1.0)*x1609);
IkReal x1617=((1.0)*x1608);
evalcond[0]=(((x1608*x1613))+(((-1.0)*r22*x1616))+(((-1.0)*x1614*x1617)));
evalcond[1]=(((x1609*x1614))+(((-1.0)*r22*x1617))+(((-1.0)*x1613*x1616)));
evalcond[2]=((((-1.0)*r12*x1616))+cj0+((x1608*x1610))+(((-1.0)*x1612*x1617)));
evalcond[3]=(cj0+(((-1.0)*r02*x1617))+((x1609*x1611))+(((-1.0)*x1615*x1616)));
evalcond[4]=((((-1.0)*r12*x1617))+sj0+(((-1.0)*x1610*x1616))+((x1609*x1612)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1611*x1617))+(((-1.0)*r02*x1616))+((x1608*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=cj5*cj5;
IkReal x1619=((1.0)*r21);
IkReal x1620=(cj5*sj5);
IkReal x1621=((1.0)*r20);
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1621))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign((((r00*r20*x1618))+((r01*r21))+(((-1.0)*r00*x1619*x1620))+(((-1.0)*r01*x1620*x1621))+(((-1.0)*r01*x1618*x1619))+((r02*r22)))),-1);
if(!x1623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1622.value)+(((1.5707963267949)*(x1623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1624=IKsin(j4);
IkReal x1625=IKcos(j4);
IkReal x1626=(r11*sj5);
IkReal x1627=(cj5*r00);
IkReal x1628=(cj5*r10);
IkReal x1629=(r21*sj5);
IkReal x1630=(cj5*r20);
IkReal x1631=(r01*sj5);
IkReal x1632=((1.0)*x1625);
IkReal x1633=((1.0)*x1624);
evalcond[0]=((((-1.0)*r22*x1632))+(((-1.0)*x1630*x1633))+((x1624*x1629)));
evalcond[1]=((((-1.0)*r22*x1633))+((x1625*x1630))+(((-1.0)*x1629*x1632)));
evalcond[2]=(cj0+(((-1.0)*r12*x1632))+(((-1.0)*x1628*x1633))+((x1624*x1626)));
evalcond[3]=(cj0+(((-1.0)*x1631*x1632))+(((-1.0)*r02*x1633))+((x1625*x1627)));
evalcond[4]=(sj0+(((-1.0)*r12*x1633))+(((-1.0)*x1626*x1632))+((x1625*x1628)));
evalcond[5]=((((-1.0)*sj0))+((x1624*x1631))+(((-1.0)*r02*x1632))+(((-1.0)*x1627*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1634=((1.0)*cj5);
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1634))+(((-1.0)*r00*sj5)))),-1);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1635.value)))+(x1636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKsin(j4);
IkReal x1638=IKcos(j4);
IkReal x1639=(r11*sj5);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj5*r10);
IkReal x1642=(r21*sj5);
IkReal x1643=(cj5*r20);
IkReal x1644=(r01*sj5);
IkReal x1645=((1.0)*x1638);
IkReal x1646=((1.0)*x1637);
evalcond[0]=(((x1637*x1642))+(((-1.0)*r22*x1645))+(((-1.0)*x1643*x1646)));
evalcond[1]=((((-1.0)*r22*x1646))+(((-1.0)*x1642*x1645))+((x1638*x1643)));
evalcond[2]=(((x1637*x1639))+(((-1.0)*x1641*x1646))+cj0+(((-1.0)*r12*x1645)));
evalcond[3]=(cj0+(((-1.0)*x1644*x1645))+(((-1.0)*r02*x1646))+((x1638*x1640)));
evalcond[4]=(sj0+(((-1.0)*r12*x1646))+(((-1.0)*x1639*x1645))+((x1638*x1641)));
evalcond[5]=((((-1.0)*sj0))+((x1637*x1644))+(((-1.0)*x1640*x1646))+(((-1.0)*r02*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1647=IKcos(j0);
IkReal x1648=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1647))+(((-0.10915)*x1648)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1647))+(((-0.425)*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1649=((1.0)*cj5);
IkReal x1650=((((-1.0)*r01*x1649))+(((-1.0)*r00*sj5)));
j4eval[0]=x1650;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1649)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1651=((1.0)*cj5);
IkReal x1652=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1651)));
j4eval[0]=x1652;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1651))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1653=cj5*cj5;
IkReal x1654=((1.0)*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r11*r21);
IkReal x1657=((((-1.0)*x1653*x1656))+(((-1.0)*cj5*r10*r21*x1654))+x1656+((r12*r22))+(((-1.0)*r11*x1654*x1655))+((r10*r20*x1653)));
j4eval[0]=x1657;
j4eval[1]=IKsign(x1657);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1654))+((cj0*x1655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1658=cj5*cj5;
IkReal x1659=((1.0)*sj5);
IkReal x1660=(cj5*r20);
IkReal x1661=(r11*r21);
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1659*x1660))+(((-1.0)*cj5*r10*r21*x1659))+x1661+((r12*r22))+(((-1.0)*x1658*x1661))+((r10*r20*x1658)))),-1);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1659))+((cj0*x1660)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1662.value)))+(x1663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j4);
IkReal x1665=IKcos(j4);
IkReal x1666=((1.0)*sj0);
IkReal x1667=(cj5*r00);
IkReal x1668=(r11*sj5);
IkReal x1669=(cj5*r10);
IkReal x1670=(r21*sj5);
IkReal x1671=(cj5*r20);
IkReal x1672=(r01*sj5);
IkReal x1673=((1.0)*x1665);
IkReal x1674=((1.0)*x1664);
evalcond[0]=((((-1.0)*x1671*x1674))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[1]=(((x1665*x1671))+(((-1.0)*x1670*x1673))+(((-1.0)*r22*x1674)));
evalcond[2]=(cj0+(((-1.0)*x1669*x1674))+(((-1.0)*r12*x1673))+((x1664*x1668)));
evalcond[3]=((((-1.0)*x1667*x1674))+(((-1.0)*r02*x1673))+(((-1.0)*x1666))+((x1664*x1672)));
evalcond[4]=((((-1.0)*x1672*x1673))+(((-1.0)*r02*x1674))+((x1665*x1667))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1668*x1673))+(((-1.0)*r12*x1674))+(((-1.0)*x1666))+((x1665*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1675=((1.0)*cj5);
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1675)))),-1);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1675))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1676.value)))+(x1677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j4);
IkReal x1679=IKcos(j4);
IkReal x1680=((1.0)*sj0);
IkReal x1681=(cj5*r00);
IkReal x1682=(r11*sj5);
IkReal x1683=(cj5*r10);
IkReal x1684=(r21*sj5);
IkReal x1685=(cj5*r20);
IkReal x1686=(r01*sj5);
IkReal x1687=((1.0)*x1679);
IkReal x1688=((1.0)*x1678);
evalcond[0]=((((-1.0)*x1685*x1688))+(((-1.0)*r22*x1687))+((x1678*x1684)));
evalcond[1]=((((-1.0)*r22*x1688))+((x1679*x1685))+(((-1.0)*x1684*x1687)));
evalcond[2]=((((-1.0)*r12*x1687))+cj0+(((-1.0)*x1683*x1688))+((x1678*x1682)));
evalcond[3]=((((-1.0)*x1680))+(((-1.0)*x1681*x1688))+(((-1.0)*r02*x1687))+((x1678*x1686)));
evalcond[4]=((((-1.0)*x1686*x1687))+((x1679*x1681))+(((-1.0)*r02*x1688))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1688))+(((-1.0)*x1680))+(((-1.0)*x1682*x1687))+((x1679*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1689=((1.0)*cj5);
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1689))+(((-1.0)*r00*sj5)))),-1);
if(!x1690.valid){
continue;
}
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1690.value)))+(x1691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1692=IKsin(j4);
IkReal x1693=IKcos(j4);
IkReal x1694=((1.0)*sj0);
IkReal x1695=(cj5*r00);
IkReal x1696=(r11*sj5);
IkReal x1697=(cj5*r10);
IkReal x1698=(r21*sj5);
IkReal x1699=(cj5*r20);
IkReal x1700=(r01*sj5);
IkReal x1701=((1.0)*x1693);
IkReal x1702=((1.0)*x1692);
evalcond[0]=((((-1.0)*x1699*x1702))+((x1692*x1698))+(((-1.0)*r22*x1701)));
evalcond[1]=((((-1.0)*x1698*x1701))+((x1693*x1699))+(((-1.0)*r22*x1702)));
evalcond[2]=(cj0+((x1692*x1696))+(((-1.0)*x1697*x1702))+(((-1.0)*r12*x1701)));
evalcond[3]=((((-1.0)*x1694))+(((-1.0)*r02*x1701))+(((-1.0)*x1695*x1702))+((x1692*x1700)));
evalcond[4]=((((-1.0)*r02*x1702))+((x1693*x1695))+(((-1.0)*x1700*x1701))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1694))+((x1693*x1697))+(((-1.0)*x1696*x1701))+(((-1.0)*r12*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1703=((1.0)*cj5);
IkReal x1704=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1703)));
j4eval[0]=x1704;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1703))))));
j4eval[2]=IKsign(x1704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1705=cj5*cj5;
IkReal x1706=((1.0)*r21);
IkReal x1707=(cj5*sj5);
IkReal x1708=((1.0)*r20);
IkReal x1709=((((-1.0)*r01*x1707*x1708))+(((-1.0)*r01*x1705*x1706))+((r01*r21))+((r00*r20*x1705))+(((-1.0)*r00*x1706*x1707))+((r02*r22)));
j4eval[0]=x1709;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1708)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1710=cj5*cj5;
IkReal x1711=(r21*sj5);
IkReal x1712=(r11*r21);
IkReal x1713=((1.0)*cj5*r20);
IkReal x1714=(x1712+(((-1.0)*r11*sj5*x1713))+((r10*r20*x1710))+((r12*r22))+(((-1.0)*x1710*x1712))+(((-1.0)*cj5*r10*x1711)));
j4eval[0]=x1714;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1713))+((sj0*x1711))))));
j4eval[2]=IKsign(x1714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1715=cj5*cj5;
IkReal x1716=(r21*sj5);
IkReal x1717=(r11*r21);
IkReal x1718=((1.0)*cj5*r20);
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign((x1717+(((-1.0)*r11*sj5*x1718))+((r10*r20*x1715))+(((-1.0)*x1715*x1717))+((r12*r22))+(((-1.0)*cj5*r10*x1716)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1718))+((sj0*x1716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(r11*sj5);
IkReal x1724=(cj5*r00);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=(r01*sj5);
IkReal x1729=((1.0)*x1722);
IkReal x1730=((1.0)*x1721);
evalcond[0]=((((-1.0)*r22*x1729))+((x1721*x1726))+(((-1.0)*x1727*x1730)));
evalcond[1]=(((x1722*x1727))+(((-1.0)*x1726*x1729))+(((-1.0)*r22*x1730)));
evalcond[2]=(cj0+(((-1.0)*r12*x1729))+((x1721*x1723))+(((-1.0)*x1725*x1730)));
evalcond[3]=(((x1722*x1724))+cj0+(((-1.0)*x1728*x1729))+(((-1.0)*r02*x1730)));
evalcond[4]=(((x1722*x1725))+sj0+(((-1.0)*r12*x1730))+(((-1.0)*x1723*x1729)));
evalcond[5]=((((-1.0)*sj0))+((x1721*x1728))+(((-1.0)*x1724*x1730))+(((-1.0)*r02*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1731=cj5*cj5;
IkReal x1732=((1.0)*r21);
IkReal x1733=(cj5*sj5);
IkReal x1734=((1.0)*r20);
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
CheckValue<IkReal> x1736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1733*x1734))+((r01*r21))+(((-1.0)*r01*x1731*x1732))+(((-1.0)*r00*x1732*x1733))+((r02*r22))+((r00*r20*x1731)))),-1);
if(!x1736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1735.value)+(((1.5707963267949)*(x1736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1737=IKsin(j4);
IkReal x1738=IKcos(j4);
IkReal x1739=(r11*sj5);
IkReal x1740=(cj5*r00);
IkReal x1741=(cj5*r10);
IkReal x1742=(r21*sj5);
IkReal x1743=(cj5*r20);
IkReal x1744=(r01*sj5);
IkReal x1745=((1.0)*x1738);
IkReal x1746=((1.0)*x1737);
evalcond[0]=((((-1.0)*r22*x1745))+(((-1.0)*x1743*x1746))+((x1737*x1742)));
evalcond[1]=((((-1.0)*r22*x1746))+(((-1.0)*x1742*x1745))+((x1738*x1743)));
evalcond[2]=((((-1.0)*r12*x1745))+(((-1.0)*x1741*x1746))+cj0+((x1737*x1739)));
evalcond[3]=(cj0+(((-1.0)*x1744*x1745))+((x1738*x1740))+(((-1.0)*r02*x1746)));
evalcond[4]=((((-1.0)*r12*x1746))+sj0+(((-1.0)*x1739*x1745))+((x1738*x1741)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1740*x1746))+(((-1.0)*r02*x1745))+((x1737*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1747=((1.0)*cj5);
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1747)))),-1);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1748.value)))+(x1749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1750=IKsin(j4);
IkReal x1751=IKcos(j4);
IkReal x1752=(r11*sj5);
IkReal x1753=(cj5*r00);
IkReal x1754=(cj5*r10);
IkReal x1755=(r21*sj5);
IkReal x1756=(cj5*r20);
IkReal x1757=(r01*sj5);
IkReal x1758=((1.0)*x1751);
IkReal x1759=((1.0)*x1750);
evalcond[0]=((((-1.0)*x1756*x1759))+(((-1.0)*r22*x1758))+((x1750*x1755)));
evalcond[1]=((((-1.0)*r22*x1759))+((x1751*x1756))+(((-1.0)*x1755*x1758)));
evalcond[2]=((((-1.0)*r12*x1758))+cj0+((x1750*x1752))+(((-1.0)*x1754*x1759)));
evalcond[3]=((((-1.0)*x1757*x1758))+cj0+(((-1.0)*r02*x1759))+((x1751*x1753)));
evalcond[4]=(sj0+(((-1.0)*r12*x1759))+(((-1.0)*x1752*x1758))+((x1751*x1754)));
evalcond[5]=((((-1.0)*sj0))+((x1750*x1757))+(((-1.0)*x1753*x1759))+(((-1.0)*r02*x1758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1760=((1.0)*cj5);
IkReal x1761=((((-1.0)*r01*x1760))+(((-1.0)*r00*sj5)));
j4eval[0]=x1761;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1760))))));
j4eval[2]=IKsign(x1761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1762=((1.0)*cj5);
IkReal x1763=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1762)));
j4eval[0]=x1763;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1762))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1764=cj5*cj5;
IkReal x1765=((1.0)*sj5);
IkReal x1766=(cj5*r20);
IkReal x1767=(r11*r21);
IkReal x1768=(x1767+((r12*r22))+(((-1.0)*cj5*r10*r21*x1765))+((r10*r20*x1764))+(((-1.0)*r11*x1765*x1766))+(((-1.0)*x1764*x1767)));
j4eval[0]=x1768;
j4eval[1]=IKsign(x1768);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1765))+((cj0*x1766)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1769=cj5*cj5;
IkReal x1770=((1.0)*sj5);
IkReal x1771=(cj5*r20);
IkReal x1772=(r11*r21);
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1770*x1771))+x1772+((r12*r22))+(((-1.0)*x1769*x1772))+(((-1.0)*cj5*r10*r21*x1770))+((r10*r20*x1769)))),-1);
if(!x1773.valid){
continue;
}
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1770))+((cj0*x1771)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1773.value)))+(x1774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1775=IKsin(j4);
IkReal x1776=IKcos(j4);
IkReal x1777=((1.0)*sj0);
IkReal x1778=(cj5*r00);
IkReal x1779=(r11*sj5);
IkReal x1780=(cj5*r10);
IkReal x1781=(r21*sj5);
IkReal x1782=(cj5*r20);
IkReal x1783=(r01*sj5);
IkReal x1784=((1.0)*x1776);
IkReal x1785=((1.0)*x1775);
evalcond[0]=(((x1775*x1781))+(((-1.0)*r22*x1784))+(((-1.0)*x1782*x1785)));
evalcond[1]=((((-1.0)*r22*x1785))+((x1776*x1782))+(((-1.0)*x1781*x1784)));
evalcond[2]=(cj0+(((-1.0)*r12*x1784))+((x1775*x1779))+(((-1.0)*x1780*x1785)));
evalcond[3]=(((x1775*x1783))+(((-1.0)*x1777))+(((-1.0)*x1778*x1785))+(((-1.0)*r02*x1784)));
evalcond[4]=((((-1.0)*x1783*x1784))+((x1776*x1778))+(((-1.0)*r02*x1785))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1785))+(((-1.0)*x1777))+(((-1.0)*x1779*x1784))+((x1776*x1780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1786=((1.0)*cj5);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1786)))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=((1.0)*sj0);
IkReal x1792=(cj5*r00);
IkReal x1793=(r11*sj5);
IkReal x1794=(cj5*r10);
IkReal x1795=(r21*sj5);
IkReal x1796=(cj5*r20);
IkReal x1797=(r01*sj5);
IkReal x1798=((1.0)*x1790);
IkReal x1799=((1.0)*x1789);
evalcond[0]=((((-1.0)*x1796*x1799))+(((-1.0)*r22*x1798))+((x1789*x1795)));
evalcond[1]=((((-1.0)*x1795*x1798))+(((-1.0)*r22*x1799))+((x1790*x1796)));
evalcond[2]=(cj0+(((-1.0)*r12*x1798))+((x1789*x1793))+(((-1.0)*x1794*x1799)));
evalcond[3]=((((-1.0)*x1792*x1799))+(((-1.0)*x1791))+((x1789*x1797))+(((-1.0)*r02*x1798)));
evalcond[4]=(((x1790*x1792))+(((-1.0)*r02*x1799))+(((-1.0)*x1797*x1798))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1791))+(((-1.0)*r12*x1799))+(((-1.0)*x1793*x1798))+((x1790*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1800=((1.0)*cj5);
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1800))+(((-1.0)*r00*sj5)))),-1);
if(!x1801.valid){
continue;
}
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1801.value)))+(x1802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1803=IKsin(j4);
IkReal x1804=IKcos(j4);
IkReal x1805=((1.0)*sj0);
IkReal x1806=(cj5*r00);
IkReal x1807=(r11*sj5);
IkReal x1808=(cj5*r10);
IkReal x1809=(r21*sj5);
IkReal x1810=(cj5*r20);
IkReal x1811=(r01*sj5);
IkReal x1812=((1.0)*x1804);
IkReal x1813=((1.0)*x1803);
evalcond[0]=((((-1.0)*x1810*x1813))+((x1803*x1809))+(((-1.0)*r22*x1812)));
evalcond[1]=(((x1804*x1810))+(((-1.0)*x1809*x1812))+(((-1.0)*r22*x1813)));
evalcond[2]=(cj0+(((-1.0)*x1808*x1813))+((x1803*x1807))+(((-1.0)*r12*x1812)));
evalcond[3]=((((-1.0)*r02*x1812))+(((-1.0)*x1805))+((x1803*x1811))+(((-1.0)*x1806*x1813)));
evalcond[4]=((((-1.0)*x1811*x1812))+(((-1.0)*r02*x1813))+((x1804*x1806))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1807*x1812))+(((-1.0)*x1805))+(((-1.0)*r12*x1813))+((x1804*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1814=(sj1*sj2);
IkReal x1815=(cj5*r01);
IkReal x1816=(cj1*cj2);
IkReal x1817=(r00*sj5);
IkReal x1818=((20000.0)*px);
IkReal x1819=((8500.0)*cj1);
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(((((2183.0)*x1814))+(((-2183.0)*x1816))),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821=IKPowWithIntegerCheck((x1814+(((-1.0)*x1816))),-1);
if(!x1821.valid){
continue;
}
if( IKabs(((x1820.value)*(((((-5952.0)*x1815*x1816))+((x1816*x1818))+(((5952.0)*x1814*x1815))+(((5952.0)*x1814*x1817))+(((-1.0)*x1814*x1818))+(((-1.0)*x1815*x1819))+(((-5952.0)*x1816*x1817))+(((-1.0)*x1817*x1819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1821.value)*(((((-1.0)*x1817))+(((-1.0)*x1815)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1820.value)*(((((-5952.0)*x1815*x1816))+((x1816*x1818))+(((5952.0)*x1814*x1815))+(((5952.0)*x1814*x1817))+(((-1.0)*x1814*x1818))+(((-1.0)*x1815*x1819))+(((-5952.0)*x1816*x1817))+(((-1.0)*x1817*x1819))))))+IKsqr(((x1821.value)*(((((-1.0)*x1817))+(((-1.0)*x1815))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1820.value)*(((((-5952.0)*x1815*x1816))+((x1816*x1818))+(((5952.0)*x1814*x1815))+(((5952.0)*x1814*x1817))+(((-1.0)*x1814*x1818))+(((-1.0)*x1815*x1819))+(((-5952.0)*x1816*x1817))+(((-1.0)*x1817*x1819))))), ((x1821.value)*(((((-1.0)*x1817))+(((-1.0)*x1815))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1822=IKcos(j0);
IkReal x1823=IKsin(j0);
IkReal x1824=(cj5*r01);
IkReal x1825=(cj5*r11);
IkReal x1826=(r00*sj5);
IkReal x1827=(sj1*sj2);
IkReal x1828=((0.39225)*cj2);
IkReal x1829=((1.0)*cj2);
IkReal x1830=(r10*sj5);
IkReal x1831=((0.39225)*x1827);
IkReal x1832=(cj1*x1822);
IkReal x1833=(cj1*x1823);
evalcond[0]=(((x1822*x1827))+x1824+x1826+(((-1.0)*x1829*x1832)));
evalcond[1]=(((x1823*x1827))+x1825+x1830+(((-1.0)*x1829*x1833)));
evalcond[2]=((((-0.09465)*x1824))+(((-0.09465)*x1826))+(((-1.0)*px))+(((-0.10915)*x1823))+(((-1.0)*x1822*x1831))+((x1828*x1832))+(((0.425)*x1832)));
evalcond[3]=((((-0.09465)*x1825))+(((0.10915)*x1822))+(((-1.0)*py))+(((-1.0)*x1823*x1831))+(((-0.09465)*x1830))+((x1828*x1833))+(((0.425)*x1833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1834=((1.0)*cj5);
IkReal x1835=((((-1.0)*r01*x1834))+(((-1.0)*r00*sj5)));
j4eval[0]=x1835;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1834))))));
j4eval[2]=IKsign(x1835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1836=((1.0)*cj5);
IkReal x1837=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1836)));
j4eval[0]=x1837;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1836))))));
j4eval[2]=IKsign(x1837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1838=((1.0)*sj0);
IkReal x1839=((1.0)*cj0);
IkReal x1840=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1840;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1838))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1839)))))+(IKabs(((((-1.0)*r02*x1839))+(((-1.0)*r12*x1838))))));
j4eval[2]=IKsign(x1840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1841=((-1.0)*r20);
IkReal x1843 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1843)==0){
continue;
}
IkReal x1842=pow(x1843,-0.5);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1841),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1844.value));
IkReal gconst79=(r21*x1842);
IkReal gconst80=(x1841*x1842);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1845.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1846=((-1.0)*r20);
IkReal x1847=x1842;
CheckValue<IkReal> x1849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1846),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
IkReal x1848=((-1.0)*(x1849.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1848;
IkReal gconst78=x1848;
IkReal gconst79=(r21*x1847);
IkReal gconst80=(x1846*x1847);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1850=((-1.0)*r20);
IkReal x1851=x1842;
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1850),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal x1852=((-1.0)*(x1853.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1852;
IkReal gconst78=x1852;
IkReal gconst79=(r21*x1851);
IkReal gconst80=(x1850*x1851);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1854=((-1.0)*r20);
IkReal x1855=x1842;
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1854),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
IkReal x1856=((-1.0)*(x1857.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1856;
IkReal gconst78=x1856;
IkReal gconst79=(r21*x1855);
IkReal gconst80=(x1854*x1855);
IkReal x1858=r22*r22;
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1858))),-1);
if(!x1861.valid){
continue;
}
IkReal x1859=x1861.value;
IkReal x1860=((((2.0)*x1859*(r20*r20)*(r21*r21)))+((x1859*(r21*r21*r21*r21)))+x1858+((x1859*(r20*r20*r20*r20))));
j4eval[0]=x1860;
j4eval[1]=IKsign(x1860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1862=(sj1*sj2);
IkReal x1863=(gconst80*r20);
IkReal x1864=(gconst79*r21);
IkReal x1865=(cj1*cj2);
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1863*x1863)+(((-2.0)*x1863*x1864))+(x1864*x1864))),-1);
if(!x1866.valid){
continue;
}
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal((((r22*x1862))+(((-1.0)*r22*x1865)))),IkReal(((((-1.0)*x1864*x1865))+((x1862*x1864))+((x1863*x1865))+(((-1.0)*x1862*x1863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1866.value)))+(x1867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1868=IKsin(j4);
IkReal x1869=IKcos(j4);
IkReal x1870=(gconst79*r01);
IkReal x1871=(gconst79*r21);
IkReal x1872=((1.0)*cj2);
IkReal x1873=(gconst79*r11);
IkReal x1874=((1.0)*sj0);
IkReal x1875=(cj1*sj2);
IkReal x1876=((1.0)*x1869);
IkReal x1877=(gconst80*x1869);
IkReal x1878=((1.0)*x1868);
IkReal x1879=(gconst80*x1878);
evalcond[0]=((((-1.0)*r22*x1876))+((x1868*x1871))+(((-1.0)*r20*x1879)));
evalcond[1]=(cj0+(((-1.0)*r10*x1879))+(((-1.0)*r12*x1876))+((x1868*x1873)));
evalcond[2]=((((-1.0)*x1874))+(((-1.0)*r02*x1876))+(((-1.0)*r00*x1879))+((x1868*x1870)));
evalcond[3]=((((-1.0)*r22*x1878))+((sj1*sj2))+((r20*x1877))+(((-1.0)*cj1*x1872))+(((-1.0)*x1871*x1876)));
evalcond[4]=((((-1.0)*cj0*x1875))+(((-1.0)*r02*x1878))+(((-1.0)*x1870*x1876))+(((-1.0)*cj0*sj1*x1872))+((r00*x1877)));
evalcond[5]=((((-1.0)*x1873*x1876))+(((-1.0)*x1874*x1875))+(((-1.0)*sj0*sj1*x1872))+(((-1.0)*r12*x1878))+((r10*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1880=((1.0)*gconst80);
CheckValue<IkReal> x1881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1880))+(((-1.0)*gconst79*r10)))),-1);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1880))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1881.value)))+(x1882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1883=IKsin(j4);
IkReal x1884=IKcos(j4);
IkReal x1885=(gconst79*r01);
IkReal x1886=(gconst79*r21);
IkReal x1887=((1.0)*cj2);
IkReal x1888=(gconst79*r11);
IkReal x1889=((1.0)*sj0);
IkReal x1890=(cj1*sj2);
IkReal x1891=((1.0)*x1884);
IkReal x1892=(gconst80*x1884);
IkReal x1893=((1.0)*x1883);
IkReal x1894=(gconst80*x1893);
evalcond[0]=(((x1883*x1886))+(((-1.0)*r22*x1891))+(((-1.0)*r20*x1894)));
evalcond[1]=(cj0+((x1883*x1888))+(((-1.0)*r10*x1894))+(((-1.0)*r12*x1891)));
evalcond[2]=((((-1.0)*r02*x1891))+((x1883*x1885))+(((-1.0)*r00*x1894))+(((-1.0)*x1889)));
evalcond[3]=(((r20*x1892))+(((-1.0)*cj1*x1887))+((sj1*sj2))+(((-1.0)*r22*x1893))+(((-1.0)*x1886*x1891)));
evalcond[4]=((((-1.0)*r02*x1893))+(((-1.0)*cj0*sj1*x1887))+((r00*x1892))+(((-1.0)*x1885*x1891))+(((-1.0)*cj0*x1890)));
evalcond[5]=((((-1.0)*sj0*sj1*x1887))+((r10*x1892))+(((-1.0)*x1888*x1891))+(((-1.0)*x1889*x1890))+(((-1.0)*r12*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1895=((1.0)*gconst80);
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1895)))),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1895))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1898=IKsin(j4);
IkReal x1899=IKcos(j4);
IkReal x1900=(gconst79*r01);
IkReal x1901=(gconst79*r21);
IkReal x1902=((1.0)*cj2);
IkReal x1903=(gconst79*r11);
IkReal x1904=((1.0)*sj0);
IkReal x1905=(cj1*sj2);
IkReal x1906=((1.0)*x1899);
IkReal x1907=(gconst80*x1899);
IkReal x1908=((1.0)*x1898);
IkReal x1909=(gconst80*x1908);
evalcond[0]=((((-1.0)*r22*x1906))+((x1898*x1901))+(((-1.0)*r20*x1909)));
evalcond[1]=(cj0+((x1898*x1903))+(((-1.0)*r10*x1909))+(((-1.0)*r12*x1906)));
evalcond[2]=(((x1898*x1900))+(((-1.0)*r02*x1906))+(((-1.0)*x1904))+(((-1.0)*r00*x1909)));
evalcond[3]=((((-1.0)*x1901*x1906))+(((-1.0)*cj1*x1902))+(((-1.0)*r22*x1908))+((sj1*sj2))+((r20*x1907)));
evalcond[4]=(((r00*x1907))+(((-1.0)*x1900*x1906))+(((-1.0)*cj0*x1905))+(((-1.0)*cj0*sj1*x1902))+(((-1.0)*r02*x1908)));
evalcond[5]=((((-1.0)*x1903*x1906))+(((-1.0)*x1904*x1905))+(((-1.0)*r12*x1908))+(((-1.0)*sj0*sj1*x1902))+((r10*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1910=((-1.0)*r21);
IkReal x1912 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1912)==0){
continue;
}
IkReal x1911=pow(x1912,-0.5);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(x1910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1913.value))));
IkReal gconst82=(x1910*x1911);
IkReal gconst83=((1.0)*r20*x1911);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1914.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1915=((-1.0)*r21);
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal(x1915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
IkReal x1916=((1.0)*(x1918.value));
IkReal x1917=x1911;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1916)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1916)));
IkReal gconst82=(x1915*x1917);
IkReal gconst83=((1.0)*r20*x1917);
IkReal x1919=r22*r22;
IkReal x1920=((1.0)*x1919);
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(((-1.0)+x1919),-1);
if(!x1924.valid){
continue;
}
IkReal x1921=x1924.value;
if((((1.0)+(((-1.0)*x1920)))) < -0.00001)
continue;
IkReal x1922=IKsqrt(((1.0)+(((-1.0)*x1920))));
IkReal x1923=(cj0*x1921*x1922);
j4eval[0]=((IKabs((x1923+(((-1.0)*x1920*x1923)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1925=((-1.0)*r21);
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(x1925),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
IkReal x1926=((1.0)*(x1928.value));
IkReal x1927=x1911;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1926)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1926)));
IkReal gconst82=(x1925*x1927);
IkReal gconst83=((1.0)*r20*x1927);
IkReal x1929=r22*r22;
IkReal x1930=((1.0)*x1929);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(((-1.0)+x1929),-1);
if(!x1934.valid){
continue;
}
IkReal x1931=x1934.value;
if((((1.0)+(((-1.0)*x1930)))) < -0.00001)
continue;
IkReal x1932=IKsqrt(((1.0)+(((-1.0)*x1930))));
IkReal x1933=(sj0*x1931*x1932);
j4eval[0]=((IKabs(((((-1.0)*x1930*x1933))+x1933)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1935=((-1.0)*r21);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(x1935),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
IkReal x1936=((1.0)*(x1938.value));
IkReal x1937=x1911;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1936)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1936)));
IkReal gconst82=(x1935*x1937);
IkReal gconst83=((1.0)*r20*x1937);
IkReal x1939=r22*r22;
IkReal x1940=(r12*sj0);
IkReal x1941=(cj0*r02);
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(((-1.0)+x1939),-1);
if(!x1945.valid){
continue;
}
IkReal x1942=x1945.value;
if((((1.0)+(((-1.0)*x1939)))) < -0.00001)
continue;
IkReal x1943=IKsqrt(((1.0)+(((-1.0)*x1939))));
IkReal x1944=(r22*x1942*x1943);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1940))+(((-1.0)*x1941)))))+(IKabs((((x1940*x1944))+((x1941*x1944))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1946=((1.0)*sj0);
IkReal x1947=((1.0)*cj0);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1948.valid){
continue;
}
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1947))+(((-1.0)*r12*x1946)))),IkReal(((((-1.0)*gconst82*r01*x1947))+(((-1.0)*gconst82*r11*x1946))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1948.value)))+(x1949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1950=IKsin(j4);
IkReal x1951=IKcos(j4);
IkReal x1952=(gconst82*r11);
IkReal x1953=((1.0)*cj2);
IkReal x1954=((1.0)*sj0);
IkReal x1955=(cj1*sj2);
IkReal x1956=((1.0)*x1951);
IkReal x1957=(gconst83*x1951);
IkReal x1958=(gconst82*x1950);
IkReal x1959=((1.0)*x1950);
evalcond[0]=((((-1.0)*r22*x1956))+((r21*x1958))+(((-1.0)*gconst83*r20*x1959)));
evalcond[1]=(cj0+((x1950*x1952))+(((-1.0)*gconst83*r10*x1959))+(((-1.0)*r12*x1956)));
evalcond[2]=((((-1.0)*x1954))+(((-1.0)*r02*x1956))+((r01*x1958))+(((-1.0)*gconst83*r00*x1959)));
evalcond[3]=((((-1.0)*r22*x1959))+((r20*x1957))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1956))+(((-1.0)*cj1*x1953)));
evalcond[4]=((((-1.0)*cj0*sj1*x1953))+(((-1.0)*cj0*x1955))+(((-1.0)*r02*x1959))+(((-1.0)*gconst82*r01*x1956))+((r00*x1957)));
evalcond[5]=((((-1.0)*x1952*x1956))+(((-1.0)*x1954*x1955))+((r10*x1957))+(((-1.0)*r12*x1959))+(((-1.0)*sj0*sj1*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1960=((1.0)*gconst83);
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1960)))),-1);
if(!x1961.valid){
continue;
}
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1961.value)))+(x1962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1963=IKsin(j4);
IkReal x1964=IKcos(j4);
IkReal x1965=(gconst82*r11);
IkReal x1966=((1.0)*cj2);
IkReal x1967=((1.0)*sj0);
IkReal x1968=(cj1*sj2);
IkReal x1969=((1.0)*x1964);
IkReal x1970=(gconst83*x1964);
IkReal x1971=(gconst82*x1963);
IkReal x1972=((1.0)*x1963);
evalcond[0]=((((-1.0)*r22*x1969))+((r21*x1971))+(((-1.0)*gconst83*r20*x1972)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1972))+(((-1.0)*r12*x1969))+((x1963*x1965)));
evalcond[2]=((((-1.0)*r02*x1969))+(((-1.0)*x1967))+((r01*x1971))+(((-1.0)*gconst83*r00*x1972)));
evalcond[3]=(((r20*x1970))+(((-1.0)*r22*x1972))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1969))+(((-1.0)*cj1*x1966)));
evalcond[4]=((((-1.0)*cj0*x1968))+(((-1.0)*cj0*sj1*x1966))+(((-1.0)*r02*x1972))+((r00*x1970))+(((-1.0)*gconst82*r01*x1969)));
evalcond[5]=((((-1.0)*sj0*sj1*x1966))+((r10*x1970))+(((-1.0)*x1965*x1969))+(((-1.0)*r12*x1972))+(((-1.0)*x1967*x1968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1973=((1.0)*gconst83);
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1973))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
CheckValue<IkReal> x1975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1973))+(((-1.0)*gconst82*r00)))),-1);
if(!x1975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1974.value)+(((1.5707963267949)*(x1975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1976=IKsin(j4);
IkReal x1977=IKcos(j4);
IkReal x1978=(gconst82*r11);
IkReal x1979=((1.0)*cj2);
IkReal x1980=((1.0)*sj0);
IkReal x1981=(cj1*sj2);
IkReal x1982=((1.0)*x1977);
IkReal x1983=(gconst83*x1977);
IkReal x1984=(gconst82*x1976);
IkReal x1985=((1.0)*x1976);
evalcond[0]=(((r21*x1984))+(((-1.0)*gconst83*r20*x1985))+(((-1.0)*r22*x1982)));
evalcond[1]=(cj0+((x1976*x1978))+(((-1.0)*r12*x1982))+(((-1.0)*gconst83*r10*x1985)));
evalcond[2]=((((-1.0)*x1980))+(((-1.0)*r02*x1982))+(((-1.0)*gconst83*r00*x1985))+((r01*x1984)));
evalcond[3]=((((-1.0)*gconst82*r21*x1982))+((sj1*sj2))+(((-1.0)*cj1*x1979))+(((-1.0)*r22*x1985))+((r20*x1983)));
evalcond[4]=((((-1.0)*cj0*sj1*x1979))+(((-1.0)*r02*x1985))+(((-1.0)*gconst82*r01*x1982))+((r00*x1983))+(((-1.0)*cj0*x1981)));
evalcond[5]=((((-1.0)*x1980*x1981))+(((-1.0)*sj0*sj1*x1979))+((r10*x1983))+(((-1.0)*r12*x1985))+(((-1.0)*x1978*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1986=((-1.0)*r10);
IkReal x1988 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1988)==0){
continue;
}
IkReal x1987=pow(x1988,-0.5);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1986),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1989.value));
IkReal gconst85=(r11*x1987);
IkReal gconst86=(x1986*x1987);
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1990.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1991=((-1.0)*r10);
IkReal x1992=x1987;
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1991),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
IkReal x1993=((-1.0)*(x1994.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1993;
IkReal gconst84=x1993;
IkReal gconst85=(r11*x1992);
IkReal gconst86=(x1991*x1992);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1995=((1.0)*sj0);
IkReal x1996=((1.0)*gconst85);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1995)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1996))+(((-1.0)*gconst85*r11*x1995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1996)))),-1);
if(!x1998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1997.value)+(((1.5707963267949)*(x1998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1999=IKsin(j4);
IkReal x2000=IKcos(j4);
IkReal x2001=(gconst85*r21);
IkReal x2002=(gconst86*r00);
IkReal x2003=(gconst86*r10);
IkReal x2004=((1.0)*cj2);
IkReal x2005=(gconst85*r11);
IkReal x2006=(gconst85*r01);
IkReal x2007=((1.0)*sj0);
IkReal x2008=(gconst86*r20);
IkReal x2009=(cj1*sj2);
IkReal x2010=((1.0)*x2000);
IkReal x2011=((1.0)*x1999);
evalcond[0]=((((-1.0)*x2008*x2011))+((x1999*x2001))+(((-1.0)*r22*x2010)));
evalcond[1]=(cj0+((x1999*x2005))+(((-1.0)*x2003*x2011))+(((-1.0)*r12*x2010)));
evalcond[2]=(((x1999*x2006))+(((-1.0)*x2002*x2011))+(((-1.0)*x2007))+(((-1.0)*r02*x2010)));
evalcond[3]=(((x2000*x2008))+((sj1*sj2))+(((-1.0)*cj1*x2004))+(((-1.0)*x2001*x2010))+(((-1.0)*r22*x2011)));
evalcond[4]=(((x2000*x2002))+(((-1.0)*x2006*x2010))+(((-1.0)*cj0*x2009))+(((-1.0)*r02*x2011))+(((-1.0)*cj0*sj1*x2004)));
evalcond[5]=(((x2000*x2003))+(((-1.0)*x2007*x2009))+(((-1.0)*x2005*x2010))+(((-1.0)*sj0*sj1*x2004))+(((-1.0)*r12*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2012=((1.0)*gconst86);
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2012)))),-1);
if(!x2013.valid){
continue;
}
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2012))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2013.value)))+(x2014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2015=IKsin(j4);
IkReal x2016=IKcos(j4);
IkReal x2017=(gconst85*r21);
IkReal x2018=(gconst86*r00);
IkReal x2019=(gconst86*r10);
IkReal x2020=((1.0)*cj2);
IkReal x2021=(gconst85*r11);
IkReal x2022=(gconst85*r01);
IkReal x2023=((1.0)*sj0);
IkReal x2024=(gconst86*r20);
IkReal x2025=(cj1*sj2);
IkReal x2026=((1.0)*x2016);
IkReal x2027=((1.0)*x2015);
evalcond[0]=(((x2015*x2017))+(((-1.0)*r22*x2026))+(((-1.0)*x2024*x2027)));
evalcond[1]=(cj0+(((-1.0)*r12*x2026))+(((-1.0)*x2019*x2027))+((x2015*x2021)));
evalcond[2]=((((-1.0)*r02*x2026))+(((-1.0)*x2018*x2027))+(((-1.0)*x2023))+((x2015*x2022)));
evalcond[3]=((((-1.0)*r22*x2027))+(((-1.0)*cj1*x2020))+((sj1*sj2))+(((-1.0)*x2017*x2026))+((x2016*x2024)));
evalcond[4]=((((-1.0)*cj0*sj1*x2020))+(((-1.0)*x2022*x2026))+((x2016*x2018))+(((-1.0)*r02*x2027))+(((-1.0)*cj0*x2025)));
evalcond[5]=((((-1.0)*x2021*x2026))+(((-1.0)*x2023*x2025))+((x2016*x2019))+(((-1.0)*r12*x2027))+(((-1.0)*sj0*sj1*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2028=((-1.0)*r11);
IkReal x2030 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2030)==0){
continue;
}
IkReal x2029=pow(x2030,-0.5);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(x2028),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2031.value))));
IkReal gconst88=(x2028*x2029);
IkReal gconst89=((1.0)*r10*x2029);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2032.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2033=((-1.0)*r11);
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(x2033),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
IkReal x2034=((1.0)*(x2036.value));
IkReal x2035=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2034)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2034)));
IkReal gconst88=(x2033*x2035);
IkReal gconst89=((1.0)*r10*x2035);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2037=((-1.0)*r11);
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(x2037),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
IkReal x2038=((1.0)*(x2040.value));
IkReal x2039=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2038)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2038)));
IkReal gconst88=(x2037*x2039);
IkReal gconst89=((1.0)*r10*x2039);
IkReal x2041=r12*r12;
IkReal x2042=((1.0)*sj0);
IkReal x2043=(cj0*r02);
IkReal x2044=x2029;
j4eval[0]=((IKabs((((sj0*x2041*x2044))+((r12*x2043*x2044))+(((-1.0)*x2042*x2044)))))+(IKabs(((((-1.0)*x2043))+(((-1.0)*r12*x2042))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2045=((-1.0)*r11);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(x2045),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
IkReal x2046=((1.0)*(x2048.value));
IkReal x2047=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2046)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2046)));
IkReal gconst88=(x2045*x2047);
IkReal gconst89=((1.0)*r10*x2047);
IkReal x2049=r12*r12;
IkReal x2050=(cj1*cj2*r22);
IkReal x2051=(r22*sj1*sj2);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(((-1.0)+x2049),-1);
if(!x2055.valid){
continue;
}
IkReal x2052=x2055.value;
if((((1.0)+(((-1.0)*x2049)))) < -0.00001)
continue;
IkReal x2053=IKsqrt(((1.0)+(((-1.0)*x2049))));
IkReal x2054=(r12*x2052*x2053);
j4eval[0]=((IKabs((x2051+(((-1.0)*x2050)))))+(IKabs(((((-1.0)*x2051*x2054))+((x2050*x2054))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2056=(cj1*cj2);
IkReal x2057=(gconst89*r20);
IkReal x2058=(gconst88*r21);
IkReal x2059=(sj1*sj2);
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(IKsign(((x2058*x2058)+(r22*r22)+(((-2.0)*x2057*x2058))+(x2057*x2057))),-1);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal((((r22*x2059))+(((-1.0)*r22*x2056)))),IkReal(((((-1.0)*x2057*x2059))+(((-1.0)*x2056*x2058))+((x2056*x2057))+((x2058*x2059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2060.value)))+(x2061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=((1.0)*sj0);
IkReal x2065=((1.0)*cj2);
IkReal x2066=(gconst89*r20);
IkReal x2067=(gconst89*r10);
IkReal x2068=(gconst89*r00);
IkReal x2069=(cj1*sj2);
IkReal x2070=((1.0)*x2063);
IkReal x2071=((1.0)*x2062);
IkReal x2072=(gconst88*x2062);
evalcond[0]=((((-1.0)*r22*x2070))+(((-1.0)*x2066*x2071))+((r21*x2072)));
evalcond[1]=(cj0+(((-1.0)*r12*x2070))+((r11*x2072))+(((-1.0)*x2067*x2071)));
evalcond[2]=((((-1.0)*r02*x2070))+(((-1.0)*x2064))+((r01*x2072))+(((-1.0)*x2068*x2071)));
evalcond[3]=((((-1.0)*gconst88*r21*x2070))+(((-1.0)*r22*x2071))+((sj1*sj2))+(((-1.0)*cj1*x2065))+((x2063*x2066)));
evalcond[4]=((((-1.0)*cj0*x2069))+(((-1.0)*r02*x2071))+(((-1.0)*cj0*sj1*x2065))+((x2063*x2068))+(((-1.0)*gconst88*r01*x2070)));
evalcond[5]=((((-1.0)*r12*x2071))+(((-1.0)*x2064*x2069))+(((-1.0)*gconst88*r11*x2070))+((x2063*x2067))+(((-1.0)*cj2*sj1*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2073=((1.0)*sj0);
IkReal x2074=((1.0)*cj0);
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2074))+(((-1.0)*r12*x2073)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2073))+(((-1.0)*gconst88*r01*x2074))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2075.value)+(((1.5707963267949)*(x2076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=((1.0)*sj0);
IkReal x2080=((1.0)*cj2);
IkReal x2081=(gconst89*r20);
IkReal x2082=(gconst89*r10);
IkReal x2083=(gconst89*r00);
IkReal x2084=(cj1*sj2);
IkReal x2085=((1.0)*x2078);
IkReal x2086=((1.0)*x2077);
IkReal x2087=(gconst88*x2077);
evalcond[0]=((((-1.0)*r22*x2085))+(((-1.0)*x2081*x2086))+((r21*x2087)));
evalcond[1]=(cj0+(((-1.0)*x2082*x2086))+(((-1.0)*r12*x2085))+((r11*x2087)));
evalcond[2]=((((-1.0)*r02*x2085))+(((-1.0)*x2079))+(((-1.0)*x2083*x2086))+((r01*x2087)));
evalcond[3]=((((-1.0)*cj1*x2080))+(((-1.0)*r22*x2086))+((x2078*x2081))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2085)));
evalcond[4]=((((-1.0)*r02*x2086))+(((-1.0)*cj0*sj1*x2080))+((x2078*x2083))+(((-1.0)*gconst88*r01*x2085))+(((-1.0)*cj0*x2084)));
evalcond[5]=(((x2078*x2082))+(((-1.0)*gconst88*r11*x2085))+(((-1.0)*r12*x2086))+(((-1.0)*x2079*x2084))+(((-1.0)*cj2*sj1*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2088=((1.0)*gconst89);
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2088))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2088))+(((-1.0)*gconst88*r00)))),-1);
if(!x2090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2089.value)+(((1.5707963267949)*(x2090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2091=IKsin(j4);
IkReal x2092=IKcos(j4);
IkReal x2093=((1.0)*sj0);
IkReal x2094=((1.0)*cj2);
IkReal x2095=(gconst89*r20);
IkReal x2096=(gconst89*r10);
IkReal x2097=(gconst89*r00);
IkReal x2098=(cj1*sj2);
IkReal x2099=((1.0)*x2092);
IkReal x2100=((1.0)*x2091);
IkReal x2101=(gconst88*x2091);
evalcond[0]=(((r21*x2101))+(((-1.0)*x2095*x2100))+(((-1.0)*r22*x2099)));
evalcond[1]=(cj0+((r11*x2101))+(((-1.0)*x2096*x2100))+(((-1.0)*r12*x2099)));
evalcond[2]=((((-1.0)*x2093))+(((-1.0)*x2097*x2100))+((r01*x2101))+(((-1.0)*r02*x2099)));
evalcond[3]=((((-1.0)*r22*x2100))+(((-1.0)*gconst88*r21*x2099))+((sj1*sj2))+((x2092*x2095))+(((-1.0)*cj1*x2094)));
evalcond[4]=((((-1.0)*r02*x2100))+(((-1.0)*gconst88*r01*x2099))+(((-1.0)*cj0*sj1*x2094))+((x2092*x2097))+(((-1.0)*cj0*x2098)));
evalcond[5]=((((-1.0)*cj2*sj1*x2093))+(((-1.0)*gconst88*r11*x2099))+(((-1.0)*r12*x2100))+(((-1.0)*x2093*x2098))+((x2092*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2102=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2102;
j4eval[1]=IKsign(x2102);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2103=((1.0)*cj5);
IkReal x2104=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2103)));
j4eval[0]=x2104;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2103))))));
j4eval[2]=IKsign(x2104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2105=cj5*cj5;
IkReal x2106=r11*r11;
IkReal x2107=(r11*sj5);
IkReal x2108=(cj5*r10);
IkReal x2109=((r12*r12)+x2106+(((-1.0)*x2105*x2106))+(((-2.0)*x2107*x2108))+((x2105*(r10*r10))));
j4eval[0]=x2109;
j4eval[1]=IKsign(x2109);
j4eval[2]=((IKabs(r12))+(IKabs((x2108+(((-1.0)*x2107))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2110=cj5*cj5;
IkReal x2111=r11*r11;
IkReal x2112=(cj5*r10);
IkReal x2113=(r11*sj5);
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal((x2112+(((-1.0)*x2113)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
CheckValue<IkReal> x2115=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2110*x2111))+x2111+(((-2.0)*x2112*x2113))+((x2110*(r10*r10))))),-1);
if(!x2115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2114.value)+(((1.5707963267949)*(x2115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2116=IKsin(j4);
IkReal x2117=IKcos(j4);
IkReal x2118=(cj5*r10);
IkReal x2119=(r01*sj5);
IkReal x2120=((1.0)*cj2);
IkReal x2121=(cj5*r00);
IkReal x2122=(cj5*r20);
IkReal x2123=((1.0)*x2117);
IkReal x2124=((1.0)*x2116);
IkReal x2125=(sj5*x2116);
evalcond[0]=((((-1.0)*x2122*x2124))+(((-1.0)*r22*x2123))+((r21*x2125)));
evalcond[1]=(((x2116*x2119))+(((-1.0)*r02*x2123))+(((-1.0)*x2121*x2124)));
evalcond[2]=(((x2117*x2118))+(((-1.0)*r12*x2124))+(((-1.0)*r11*sj5*x2123)));
evalcond[3]=((1.0)+(((-1.0)*x2118*x2124))+((r11*x2125))+(((-1.0)*r12*x2123)));
evalcond[4]=((((-1.0)*r22*x2124))+((sj1*sj2))+(((-1.0)*cj1*x2120))+((x2117*x2122))+(((-1.0)*r21*sj5*x2123)));
evalcond[5]=((((-1.0)*x2119*x2123))+(((-1.0)*r02*x2124))+(((-1.0)*cj1*sj2))+((x2117*x2121))+(((-1.0)*sj1*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2126=((1.0)*cj5);
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
CheckValue<IkReal> x2128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2126))+(((-1.0)*r00*sj5)))),-1);
if(!x2128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2127.value)+(((1.5707963267949)*(x2128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2129=IKsin(j4);
IkReal x2130=IKcos(j4);
IkReal x2131=(cj5*r10);
IkReal x2132=(r01*sj5);
IkReal x2133=((1.0)*cj2);
IkReal x2134=(cj5*r00);
IkReal x2135=(cj5*r20);
IkReal x2136=((1.0)*x2130);
IkReal x2137=((1.0)*x2129);
IkReal x2138=(sj5*x2129);
evalcond[0]=((((-1.0)*r22*x2136))+((r21*x2138))+(((-1.0)*x2135*x2137)));
evalcond[1]=((((-1.0)*x2134*x2137))+((x2129*x2132))+(((-1.0)*r02*x2136)));
evalcond[2]=((((-1.0)*r12*x2137))+(((-1.0)*r11*sj5*x2136))+((x2130*x2131)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2136))+((r11*x2138))+(((-1.0)*x2131*x2137)));
evalcond[4]=((((-1.0)*r22*x2137))+((sj1*sj2))+(((-1.0)*cj1*x2133))+(((-1.0)*r21*sj5*x2136))+((x2130*x2135)));
evalcond[5]=((((-1.0)*sj1*x2133))+(((-1.0)*cj1*sj2))+(((-1.0)*x2132*x2136))+((x2130*x2134))+(((-1.0)*r02*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2139.value)))+(x2140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2141=IKsin(j4);
IkReal x2142=IKcos(j4);
IkReal x2143=(cj5*r10);
IkReal x2144=(r01*sj5);
IkReal x2145=((1.0)*cj2);
IkReal x2146=(cj5*r00);
IkReal x2147=(cj5*r20);
IkReal x2148=((1.0)*x2142);
IkReal x2149=((1.0)*x2141);
IkReal x2150=(sj5*x2141);
evalcond[0]=((((-1.0)*r22*x2148))+((r21*x2150))+(((-1.0)*x2147*x2149)));
evalcond[1]=((((-1.0)*r02*x2148))+((x2141*x2144))+(((-1.0)*x2146*x2149)));
evalcond[2]=((((-1.0)*r11*sj5*x2148))+((x2142*x2143))+(((-1.0)*r12*x2149)));
evalcond[3]=((1.0)+(((-1.0)*x2143*x2149))+(((-1.0)*r12*x2148))+((r11*x2150)));
evalcond[4]=(((sj1*sj2))+((x2142*x2147))+(((-1.0)*r22*x2149))+(((-1.0)*cj1*x2145))+(((-1.0)*r21*sj5*x2148)));
evalcond[5]=((((-1.0)*x2144*x2148))+(((-1.0)*r02*x2149))+(((-1.0)*sj1*x2145))+(((-1.0)*cj1*sj2))+((x2142*x2146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2151=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2151;
j4eval[1]=IKsign(x2151);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2152=((1.0)*cj5);
IkReal x2153=((((-1.0)*r21*x2152))+(((-1.0)*r20*sj5)));
j4eval[0]=x2153;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2152))+((r01*sj5))))));
j4eval[2]=IKsign(x2153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2154=cj5*cj5;
IkReal x2155=r11*r11;
IkReal x2156=(cj5*r10);
IkReal x2157=(r11*sj5);
IkReal x2158=((((-1.0)*x2154*(r10*r10)))+((x2154*x2155))+(((-1.0)*(r12*r12)))+(((2.0)*x2156*x2157))+(((-1.0)*x2155)));
j4eval[0]=x2158;
j4eval[1]=((IKabs(r12))+(IKabs((x2156+(((-1.0)*x2157))))));
j4eval[2]=IKsign(x2158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2159=cj5*cj5;
IkReal x2160=r11*r11;
IkReal x2161=(cj5*r10);
IkReal x2162=(r11*sj5);
CheckValue<IkReal> x2163=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2159*(r10*r10)))+(((2.0)*x2161*x2162))+(((-1.0)*(r12*r12)))+(((-1.0)*x2160))+((x2159*x2160)))),-1);
if(!x2163.valid){
continue;
}
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal((x2161+(((-1.0)*x2162)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2163.value)))+(x2164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2165=IKsin(j4);
IkReal x2166=IKcos(j4);
IkReal x2167=(cj5*r10);
IkReal x2168=(r01*sj5);
IkReal x2169=(cj5*r00);
IkReal x2170=(cj5*r20);
IkReal x2171=((1.0)*x2166);
IkReal x2172=((1.0)*x2165);
IkReal x2173=(sj5*x2165);
evalcond[0]=((((-1.0)*x2170*x2172))+((r21*x2173))+(((-1.0)*r22*x2171)));
evalcond[1]=((((-1.0)*x2169*x2172))+((x2165*x2168))+(((-1.0)*r02*x2171)));
evalcond[2]=(((x2166*x2167))+(((-1.0)*r11*sj5*x2171))+(((-1.0)*r12*x2172)));
evalcond[3]=((-1.0)+((r11*x2173))+(((-1.0)*r12*x2171))+(((-1.0)*x2167*x2172)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2168*x2171))+((cj1*sj2))+((x2166*x2169))+(((-1.0)*r02*x2172)));
evalcond[5]=((((-1.0)*r21*sj5*x2171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2166*x2170))+(((-1.0)*r22*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2174=((1.0)*cj5);
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2174))+(((-1.0)*r20*sj5)))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2175.value)))+(x2176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(cj5*r10);
IkReal x2180=(r01*sj5);
IkReal x2181=(cj5*r00);
IkReal x2182=(cj5*r20);
IkReal x2183=((1.0)*x2178);
IkReal x2184=((1.0)*x2177);
IkReal x2185=(sj5*x2177);
evalcond[0]=(((r21*x2185))+(((-1.0)*r22*x2183))+(((-1.0)*x2182*x2184)));
evalcond[1]=(((x2177*x2180))+(((-1.0)*r02*x2183))+(((-1.0)*x2181*x2184)));
evalcond[2]=((((-1.0)*r11*sj5*x2183))+((x2178*x2179))+(((-1.0)*r12*x2184)));
evalcond[3]=((-1.0)+((r11*x2185))+(((-1.0)*x2179*x2184))+(((-1.0)*r12*x2183)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2180*x2183))+((cj1*sj2))+((x2178*x2181))+(((-1.0)*r02*x2184)));
evalcond[5]=((((-1.0)*r21*sj5*x2183))+((x2178*x2182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2186.value)+(((1.5707963267949)*(x2187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2188=IKsin(j4);
IkReal x2189=IKcos(j4);
IkReal x2190=(cj5*r10);
IkReal x2191=(r01*sj5);
IkReal x2192=(cj5*r00);
IkReal x2193=(cj5*r20);
IkReal x2194=((1.0)*x2189);
IkReal x2195=((1.0)*x2188);
IkReal x2196=(sj5*x2188);
evalcond[0]=((((-1.0)*x2193*x2195))+((r21*x2196))+(((-1.0)*r22*x2194)));
evalcond[1]=((((-1.0)*x2192*x2195))+(((-1.0)*r02*x2194))+((x2188*x2191)));
evalcond[2]=(((x2189*x2190))+(((-1.0)*r12*x2195))+(((-1.0)*r11*sj5*x2194)));
evalcond[3]=((-1.0)+((r11*x2196))+(((-1.0)*r12*x2194))+(((-1.0)*x2190*x2195)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2191*x2194))+((x2189*x2192))+(((-1.0)*r02*x2195)));
evalcond[5]=((((-1.0)*r21*sj5*x2194))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2189*x2193))+(((-1.0)*r22*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2197=((-1.0)*r00);
IkReal x2199 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2199)==0){
continue;
}
IkReal x2198=pow(x2199,-0.5);
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2197),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2200.value));
IkReal gconst91=(r01*x2198);
IkReal gconst92=(x2197*x2198);
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2201.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2202=((-1.0)*r00);
IkReal x2203=x2198;
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2202),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
IkReal x2204=((-1.0)*(x2205.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2204;
IkReal gconst90=x2204;
IkReal gconst91=(r01*x2203);
IkReal gconst92=(x2202*x2203);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2206=((1.0)*sj0);
IkReal x2207=((1.0)*cj0);
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2208.valid){
continue;
}
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2206))+(((-1.0)*r02*x2207)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2207))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2208.value)))+(x2209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2210=IKsin(j4);
IkReal x2211=IKcos(j4);
IkReal x2212=((1.0)*cj2);
IkReal x2213=(gconst92*r00);
IkReal x2214=(gconst92*r20);
IkReal x2215=((1.0)*sj0);
IkReal x2216=(gconst92*r10);
IkReal x2217=(cj1*sj2);
IkReal x2218=((1.0)*x2211);
IkReal x2219=(gconst91*x2210);
IkReal x2220=((1.0)*x2210);
evalcond[0]=((((-1.0)*r22*x2218))+((r21*x2219))+(((-1.0)*x2214*x2220)));
evalcond[1]=(cj0+(((-1.0)*r12*x2218))+((r11*x2219))+(((-1.0)*x2216*x2220)));
evalcond[2]=(((r01*x2219))+(((-1.0)*x2215))+(((-1.0)*r02*x2218))+(((-1.0)*x2213*x2220)));
evalcond[3]=((((-1.0)*cj1*x2212))+((sj1*sj2))+((x2211*x2214))+(((-1.0)*gconst91*r21*x2218))+(((-1.0)*r22*x2220)));
evalcond[4]=((((-1.0)*r02*x2220))+((x2211*x2213))+(((-1.0)*gconst91*r01*x2218))+(((-1.0)*cj0*sj1*x2212))+(((-1.0)*cj0*x2217)));
evalcond[5]=((((-1.0)*x2215*x2217))+((x2211*x2216))+(((-1.0)*r12*x2220))+(((-1.0)*gconst91*r11*x2218))+(((-1.0)*sj0*sj1*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2221=((1.0)*gconst92);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2221)))),-1);
if(!x2222.valid){
continue;
}
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2221))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2222.value)))+(x2223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2224=IKsin(j4);
IkReal x2225=IKcos(j4);
IkReal x2226=((1.0)*cj2);
IkReal x2227=(gconst92*r00);
IkReal x2228=(gconst92*r20);
IkReal x2229=((1.0)*sj0);
IkReal x2230=(gconst92*r10);
IkReal x2231=(cj1*sj2);
IkReal x2232=((1.0)*x2225);
IkReal x2233=(gconst91*x2224);
IkReal x2234=((1.0)*x2224);
evalcond[0]=(((r21*x2233))+(((-1.0)*x2228*x2234))+(((-1.0)*r22*x2232)));
evalcond[1]=(cj0+(((-1.0)*r12*x2232))+(((-1.0)*x2230*x2234))+((r11*x2233)));
evalcond[2]=((((-1.0)*x2227*x2234))+(((-1.0)*r02*x2232))+(((-1.0)*x2229))+((r01*x2233)));
evalcond[3]=(((x2225*x2228))+(((-1.0)*gconst91*r21*x2232))+((sj1*sj2))+(((-1.0)*r22*x2234))+(((-1.0)*cj1*x2226)));
evalcond[4]=(((x2225*x2227))+(((-1.0)*r02*x2234))+(((-1.0)*cj0*x2231))+(((-1.0)*gconst91*r01*x2232))+(((-1.0)*cj0*sj1*x2226)));
evalcond[5]=((((-1.0)*sj0*sj1*x2226))+((x2225*x2230))+(((-1.0)*x2229*x2231))+(((-1.0)*r12*x2234))+(((-1.0)*gconst91*r11*x2232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2235=((-1.0)*r01);
IkReal x2237 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2237)==0){
continue;
}
IkReal x2236=pow(x2237,-0.5);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(x2235),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2238.value))));
IkReal gconst94=(x2235*x2236);
IkReal gconst95=((1.0)*r00*x2236);
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2239.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2240=((-1.0)*r01);
CheckValue<IkReal> x2243 = IKatan2WithCheck(IkReal(x2240),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2243.valid){
continue;
}
IkReal x2241=((1.0)*(x2243.value));
IkReal x2242=x2236;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2241)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2241)));
IkReal gconst94=(x2240*x2242);
IkReal gconst95=((1.0)*r00*x2242);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2244=((-1.0)*r01);
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal(x2244),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
IkReal x2245=((1.0)*(x2247.value));
IkReal x2246=x2236;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2245)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2245)));
IkReal gconst94=(x2244*x2246);
IkReal gconst95=((1.0)*r00*x2246);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2248=((-1.0)*r01);
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal(x2248),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
IkReal x2249=((1.0)*(x2251.value));
IkReal x2250=x2236;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2249)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2249)));
IkReal gconst94=(x2248*x2250);
IkReal gconst95=((1.0)*r00*x2250);
IkReal x2252=r02*r02;
IkReal x2253=(r12*sj0);
IkReal x2254=((1.0)*cj0);
IkReal x2255=x2236;
j4eval[0]=((IKabs(((((-1.0)*x2253))+(((-1.0)*r02*x2254)))))+(IKabs((((r02*x2253*x2255))+((cj0*x2252*x2255))+(((-1.0)*x2254*x2255))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2256=((1.0)*sj0);
IkReal x2257=((1.0)*cj0);
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2257))+(((-1.0)*r12*x2256)))),IkReal(((((-1.0)*gconst94*r11*x2256))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2257))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2258.value)))+(x2259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(gconst94*r11);
IkReal x2263=((1.0)*cj2);
IkReal x2264=(gconst94*r21);
IkReal x2265=((1.0)*sj0);
IkReal x2266=(gconst94*r01);
IkReal x2267=(cj1*sj2);
IkReal x2268=((1.0)*x2261);
IkReal x2269=(gconst95*x2261);
IkReal x2270=((1.0)*x2260);
IkReal x2271=(gconst95*x2270);
evalcond[0]=(((x2260*x2264))+(((-1.0)*r20*x2271))+(((-1.0)*r22*x2268)));
evalcond[1]=(((x2260*x2262))+cj0+(((-1.0)*r10*x2271))+(((-1.0)*r12*x2268)));
evalcond[2]=(((x2260*x2266))+(((-1.0)*r00*x2271))+(((-1.0)*r02*x2268))+(((-1.0)*x2265)));
evalcond[3]=((((-1.0)*cj1*x2263))+((sj1*sj2))+(((-1.0)*r22*x2270))+((r20*x2269))+(((-1.0)*x2264*x2268)));
evalcond[4]=(((r00*x2269))+(((-1.0)*cj0*sj1*x2263))+(((-1.0)*r02*x2270))+(((-1.0)*cj0*x2267))+(((-1.0)*x2266*x2268)));
evalcond[5]=((((-1.0)*sj0*sj1*x2263))+((r10*x2269))+(((-1.0)*r12*x2270))+(((-1.0)*x2262*x2268))+(((-1.0)*x2265*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2272=((1.0)*gconst95);
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2272)))),-1);
if(!x2274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2273.value)+(((1.5707963267949)*(x2274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2275=IKsin(j4);
IkReal x2276=IKcos(j4);
IkReal x2277=(gconst94*r11);
IkReal x2278=((1.0)*cj2);
IkReal x2279=(gconst94*r21);
IkReal x2280=((1.0)*sj0);
IkReal x2281=(gconst94*r01);
IkReal x2282=(cj1*sj2);
IkReal x2283=((1.0)*x2276);
IkReal x2284=(gconst95*x2276);
IkReal x2285=((1.0)*x2275);
IkReal x2286=(gconst95*x2285);
evalcond[0]=((((-1.0)*r20*x2286))+(((-1.0)*r22*x2283))+((x2275*x2279)));
evalcond[1]=(cj0+(((-1.0)*r12*x2283))+(((-1.0)*r10*x2286))+((x2275*x2277)));
evalcond[2]=((((-1.0)*r02*x2283))+(((-1.0)*x2280))+((x2275*x2281))+(((-1.0)*r00*x2286)));
evalcond[3]=((((-1.0)*cj1*x2278))+((r20*x2284))+((sj1*sj2))+(((-1.0)*x2279*x2283))+(((-1.0)*r22*x2285)));
evalcond[4]=((((-1.0)*r02*x2285))+(((-1.0)*cj0*sj1*x2278))+(((-1.0)*cj0*x2282))+(((-1.0)*x2281*x2283))+((r00*x2284)));
evalcond[5]=((((-1.0)*x2280*x2282))+((r10*x2284))+(((-1.0)*x2277*x2283))+(((-1.0)*r12*x2285))+(((-1.0)*sj0*sj1*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2287=((1.0)*gconst95);
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2287)))),-1);
if(!x2289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2288.value)+(((1.5707963267949)*(x2289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2290=IKsin(j4);
IkReal x2291=IKcos(j4);
IkReal x2292=(gconst94*r11);
IkReal x2293=((1.0)*cj2);
IkReal x2294=(gconst94*r21);
IkReal x2295=((1.0)*sj0);
IkReal x2296=(gconst94*r01);
IkReal x2297=(cj1*sj2);
IkReal x2298=((1.0)*x2291);
IkReal x2299=(gconst95*x2291);
IkReal x2300=((1.0)*x2290);
IkReal x2301=(gconst95*x2300);
evalcond[0]=((((-1.0)*r20*x2301))+(((-1.0)*r22*x2298))+((x2290*x2294)));
evalcond[1]=((((-1.0)*r10*x2301))+cj0+(((-1.0)*r12*x2298))+((x2290*x2292)));
evalcond[2]=((((-1.0)*r00*x2301))+(((-1.0)*r02*x2298))+(((-1.0)*x2295))+((x2290*x2296)));
evalcond[3]=((((-1.0)*r22*x2300))+((sj1*sj2))+((r20*x2299))+(((-1.0)*cj1*x2293))+(((-1.0)*x2294*x2298)));
evalcond[4]=((((-1.0)*cj0*x2297))+(((-1.0)*x2296*x2298))+((r00*x2299))+(((-1.0)*cj0*sj1*x2293))+(((-1.0)*r02*x2300)));
evalcond[5]=(((r10*x2299))+(((-1.0)*x2292*x2298))+(((-1.0)*sj0*sj1*x2293))+(((-1.0)*x2295*x2297))+(((-1.0)*r12*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2302=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2302;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2303=((1.0)*cj5);
IkReal x2304=((((-1.0)*r11*x2303))+(((-1.0)*r10*sj5)));
j4eval[0]=x2304;
j4eval[1]=((IKabs(((((-1.0)*r20*x2303))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2305=cj5*cj5;
IkReal x2306=r01*r01;
IkReal x2307=(r01*sj5);
IkReal x2308=(cj5*r00);
IkReal x2309=(((x2305*x2306))+(((-1.0)*x2306))+(((-1.0)*(r02*r02)))+(((2.0)*x2307*x2308))+(((-1.0)*x2305*(r00*r00))));
j4eval[0]=x2309;
j4eval[1]=IKsign(x2309);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2307))+x2308))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2310=cj5*cj5;
IkReal x2311=r01*r01;
IkReal x2312=(r01*sj5);
IkReal x2313=(cj5*r00);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal(((((-1.0)*x2312))+x2313)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2311))+(((-1.0)*(r02*r02)))+(((-1.0)*x2310*(r00*r00)))+(((2.0)*x2312*x2313))+((x2310*x2311)))),-1);
if(!x2315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2316=IKsin(j4);
IkReal x2317=IKcos(j4);
IkReal x2318=(cj5*r10);
IkReal x2319=(r01*sj5);
IkReal x2320=((1.0)*cj2);
IkReal x2321=(cj5*r00);
IkReal x2322=(cj5*r20);
IkReal x2323=((1.0)*x2317);
IkReal x2324=((1.0)*x2316);
IkReal x2325=(sj5*x2316);
evalcond[0]=((((-1.0)*r22*x2323))+((r21*x2325))+(((-1.0)*x2322*x2324)));
evalcond[1]=((((-1.0)*x2318*x2324))+((r11*x2325))+(((-1.0)*r12*x2323)));
evalcond[2]=(((x2317*x2321))+(((-1.0)*x2319*x2323))+(((-1.0)*r02*x2324)));
evalcond[3]=((-1.0)+(((-1.0)*x2321*x2324))+((x2316*x2319))+(((-1.0)*r02*x2323)));
evalcond[4]=(((x2317*x2322))+(((-1.0)*r22*x2324))+((sj1*sj2))+(((-1.0)*cj1*x2320))+(((-1.0)*r21*sj5*x2323)));
evalcond[5]=(((x2317*x2318))+(((-1.0)*r11*sj5*x2323))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2324))+(((-1.0)*sj1*x2320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2326=((1.0)*cj5);
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2326)))),-1);
if(!x2328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2327.value)+(((1.5707963267949)*(x2328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2329=IKsin(j4);
IkReal x2330=IKcos(j4);
IkReal x2331=(cj5*r10);
IkReal x2332=(r01*sj5);
IkReal x2333=((1.0)*cj2);
IkReal x2334=(cj5*r00);
IkReal x2335=(cj5*r20);
IkReal x2336=((1.0)*x2330);
IkReal x2337=((1.0)*x2329);
IkReal x2338=(sj5*x2329);
evalcond[0]=(((r21*x2338))+(((-1.0)*r22*x2336))+(((-1.0)*x2335*x2337)));
evalcond[1]=((((-1.0)*x2331*x2337))+((r11*x2338))+(((-1.0)*r12*x2336)));
evalcond[2]=((((-1.0)*x2332*x2336))+(((-1.0)*r02*x2337))+((x2330*x2334)));
evalcond[3]=((-1.0)+((x2329*x2332))+(((-1.0)*r02*x2336))+(((-1.0)*x2334*x2337)));
evalcond[4]=((((-1.0)*r22*x2337))+((sj1*sj2))+(((-1.0)*cj1*x2333))+((x2330*x2335))+(((-1.0)*r21*sj5*x2336)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2336))+(((-1.0)*sj1*x2333))+(((-1.0)*r12*x2337))+((x2330*x2331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2339.valid){
continue;
}
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2339.value)))+(x2340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2341=IKsin(j4);
IkReal x2342=IKcos(j4);
IkReal x2343=(cj5*r10);
IkReal x2344=(r01*sj5);
IkReal x2345=((1.0)*cj2);
IkReal x2346=(cj5*r00);
IkReal x2347=(cj5*r20);
IkReal x2348=((1.0)*x2342);
IkReal x2349=((1.0)*x2341);
IkReal x2350=(sj5*x2341);
evalcond[0]=((((-1.0)*r22*x2348))+((r21*x2350))+(((-1.0)*x2347*x2349)));
evalcond[1]=(((r11*x2350))+(((-1.0)*x2343*x2349))+(((-1.0)*r12*x2348)));
evalcond[2]=((((-1.0)*x2344*x2348))+(((-1.0)*r02*x2349))+((x2342*x2346)));
evalcond[3]=((-1.0)+(((-1.0)*x2346*x2349))+((x2341*x2344))+(((-1.0)*r02*x2348)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2345))+(((-1.0)*r22*x2349))+(((-1.0)*r21*sj5*x2348))+((x2342*x2347)));
evalcond[5]=((((-1.0)*r11*sj5*x2348))+(((-1.0)*sj1*x2345))+(((-1.0)*cj1*sj2))+((x2342*x2343))+(((-1.0)*r12*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2351=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2351;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2352=((1.0)*cj5);
IkReal x2353=((((-1.0)*r21*x2352))+(((-1.0)*r20*sj5)));
j4eval[0]=x2353;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2352))))));
j4eval[2]=IKsign(x2353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2354=cj5*cj5;
IkReal x2355=r01*r01;
IkReal x2356=(cj5*r00);
IkReal x2357=(r01*sj5);
IkReal x2358=(x2355+(((-1.0)*x2354*x2355))+((x2354*(r00*r00)))+(r02*r02)+(((-2.0)*x2356*x2357)));
j4eval[0]=x2358;
j4eval[1]=((IKabs((x2356+(((-1.0)*x2357)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2359=cj5*cj5;
IkReal x2360=r01*r01;
IkReal x2361=(r01*sj5);
IkReal x2362=(cj5*r00);
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((x2362+(((-1.0)*x2361)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2359*x2360))+x2360+(((-2.0)*x2361*x2362))+(r02*r02)+((x2359*(r00*r00))))),-1);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2363.value)+(((1.5707963267949)*(x2364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j4);
IkReal x2366=IKcos(j4);
IkReal x2367=(cj5*r10);
IkReal x2368=(r01*sj5);
IkReal x2369=(cj5*r00);
IkReal x2370=(cj5*r20);
IkReal x2371=((1.0)*x2366);
IkReal x2372=((1.0)*x2365);
IkReal x2373=(sj5*x2365);
evalcond[0]=((((-1.0)*x2370*x2372))+(((-1.0)*r22*x2371))+((r21*x2373)));
evalcond[1]=((((-1.0)*x2367*x2372))+(((-1.0)*r12*x2371))+((r11*x2373)));
evalcond[2]=((((-1.0)*r02*x2372))+((x2366*x2369))+(((-1.0)*x2368*x2371)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2371))+((x2365*x2368))+(((-1.0)*x2369*x2372)));
evalcond[4]=((((-1.0)*r11*sj5*x2371))+((cj2*sj1))+((x2366*x2367))+((cj1*sj2))+(((-1.0)*r12*x2372)));
evalcond[5]=((((-1.0)*r21*sj5*x2371))+((x2366*x2370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2374=((1.0)*cj5);
CheckValue<IkReal> x2375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2374))+(((-1.0)*r20*sj5)))),-1);
if(!x2375.valid){
continue;
}
CheckValue<IkReal> x2376 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2374))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2375.value)))+(x2376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(cj5*r10);
IkReal x2380=(r01*sj5);
IkReal x2381=(cj5*r00);
IkReal x2382=(cj5*r20);
IkReal x2383=((1.0)*x2378);
IkReal x2384=((1.0)*x2377);
IkReal x2385=(sj5*x2377);
evalcond[0]=((((-1.0)*x2382*x2384))+(((-1.0)*r22*x2383))+((r21*x2385)));
evalcond[1]=((((-1.0)*r12*x2383))+(((-1.0)*x2379*x2384))+((r11*x2385)));
evalcond[2]=((((-1.0)*x2380*x2383))+(((-1.0)*r02*x2384))+((x2378*x2381)));
evalcond[3]=((1.0)+(((-1.0)*x2381*x2384))+(((-1.0)*r02*x2383))+((x2377*x2380)));
evalcond[4]=((((-1.0)*r12*x2384))+(((-1.0)*r11*sj5*x2383))+((cj2*sj1))+((x2378*x2379))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r21*sj5*x2383))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2384))+((x2378*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2386.value)+(((1.5707963267949)*(x2387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj5*r10);
IkReal x2391=(r01*sj5);
IkReal x2392=(cj5*r00);
IkReal x2393=(cj5*r20);
IkReal x2394=((1.0)*x2389);
IkReal x2395=((1.0)*x2388);
IkReal x2396=(sj5*x2388);
evalcond[0]=((((-1.0)*r22*x2394))+((r21*x2396))+(((-1.0)*x2393*x2395)));
evalcond[1]=((((-1.0)*x2390*x2395))+((r11*x2396))+(((-1.0)*r12*x2394)));
evalcond[2]=((((-1.0)*r02*x2395))+(((-1.0)*x2391*x2394))+((x2389*x2392)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2394))+((x2388*x2391))+(((-1.0)*x2392*x2395)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2389*x2390))+(((-1.0)*r11*sj5*x2394))+(((-1.0)*r12*x2395)));
evalcond[5]=((((-1.0)*r21*sj5*x2394))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2395))+((x2389*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2397=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2397);
rxp1_1=(px*r21);
rxp1_2=(r11*x2397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2398=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2398);
rxp1_1=(px*r21);
rxp1_2=(r11*x2398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2399=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2399);
rxp1_1=(px*r21);
rxp1_2=(r11*x2399);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2402=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2402.valid){
continue;
}
IkReal x2400=x2402.value;
IkReal x2401=(sj0*x2400);
cj4array[0]=(((cj1*sj2*x2401))+((cj2*sj1*x2401)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2403=IKsin(j4);
IkReal x2404=IKcos(j4);
IkReal x2405=(cj5*r20);
IkReal x2406=(r21*sj5);
IkReal x2407=((1.0)*x2403);
IkReal x2408=((1.0)*x2404);
evalcond[0]=((-1.0)*r02*x2403);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2408)));
evalcond[2]=((((-1.0)*x2405*x2407))+((x2403*x2406)));
evalcond[3]=(((r11*sj5*x2403))+(((-1.0)*cj5*r10*x2407)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2406*x2408))+((x2404*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2410=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2410.valid){
continue;
}
IkReal x2409=x2410.value;
cj4array[0]=(((cj1*cj2*x2409))+(((-1.0)*sj1*sj2*x2409)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2411=IKsin(j4);
IkReal x2412=IKcos(j4);
IkReal x2413=(r11*sj5);
IkReal x2414=((1.0)*sj0);
IkReal x2415=((1.0)*x2412);
IkReal x2416=((1.0)*cj5*x2411);
evalcond[0]=((-1.0)*r02*x2411);
evalcond[1]=((((-1.0)*r02*x2415))+(((-1.0)*x2414)));
evalcond[2]=((((-1.0)*r20*x2416))+((r21*sj5*x2411)));
evalcond[3]=((((-1.0)*r10*x2416))+((x2411*x2413)));
evalcond[4]=((((-1.0)*cj1*sj2*x2414))+(((-1.0)*cj2*sj1*x2414))+((cj5*r10*x2412))+(((-1.0)*x2413*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(r02,-1);
if(!x2417.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2417.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2418=IKsin(j4);
IkReal x2419=IKcos(j4);
IkReal x2420=((1.0)*sj0);
IkReal x2421=(cj5*x2419);
IkReal x2422=(sj5*x2418);
IkReal x2423=((1.0)*sj5*x2419);
IkReal x2424=((1.0)*cj5*x2418);
evalcond[0]=((-1.0)*r02*x2418);
evalcond[1]=(((r21*x2422))+(((-1.0)*r20*x2424)));
evalcond[2]=((((-1.0)*r10*x2424))+((r11*x2422)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2423))+((r20*x2421)));
evalcond[4]=((((-1.0)*cj1*sj2*x2420))+((r10*x2421))+(((-1.0)*r11*x2423))+(((-1.0)*cj2*sj1*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2425=((1.0)*sj0);
IkReal x2426=((1.0)*cj0);
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2426))+(((-1.0)*r12*x2425)))),IkReal(((((-1.0)*r11*sj5*x2425))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2426))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2427.value)+(((1.5707963267949)*(x2428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2429=IKsin(j4);
IkReal x2430=IKcos(j4);
IkReal x2431=(cj5*r10);
IkReal x2432=(r01*sj5);
IkReal x2433=((1.0)*cj2);
IkReal x2434=(cj5*r00);
IkReal x2435=((1.0)*sj0);
IkReal x2436=(cj5*r20);
IkReal x2437=(cj1*sj2);
IkReal x2438=((1.0)*x2430);
IkReal x2439=((1.0)*x2429);
IkReal x2440=(sj5*x2429);
evalcond[0]=((((-1.0)*r22*x2438))+(((-1.0)*x2436*x2439))+((r21*x2440)));
evalcond[1]=(cj0+(((-1.0)*x2431*x2439))+((r11*x2440))+(((-1.0)*r12*x2438)));
evalcond[2]=(((x2429*x2432))+(((-1.0)*x2435))+(((-1.0)*x2434*x2439))+(((-1.0)*r02*x2438)));
evalcond[3]=((((-1.0)*r22*x2439))+(((-1.0)*r21*sj5*x2438))+((sj1*sj2))+(((-1.0)*cj1*x2433))+((x2430*x2436)));
evalcond[4]=((((-1.0)*cj0*x2437))+(((-1.0)*r02*x2439))+(((-1.0)*x2432*x2438))+(((-1.0)*cj0*sj1*x2433))+((x2430*x2434)));
evalcond[5]=((((-1.0)*sj0*sj1*x2433))+(((-1.0)*x2435*x2437))+(((-1.0)*r11*sj5*x2438))+((x2430*x2431))+(((-1.0)*r12*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2441=((1.0)*cj5);
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2441)))),-1);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2442.value)))+(x2443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2444=IKsin(j4);
IkReal x2445=IKcos(j4);
IkReal x2446=(cj5*r10);
IkReal x2447=(r01*sj5);
IkReal x2448=((1.0)*cj2);
IkReal x2449=(cj5*r00);
IkReal x2450=((1.0)*sj0);
IkReal x2451=(cj5*r20);
IkReal x2452=(cj1*sj2);
IkReal x2453=((1.0)*x2445);
IkReal x2454=((1.0)*x2444);
IkReal x2455=(sj5*x2444);
evalcond[0]=((((-1.0)*x2451*x2454))+(((-1.0)*r22*x2453))+((r21*x2455)));
evalcond[1]=(cj0+(((-1.0)*x2446*x2454))+(((-1.0)*r12*x2453))+((r11*x2455)));
evalcond[2]=((((-1.0)*x2449*x2454))+((x2444*x2447))+(((-1.0)*x2450))+(((-1.0)*r02*x2453)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2454))+((x2445*x2451))+(((-1.0)*cj1*x2448))+(((-1.0)*r21*sj5*x2453)));
evalcond[4]=((((-1.0)*cj0*x2452))+(((-1.0)*cj0*sj1*x2448))+((x2445*x2449))+(((-1.0)*x2447*x2453))+(((-1.0)*r02*x2454)));
evalcond[5]=((((-1.0)*x2450*x2452))+(((-1.0)*r11*sj5*x2453))+(((-1.0)*r12*x2454))+((x2445*x2446))+(((-1.0)*sj0*sj1*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2456=((1.0)*cj5);
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2456)))),-1);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2457.value)))+(x2458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2459=IKsin(j4);
IkReal x2460=IKcos(j4);
IkReal x2461=(cj5*r10);
IkReal x2462=(r01*sj5);
IkReal x2463=((1.0)*cj2);
IkReal x2464=(cj5*r00);
IkReal x2465=((1.0)*sj0);
IkReal x2466=(cj5*r20);
IkReal x2467=(cj1*sj2);
IkReal x2468=((1.0)*x2460);
IkReal x2469=((1.0)*x2459);
IkReal x2470=(sj5*x2459);
evalcond[0]=((((-1.0)*r22*x2468))+(((-1.0)*x2466*x2469))+((r21*x2470)));
evalcond[1]=(cj0+(((-1.0)*r12*x2468))+(((-1.0)*x2461*x2469))+((r11*x2470)));
evalcond[2]=((((-1.0)*x2464*x2469))+((x2459*x2462))+(((-1.0)*x2465))+(((-1.0)*r02*x2468)));
evalcond[3]=((((-1.0)*r22*x2469))+((x2460*x2466))+((sj1*sj2))+(((-1.0)*cj1*x2463))+(((-1.0)*r21*sj5*x2468)));
evalcond[4]=(((x2460*x2464))+(((-1.0)*cj0*sj1*x2463))+(((-1.0)*cj0*x2467))+(((-1.0)*r02*x2469))+(((-1.0)*x2462*x2468)));
evalcond[5]=((((-1.0)*sj0*sj1*x2463))+(((-1.0)*r11*sj5*x2468))+(((-1.0)*x2465*x2467))+((x2460*x2461))+(((-1.0)*r12*x2469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2471=cj5*cj5;
IkReal x2472=r21*r21;
IkReal x2473=(sj1*sj2);
IkReal x2474=(r21*sj5);
IkReal x2475=(cj1*cj2);
IkReal x2476=(cj5*r20);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2475))+((r22*x2473)))),IkReal(((((-1.0)*x2474*x2475))+(((-1.0)*x2473*x2476))+((x2473*x2474))+((x2475*x2476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign((x2472+(((-2.0)*x2474*x2476))+(r22*r22)+(((-1.0)*x2471*x2472))+((x2471*(r20*r20))))),-1);
if(!x2478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2477.value)+(((1.5707963267949)*(x2478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2479=IKsin(j4);
IkReal x2480=IKcos(j4);
IkReal x2481=(r21*sj5);
IkReal x2482=(cj5*r20);
IkReal x2483=((1.0)*x2480);
IkReal x2484=((1.0)*x2479);
evalcond[0]=((((-1.0)*r22*x2483))+(((-1.0)*x2482*x2484))+((x2479*x2481)));
evalcond[1]=((((-1.0)*r22*x2484))+(((-1.0)*cj1*cj2))+((x2480*x2482))+((sj1*sj2))+(((-1.0)*x2481*x2483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2485=(cj5*sj4);
IkReal x2486=(sj4*sj5);
if( IKabs((((r01*x2486))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2485))+((cj4*r12))+(((-1.0)*r11*x2486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2486))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2485))))+IKsqr((((r10*x2485))+((cj4*r12))+(((-1.0)*r11*x2486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2486))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2485))), (((r10*x2485))+((cj4*r12))+(((-1.0)*r11*x2486))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2487=IKcos(j0);
IkReal x2488=IKsin(j0);
IkReal x2489=(cj4*cj5);
IkReal x2490=(cj5*r01);
IkReal x2491=((1.0)*cj1);
IkReal x2492=((0.39225)*sj1);
IkReal x2493=(r11*sj5);
IkReal x2494=((1.0)*sj4);
IkReal x2495=((0.39225)*cj2);
IkReal x2496=((1.0)*sj1);
IkReal x2497=(r00*sj5);
IkReal x2498=(cj5*r11);
IkReal x2499=((1.0)*cj4);
IkReal x2500=(r01*sj5);
IkReal x2501=(r10*sj5);
IkReal x2502=(sj2*x2487);
IkReal x2503=(sj2*x2488);
IkReal x2504=(cj1*x2487);
IkReal x2505=(cj1*x2488);
IkReal x2506=(cj2*x2487);
IkReal x2507=(cj2*x2488);
evalcond[0]=(x2487+(((-1.0)*cj5*r10*x2494))+((sj4*x2493))+(((-1.0)*r12*x2499)));
evalcond[1]=(((sj4*x2500))+(((-1.0)*x2488))+(((-1.0)*cj5*r00*x2494))+(((-1.0)*r02*x2499)));
evalcond[2]=(x2490+x2497+((sj1*x2502))+(((-1.0)*x2491*x2506)));
evalcond[3]=(x2501+x2498+((sj1*x2503))+(((-1.0)*x2491*x2507)));
evalcond[4]=((((-1.0)*x2496*x2506))+(((-1.0)*r02*x2494))+(((-1.0)*x2499*x2500))+(((-1.0)*x2491*x2502))+((r00*x2489)));
evalcond[5]=((((-1.0)*x2493*x2499))+(((-1.0)*x2496*x2507))+((r10*x2489))+(((-1.0)*x2491*x2503))+(((-1.0)*r12*x2494)));
evalcond[6]=((((0.425)*x2504))+((x2495*x2504))+(((-1.0)*x2492*x2502))+(((-0.10915)*x2488))+(((-1.0)*px))+(((-0.09465)*x2490))+(((-0.09465)*x2497)));
evalcond[7]=((((0.425)*x2505))+((x2495*x2505))+(((-1.0)*x2492*x2503))+(((-1.0)*py))+(((-0.09465)*x2498))+(((-0.09465)*x2501))+(((0.10915)*x2487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2508=((1.0)*cj5);
IkReal x2509=((1.0)*sj5);
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2508))+(((-1.0)*r10*x2509)))),IkReal(((((-1.0)*r00*x2509))+(((-1.0)*r01*x2508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
CheckValue<IkReal> x2511=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2511.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2510.value)+(((1.5707963267949)*(x2511.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2512=IKcos(j0);
IkReal x2513=IKsin(j0);
IkReal x2514=(cj5*r01);
IkReal x2515=(cj5*r11);
IkReal x2516=(r00*sj5);
IkReal x2517=(sj1*sj2);
IkReal x2518=((0.39225)*cj2);
IkReal x2519=((1.0)*cj2);
IkReal x2520=(r10*sj5);
IkReal x2521=((0.39225)*x2517);
IkReal x2522=(cj1*x2512);
IkReal x2523=(cj1*x2513);
evalcond[0]=(x2514+x2516+((x2512*x2517))+(((-1.0)*x2519*x2522)));
evalcond[1]=(x2520+x2515+(((-1.0)*x2519*x2523))+((x2513*x2517)));
evalcond[2]=((((0.425)*x2522))+(((-1.0)*x2512*x2521))+(((-0.10915)*x2513))+(((-1.0)*px))+(((-0.09465)*x2516))+(((-0.09465)*x2514))+((x2518*x2522)));
evalcond[3]=((((0.425)*x2523))+(((-0.09465)*x2520))+(((-1.0)*x2513*x2521))+(((-1.0)*py))+(((-0.09465)*x2515))+((x2518*x2523))+(((0.10915)*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2524=((1.0)*cj5);
IkReal x2525=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2524)));
j4eval[0]=x2525;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2524)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2526=((1.0)*cj5);
IkReal x2527=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2526)));
j4eval[0]=x2527;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2526))))));
j4eval[2]=IKsign(x2527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2528=((1.0)*sj0);
IkReal x2529=((1.0)*cj0);
IkReal x2530=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2530;
j4eval[1]=((IKabs(((((-1.0)*r12*x2528))+(((-1.0)*r02*x2529)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2529))+(((-1.0)*r11*sj5*x2528))))));
j4eval[2]=IKsign(x2530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2531=((-1.0)*r20);
IkReal x2533 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2533)==0){
continue;
}
IkReal x2532=pow(x2533,-0.5);
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2531),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2534.value));
IkReal gconst79=(r21*x2532);
IkReal gconst80=(x2531*x2532);
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2535.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2536=((-1.0)*r20);
IkReal x2537=x2532;
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2536),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal x2538=((-1.0)*(x2539.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2538;
IkReal gconst78=x2538;
IkReal gconst79=(r21*x2537);
IkReal gconst80=(x2536*x2537);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2540=((-1.0)*r20);
IkReal x2541=x2532;
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2540),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
IkReal x2542=((-1.0)*(x2543.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2542;
IkReal gconst78=x2542;
IkReal gconst79=(r21*x2541);
IkReal gconst80=(x2540*x2541);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2544=((-1.0)*r20);
IkReal x2545=x2532;
CheckValue<IkReal> x2547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2544),IKFAST_ATAN2_MAGTHRESH);
if(!x2547.valid){
continue;
}
IkReal x2546=((-1.0)*(x2547.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2546;
IkReal gconst78=x2546;
IkReal gconst79=(r21*x2545);
IkReal gconst80=(x2544*x2545);
IkReal x2548=r22*r22;
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2548))),-1);
if(!x2551.valid){
continue;
}
IkReal x2549=x2551.value;
IkReal x2550=(x2548+((x2549*(r21*r21*r21*r21)))+((x2549*(r20*r20*r20*r20)))+(((2.0)*x2549*(r20*r20)*(r21*r21))));
j4eval[0]=x2550;
j4eval[1]=IKsign(x2550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2552=(sj1*sj2);
IkReal x2553=(gconst80*r20);
IkReal x2554=(gconst79*r21);
IkReal x2555=(cj1*cj2);
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2555))+((r22*x2552)))),IkReal((((x2553*x2555))+((x2552*x2554))+(((-1.0)*x2552*x2553))+(((-1.0)*x2554*x2555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
CheckValue<IkReal> x2557=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2554*x2554)+(((-2.0)*x2553*x2554))+(x2553*x2553))),-1);
if(!x2557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2556.value)+(((1.5707963267949)*(x2557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2558=IKsin(j4);
IkReal x2559=IKcos(j4);
IkReal x2560=(gconst79*r01);
IkReal x2561=(gconst79*r21);
IkReal x2562=((1.0)*cj2);
IkReal x2563=(gconst79*r11);
IkReal x2564=((1.0)*sj0);
IkReal x2565=(cj1*sj2);
IkReal x2566=((1.0)*x2559);
IkReal x2567=(gconst80*x2559);
IkReal x2568=((1.0)*x2558);
IkReal x2569=(gconst80*x2568);
evalcond[0]=((((-1.0)*r22*x2566))+(((-1.0)*r20*x2569))+((x2558*x2561)));
evalcond[1]=(cj0+((x2558*x2563))+(((-1.0)*r12*x2566))+(((-1.0)*r10*x2569)));
evalcond[2]=((((-1.0)*r00*x2569))+(((-1.0)*r02*x2566))+((x2558*x2560))+(((-1.0)*x2564)));
evalcond[3]=((((-1.0)*cj1*x2562))+(((-1.0)*r22*x2568))+((sj1*sj2))+((r20*x2567))+(((-1.0)*x2561*x2566)));
evalcond[4]=((((-1.0)*cj0*x2565))+((r00*x2567))+(((-1.0)*r02*x2568))+(((-1.0)*x2560*x2566))+(((-1.0)*cj0*sj1*x2562)));
evalcond[5]=((((-1.0)*x2563*x2566))+((r10*x2567))+(((-1.0)*sj0*sj1*x2562))+(((-1.0)*x2564*x2565))+(((-1.0)*r12*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2570=((1.0)*gconst80);
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2570))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
CheckValue<IkReal> x2572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2570)))),-1);
if(!x2572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2571.value)+(((1.5707963267949)*(x2572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2573=IKsin(j4);
IkReal x2574=IKcos(j4);
IkReal x2575=(gconst79*r01);
IkReal x2576=(gconst79*r21);
IkReal x2577=((1.0)*cj2);
IkReal x2578=(gconst79*r11);
IkReal x2579=((1.0)*sj0);
IkReal x2580=(cj1*sj2);
IkReal x2581=((1.0)*x2574);
IkReal x2582=(gconst80*x2574);
IkReal x2583=((1.0)*x2573);
IkReal x2584=(gconst80*x2583);
evalcond[0]=(((x2573*x2576))+(((-1.0)*r20*x2584))+(((-1.0)*r22*x2581)));
evalcond[1]=(((x2573*x2578))+cj0+(((-1.0)*r10*x2584))+(((-1.0)*r12*x2581)));
evalcond[2]=(((x2573*x2575))+(((-1.0)*r00*x2584))+(((-1.0)*r02*x2581))+(((-1.0)*x2579)));
evalcond[3]=(((r20*x2582))+((sj1*sj2))+(((-1.0)*cj1*x2577))+(((-1.0)*x2576*x2581))+(((-1.0)*r22*x2583)));
evalcond[4]=((((-1.0)*cj0*x2580))+((r00*x2582))+(((-1.0)*r02*x2583))+(((-1.0)*x2575*x2581))+(((-1.0)*cj0*sj1*x2577)));
evalcond[5]=((((-1.0)*x2579*x2580))+((r10*x2582))+(((-1.0)*x2578*x2581))+(((-1.0)*sj0*sj1*x2577))+(((-1.0)*r12*x2583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2585=((1.0)*gconst80);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2585))+(((-1.0)*gconst79*r00)))),-1);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2586.value)+(((1.5707963267949)*(x2587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=(gconst79*r01);
IkReal x2591=(gconst79*r21);
IkReal x2592=((1.0)*cj2);
IkReal x2593=(gconst79*r11);
IkReal x2594=((1.0)*sj0);
IkReal x2595=(cj1*sj2);
IkReal x2596=((1.0)*x2589);
IkReal x2597=(gconst80*x2589);
IkReal x2598=((1.0)*x2588);
IkReal x2599=(gconst80*x2598);
evalcond[0]=((((-1.0)*r22*x2596))+(((-1.0)*r20*x2599))+((x2588*x2591)));
evalcond[1]=(cj0+((x2588*x2593))+(((-1.0)*r12*x2596))+(((-1.0)*r10*x2599)));
evalcond[2]=((((-1.0)*r00*x2599))+(((-1.0)*r02*x2596))+(((-1.0)*x2594))+((x2588*x2590)));
evalcond[3]=((((-1.0)*cj1*x2592))+(((-1.0)*r22*x2598))+((sj1*sj2))+((r20*x2597))+(((-1.0)*x2591*x2596)));
evalcond[4]=(((r00*x2597))+(((-1.0)*cj0*x2595))+(((-1.0)*x2590*x2596))+(((-1.0)*r02*x2598))+(((-1.0)*cj0*sj1*x2592)));
evalcond[5]=((((-1.0)*x2594*x2595))+(((-1.0)*x2593*x2596))+((r10*x2597))+(((-1.0)*sj0*sj1*x2592))+(((-1.0)*r12*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2600=((-1.0)*r21);
IkReal x2602 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2602)==0){
continue;
}
IkReal x2601=pow(x2602,-0.5);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(x2600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2603.value))));
IkReal gconst82=(x2600*x2601);
IkReal gconst83=((1.0)*r20*x2601);
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2605=((-1.0)*r21);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal(x2605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
IkReal x2606=((1.0)*(x2608.value));
IkReal x2607=x2601;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2606)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2606)));
IkReal gconst82=(x2605*x2607);
IkReal gconst83=((1.0)*r20*x2607);
IkReal x2609=r22*r22;
IkReal x2610=((1.0)*x2609);
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(((-1.0)+x2609),-1);
if(!x2614.valid){
continue;
}
IkReal x2611=x2614.value;
if((((1.0)+(((-1.0)*x2610)))) < -0.00001)
continue;
IkReal x2612=IKsqrt(((1.0)+(((-1.0)*x2610))));
IkReal x2613=(cj0*x2611*x2612);
j4eval[0]=((IKabs(((((-1.0)*x2610*x2613))+x2613)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2615=((-1.0)*r21);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(x2615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
IkReal x2616=((1.0)*(x2618.value));
IkReal x2617=x2601;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2616)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2616)));
IkReal gconst82=(x2615*x2617);
IkReal gconst83=((1.0)*r20*x2617);
IkReal x2619=r22*r22;
IkReal x2620=((1.0)*x2619);
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(((-1.0)+x2619),-1);
if(!x2624.valid){
continue;
}
IkReal x2621=x2624.value;
if((((1.0)+(((-1.0)*x2620)))) < -0.00001)
continue;
IkReal x2622=IKsqrt(((1.0)+(((-1.0)*x2620))));
IkReal x2623=(sj0*x2621*x2622);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2623+(((-1.0)*x2620*x2623))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2625=((-1.0)*r21);
CheckValue<IkReal> x2628 = IKatan2WithCheck(IkReal(x2625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2628.valid){
continue;
}
IkReal x2626=((1.0)*(x2628.value));
IkReal x2627=x2601;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2626)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2626)));
IkReal gconst82=(x2625*x2627);
IkReal gconst83=((1.0)*r20*x2627);
IkReal x2629=r22*r22;
IkReal x2630=(r12*sj0);
IkReal x2631=(cj0*r02);
CheckValue<IkReal> x2635=IKPowWithIntegerCheck(((-1.0)+x2629),-1);
if(!x2635.valid){
continue;
}
IkReal x2632=x2635.value;
if((((1.0)+(((-1.0)*x2629)))) < -0.00001)
continue;
IkReal x2633=IKsqrt(((1.0)+(((-1.0)*x2629))));
IkReal x2634=(r22*x2632*x2633);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2630*x2634))+((x2631*x2634)))))+(IKabs(((((-1.0)*x2631))+(((-1.0)*x2630))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2636=((1.0)*sj0);
IkReal x2637=((1.0)*cj0);
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2637))+(((-1.0)*r12*x2636)))),IkReal(((((-1.0)*gconst82*r11*x2636))+(((-1.0)*gconst82*r01*x2637))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2638.value)))+(x2639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2640=IKsin(j4);
IkReal x2641=IKcos(j4);
IkReal x2642=(gconst82*r11);
IkReal x2643=((1.0)*cj2);
IkReal x2644=((1.0)*sj0);
IkReal x2645=(cj1*sj2);
IkReal x2646=((1.0)*x2641);
IkReal x2647=(gconst83*x2641);
IkReal x2648=(gconst82*x2640);
IkReal x2649=((1.0)*x2640);
evalcond[0]=((((-1.0)*gconst83*r20*x2649))+(((-1.0)*r22*x2646))+((r21*x2648)));
evalcond[1]=((((-1.0)*r12*x2646))+cj0+(((-1.0)*gconst83*r10*x2649))+((x2640*x2642)));
evalcond[2]=((((-1.0)*r02*x2646))+((r01*x2648))+(((-1.0)*x2644))+(((-1.0)*gconst83*r00*x2649)));
evalcond[3]=((((-1.0)*r22*x2649))+(((-1.0)*cj1*x2643))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2646))+((r20*x2647)));
evalcond[4]=((((-1.0)*r02*x2649))+(((-1.0)*cj0*sj1*x2643))+(((-1.0)*gconst82*r01*x2646))+((r00*x2647))+(((-1.0)*cj0*x2645)));
evalcond[5]=((((-1.0)*r12*x2649))+(((-1.0)*x2644*x2645))+((r10*x2647))+(((-1.0)*x2642*x2646))+(((-1.0)*sj0*sj1*x2643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2650=((1.0)*gconst83);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2650))+(((-1.0)*gconst82*r10)))),-1);
if(!x2652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2651.value)+(((1.5707963267949)*(x2652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2653=IKsin(j4);
IkReal x2654=IKcos(j4);
IkReal x2655=(gconst82*r11);
IkReal x2656=((1.0)*cj2);
IkReal x2657=((1.0)*sj0);
IkReal x2658=(cj1*sj2);
IkReal x2659=((1.0)*x2654);
IkReal x2660=(gconst83*x2654);
IkReal x2661=(gconst82*x2653);
IkReal x2662=((1.0)*x2653);
evalcond[0]=((((-1.0)*r22*x2659))+((r21*x2661))+(((-1.0)*gconst83*r20*x2662)));
evalcond[1]=(cj0+(((-1.0)*r12*x2659))+((x2653*x2655))+(((-1.0)*gconst83*r10*x2662)));
evalcond[2]=((((-1.0)*r02*x2659))+(((-1.0)*x2657))+((r01*x2661))+(((-1.0)*gconst83*r00*x2662)));
evalcond[3]=((((-1.0)*cj1*x2656))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2659))+(((-1.0)*r22*x2662))+((r20*x2660)));
evalcond[4]=((((-1.0)*r02*x2662))+(((-1.0)*cj0*sj1*x2656))+(((-1.0)*gconst82*r01*x2659))+((r00*x2660))+(((-1.0)*cj0*x2658)));
evalcond[5]=((((-1.0)*r12*x2662))+((r10*x2660))+(((-1.0)*sj0*sj1*x2656))+(((-1.0)*x2657*x2658))+(((-1.0)*x2655*x2659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2663=((1.0)*gconst83);
CheckValue<IkReal> x2664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
CheckValue<IkReal> x2665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2663))+(((-1.0)*gconst82*r00)))),-1);
if(!x2665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2664.value)+(((1.5707963267949)*(x2665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2666=IKsin(j4);
IkReal x2667=IKcos(j4);
IkReal x2668=(gconst82*r11);
IkReal x2669=((1.0)*cj2);
IkReal x2670=((1.0)*sj0);
IkReal x2671=(cj1*sj2);
IkReal x2672=((1.0)*x2667);
IkReal x2673=(gconst83*x2667);
IkReal x2674=(gconst82*x2666);
IkReal x2675=((1.0)*x2666);
evalcond[0]=(((r21*x2674))+(((-1.0)*r22*x2672))+(((-1.0)*gconst83*r20*x2675)));
evalcond[1]=((((-1.0)*r12*x2672))+cj0+((x2666*x2668))+(((-1.0)*gconst83*r10*x2675)));
evalcond[2]=((((-1.0)*r02*x2672))+(((-1.0)*x2670))+((r01*x2674))+(((-1.0)*gconst83*r00*x2675)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2669))+(((-1.0)*gconst82*r21*x2672))+((r20*x2673))+(((-1.0)*r22*x2675)));
evalcond[4]=((((-1.0)*cj0*x2671))+(((-1.0)*cj0*sj1*x2669))+(((-1.0)*gconst82*r01*x2672))+(((-1.0)*r02*x2675))+((r00*x2673)));
evalcond[5]=((((-1.0)*r12*x2675))+(((-1.0)*x2670*x2671))+(((-1.0)*sj0*sj1*x2669))+((r10*x2673))+(((-1.0)*x2668*x2672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2676=((-1.0)*r10);
IkReal x2678 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2678)==0){
continue;
}
IkReal x2677=pow(x2678,-0.5);
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2676),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2679.value));
IkReal gconst85=(r11*x2677);
IkReal gconst86=(x2676*x2677);
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2680.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2681=((-1.0)*r10);
IkReal x2682=x2677;
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2681),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
IkReal x2683=((-1.0)*(x2684.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2683;
IkReal gconst84=x2683;
IkReal gconst85=(r11*x2682);
IkReal gconst86=(x2681*x2682);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2685=((1.0)*sj0);
IkReal x2686=((1.0)*gconst85);
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2686)))),-1);
if(!x2687.valid){
continue;
}
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2685))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2685))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2686))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2687.value)))+(x2688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2689=IKsin(j4);
IkReal x2690=IKcos(j4);
IkReal x2691=(gconst85*r21);
IkReal x2692=(gconst86*r00);
IkReal x2693=(gconst86*r10);
IkReal x2694=((1.0)*cj2);
IkReal x2695=(gconst85*r11);
IkReal x2696=(gconst85*r01);
IkReal x2697=((1.0)*sj0);
IkReal x2698=(gconst86*r20);
IkReal x2699=(cj1*sj2);
IkReal x2700=((1.0)*x2690);
IkReal x2701=((1.0)*x2689);
evalcond[0]=((((-1.0)*r22*x2700))+((x2689*x2691))+(((-1.0)*x2698*x2701)));
evalcond[1]=(cj0+(((-1.0)*r12*x2700))+((x2689*x2695))+(((-1.0)*x2693*x2701)));
evalcond[2]=((((-1.0)*r02*x2700))+((x2689*x2696))+(((-1.0)*x2697))+(((-1.0)*x2692*x2701)));
evalcond[3]=((((-1.0)*r22*x2701))+(((-1.0)*cj1*x2694))+((sj1*sj2))+(((-1.0)*x2691*x2700))+((x2690*x2698)));
evalcond[4]=((((-1.0)*cj0*x2699))+(((-1.0)*r02*x2701))+(((-1.0)*x2696*x2700))+(((-1.0)*cj0*sj1*x2694))+((x2690*x2692)));
evalcond[5]=((((-1.0)*r12*x2701))+(((-1.0)*x2697*x2699))+(((-1.0)*x2695*x2700))+((x2690*x2693))+(((-1.0)*sj0*sj1*x2694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2702=((1.0)*gconst86);
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2702))+(((-1.0)*gconst85*r00)))),-1);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2702))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2703.value)))+(x2704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2705=IKsin(j4);
IkReal x2706=IKcos(j4);
IkReal x2707=(gconst85*r21);
IkReal x2708=(gconst86*r00);
IkReal x2709=(gconst86*r10);
IkReal x2710=((1.0)*cj2);
IkReal x2711=(gconst85*r11);
IkReal x2712=(gconst85*r01);
IkReal x2713=((1.0)*sj0);
IkReal x2714=(gconst86*r20);
IkReal x2715=(cj1*sj2);
IkReal x2716=((1.0)*x2706);
IkReal x2717=((1.0)*x2705);
evalcond[0]=(((x2705*x2707))+(((-1.0)*x2714*x2717))+(((-1.0)*r22*x2716)));
evalcond[1]=(cj0+(((-1.0)*x2709*x2717))+((x2705*x2711))+(((-1.0)*r12*x2716)));
evalcond[2]=((((-1.0)*x2713))+(((-1.0)*r02*x2716))+(((-1.0)*x2708*x2717))+((x2705*x2712)));
evalcond[3]=(((x2706*x2714))+((sj1*sj2))+(((-1.0)*r22*x2717))+(((-1.0)*x2707*x2716))+(((-1.0)*cj1*x2710)));
evalcond[4]=((((-1.0)*x2712*x2716))+(((-1.0)*cj0*sj1*x2710))+(((-1.0)*r02*x2717))+((x2706*x2708))+(((-1.0)*cj0*x2715)));
evalcond[5]=((((-1.0)*sj0*sj1*x2710))+(((-1.0)*x2713*x2715))+((x2706*x2709))+(((-1.0)*r12*x2717))+(((-1.0)*x2711*x2716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2718=((-1.0)*r11);
IkReal x2720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2720)==0){
continue;
}
IkReal x2719=pow(x2720,-0.5);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2721.value))));
IkReal gconst88=(x2718*x2719);
IkReal gconst89=((1.0)*r10*x2719);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2723=((-1.0)*r11);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(x2723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal x2724=((1.0)*(x2726.value));
IkReal x2725=x2719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2724)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2724)));
IkReal gconst88=(x2723*x2725);
IkReal gconst89=((1.0)*r10*x2725);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2727=((-1.0)*r11);
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal(x2727),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
IkReal x2728=((1.0)*(x2730.value));
IkReal x2729=x2719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2728)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2728)));
IkReal gconst88=(x2727*x2729);
IkReal gconst89=((1.0)*r10*x2729);
IkReal x2731=r12*r12;
IkReal x2732=((1.0)*sj0);
IkReal x2733=(cj0*r02);
IkReal x2734=x2719;
j4eval[0]=((IKabs((((r12*x2733*x2734))+(((-1.0)*x2732*x2734))+((sj0*x2731*x2734)))))+(IKabs(((((-1.0)*x2733))+(((-1.0)*r12*x2732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2735=((-1.0)*r11);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal(x2735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
IkReal x2736=((1.0)*(x2738.value));
IkReal x2737=x2719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2736)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2736)));
IkReal gconst88=(x2735*x2737);
IkReal gconst89=((1.0)*r10*x2737);
IkReal x2739=r12*r12;
IkReal x2740=(cj1*cj2*r22);
IkReal x2741=(r22*sj1*sj2);
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(((-1.0)+x2739),-1);
if(!x2745.valid){
continue;
}
IkReal x2742=x2745.value;
if((((1.0)+(((-1.0)*x2739)))) < -0.00001)
continue;
IkReal x2743=IKsqrt(((1.0)+(((-1.0)*x2739))));
IkReal x2744=(r12*x2742*x2743);
j4eval[0]=((IKabs((x2741+(((-1.0)*x2740)))))+(IKabs(((((-1.0)*x2741*x2744))+((x2740*x2744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=(cj1*cj2);
IkReal x2747=(gconst89*r20);
IkReal x2748=(gconst88*r21);
IkReal x2749=(sj1*sj2);
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(IKsign(((x2748*x2748)+(r22*r22)+(((-2.0)*x2747*x2748))+(x2747*x2747))),-1);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2746))+((r22*x2749)))),IkReal((((x2746*x2747))+(((-1.0)*x2747*x2749))+((x2748*x2749))+(((-1.0)*x2746*x2748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2750.value)))+(x2751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2752=IKsin(j4);
IkReal x2753=IKcos(j4);
IkReal x2754=((1.0)*sj0);
IkReal x2755=((1.0)*cj2);
IkReal x2756=(gconst89*r20);
IkReal x2757=(gconst89*r10);
IkReal x2758=(gconst89*r00);
IkReal x2759=(cj1*sj2);
IkReal x2760=((1.0)*x2753);
IkReal x2761=((1.0)*x2752);
IkReal x2762=(gconst88*x2752);
evalcond[0]=((((-1.0)*x2756*x2761))+((r21*x2762))+(((-1.0)*r22*x2760)));
evalcond[1]=(cj0+(((-1.0)*r12*x2760))+(((-1.0)*x2757*x2761))+((r11*x2762)));
evalcond[2]=(((r01*x2762))+(((-1.0)*x2758*x2761))+(((-1.0)*r02*x2760))+(((-1.0)*x2754)));
evalcond[3]=(((x2753*x2756))+(((-1.0)*gconst88*r21*x2760))+((sj1*sj2))+(((-1.0)*cj1*x2755))+(((-1.0)*r22*x2761)));
evalcond[4]=(((x2753*x2758))+(((-1.0)*gconst88*r01*x2760))+(((-1.0)*r02*x2761))+(((-1.0)*cj0*x2759))+(((-1.0)*cj0*sj1*x2755)));
evalcond[5]=(((x2753*x2757))+(((-1.0)*r12*x2761))+(((-1.0)*cj2*sj1*x2754))+(((-1.0)*gconst88*r11*x2760))+(((-1.0)*x2754*x2759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2763=((1.0)*sj0);
IkReal x2764=((1.0)*cj0);
CheckValue<IkReal> x2765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2765.valid){
continue;
}
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2763))+(((-1.0)*r02*x2764)))),IkReal(((((-1.0)*gconst88*r01*x2764))+(((-1.0)*gconst88*r11*x2763))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2765.value)))+(x2766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2767=IKsin(j4);
IkReal x2768=IKcos(j4);
IkReal x2769=((1.0)*sj0);
IkReal x2770=((1.0)*cj2);
IkReal x2771=(gconst89*r20);
IkReal x2772=(gconst89*r10);
IkReal x2773=(gconst89*r00);
IkReal x2774=(cj1*sj2);
IkReal x2775=((1.0)*x2768);
IkReal x2776=((1.0)*x2767);
IkReal x2777=(gconst88*x2767);
evalcond[0]=((((-1.0)*x2771*x2776))+((r21*x2777))+(((-1.0)*r22*x2775)));
evalcond[1]=(((r11*x2777))+cj0+(((-1.0)*r12*x2775))+(((-1.0)*x2772*x2776)));
evalcond[2]=(((r01*x2777))+(((-1.0)*r02*x2775))+(((-1.0)*x2773*x2776))+(((-1.0)*x2769)));
evalcond[3]=(((x2768*x2771))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2775))+(((-1.0)*cj1*x2770))+(((-1.0)*r22*x2776)));
evalcond[4]=((((-1.0)*cj0*x2774))+((x2768*x2773))+(((-1.0)*r02*x2776))+(((-1.0)*gconst88*r01*x2775))+(((-1.0)*cj0*sj1*x2770)));
evalcond[5]=((((-1.0)*x2769*x2774))+((x2768*x2772))+(((-1.0)*gconst88*r11*x2775))+(((-1.0)*r12*x2776))+(((-1.0)*cj2*sj1*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2778=((1.0)*gconst89);
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2778))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2778))+(((-1.0)*gconst88*r00)))),-1);
if(!x2780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2779.value)+(((1.5707963267949)*(x2780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=((1.0)*sj0);
IkReal x2784=((1.0)*cj2);
IkReal x2785=(gconst89*r20);
IkReal x2786=(gconst89*r10);
IkReal x2787=(gconst89*r00);
IkReal x2788=(cj1*sj2);
IkReal x2789=((1.0)*x2782);
IkReal x2790=((1.0)*x2781);
IkReal x2791=(gconst88*x2781);
evalcond[0]=(((r21*x2791))+(((-1.0)*x2785*x2790))+(((-1.0)*r22*x2789)));
evalcond[1]=((((-1.0)*r12*x2789))+(((-1.0)*x2786*x2790))+cj0+((r11*x2791)));
evalcond[2]=((((-1.0)*x2783))+(((-1.0)*x2787*x2790))+((r01*x2791))+(((-1.0)*r02*x2789)));
evalcond[3]=((((-1.0)*cj1*x2784))+(((-1.0)*gconst88*r21*x2789))+((sj1*sj2))+((x2782*x2785))+(((-1.0)*r22*x2790)));
evalcond[4]=((((-1.0)*cj0*sj1*x2784))+((x2782*x2787))+(((-1.0)*cj0*x2788))+(((-1.0)*gconst88*r01*x2789))+(((-1.0)*r02*x2790)));
evalcond[5]=((((-1.0)*cj2*sj1*x2783))+((x2782*x2786))+(((-1.0)*x2783*x2788))+(((-1.0)*gconst88*r11*x2789))+(((-1.0)*r12*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2792=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2792;
j4eval[1]=IKsign(x2792);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2793=((1.0)*cj5);
IkReal x2794=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2793)));
j4eval[0]=x2794;
j4eval[1]=((IKabs(((((-1.0)*r20*x2793))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2795=cj5*cj5;
IkReal x2796=r11*r11;
IkReal x2797=(r11*sj5);
IkReal x2798=(cj5*r10);
IkReal x2799=(x2796+(r12*r12)+((x2795*(r10*r10)))+(((-2.0)*x2797*x2798))+(((-1.0)*x2795*x2796)));
j4eval[0]=x2799;
j4eval[1]=IKsign(x2799);
j4eval[2]=((IKabs(r12))+(IKabs((x2798+(((-1.0)*x2797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2800=cj5*cj5;
IkReal x2801=r11*r11;
IkReal x2802=(cj5*r10);
IkReal x2803=(r11*sj5);
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2800*(r10*r10)))+(((-1.0)*x2800*x2801))+(((-2.0)*x2802*x2803))+x2801)),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(((((-1.0)*x2803))+x2802)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(cj5*r10);
IkReal x2809=(r01*sj5);
IkReal x2810=((1.0)*cj2);
IkReal x2811=(cj5*r00);
IkReal x2812=(cj5*r20);
IkReal x2813=((1.0)*x2807);
IkReal x2814=((1.0)*x2806);
IkReal x2815=(sj5*x2806);
evalcond[0]=((((-1.0)*x2812*x2814))+((r21*x2815))+(((-1.0)*r22*x2813)));
evalcond[1]=((((-1.0)*r02*x2813))+((x2806*x2809))+(((-1.0)*x2811*x2814)));
evalcond[2]=((((-1.0)*r12*x2814))+(((-1.0)*r11*sj5*x2813))+((x2807*x2808)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2813))+((r11*x2815))+(((-1.0)*x2808*x2814)));
evalcond[4]=((((-1.0)*cj1*x2810))+((sj1*sj2))+(((-1.0)*r22*x2814))+(((-1.0)*r21*sj5*x2813))+((x2807*x2812)));
evalcond[5]=((((-1.0)*r02*x2814))+(((-1.0)*x2809*x2813))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2810))+((x2807*x2811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2816=((1.0)*cj5);
CheckValue<IkReal> x2817 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2816)))),-1);
if(!x2818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2817.value)+(((1.5707963267949)*(x2818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2819=IKsin(j4);
IkReal x2820=IKcos(j4);
IkReal x2821=(cj5*r10);
IkReal x2822=(r01*sj5);
IkReal x2823=((1.0)*cj2);
IkReal x2824=(cj5*r00);
IkReal x2825=(cj5*r20);
IkReal x2826=((1.0)*x2820);
IkReal x2827=((1.0)*x2819);
IkReal x2828=(sj5*x2819);
evalcond[0]=(((r21*x2828))+(((-1.0)*r22*x2826))+(((-1.0)*x2825*x2827)));
evalcond[1]=((((-1.0)*x2824*x2827))+((x2819*x2822))+(((-1.0)*r02*x2826)));
evalcond[2]=((((-1.0)*r12*x2827))+(((-1.0)*r11*sj5*x2826))+((x2820*x2821)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2826))+(((-1.0)*x2821*x2827))+((r11*x2828)));
evalcond[4]=((((-1.0)*cj1*x2823))+((sj1*sj2))+(((-1.0)*r22*x2827))+(((-1.0)*r21*sj5*x2826))+((x2820*x2825)));
evalcond[5]=((((-1.0)*sj1*x2823))+(((-1.0)*x2822*x2826))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2827))+((x2820*x2824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2829.valid){
continue;
}
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2829.value)))+(x2830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2831=IKsin(j4);
IkReal x2832=IKcos(j4);
IkReal x2833=(cj5*r10);
IkReal x2834=(r01*sj5);
IkReal x2835=((1.0)*cj2);
IkReal x2836=(cj5*r00);
IkReal x2837=(cj5*r20);
IkReal x2838=((1.0)*x2832);
IkReal x2839=((1.0)*x2831);
IkReal x2840=(sj5*x2831);
evalcond[0]=(((r21*x2840))+(((-1.0)*r22*x2838))+(((-1.0)*x2837*x2839)));
evalcond[1]=(((x2831*x2834))+(((-1.0)*x2836*x2839))+(((-1.0)*r02*x2838)));
evalcond[2]=((((-1.0)*r12*x2839))+(((-1.0)*r11*sj5*x2838))+((x2832*x2833)));
evalcond[3]=((1.0)+((r11*x2840))+(((-1.0)*r12*x2838))+(((-1.0)*x2833*x2839)));
evalcond[4]=((((-1.0)*cj1*x2835))+(((-1.0)*r21*sj5*x2838))+((sj1*sj2))+(((-1.0)*r22*x2839))+((x2832*x2837)));
evalcond[5]=((((-1.0)*sj1*x2835))+(((-1.0)*x2834*x2838))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2839))+((x2832*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2841=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2841;
j4eval[1]=IKsign(x2841);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2842=((1.0)*cj5);
IkReal x2843=((((-1.0)*r21*x2842))+(((-1.0)*r20*sj5)));
j4eval[0]=x2843;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2842))))));
j4eval[2]=IKsign(x2843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2844=cj5*cj5;
IkReal x2845=r11*r11;
IkReal x2846=(cj5*r10);
IkReal x2847=(r11*sj5);
IkReal x2848=(((x2844*x2845))+(((-1.0)*x2844*(r10*r10)))+(((2.0)*x2846*x2847))+(((-1.0)*(r12*r12)))+(((-1.0)*x2845)));
j4eval[0]=x2848;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2847))+x2846))));
j4eval[2]=IKsign(x2848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2849=cj5*cj5;
IkReal x2850=r11*r11;
IkReal x2851=(cj5*r10);
IkReal x2852=(r11*sj5);
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2849*(r10*r10)))+((x2849*x2850))+(((-1.0)*(r12*r12)))+(((2.0)*x2851*x2852))+(((-1.0)*x2850)))),-1);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854 = IKatan2WithCheck(IkReal(((((-1.0)*x2852))+x2851)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2853.value)))+(x2854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2855=IKsin(j4);
IkReal x2856=IKcos(j4);
IkReal x2857=(cj5*r10);
IkReal x2858=(r01*sj5);
IkReal x2859=(cj5*r00);
IkReal x2860=(cj5*r20);
IkReal x2861=((1.0)*x2856);
IkReal x2862=((1.0)*x2855);
IkReal x2863=(sj5*x2855);
evalcond[0]=(((r21*x2863))+(((-1.0)*r22*x2861))+(((-1.0)*x2860*x2862)));
evalcond[1]=(((x2855*x2858))+(((-1.0)*r02*x2861))+(((-1.0)*x2859*x2862)));
evalcond[2]=((((-1.0)*r12*x2862))+(((-1.0)*r11*sj5*x2861))+((x2856*x2857)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2861))+(((-1.0)*x2857*x2862))+((r11*x2863)));
evalcond[4]=((((-1.0)*r02*x2862))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2858*x2861))+((x2856*x2859)));
evalcond[5]=(((x2856*x2860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2862))+(((-1.0)*r21*sj5*x2861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2864=((1.0)*cj5);
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2864))+(((-1.0)*r20*sj5)))),-1);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2865.value)))+(x2866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2867=IKsin(j4);
IkReal x2868=IKcos(j4);
IkReal x2869=(cj5*r10);
IkReal x2870=(r01*sj5);
IkReal x2871=(cj5*r00);
IkReal x2872=(cj5*r20);
IkReal x2873=((1.0)*x2868);
IkReal x2874=((1.0)*x2867);
IkReal x2875=(sj5*x2867);
evalcond[0]=((((-1.0)*r22*x2873))+((r21*x2875))+(((-1.0)*x2872*x2874)));
evalcond[1]=((((-1.0)*r02*x2873))+(((-1.0)*x2871*x2874))+((x2867*x2870)));
evalcond[2]=((((-1.0)*r11*sj5*x2873))+((x2868*x2869))+(((-1.0)*r12*x2874)));
evalcond[3]=((-1.0)+(((-1.0)*x2869*x2874))+((r11*x2875))+(((-1.0)*r12*x2873)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2874))+((x2868*x2871))+((cj1*sj2))+(((-1.0)*x2870*x2873)));
evalcond[5]=(((x2868*x2872))+(((-1.0)*r22*x2874))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2876 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2876.value)+(((1.5707963267949)*(x2877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j4);
IkReal x2879=IKcos(j4);
IkReal x2880=(cj5*r10);
IkReal x2881=(r01*sj5);
IkReal x2882=(cj5*r00);
IkReal x2883=(cj5*r20);
IkReal x2884=((1.0)*x2879);
IkReal x2885=((1.0)*x2878);
IkReal x2886=(sj5*x2878);
evalcond[0]=((((-1.0)*x2883*x2885))+(((-1.0)*r22*x2884))+((r21*x2886)));
evalcond[1]=((((-1.0)*x2882*x2885))+(((-1.0)*r02*x2884))+((x2878*x2881)));
evalcond[2]=((((-1.0)*r11*sj5*x2884))+((x2879*x2880))+(((-1.0)*r12*x2885)));
evalcond[3]=((-1.0)+((r11*x2886))+(((-1.0)*x2880*x2885))+(((-1.0)*r12*x2884)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2885))+((cj1*sj2))+((x2879*x2882))+(((-1.0)*x2881*x2884)));
evalcond[5]=((((-1.0)*r22*x2885))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2879*x2883))+(((-1.0)*r21*sj5*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2887=((-1.0)*r00);
IkReal x2889 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2889)==0){
continue;
}
IkReal x2888=pow(x2889,-0.5);
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2887),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2890.value));
IkReal gconst91=(r01*x2888);
IkReal gconst92=(x2887*x2888);
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2891.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2892=((-1.0)*r00);
IkReal x2893=x2888;
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2892),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
IkReal x2894=((-1.0)*(x2895.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2894;
IkReal gconst90=x2894;
IkReal gconst91=(r01*x2893);
IkReal gconst92=(x2892*x2893);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2896=((1.0)*sj0);
IkReal x2897=((1.0)*cj0);
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2898.valid){
continue;
}
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2897))+(((-1.0)*r12*x2896)))),IkReal(((((-1.0)*gconst91*r11*x2896))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2898.value)))+(x2899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2900=IKsin(j4);
IkReal x2901=IKcos(j4);
IkReal x2902=((1.0)*cj2);
IkReal x2903=(gconst92*r00);
IkReal x2904=(gconst92*r20);
IkReal x2905=((1.0)*sj0);
IkReal x2906=(gconst92*r10);
IkReal x2907=(cj1*sj2);
IkReal x2908=((1.0)*x2901);
IkReal x2909=(gconst91*x2900);
IkReal x2910=((1.0)*x2900);
evalcond[0]=(((r21*x2909))+(((-1.0)*x2904*x2910))+(((-1.0)*r22*x2908)));
evalcond[1]=(cj0+(((-1.0)*x2906*x2910))+(((-1.0)*r12*x2908))+((r11*x2909)));
evalcond[2]=((((-1.0)*r02*x2908))+((r01*x2909))+(((-1.0)*x2905))+(((-1.0)*x2903*x2910)));
evalcond[3]=(((x2901*x2904))+((sj1*sj2))+(((-1.0)*cj1*x2902))+(((-1.0)*gconst91*r21*x2908))+(((-1.0)*r22*x2910)));
evalcond[4]=(((x2901*x2903))+(((-1.0)*cj0*x2907))+(((-1.0)*cj0*sj1*x2902))+(((-1.0)*r02*x2910))+(((-1.0)*gconst91*r01*x2908)));
evalcond[5]=((((-1.0)*x2905*x2907))+((x2901*x2906))+(((-1.0)*r12*x2910))+(((-1.0)*gconst91*r11*x2908))+(((-1.0)*sj0*sj1*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2911=((1.0)*gconst92);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
CheckValue<IkReal> x2913=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2911)))),-1);
if(!x2913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2912.value)+(((1.5707963267949)*(x2913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2914=IKsin(j4);
IkReal x2915=IKcos(j4);
IkReal x2916=((1.0)*cj2);
IkReal x2917=(gconst92*r00);
IkReal x2918=(gconst92*r20);
IkReal x2919=((1.0)*sj0);
IkReal x2920=(gconst92*r10);
IkReal x2921=(cj1*sj2);
IkReal x2922=((1.0)*x2915);
IkReal x2923=(gconst91*x2914);
IkReal x2924=((1.0)*x2914);
evalcond[0]=((((-1.0)*x2918*x2924))+((r21*x2923))+(((-1.0)*r22*x2922)));
evalcond[1]=((((-1.0)*x2920*x2924))+cj0+(((-1.0)*r12*x2922))+((r11*x2923)));
evalcond[2]=((((-1.0)*r02*x2922))+((r01*x2923))+(((-1.0)*x2917*x2924))+(((-1.0)*x2919)));
evalcond[3]=((((-1.0)*gconst91*r21*x2922))+((sj1*sj2))+(((-1.0)*cj1*x2916))+((x2915*x2918))+(((-1.0)*r22*x2924)));
evalcond[4]=((((-1.0)*cj0*sj1*x2916))+(((-1.0)*r02*x2924))+(((-1.0)*cj0*x2921))+((x2915*x2917))+(((-1.0)*gconst91*r01*x2922)));
evalcond[5]=(((x2915*x2920))+(((-1.0)*x2919*x2921))+(((-1.0)*r12*x2924))+(((-1.0)*gconst91*r11*x2922))+(((-1.0)*sj0*sj1*x2916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2925=((-1.0)*r01);
IkReal x2927 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2927)==0){
continue;
}
IkReal x2926=pow(x2927,-0.5);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(x2925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2928.value))));
IkReal gconst94=(x2925*x2926);
IkReal gconst95=((1.0)*r00*x2926);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2929.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2930=((-1.0)*r01);
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal(x2930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
IkReal x2931=((1.0)*(x2933.value));
IkReal x2932=x2926;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2931)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2931)));
IkReal gconst94=(x2930*x2932);
IkReal gconst95=((1.0)*r00*x2932);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2934=((-1.0)*r01);
CheckValue<IkReal> x2937 = IKatan2WithCheck(IkReal(x2934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2937.valid){
continue;
}
IkReal x2935=((1.0)*(x2937.value));
IkReal x2936=x2926;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2935)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2935)));
IkReal gconst94=(x2934*x2936);
IkReal gconst95=((1.0)*r00*x2936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2938=((-1.0)*r01);
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal(x2938),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
IkReal x2939=((1.0)*(x2941.value));
IkReal x2940=x2926;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2939)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2939)));
IkReal gconst94=(x2938*x2940);
IkReal gconst95=((1.0)*r00*x2940);
IkReal x2942=r02*r02;
IkReal x2943=(r12*sj0);
IkReal x2944=((1.0)*cj0);
IkReal x2945=x2926;
j4eval[0]=((IKabs((((r02*x2943*x2945))+((cj0*x2942*x2945))+(((-1.0)*x2944*x2945)))))+(IKabs(((((-1.0)*x2943))+(((-1.0)*r02*x2944))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2946=((1.0)*sj0);
IkReal x2947=((1.0)*cj0);
CheckValue<IkReal> x2948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2948.valid){
continue;
}
CheckValue<IkReal> x2949 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2946))+(((-1.0)*r02*x2947)))),IkReal(((((-1.0)*gconst94*r01*x2947))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2946))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2948.value)))+(x2949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2950=IKsin(j4);
IkReal x2951=IKcos(j4);
IkReal x2952=(gconst94*r11);
IkReal x2953=((1.0)*cj2);
IkReal x2954=(gconst94*r21);
IkReal x2955=((1.0)*sj0);
IkReal x2956=(gconst94*r01);
IkReal x2957=(cj1*sj2);
IkReal x2958=((1.0)*x2951);
IkReal x2959=(gconst95*x2951);
IkReal x2960=((1.0)*x2950);
IkReal x2961=(gconst95*x2960);
evalcond[0]=(((x2950*x2954))+(((-1.0)*r20*x2961))+(((-1.0)*r22*x2958)));
evalcond[1]=(((x2950*x2952))+cj0+(((-1.0)*r12*x2958))+(((-1.0)*r10*x2961)));
evalcond[2]=((((-1.0)*r02*x2958))+((x2950*x2956))+(((-1.0)*x2955))+(((-1.0)*r00*x2961)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2954*x2958))+((r20*x2959))+(((-1.0)*r22*x2960))+(((-1.0)*cj1*x2953)));
evalcond[4]=((((-1.0)*cj0*x2957))+(((-1.0)*cj0*sj1*x2953))+((r00*x2959))+(((-1.0)*r02*x2960))+(((-1.0)*x2956*x2958)));
evalcond[5]=((((-1.0)*x2952*x2958))+((r10*x2959))+(((-1.0)*sj0*sj1*x2953))+(((-1.0)*x2955*x2957))+(((-1.0)*r12*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2962=((1.0)*gconst95);
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2962))+(((-1.0)*gconst94*r10)))),-1);
if(!x2963.valid){
continue;
}
CheckValue<IkReal> x2964 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2963.value)))+(x2964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2965=IKsin(j4);
IkReal x2966=IKcos(j4);
IkReal x2967=(gconst94*r11);
IkReal x2968=((1.0)*cj2);
IkReal x2969=(gconst94*r21);
IkReal x2970=((1.0)*sj0);
IkReal x2971=(gconst94*r01);
IkReal x2972=(cj1*sj2);
IkReal x2973=((1.0)*x2966);
IkReal x2974=(gconst95*x2966);
IkReal x2975=((1.0)*x2965);
IkReal x2976=(gconst95*x2975);
evalcond[0]=(((x2965*x2969))+(((-1.0)*r20*x2976))+(((-1.0)*r22*x2973)));
evalcond[1]=(((x2965*x2967))+cj0+(((-1.0)*r12*x2973))+(((-1.0)*r10*x2976)));
evalcond[2]=((((-1.0)*r02*x2973))+(((-1.0)*r00*x2976))+(((-1.0)*x2970))+((x2965*x2971)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2969*x2973))+(((-1.0)*r22*x2975))+(((-1.0)*cj1*x2968))+((r20*x2974)));
evalcond[4]=((((-1.0)*cj0*x2972))+(((-1.0)*r02*x2975))+((r00*x2974))+(((-1.0)*cj0*sj1*x2968))+(((-1.0)*x2971*x2973)));
evalcond[5]=((((-1.0)*r12*x2975))+((r10*x2974))+(((-1.0)*sj0*sj1*x2968))+(((-1.0)*x2967*x2973))+(((-1.0)*x2970*x2972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2977=((1.0)*gconst95);
CheckValue<IkReal> x2978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2978.valid){
continue;
}
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2977)))),-1);
if(!x2979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2978.value)+(((1.5707963267949)*(x2979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2980=IKsin(j4);
IkReal x2981=IKcos(j4);
IkReal x2982=(gconst94*r11);
IkReal x2983=((1.0)*cj2);
IkReal x2984=(gconst94*r21);
IkReal x2985=((1.0)*sj0);
IkReal x2986=(gconst94*r01);
IkReal x2987=(cj1*sj2);
IkReal x2988=((1.0)*x2981);
IkReal x2989=(gconst95*x2981);
IkReal x2990=((1.0)*x2980);
IkReal x2991=(gconst95*x2990);
evalcond[0]=(((x2980*x2984))+(((-1.0)*r22*x2988))+(((-1.0)*r20*x2991)));
evalcond[1]=(cj0+(((-1.0)*r12*x2988))+(((-1.0)*r10*x2991))+((x2980*x2982)));
evalcond[2]=((((-1.0)*x2985))+((x2980*x2986))+(((-1.0)*r02*x2988))+(((-1.0)*r00*x2991)));
evalcond[3]=((((-1.0)*r22*x2990))+(((-1.0)*x2984*x2988))+(((-1.0)*cj1*x2983))+((sj1*sj2))+((r20*x2989)));
evalcond[4]=((((-1.0)*cj0*x2987))+((r00*x2989))+(((-1.0)*cj0*sj1*x2983))+(((-1.0)*x2986*x2988))+(((-1.0)*r02*x2990)));
evalcond[5]=((((-1.0)*x2985*x2987))+(((-1.0)*x2982*x2988))+(((-1.0)*r12*x2990))+(((-1.0)*sj0*sj1*x2983))+((r10*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2992=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2992;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2993=((1.0)*cj5);
IkReal x2994=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2993)));
j4eval[0]=x2994;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2993))))));
j4eval[2]=IKsign(x2994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2995=cj5*cj5;
IkReal x2996=r01*r01;
IkReal x2997=(r01*sj5);
IkReal x2998=(cj5*r00);
IkReal x2999=(((x2995*x2996))+(((-1.0)*(r02*r02)))+(((2.0)*x2997*x2998))+(((-1.0)*x2996))+(((-1.0)*x2995*(r00*r00))));
j4eval[0]=x2999;
j4eval[1]=IKsign(x2999);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2997))+x2998))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3000=cj5*cj5;
IkReal x3001=r01*r01;
IkReal x3002=(r01*sj5);
IkReal x3003=(cj5*r00);
CheckValue<IkReal> x3004 = IKatan2WithCheck(IkReal(((((-1.0)*x3002))+x3003)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3004.valid){
continue;
}
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3001))+(((-1.0)*x3000*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3000*x3001))+(((2.0)*x3002*x3003)))),-1);
if(!x3005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3004.value)+(((1.5707963267949)*(x3005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3006=IKsin(j4);
IkReal x3007=IKcos(j4);
IkReal x3008=(cj5*r10);
IkReal x3009=(r01*sj5);
IkReal x3010=((1.0)*cj2);
IkReal x3011=(cj5*r00);
IkReal x3012=(cj5*r20);
IkReal x3013=((1.0)*x3007);
IkReal x3014=((1.0)*x3006);
IkReal x3015=(sj5*x3006);
evalcond[0]=((((-1.0)*r22*x3013))+((r21*x3015))+(((-1.0)*x3012*x3014)));
evalcond[1]=((((-1.0)*r12*x3013))+((r11*x3015))+(((-1.0)*x3008*x3014)));
evalcond[2]=((((-1.0)*r02*x3014))+((x3007*x3011))+(((-1.0)*x3009*x3013)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3013))+(((-1.0)*x3011*x3014))+((x3006*x3009)));
evalcond[4]=((((-1.0)*r22*x3014))+(((-1.0)*r21*sj5*x3013))+((sj1*sj2))+(((-1.0)*cj1*x3010))+((x3007*x3012)));
evalcond[5]=((((-1.0)*r11*sj5*x3013))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3014))+((x3007*x3008))+(((-1.0)*sj1*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3016=((1.0)*cj5);
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3016)))),-1);
if(!x3017.valid){
continue;
}
CheckValue<IkReal> x3018 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3017.value)))+(x3018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3019=IKsin(j4);
IkReal x3020=IKcos(j4);
IkReal x3021=(cj5*r10);
IkReal x3022=(r01*sj5);
IkReal x3023=((1.0)*cj2);
IkReal x3024=(cj5*r00);
IkReal x3025=(cj5*r20);
IkReal x3026=((1.0)*x3020);
IkReal x3027=((1.0)*x3019);
IkReal x3028=(sj5*x3019);
evalcond[0]=(((r21*x3028))+(((-1.0)*x3025*x3027))+(((-1.0)*r22*x3026)));
evalcond[1]=((((-1.0)*r12*x3026))+((r11*x3028))+(((-1.0)*x3021*x3027)));
evalcond[2]=(((x3020*x3024))+(((-1.0)*x3022*x3026))+(((-1.0)*r02*x3027)));
evalcond[3]=((-1.0)+((x3019*x3022))+(((-1.0)*x3024*x3027))+(((-1.0)*r02*x3026)));
evalcond[4]=((((-1.0)*cj1*x3023))+((sj1*sj2))+((x3020*x3025))+(((-1.0)*r22*x3027))+(((-1.0)*r21*sj5*x3026)));
evalcond[5]=((((-1.0)*r12*x3027))+(((-1.0)*r11*sj5*x3026))+(((-1.0)*sj1*x3023))+(((-1.0)*cj1*sj2))+((x3020*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3029=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3029.value)))+(x3030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3031=IKsin(j4);
IkReal x3032=IKcos(j4);
IkReal x3033=(cj5*r10);
IkReal x3034=(r01*sj5);
IkReal x3035=((1.0)*cj2);
IkReal x3036=(cj5*r00);
IkReal x3037=(cj5*r20);
IkReal x3038=((1.0)*x3032);
IkReal x3039=((1.0)*x3031);
IkReal x3040=(sj5*x3031);
evalcond[0]=(((r21*x3040))+(((-1.0)*x3037*x3039))+(((-1.0)*r22*x3038)));
evalcond[1]=((((-1.0)*x3033*x3039))+(((-1.0)*r12*x3038))+((r11*x3040)));
evalcond[2]=((((-1.0)*r02*x3039))+((x3032*x3036))+(((-1.0)*x3034*x3038)));
evalcond[3]=((-1.0)+(((-1.0)*x3036*x3039))+(((-1.0)*r02*x3038))+((x3031*x3034)));
evalcond[4]=((((-1.0)*cj1*x3035))+(((-1.0)*r21*sj5*x3038))+((sj1*sj2))+((x3032*x3037))+(((-1.0)*r22*x3039)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x3039))+((x3032*x3033))+(((-1.0)*r11*sj5*x3038))+(((-1.0)*sj1*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3041=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3041;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3042=((1.0)*cj5);
IkReal x3043=((((-1.0)*r21*x3042))+(((-1.0)*r20*sj5)));
j4eval[0]=x3043;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3042))+((r11*sj5))))));
j4eval[2]=IKsign(x3043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3044=cj5*cj5;
IkReal x3045=r01*r01;
IkReal x3046=(cj5*r00);
IkReal x3047=(r01*sj5);
IkReal x3048=((((-2.0)*x3046*x3047))+x3045+(((-1.0)*x3044*x3045))+((x3044*(r00*r00)))+(r02*r02));
j4eval[0]=x3048;
j4eval[1]=((IKabs(r02))+(IKabs((x3046+(((-1.0)*x3047))))));
j4eval[2]=IKsign(x3048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3049=cj5*cj5;
IkReal x3050=r01*r01;
IkReal x3051=(r01*sj5);
IkReal x3052=(cj5*r00);
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3049*x3050))+x3050+(((-2.0)*x3051*x3052))+(r02*r02)+((x3049*(r00*r00))))),-1);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054 = IKatan2WithCheck(IkReal((x3052+(((-1.0)*x3051)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3053.value)))+(x3054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKsin(j4);
IkReal x3056=IKcos(j4);
IkReal x3057=(cj5*r10);
IkReal x3058=(r01*sj5);
IkReal x3059=(cj5*r00);
IkReal x3060=(cj5*r20);
IkReal x3061=((1.0)*x3056);
IkReal x3062=((1.0)*x3055);
IkReal x3063=(sj5*x3055);
evalcond[0]=((((-1.0)*r22*x3061))+(((-1.0)*x3060*x3062))+((r21*x3063)));
evalcond[1]=((((-1.0)*r12*x3061))+((r11*x3063))+(((-1.0)*x3057*x3062)));
evalcond[2]=((((-1.0)*x3058*x3061))+((x3056*x3059))+(((-1.0)*r02*x3062)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3061))+((x3055*x3058))+(((-1.0)*x3059*x3062)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3061))+((cj1*sj2))+((x3056*x3057))+(((-1.0)*r12*x3062)));
evalcond[5]=((((-1.0)*r21*sj5*x3061))+(((-1.0)*r22*x3062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3056*x3060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3064=((1.0)*cj5);
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3064))+(((-1.0)*r20*sj5)))),-1);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3064))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3065.value)))+(x3066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKsin(j4);
IkReal x3068=IKcos(j4);
IkReal x3069=(cj5*r10);
IkReal x3070=(r01*sj5);
IkReal x3071=(cj5*r00);
IkReal x3072=(cj5*r20);
IkReal x3073=((1.0)*x3068);
IkReal x3074=((1.0)*x3067);
IkReal x3075=(sj5*x3067);
evalcond[0]=((((-1.0)*x3072*x3074))+(((-1.0)*r22*x3073))+((r21*x3075)));
evalcond[1]=((((-1.0)*r12*x3073))+(((-1.0)*x3069*x3074))+((r11*x3075)));
evalcond[2]=((((-1.0)*r02*x3074))+((x3068*x3071))+(((-1.0)*x3070*x3073)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3073))+(((-1.0)*x3071*x3074))+((x3067*x3070)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3073))+(((-1.0)*r12*x3074))+((x3068*x3069)));
evalcond[5]=((((-1.0)*r21*sj5*x3073))+(((-1.0)*r22*x3074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3068*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3076 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3076.valid){
continue;
}
CheckValue<IkReal> x3077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3076.value)+(((1.5707963267949)*(x3077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3078=IKsin(j4);
IkReal x3079=IKcos(j4);
IkReal x3080=(cj5*r10);
IkReal x3081=(r01*sj5);
IkReal x3082=(cj5*r00);
IkReal x3083=(cj5*r20);
IkReal x3084=((1.0)*x3079);
IkReal x3085=((1.0)*x3078);
IkReal x3086=(sj5*x3078);
evalcond[0]=((((-1.0)*x3083*x3085))+((r21*x3086))+(((-1.0)*r22*x3084)));
evalcond[1]=((((-1.0)*x3080*x3085))+((r11*x3086))+(((-1.0)*r12*x3084)));
evalcond[2]=((((-1.0)*r02*x3085))+((x3079*x3082))+(((-1.0)*x3081*x3084)));
evalcond[3]=((1.0)+(((-1.0)*x3082*x3085))+(((-1.0)*r02*x3084))+((x3078*x3081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3079*x3080))+(((-1.0)*r12*x3085))+(((-1.0)*r11*sj5*x3084)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3084))+(((-1.0)*r22*x3085))+((x3079*x3083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3087=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3087);
rxp1_1=(px*r21);
rxp1_2=(r11*x3087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3088=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3088);
rxp1_1=(px*r21);
rxp1_2=(r11*x3088);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3089=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3089);
rxp1_1=(px*r21);
rxp1_2=(r11*x3089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3092=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3092.valid){
continue;
}
IkReal x3090=x3092.value;
IkReal x3091=(sj0*x3090);
cj4array[0]=(((cj2*sj1*x3091))+((cj1*sj2*x3091)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3093=IKsin(j4);
IkReal x3094=IKcos(j4);
IkReal x3095=(cj5*r20);
IkReal x3096=(r21*sj5);
IkReal x3097=((1.0)*x3093);
IkReal x3098=((1.0)*x3094);
evalcond[0]=((-1.0)*r02*x3093);
evalcond[1]=((((-1.0)*r02*x3098))+(((-1.0)*sj0)));
evalcond[2]=(((x3093*x3096))+(((-1.0)*x3095*x3097)));
evalcond[3]=(((r11*sj5*x3093))+(((-1.0)*cj5*r10*x3097)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3096*x3098))+((x3094*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3100=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3100.valid){
continue;
}
IkReal x3099=x3100.value;
cj4array[0]=(((cj1*cj2*x3099))+(((-1.0)*sj1*sj2*x3099)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3101=IKsin(j4);
IkReal x3102=IKcos(j4);
IkReal x3103=(r11*sj5);
IkReal x3104=((1.0)*sj0);
IkReal x3105=((1.0)*x3102);
IkReal x3106=((1.0)*cj5*x3101);
evalcond[0]=((-1.0)*r02*x3101);
evalcond[1]=((((-1.0)*x3104))+(((-1.0)*r02*x3105)));
evalcond[2]=((((-1.0)*r20*x3106))+((r21*sj5*x3101)));
evalcond[3]=((((-1.0)*r10*x3106))+((x3101*x3103)));
evalcond[4]=((((-1.0)*x3103*x3105))+(((-1.0)*cj1*sj2*x3104))+(((-1.0)*cj2*sj1*x3104))+((cj5*r10*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(r02,-1);
if(!x3107.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3107.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3108=IKsin(j4);
IkReal x3109=IKcos(j4);
IkReal x3110=((1.0)*sj0);
IkReal x3111=(cj5*x3109);
IkReal x3112=(sj5*x3108);
IkReal x3113=((1.0)*sj5*x3109);
IkReal x3114=((1.0)*cj5*x3108);
evalcond[0]=((-1.0)*r02*x3108);
evalcond[1]=((((-1.0)*r20*x3114))+((r21*x3112)));
evalcond[2]=((((-1.0)*r10*x3114))+((r11*x3112)));
evalcond[3]=((((-1.0)*r21*x3113))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3111)));
evalcond[4]=((((-1.0)*cj1*sj2*x3110))+(((-1.0)*cj2*sj1*x3110))+(((-1.0)*r11*x3113))+((r10*x3111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3115=((1.0)*sj0);
IkReal x3116=((1.0)*cj0);
CheckValue<IkReal> x3117 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3116))+(((-1.0)*r12*x3115)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3115))+(((-1.0)*r01*sj5*x3116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3117.valid){
continue;
}
CheckValue<IkReal> x3118=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3117.value)+(((1.5707963267949)*(x3118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3119=IKsin(j4);
IkReal x3120=IKcos(j4);
IkReal x3121=(cj5*r10);
IkReal x3122=(r01*sj5);
IkReal x3123=((1.0)*cj2);
IkReal x3124=(cj5*r00);
IkReal x3125=((1.0)*sj0);
IkReal x3126=(cj5*r20);
IkReal x3127=(cj1*sj2);
IkReal x3128=((1.0)*x3120);
IkReal x3129=((1.0)*x3119);
IkReal x3130=(sj5*x3119);
evalcond[0]=(((r21*x3130))+(((-1.0)*r22*x3128))+(((-1.0)*x3126*x3129)));
evalcond[1]=(cj0+(((-1.0)*r12*x3128))+((r11*x3130))+(((-1.0)*x3121*x3129)));
evalcond[2]=((((-1.0)*r02*x3128))+(((-1.0)*x3124*x3129))+((x3119*x3122))+(((-1.0)*x3125)));
evalcond[3]=(((x3120*x3126))+(((-1.0)*r21*sj5*x3128))+((sj1*sj2))+(((-1.0)*cj1*x3123))+(((-1.0)*r22*x3129)));
evalcond[4]=(((x3120*x3124))+(((-1.0)*cj0*sj1*x3123))+(((-1.0)*r02*x3129))+(((-1.0)*cj0*x3127))+(((-1.0)*x3122*x3128)));
evalcond[5]=(((x3120*x3121))+(((-1.0)*x3125*x3127))+(((-1.0)*r12*x3129))+(((-1.0)*r11*sj5*x3128))+(((-1.0)*sj0*sj1*x3123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3131=((1.0)*cj5);
CheckValue<IkReal> x3132 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3131))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3132.valid){
continue;
}
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3131)))),-1);
if(!x3133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3132.value)+(((1.5707963267949)*(x3133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3134=IKsin(j4);
IkReal x3135=IKcos(j4);
IkReal x3136=(cj5*r10);
IkReal x3137=(r01*sj5);
IkReal x3138=((1.0)*cj2);
IkReal x3139=(cj5*r00);
IkReal x3140=((1.0)*sj0);
IkReal x3141=(cj5*r20);
IkReal x3142=(cj1*sj2);
IkReal x3143=((1.0)*x3135);
IkReal x3144=((1.0)*x3134);
IkReal x3145=(sj5*x3134);
evalcond[0]=((((-1.0)*r22*x3143))+(((-1.0)*x3141*x3144))+((r21*x3145)));
evalcond[1]=((((-1.0)*r12*x3143))+cj0+(((-1.0)*x3136*x3144))+((r11*x3145)));
evalcond[2]=((((-1.0)*x3140))+((x3134*x3137))+(((-1.0)*r02*x3143))+(((-1.0)*x3139*x3144)));
evalcond[3]=((((-1.0)*r22*x3144))+((x3135*x3141))+((sj1*sj2))+(((-1.0)*r21*sj5*x3143))+(((-1.0)*cj1*x3138)));
evalcond[4]=((((-1.0)*cj0*sj1*x3138))+(((-1.0)*r02*x3144))+(((-1.0)*cj0*x3142))+((x3135*x3139))+(((-1.0)*x3137*x3143)));
evalcond[5]=((((-1.0)*r12*x3144))+(((-1.0)*x3140*x3142))+((x3135*x3136))+(((-1.0)*sj0*sj1*x3138))+(((-1.0)*r11*sj5*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3146=((1.0)*cj5);
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3146)))),-1);
if(!x3148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3147.value)+(((1.5707963267949)*(x3148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3149=IKsin(j4);
IkReal x3150=IKcos(j4);
IkReal x3151=(cj5*r10);
IkReal x3152=(r01*sj5);
IkReal x3153=((1.0)*cj2);
IkReal x3154=(cj5*r00);
IkReal x3155=((1.0)*sj0);
IkReal x3156=(cj5*r20);
IkReal x3157=(cj1*sj2);
IkReal x3158=((1.0)*x3150);
IkReal x3159=((1.0)*x3149);
IkReal x3160=(sj5*x3149);
evalcond[0]=((((-1.0)*r22*x3158))+(((-1.0)*x3156*x3159))+((r21*x3160)));
evalcond[1]=(cj0+((r11*x3160))+(((-1.0)*r12*x3158))+(((-1.0)*x3151*x3159)));
evalcond[2]=((((-1.0)*x3155))+((x3149*x3152))+(((-1.0)*x3154*x3159))+(((-1.0)*r02*x3158)));
evalcond[3]=((((-1.0)*r22*x3159))+(((-1.0)*cj1*x3153))+((x3150*x3156))+((sj1*sj2))+(((-1.0)*r21*sj5*x3158)));
evalcond[4]=(((x3150*x3154))+(((-1.0)*cj0*sj1*x3153))+(((-1.0)*r02*x3159))+(((-1.0)*cj0*x3157))+(((-1.0)*x3152*x3158)));
evalcond[5]=((((-1.0)*sj0*sj1*x3153))+((x3150*x3151))+(((-1.0)*r11*sj5*x3158))+(((-1.0)*r12*x3159))+(((-1.0)*x3155*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3161=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3161;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3161);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3162=r21*r21;
IkReal x3163=cj5*cj5;
IkReal x3164=(sj1*sj2);
IkReal x3165=(r21*sj5);
IkReal x3166=(cj5*r20);
IkReal x3167=(cj1*cj2);
IkReal x3168=((((-1.0)*x3162))+((x3162*x3163))+(((2.0)*x3165*x3166))+(((-1.0)*(r22*r22)))+(((-1.0)*x3163*(r20*r20))));
j4eval[0]=x3168;
j4eval[1]=((IKabs((((r22*x3164))+(((-1.0)*r22*x3167)))))+(IKabs((((x3166*x3167))+(((-1.0)*x3165*x3167))+(((-1.0)*x3164*x3166))+((x3164*x3165))))));
j4eval[2]=IKsign(x3168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3169=IKsin(j0);
IkReal x3170=IKcos(j0);
evalcond[0]=((((0.425)*x3170))+(((-1.0)*px))+(((-0.10915)*x3169)));
evalcond[1]=((((0.10915)*x3170))+(((-1.0)*py))+(((0.425)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3171=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3171;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3172=((1.0)*cj5);
IkReal x3173=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3172)));
j4eval[0]=x3173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3172)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3174=((1.0)*cj5);
IkReal x3175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3174)));
j4eval[0]=x3175;
j4eval[1]=IKsign(x3175);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3174))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*cj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3176)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3176))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3177.value)))+(x3178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKcos(j4);
IkReal x3180=IKsin(j4);
IkReal x3181=((1.0)*sj0);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r10);
IkReal x3184=(cj5*r20);
IkReal x3185=((1.0)*x3179);
IkReal x3186=((1.0)*x3180);
IkReal x3187=(sj5*x3179);
IkReal x3188=(sj5*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3184*x3185))+((r21*x3187)));
evalcond[1]=((((-1.0)*x3184*x3186))+(((-1.0)*r22*x3185))+((r21*x3188)));
evalcond[2]=((((-1.0)*x3183*x3186))+cj0+((r11*x3188))+(((-1.0)*r12*x3185)));
evalcond[3]=(((r01*x3187))+(((-1.0)*x3182*x3185))+(((-1.0)*cj0))+((r02*x3180)));
evalcond[4]=((((-1.0)*x3183*x3185))+((r12*x3180))+((r11*x3187))+(((-1.0)*x3181)));
evalcond[5]=((((-1.0)*r02*x3185))+((r01*x3188))+(((-1.0)*x3182*x3186))+(((-1.0)*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3189=((1.0)*cj5);
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3189)))),-1);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3189))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3190.value)))+(x3191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3192=IKcos(j4);
IkReal x3193=IKsin(j4);
IkReal x3194=((1.0)*sj0);
IkReal x3195=(cj5*r00);
IkReal x3196=(cj5*r10);
IkReal x3197=(cj5*r20);
IkReal x3198=((1.0)*x3192);
IkReal x3199=((1.0)*x3193);
IkReal x3200=(sj5*x3192);
IkReal x3201=(sj5*x3193);
evalcond[0]=((((-1.0)*x3197*x3198))+((r22*x3193))+((r21*x3200)));
evalcond[1]=((((-1.0)*x3197*x3199))+(((-1.0)*r22*x3198))+((r21*x3201)));
evalcond[2]=((((-1.0)*x3196*x3199))+cj0+((r11*x3201))+(((-1.0)*r12*x3198)));
evalcond[3]=(((r01*x3200))+((r02*x3193))+(((-1.0)*x3195*x3198))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3196*x3198))+((r11*x3200))+((r12*x3193))+(((-1.0)*x3194)));
evalcond[5]=(((r01*x3201))+(((-1.0)*r02*x3198))+(((-1.0)*x3194))+(((-1.0)*x3195*x3199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
CheckValue<IkReal> x3203=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3202.value)+(((1.5707963267949)*(x3203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3204=IKcos(j4);
IkReal x3205=IKsin(j4);
IkReal x3206=((1.0)*sj0);
IkReal x3207=(cj5*r00);
IkReal x3208=(cj5*r10);
IkReal x3209=(cj5*r20);
IkReal x3210=((1.0)*x3204);
IkReal x3211=((1.0)*x3205);
IkReal x3212=(sj5*x3204);
IkReal x3213=(sj5*x3205);
evalcond[0]=(((r22*x3205))+(((-1.0)*x3209*x3210))+((r21*x3212)));
evalcond[1]=((((-1.0)*x3209*x3211))+((r21*x3213))+(((-1.0)*r22*x3210)));
evalcond[2]=(cj0+((r11*x3213))+(((-1.0)*r12*x3210))+(((-1.0)*x3208*x3211)));
evalcond[3]=(((r01*x3212))+((r02*x3205))+(((-1.0)*x3207*x3210))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3205))+((r11*x3212))+(((-1.0)*x3206))+(((-1.0)*x3208*x3210)));
evalcond[5]=(((r01*x3213))+(((-1.0)*x3206))+(((-1.0)*r02*x3210))+(((-1.0)*x3207*x3211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3214=IKsin(j0);
IkReal x3215=IKcos(j0);
evalcond[0]=((((-0.10915)*x3214))+(((-1.0)*px))+(((0.425)*x3215)));
evalcond[1]=((((0.10915)*x3215))+(((-1.0)*py))+(((0.425)*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3216=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3216;
j4eval[1]=IKsign(x3216);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3217=((1.0)*cj5);
IkReal x3218=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3217)));
j4eval[0]=x3218;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3217)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3219=cj5*cj5;
IkReal x3220=((1.0)*r20);
IkReal x3221=(r01*r21);
IkReal x3222=(r21*sj5);
IkReal x3223=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3222))+(((-1.0)*r00*x3219*x3220))+(((-1.0)*x3221))+((x3219*x3221)));
j4eval[0]=x3223;
j4eval[1]=((IKabs((((cj0*x3222))+(((-1.0)*cj0*cj5*x3220)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3224=cj5*cj5;
IkReal x3225=((1.0)*r20);
IkReal x3226=(r01*r21);
IkReal x3227=(r21*sj5);
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3227))+(((-1.0)*cj0*cj5*x3225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
CheckValue<IkReal> x3229=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3227))+(((-1.0)*x3226))+((x3224*x3226))+(((-1.0)*r00*x3224*x3225)))),-1);
if(!x3229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3228.value)+(((1.5707963267949)*(x3229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3230=IKcos(j4);
IkReal x3231=IKsin(j4);
IkReal x3232=(cj5*r00);
IkReal x3233=(cj5*r10);
IkReal x3234=(cj5*r20);
IkReal x3235=((1.0)*x3230);
IkReal x3236=((1.0)*x3231);
IkReal x3237=(sj5*x3230);
IkReal x3238=(sj5*x3231);
evalcond[0]=(((r22*x3231))+(((-1.0)*x3234*x3235))+((r21*x3237)));
evalcond[1]=((((-1.0)*r22*x3235))+(((-1.0)*x3234*x3236))+((r21*x3238)));
evalcond[2]=(cj0+((r01*x3237))+(((-1.0)*x3232*x3235))+((r02*x3231)));
evalcond[3]=(sj0+((r11*x3237))+(((-1.0)*x3233*x3235))+((r12*x3231)));
evalcond[4]=(cj0+((r11*x3238))+(((-1.0)*x3233*x3236))+(((-1.0)*r12*x3235)));
evalcond[5]=((((-1.0)*r02*x3235))+(((-1.0)*sj0))+((r01*x3238))+(((-1.0)*x3232*x3236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3239=((1.0)*cj5);
CheckValue<IkReal> x3240 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3239)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3240.valid){
continue;
}
CheckValue<IkReal> x3241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3239)))),-1);
if(!x3241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3240.value)+(((1.5707963267949)*(x3241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3242=IKcos(j4);
IkReal x3243=IKsin(j4);
IkReal x3244=(cj5*r00);
IkReal x3245=(cj5*r10);
IkReal x3246=(cj5*r20);
IkReal x3247=((1.0)*x3242);
IkReal x3248=((1.0)*x3243);
IkReal x3249=(sj5*x3242);
IkReal x3250=(sj5*x3243);
evalcond[0]=(((r22*x3243))+((r21*x3249))+(((-1.0)*x3246*x3247)));
evalcond[1]=(((r21*x3250))+(((-1.0)*x3246*x3248))+(((-1.0)*r22*x3247)));
evalcond[2]=(((r01*x3249))+cj0+(((-1.0)*x3244*x3247))+((r02*x3243)));
evalcond[3]=(sj0+((r12*x3243))+(((-1.0)*x3245*x3247))+((r11*x3249)));
evalcond[4]=(cj0+((r11*x3250))+(((-1.0)*r12*x3247))+(((-1.0)*x3245*x3248)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3244*x3248))+((r01*x3250))+(((-1.0)*r02*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
CheckValue<IkReal> x3252=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3251.value)+(((1.5707963267949)*(x3252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3253=IKcos(j4);
IkReal x3254=IKsin(j4);
IkReal x3255=(cj5*r00);
IkReal x3256=(cj5*r10);
IkReal x3257=(cj5*r20);
IkReal x3258=((1.0)*x3253);
IkReal x3259=((1.0)*x3254);
IkReal x3260=(sj5*x3253);
IkReal x3261=(sj5*x3254);
evalcond[0]=(((r21*x3260))+(((-1.0)*x3257*x3258))+((r22*x3254)));
evalcond[1]=(((r21*x3261))+(((-1.0)*x3257*x3259))+(((-1.0)*r22*x3258)));
evalcond[2]=(((r01*x3260))+cj0+((r02*x3254))+(((-1.0)*x3255*x3258)));
evalcond[3]=(((r12*x3254))+sj0+(((-1.0)*x3256*x3258))+((r11*x3260)));
evalcond[4]=(cj0+(((-1.0)*x3256*x3259))+((r11*x3261))+(((-1.0)*r12*x3258)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3258))+((r01*x3261))+(((-1.0)*x3255*x3259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3262=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3263=((1.0)*cj5);
IkReal x3264=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)));
j4eval[0]=x3264;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3263))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3265=((1.0)*cj5);
IkReal x3266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3265)));
j4eval[0]=x3266;
j4eval[1]=IKsign(x3266);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3267=((1.0)*cj5);
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3267)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3267)))),-1);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3268.value)+(((1.5707963267949)*(x3269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKcos(j4);
IkReal x3271=IKsin(j4);
IkReal x3272=((1.0)*sj0);
IkReal x3273=(cj5*r00);
IkReal x3274=(cj5*r10);
IkReal x3275=(cj5*r20);
IkReal x3276=((1.0)*x3270);
IkReal x3277=((1.0)*x3271);
IkReal x3278=(sj5*x3270);
IkReal x3279=(sj5*x3271);
evalcond[0]=(((r21*x3278))+(((-1.0)*x3275*x3276))+((r22*x3271)));
evalcond[1]=(((r21*x3279))+(((-1.0)*x3275*x3277))+(((-1.0)*r22*x3276)));
evalcond[2]=((((-1.0)*r12*x3276))+cj0+(((-1.0)*x3274*x3277))+((r11*x3279)));
evalcond[3]=((((-1.0)*x3273*x3276))+((r01*x3278))+((r02*x3271))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3274*x3276))+(((-1.0)*x3272))+((r11*x3278))+((r12*x3271)));
evalcond[5]=((((-1.0)*x3273*x3277))+((r01*x3279))+(((-1.0)*x3272))+(((-1.0)*r02*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3280=((1.0)*cj5);
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3280)))),-1);
if(!x3281.valid){
continue;
}
CheckValue<IkReal> x3282 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3280))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3281.value)))+(x3282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3283=IKcos(j4);
IkReal x3284=IKsin(j4);
IkReal x3285=((1.0)*sj0);
IkReal x3286=(cj5*r00);
IkReal x3287=(cj5*r10);
IkReal x3288=(cj5*r20);
IkReal x3289=((1.0)*x3283);
IkReal x3290=((1.0)*x3284);
IkReal x3291=(sj5*x3283);
IkReal x3292=(sj5*x3284);
evalcond[0]=(((r22*x3284))+((r21*x3291))+(((-1.0)*x3288*x3289)));
evalcond[1]=((((-1.0)*r22*x3289))+((r21*x3292))+(((-1.0)*x3288*x3290)));
evalcond[2]=((((-1.0)*r12*x3289))+cj0+(((-1.0)*x3287*x3290))+((r11*x3292)));
evalcond[3]=(((r01*x3291))+((r02*x3284))+(((-1.0)*x3286*x3289))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3285))+(((-1.0)*x3287*x3289))+((r11*x3291))+((r12*x3284)));
evalcond[5]=(((r01*x3292))+(((-1.0)*x3285))+(((-1.0)*r02*x3289))+(((-1.0)*x3286*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3293.value)+(((1.5707963267949)*(x3294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3295=IKcos(j4);
IkReal x3296=IKsin(j4);
IkReal x3297=((1.0)*sj0);
IkReal x3298=(cj5*r00);
IkReal x3299=(cj5*r10);
IkReal x3300=(cj5*r20);
IkReal x3301=((1.0)*x3295);
IkReal x3302=((1.0)*x3296);
IkReal x3303=(sj5*x3295);
IkReal x3304=(sj5*x3296);
evalcond[0]=(((r21*x3303))+((r22*x3296))+(((-1.0)*x3300*x3301)));
evalcond[1]=(((r21*x3304))+(((-1.0)*r22*x3301))+(((-1.0)*x3300*x3302)));
evalcond[2]=(cj0+((r11*x3304))+(((-1.0)*r12*x3301))+(((-1.0)*x3299*x3302)));
evalcond[3]=(((r02*x3296))+(((-1.0)*x3298*x3301))+((r01*x3303))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3297))+((r11*x3303))+(((-1.0)*x3299*x3301))+((r12*x3296)));
evalcond[5]=((((-1.0)*x3297))+(((-1.0)*x3298*x3302))+(((-1.0)*r02*x3301))+((r01*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3305=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3305;
j4eval[1]=IKsign(x3305);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3306=((1.0)*cj5);
IkReal x3307=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3306)));
j4eval[0]=x3307;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3306)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3308=cj5*cj5;
IkReal x3309=((1.0)*r20);
IkReal x3310=(r01*r21);
IkReal x3311=(r21*sj5);
IkReal x3312=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3311))+(((-1.0)*r00*x3308*x3309))+(((-1.0)*x3310))+((x3308*x3310)));
j4eval[0]=x3312;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3311))+(((-1.0)*cj0*cj5*x3309))))));
j4eval[2]=IKsign(x3312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3313=cj5*cj5;
IkReal x3314=((1.0)*r20);
IkReal x3315=(r01*r21);
IkReal x3316=(r21*sj5);
CheckValue<IkReal> x3317 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3316))+(((-1.0)*cj0*cj5*x3314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3317.valid){
continue;
}
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3316))+((x3313*x3315))+(((-1.0)*x3315))+(((-1.0)*r00*x3313*x3314)))),-1);
if(!x3318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3317.value)+(((1.5707963267949)*(x3318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3319=IKcos(j4);
IkReal x3320=IKsin(j4);
IkReal x3321=(cj5*r00);
IkReal x3322=(cj5*r10);
IkReal x3323=(cj5*r20);
IkReal x3324=((1.0)*x3319);
IkReal x3325=((1.0)*x3320);
IkReal x3326=(sj5*x3319);
IkReal x3327=(sj5*x3320);
evalcond[0]=(((r22*x3320))+((r21*x3326))+(((-1.0)*x3323*x3324)));
evalcond[1]=(((r21*x3327))+(((-1.0)*x3323*x3325))+(((-1.0)*r22*x3324)));
evalcond[2]=(cj0+((r01*x3326))+(((-1.0)*x3321*x3324))+((r02*x3320)));
evalcond[3]=(((r12*x3320))+sj0+((r11*x3326))+(((-1.0)*x3322*x3324)));
evalcond[4]=(cj0+((r11*x3327))+(((-1.0)*x3322*x3325))+(((-1.0)*r12*x3324)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3324))+((r01*x3327))+(((-1.0)*x3321*x3325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3328=((1.0)*cj5);
CheckValue<IkReal> x3329 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3328)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3329.valid){
continue;
}
CheckValue<IkReal> x3330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3328)))),-1);
if(!x3330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3329.value)+(((1.5707963267949)*(x3330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3331=IKcos(j4);
IkReal x3332=IKsin(j4);
IkReal x3333=(cj5*r00);
IkReal x3334=(cj5*r10);
IkReal x3335=(cj5*r20);
IkReal x3336=((1.0)*x3331);
IkReal x3337=((1.0)*x3332);
IkReal x3338=(sj5*x3331);
IkReal x3339=(sj5*x3332);
evalcond[0]=(((r21*x3338))+((r22*x3332))+(((-1.0)*x3335*x3336)));
evalcond[1]=(((r21*x3339))+(((-1.0)*r22*x3336))+(((-1.0)*x3335*x3337)));
evalcond[2]=(cj0+((r02*x3332))+((r01*x3338))+(((-1.0)*x3333*x3336)));
evalcond[3]=(sj0+((r12*x3332))+(((-1.0)*x3334*x3336))+((r11*x3338)));
evalcond[4]=(cj0+(((-1.0)*x3334*x3337))+((r11*x3339))+(((-1.0)*r12*x3336)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3336))+((r01*x3339))+(((-1.0)*x3333*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3340 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3340.valid){
continue;
}
CheckValue<IkReal> x3341=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3340.value)+(((1.5707963267949)*(x3341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3342=IKcos(j4);
IkReal x3343=IKsin(j4);
IkReal x3344=(cj5*r00);
IkReal x3345=(cj5*r10);
IkReal x3346=(cj5*r20);
IkReal x3347=((1.0)*x3342);
IkReal x3348=((1.0)*x3343);
IkReal x3349=(sj5*x3342);
IkReal x3350=(sj5*x3343);
evalcond[0]=((((-1.0)*x3346*x3347))+((r22*x3343))+((r21*x3349)));
evalcond[1]=((((-1.0)*x3346*x3348))+((r21*x3350))+(((-1.0)*r22*x3347)));
evalcond[2]=(cj0+((r02*x3343))+(((-1.0)*x3344*x3347))+((r01*x3349)));
evalcond[3]=(sj0+(((-1.0)*x3345*x3347))+((r11*x3349))+((r12*x3343)));
evalcond[4]=(cj0+((r11*x3350))+(((-1.0)*x3345*x3348))+(((-1.0)*r12*x3347)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3350))+(((-1.0)*r02*x3347))+(((-1.0)*x3344*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3351=IKcos(j0);
IkReal x3352=IKsin(j0);
evalcond[0]=((((-0.10915)*x3352))+(((-1.0)*px))+(((-0.425)*x3351)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3351))+(((-0.425)*x3352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3353=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3353;
j4eval[1]=IKsign(x3353);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3354=((1.0)*cj5);
IkReal x3355=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3354)));
j4eval[0]=x3355;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3354))))));
j4eval[2]=IKsign(x3355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3356=cj5*cj5;
IkReal x3357=((1.0)*r20);
IkReal x3358=(r01*r21);
IkReal x3359=(r21*sj5);
IkReal x3360=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3359))+((x3356*x3358))+(((-1.0)*r00*x3356*x3357))+(((-1.0)*x3358)));
j4eval[0]=x3360;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3357))+((cj0*x3359)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3361=cj5*cj5;
IkReal x3362=((1.0)*r20);
IkReal x3363=(r01*r21);
IkReal x3364=(r21*sj5);
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3364))+(((-1.0)*cj0*cj5*x3362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3363))+(((-1.0)*r00*x3361*x3362))+((x3361*x3363))+((cj5*r00*x3364)))),-1);
if(!x3366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3365.value)+(((1.5707963267949)*(x3366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3367=IKcos(j4);
IkReal x3368=IKsin(j4);
IkReal x3369=(cj5*r00);
IkReal x3370=(cj5*r10);
IkReal x3371=(cj5*r20);
IkReal x3372=((1.0)*x3367);
IkReal x3373=((1.0)*x3368);
IkReal x3374=(sj5*x3367);
IkReal x3375=(sj5*x3368);
evalcond[0]=(((r22*x3368))+(((-1.0)*x3371*x3372))+((r21*x3374)));
evalcond[1]=((((-1.0)*r22*x3372))+(((-1.0)*x3371*x3373))+((r21*x3375)));
evalcond[2]=(((r01*x3374))+((r02*x3368))+cj0+(((-1.0)*x3369*x3372)));
evalcond[3]=(sj0+(((-1.0)*x3370*x3372))+((r12*x3368))+((r11*x3374)));
evalcond[4]=(cj0+(((-1.0)*x3370*x3373))+(((-1.0)*r12*x3372))+((r11*x3375)));
evalcond[5]=(((r01*x3375))+(((-1.0)*sj0))+(((-1.0)*r02*x3372))+(((-1.0)*x3369*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3376=((1.0)*cj5);
CheckValue<IkReal> x3377 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3376)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3377.valid){
continue;
}
CheckValue<IkReal> x3378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3376)))),-1);
if(!x3378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3377.value)+(((1.5707963267949)*(x3378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3379=IKcos(j4);
IkReal x3380=IKsin(j4);
IkReal x3381=(cj5*r00);
IkReal x3382=(cj5*r10);
IkReal x3383=(cj5*r20);
IkReal x3384=((1.0)*x3379);
IkReal x3385=((1.0)*x3380);
IkReal x3386=(sj5*x3379);
IkReal x3387=(sj5*x3380);
evalcond[0]=((((-1.0)*x3383*x3384))+((r21*x3386))+((r22*x3380)));
evalcond[1]=((((-1.0)*r22*x3384))+(((-1.0)*x3383*x3385))+((r21*x3387)));
evalcond[2]=(((r01*x3386))+cj0+(((-1.0)*x3381*x3384))+((r02*x3380)));
evalcond[3]=(sj0+(((-1.0)*x3382*x3384))+((r12*x3380))+((r11*x3386)));
evalcond[4]=(cj0+(((-1.0)*x3382*x3385))+((r11*x3387))+(((-1.0)*r12*x3384)));
evalcond[5]=(((r01*x3387))+(((-1.0)*sj0))+(((-1.0)*x3381*x3385))+(((-1.0)*r02*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3388.value)+(((1.5707963267949)*(x3389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKcos(j4);
IkReal x3391=IKsin(j4);
IkReal x3392=(cj5*r00);
IkReal x3393=(cj5*r10);
IkReal x3394=(cj5*r20);
IkReal x3395=((1.0)*x3390);
IkReal x3396=((1.0)*x3391);
IkReal x3397=(sj5*x3390);
IkReal x3398=(sj5*x3391);
evalcond[0]=((((-1.0)*x3394*x3395))+((r21*x3397))+((r22*x3391)));
evalcond[1]=((((-1.0)*r22*x3395))+(((-1.0)*x3394*x3396))+((r21*x3398)));
evalcond[2]=((((-1.0)*x3392*x3395))+cj0+((r01*x3397))+((r02*x3391)));
evalcond[3]=(sj0+((r11*x3397))+((r12*x3391))+(((-1.0)*x3393*x3395)));
evalcond[4]=(cj0+((r11*x3398))+(((-1.0)*r12*x3395))+(((-1.0)*x3393*x3396)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3392*x3396))+((r01*x3398))+(((-1.0)*r02*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3399=IKcos(j0);
IkReal x3400=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3399))+(((-0.10915)*x3400)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3400))+(((0.10915)*x3399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3401=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3401;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3402=((1.0)*cj5);
IkReal x3403=((((-1.0)*r01*x3402))+(((-1.0)*r00*sj5)));
j4eval[0]=x3403;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3402))))));
j4eval[2]=IKsign(x3403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3404=((1.0)*cj5);
IkReal x3405=((((-1.0)*r01*x3404))+(((-1.0)*r00*sj5)));
j4eval[0]=x3405;
j4eval[1]=IKsign(x3405);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3404))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3406=((1.0)*cj5);
CheckValue<IkReal> x3407 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3406))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3406))+(((-1.0)*r00*sj5)))),-1);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3407.value)+(((1.5707963267949)*(x3408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKcos(j4);
IkReal x3410=IKsin(j4);
IkReal x3411=((1.0)*sj0);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj5*r10);
IkReal x3414=(cj5*r20);
IkReal x3415=((1.0)*x3409);
IkReal x3416=((1.0)*x3410);
IkReal x3417=(sj5*x3409);
IkReal x3418=(sj5*x3410);
evalcond[0]=(((r22*x3410))+((r21*x3417))+(((-1.0)*x3414*x3415)));
evalcond[1]=((((-1.0)*r22*x3415))+((r21*x3418))+(((-1.0)*x3414*x3416)));
evalcond[2]=(cj0+((r11*x3418))+(((-1.0)*r12*x3415))+(((-1.0)*x3413*x3416)));
evalcond[3]=((((-1.0)*x3412*x3415))+((r02*x3410))+((r01*x3417))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3410))+((r11*x3417))+(((-1.0)*x3413*x3415))+(((-1.0)*x3411)));
evalcond[5]=((((-1.0)*x3412*x3416))+(((-1.0)*r02*x3415))+((r01*x3418))+(((-1.0)*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3419=((1.0)*cj5);
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3419)))),-1);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3420.value)))+(x3421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKcos(j4);
IkReal x3423=IKsin(j4);
IkReal x3424=((1.0)*sj0);
IkReal x3425=(cj5*r00);
IkReal x3426=(cj5*r10);
IkReal x3427=(cj5*r20);
IkReal x3428=((1.0)*x3422);
IkReal x3429=((1.0)*x3423);
IkReal x3430=(sj5*x3422);
IkReal x3431=(sj5*x3423);
evalcond[0]=((((-1.0)*x3427*x3428))+((r21*x3430))+((r22*x3423)));
evalcond[1]=((((-1.0)*x3427*x3429))+(((-1.0)*r22*x3428))+((r21*x3431)));
evalcond[2]=((((-1.0)*r12*x3428))+cj0+(((-1.0)*x3426*x3429))+((r11*x3431)));
evalcond[3]=(((r01*x3430))+(((-1.0)*x3425*x3428))+((r02*x3423))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3426*x3428))+(((-1.0)*x3424))+((r12*x3423))+((r11*x3430)));
evalcond[5]=(((r01*x3431))+(((-1.0)*x3424))+(((-1.0)*x3425*x3429))+(((-1.0)*r02*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3432.value)+(((1.5707963267949)*(x3433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3434=IKcos(j4);
IkReal x3435=IKsin(j4);
IkReal x3436=((1.0)*sj0);
IkReal x3437=(cj5*r00);
IkReal x3438=(cj5*r10);
IkReal x3439=(cj5*r20);
IkReal x3440=((1.0)*x3434);
IkReal x3441=((1.0)*x3435);
IkReal x3442=(sj5*x3434);
IkReal x3443=(sj5*x3435);
evalcond[0]=(((r21*x3442))+(((-1.0)*x3439*x3440))+((r22*x3435)));
evalcond[1]=(((r21*x3443))+(((-1.0)*x3439*x3441))+(((-1.0)*r22*x3440)));
evalcond[2]=(((r11*x3443))+cj0+(((-1.0)*x3438*x3441))+(((-1.0)*r12*x3440)));
evalcond[3]=((((-1.0)*x3437*x3440))+((r01*x3442))+((r02*x3435))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3442))+(((-1.0)*x3438*x3440))+(((-1.0)*x3436))+((r12*x3435)));
evalcond[5]=((((-1.0)*x3436))+(((-1.0)*x3437*x3441))+(((-1.0)*r02*x3440))+((r01*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3444=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3444;
j4eval[1]=IKsign(x3444);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3445=((1.0)*cj5);
IkReal x3446=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3445)));
j4eval[0]=x3446;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3445))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3447=cj5*cj5;
IkReal x3448=((1.0)*r20);
IkReal x3449=(r01*r21);
IkReal x3450=(r21*sj5);
IkReal x3451=(((cj5*r01*r20*sj5))+((x3447*x3449))+(((-1.0)*r02*r22))+(((-1.0)*x3449))+(((-1.0)*r00*x3447*x3448))+((cj5*r00*x3450)));
j4eval[0]=x3451;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3448))+((cj0*x3450))))));
j4eval[2]=IKsign(x3451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3452=cj5*cj5;
IkReal x3453=((1.0)*r20);
IkReal x3454=(r01*r21);
IkReal x3455=(r21*sj5);
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3455))+(((-1.0)*cj0*cj5*x3453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
CheckValue<IkReal> x3457=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3452*x3453))+(((-1.0)*x3454))+((cj5*r00*x3455))+((x3452*x3454)))),-1);
if(!x3457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3456.value)+(((1.5707963267949)*(x3457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3458=IKcos(j4);
IkReal x3459=IKsin(j4);
IkReal x3460=(cj5*r00);
IkReal x3461=(cj5*r10);
IkReal x3462=(cj5*r20);
IkReal x3463=((1.0)*x3458);
IkReal x3464=((1.0)*x3459);
IkReal x3465=(sj5*x3458);
IkReal x3466=(sj5*x3459);
evalcond[0]=((((-1.0)*x3462*x3463))+((r22*x3459))+((r21*x3465)));
evalcond[1]=((((-1.0)*x3462*x3464))+(((-1.0)*r22*x3463))+((r21*x3466)));
evalcond[2]=(cj0+(((-1.0)*x3460*x3463))+((r01*x3465))+((r02*x3459)));
evalcond[3]=(sj0+((r12*x3459))+(((-1.0)*x3461*x3463))+((r11*x3465)));
evalcond[4]=(cj0+(((-1.0)*x3461*x3464))+(((-1.0)*r12*x3463))+((r11*x3466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3463))+(((-1.0)*x3460*x3464))+((r01*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3467=((1.0)*cj5);
CheckValue<IkReal> x3468 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3467)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3468.valid){
continue;
}
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3467)))),-1);
if(!x3469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3468.value)+(((1.5707963267949)*(x3469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3470=IKcos(j4);
IkReal x3471=IKsin(j4);
IkReal x3472=(cj5*r00);
IkReal x3473=(cj5*r10);
IkReal x3474=(cj5*r20);
IkReal x3475=((1.0)*x3470);
IkReal x3476=((1.0)*x3471);
IkReal x3477=(sj5*x3470);
IkReal x3478=(sj5*x3471);
evalcond[0]=(((r21*x3477))+(((-1.0)*x3474*x3475))+((r22*x3471)));
evalcond[1]=((((-1.0)*r22*x3475))+((r21*x3478))+(((-1.0)*x3474*x3476)));
evalcond[2]=(cj0+(((-1.0)*x3472*x3475))+((r01*x3477))+((r02*x3471)));
evalcond[3]=(sj0+((r12*x3471))+(((-1.0)*x3473*x3475))+((r11*x3477)));
evalcond[4]=(cj0+(((-1.0)*r12*x3475))+(((-1.0)*x3473*x3476))+((r11*x3478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3475))+(((-1.0)*x3472*x3476))+((r01*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3479.value)+(((1.5707963267949)*(x3480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3481=IKcos(j4);
IkReal x3482=IKsin(j4);
IkReal x3483=(cj5*r00);
IkReal x3484=(cj5*r10);
IkReal x3485=(cj5*r20);
IkReal x3486=((1.0)*x3481);
IkReal x3487=((1.0)*x3482);
IkReal x3488=(sj5*x3481);
IkReal x3489=(sj5*x3482);
evalcond[0]=((((-1.0)*x3485*x3486))+((r21*x3488))+((r22*x3482)));
evalcond[1]=((((-1.0)*x3485*x3487))+(((-1.0)*r22*x3486))+((r21*x3489)));
evalcond[2]=((((-1.0)*x3483*x3486))+cj0+((r01*x3488))+((r02*x3482)));
evalcond[3]=(sj0+((r12*x3482))+((r11*x3488))+(((-1.0)*x3484*x3486)));
evalcond[4]=(cj0+(((-1.0)*r12*x3486))+((r11*x3489))+(((-1.0)*x3484*x3487)));
evalcond[5]=((((-1.0)*x3483*x3487))+(((-1.0)*sj0))+(((-1.0)*r02*x3486))+((r01*x3489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3490=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3491=((1.0)*cj5);
IkReal x3492=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)));
j4eval[0]=x3492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3493=((1.0)*cj5);
IkReal x3494=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3493)));
j4eval[0]=x3494;
j4eval[1]=IKsign(x3494);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3493))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3495=((1.0)*cj5);
CheckValue<IkReal> x3496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3495)))),-1);
if(!x3496.valid){
continue;
}
CheckValue<IkReal> x3497 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3495))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3496.value)))+(x3497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3498=IKcos(j4);
IkReal x3499=IKsin(j4);
IkReal x3500=((1.0)*sj0);
IkReal x3501=(cj5*r00);
IkReal x3502=(cj5*r10);
IkReal x3503=(cj5*r20);
IkReal x3504=((1.0)*x3498);
IkReal x3505=((1.0)*x3499);
IkReal x3506=(sj5*x3498);
IkReal x3507=(sj5*x3499);
evalcond[0]=(((r22*x3499))+(((-1.0)*x3503*x3504))+((r21*x3506)));
evalcond[1]=((((-1.0)*r22*x3504))+(((-1.0)*x3503*x3505))+((r21*x3507)));
evalcond[2]=((((-1.0)*r12*x3504))+cj0+(((-1.0)*x3502*x3505))+((r11*x3507)));
evalcond[3]=(((r01*x3506))+(((-1.0)*x3501*x3504))+((r02*x3499))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3500))+(((-1.0)*x3502*x3504))+((r11*x3506))+((r12*x3499)));
evalcond[5]=(((r01*x3507))+(((-1.0)*x3500))+(((-1.0)*x3501*x3505))+(((-1.0)*r02*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3508=((1.0)*cj5);
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3508)))),-1);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3509.value)))+(x3510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3511=IKcos(j4);
IkReal x3512=IKsin(j4);
IkReal x3513=((1.0)*sj0);
IkReal x3514=(cj5*r00);
IkReal x3515=(cj5*r10);
IkReal x3516=(cj5*r20);
IkReal x3517=((1.0)*x3511);
IkReal x3518=((1.0)*x3512);
IkReal x3519=(sj5*x3511);
IkReal x3520=(sj5*x3512);
evalcond[0]=(((r21*x3519))+((r22*x3512))+(((-1.0)*x3516*x3517)));
evalcond[1]=(((r21*x3520))+(((-1.0)*r22*x3517))+(((-1.0)*x3516*x3518)));
evalcond[2]=((((-1.0)*x3515*x3518))+cj0+((r11*x3520))+(((-1.0)*r12*x3517)));
evalcond[3]=((((-1.0)*x3514*x3517))+((r01*x3519))+((r02*x3512))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3515*x3517))+(((-1.0)*x3513))+((r11*x3519))+((r12*x3512)));
evalcond[5]=((((-1.0)*x3514*x3518))+(((-1.0)*r02*x3517))+((r01*x3520))+(((-1.0)*x3513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
CheckValue<IkReal> x3522=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3521.value)+(((1.5707963267949)*(x3522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3523=IKcos(j4);
IkReal x3524=IKsin(j4);
IkReal x3525=((1.0)*sj0);
IkReal x3526=(cj5*r00);
IkReal x3527=(cj5*r10);
IkReal x3528=(cj5*r20);
IkReal x3529=((1.0)*x3523);
IkReal x3530=((1.0)*x3524);
IkReal x3531=(sj5*x3523);
IkReal x3532=(sj5*x3524);
evalcond[0]=(((r21*x3531))+((r22*x3524))+(((-1.0)*x3528*x3529)));
evalcond[1]=((((-1.0)*r22*x3529))+((r21*x3532))+(((-1.0)*x3528*x3530)));
evalcond[2]=(((r11*x3532))+cj0+(((-1.0)*x3527*x3530))+(((-1.0)*r12*x3529)));
evalcond[3]=((((-1.0)*x3526*x3529))+((r02*x3524))+((r01*x3531))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3527*x3529))+((r11*x3531))+(((-1.0)*x3525))+((r12*x3524)));
evalcond[5]=((((-1.0)*r02*x3529))+(((-1.0)*x3525))+(((-1.0)*x3526*x3530))+((r01*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3533=(r00*sj5);
IkReal x3534=(cj5*r01);
IkReal x3535=(sj1*sj2);
IkReal x3536=(cj1*cj2);
IkReal x3537=((20000.0)*px);
IkReal x3538=((8500.0)*cj1);
IkReal x3539=((9738.0)*x3536);
CheckValue<IkReal> x3540=IKPowWithIntegerCheck(((((-2183.0)*x3536))+(((2183.0)*x3535))),-1);
if(!x3540.valid){
continue;
}
CheckValue<IkReal> x3541=IKPowWithIntegerCheck((x3535+(((-1.0)*x3536))),-1);
if(!x3541.valid){
continue;
}
if( IKabs(((x3540.value)*((((x3534*x3538))+((x3534*x3539))+(((-1.0)*x3535*x3537))+(((-9738.0)*x3533*x3535))+((x3533*x3539))+((x3533*x3538))+(((-9738.0)*x3534*x3535))+((x3536*x3537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3541.value)*((x3533+x3534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3540.value)*((((x3534*x3538))+((x3534*x3539))+(((-1.0)*x3535*x3537))+(((-9738.0)*x3533*x3535))+((x3533*x3539))+((x3533*x3538))+(((-9738.0)*x3534*x3535))+((x3536*x3537))))))+IKsqr(((x3541.value)*((x3533+x3534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3540.value)*((((x3534*x3538))+((x3534*x3539))+(((-1.0)*x3535*x3537))+(((-9738.0)*x3533*x3535))+((x3533*x3539))+((x3533*x3538))+(((-9738.0)*x3534*x3535))+((x3536*x3537))))), ((x3541.value)*((x3533+x3534))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3542=IKcos(j0);
IkReal x3543=IKsin(j0);
IkReal x3544=(cj5*r11);
IkReal x3545=(cj5*r01);
IkReal x3546=((1.0)*sj5);
IkReal x3547=((0.09465)*sj5);
IkReal x3548=(sj1*sj2);
IkReal x3549=((0.39225)*cj2);
IkReal x3550=((1.0)*cj2);
IkReal x3551=((0.39225)*x3548);
IkReal x3552=(cj1*x3542);
IkReal x3553=(cj1*x3543);
evalcond[0]=(((x3542*x3548))+(((-1.0)*r00*x3546))+(((-1.0)*x3545))+(((-1.0)*x3550*x3552)));
evalcond[1]=(((x3543*x3548))+(((-1.0)*r10*x3546))+(((-1.0)*x3544))+(((-1.0)*x3550*x3553)));
evalcond[2]=((((0.425)*x3552))+(((-0.09465)*x3545))+(((-1.0)*r00*x3547))+(((-1.0)*px))+(((-1.0)*x3542*x3551))+((x3549*x3552))+(((-0.10915)*x3543)));
evalcond[3]=((((0.425)*x3553))+(((-0.09465)*x3544))+(((0.10915)*x3542))+(((-1.0)*r10*x3547))+(((-1.0)*x3543*x3551))+(((-1.0)*py))+((x3549*x3553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3554=((1.0)*cj5);
IkReal x3555=((((-1.0)*r01*x3554))+(((-1.0)*r00*sj5)));
j4eval[0]=x3555;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3554)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3556=((1.0)*cj5);
IkReal x3557=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3556)));
j4eval[0]=x3557;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3556))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3558=((1.0)*sj0);
IkReal x3559=((1.0)*cj0);
IkReal x3560=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3560;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3559))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3558)))))+(IKabs(((((-1.0)*r12*x3558))+(((-1.0)*r02*x3559))))));
j4eval[2]=IKsign(x3560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3561=((-1.0)*r20);
IkReal x3563 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3563)==0){
continue;
}
IkReal x3562=pow(x3563,-0.5);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3561),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3564.value));
IkReal gconst97=(r21*x3562);
IkReal gconst98=(x3561*x3562);
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3566=((-1.0)*r20);
IkReal x3567=x3562;
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3566),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
IkReal x3568=((-1.0)*(x3569.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3568;
IkReal gconst96=x3568;
IkReal gconst97=(r21*x3567);
IkReal gconst98=(x3566*x3567);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3570=((-1.0)*r20);
IkReal x3571=x3562;
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3570),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
IkReal x3572=((-1.0)*(x3573.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3572;
IkReal gconst96=x3572;
IkReal gconst97=(r21*x3571);
IkReal gconst98=(x3570*x3571);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3574=((-1.0)*r20);
IkReal x3575=x3562;
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3574),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
IkReal x3576=((-1.0)*(x3577.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3576;
IkReal gconst96=x3576;
IkReal gconst97=(r21*x3575);
IkReal gconst98=(x3574*x3575);
IkReal x3578=((1.0)*(r22*r22));
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3578))),-1);
if(!x3582.valid){
continue;
}
IkReal x3579=x3582.value;
IkReal x3580=((1.0)*x3579);
IkReal x3581=((((-1.0)*x3580*(r21*r21*r21*r21)))+(((-1.0)*x3578))+(((-2.0)*x3579*(r20*r20)*(r21*r21)))+(((-1.0)*x3580*(r20*r20*r20*r20))));
j4eval[0]=x3581;
j4eval[1]=IKsign(x3581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3583=(cj1*cj2);
IkReal x3584=(gconst98*r20);
IkReal x3585=(sj1*sj2);
IkReal x3586=(gconst97*r21);
CheckValue<IkReal> x3587=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3586*x3586)))+(((-1.0)*(x3584*x3584)))+(((2.0)*x3584*x3586))+(((-1.0)*(r22*r22))))),-1);
if(!x3587.valid){
continue;
}
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3583))+((r22*x3585)))),IkReal((((x3583*x3584))+((x3585*x3586))+(((-1.0)*x3584*x3585))+(((-1.0)*x3583*x3586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3587.value)))+(x3588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3589=IKsin(j4);
IkReal x3590=IKcos(j4);
IkReal x3591=(gconst98*r10);
IkReal x3592=(gconst97*r21);
IkReal x3593=(gconst98*r20);
IkReal x3594=((1.0)*cj2);
IkReal x3595=((1.0)*sj0);
IkReal x3596=(gconst98*r00);
IkReal x3597=(cj1*sj2);
IkReal x3598=((1.0)*x3590);
IkReal x3599=((1.0)*x3589);
IkReal x3600=(gconst97*x3589);
IkReal x3601=(gconst97*x3590);
evalcond[0]=(((x3589*x3592))+(((-1.0)*r22*x3598))+(((-1.0)*x3593*x3599)));
evalcond[1]=(((r11*x3600))+cj0+(((-1.0)*x3591*x3599))+(((-1.0)*r12*x3598)));
evalcond[2]=((((-1.0)*r02*x3598))+((r01*x3600))+(((-1.0)*x3595))+(((-1.0)*x3596*x3599)));
evalcond[3]=((((-1.0)*cj1*x3594))+((x3590*x3592))+((sj1*sj2))+(((-1.0)*x3593*x3598))+((r22*x3589)));
evalcond[4]=(((r02*x3589))+(((-1.0)*cj0*x3597))+((r01*x3601))+(((-1.0)*cj0*sj1*x3594))+(((-1.0)*x3596*x3598)));
evalcond[5]=(((r11*x3601))+((r12*x3589))+(((-1.0)*x3591*x3598))+(((-1.0)*x3595*x3597))+(((-1.0)*sj0*sj1*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3602=((1.0)*gconst98);
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3602))+(((-1.0)*gconst97*r10)))),-1);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3603.value)))+(x3604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3605=IKsin(j4);
IkReal x3606=IKcos(j4);
IkReal x3607=(gconst98*r10);
IkReal x3608=(gconst97*r21);
IkReal x3609=(gconst98*r20);
IkReal x3610=((1.0)*cj2);
IkReal x3611=((1.0)*sj0);
IkReal x3612=(gconst98*r00);
IkReal x3613=(cj1*sj2);
IkReal x3614=((1.0)*x3606);
IkReal x3615=((1.0)*x3605);
IkReal x3616=(gconst97*x3605);
IkReal x3617=(gconst97*x3606);
evalcond[0]=((((-1.0)*r22*x3614))+(((-1.0)*x3609*x3615))+((x3605*x3608)));
evalcond[1]=(((r11*x3616))+cj0+(((-1.0)*r12*x3614))+(((-1.0)*x3607*x3615)));
evalcond[2]=((((-1.0)*x3612*x3615))+(((-1.0)*r02*x3614))+((r01*x3616))+(((-1.0)*x3611)));
evalcond[3]=(((x3606*x3608))+((r22*x3605))+((sj1*sj2))+(((-1.0)*x3609*x3614))+(((-1.0)*cj1*x3610)));
evalcond[4]=(((r02*x3605))+(((-1.0)*x3612*x3614))+(((-1.0)*cj0*sj1*x3610))+((r01*x3617))+(((-1.0)*cj0*x3613)));
evalcond[5]=(((r11*x3617))+(((-1.0)*x3611*x3613))+(((-1.0)*x3607*x3614))+(((-1.0)*sj0*sj1*x3610))+((r12*x3605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3618=((1.0)*gconst98);
CheckValue<IkReal> x3619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3618))+(((-1.0)*gconst97*r00)))),-1);
if(!x3619.valid){
continue;
}
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3619.value)))+(x3620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3621=IKsin(j4);
IkReal x3622=IKcos(j4);
IkReal x3623=(gconst98*r10);
IkReal x3624=(gconst97*r21);
IkReal x3625=(gconst98*r20);
IkReal x3626=((1.0)*cj2);
IkReal x3627=((1.0)*sj0);
IkReal x3628=(gconst98*r00);
IkReal x3629=(cj1*sj2);
IkReal x3630=((1.0)*x3622);
IkReal x3631=((1.0)*x3621);
IkReal x3632=(gconst97*x3621);
IkReal x3633=(gconst97*x3622);
evalcond[0]=((((-1.0)*r22*x3630))+((x3621*x3624))+(((-1.0)*x3625*x3631)));
evalcond[1]=(((r11*x3632))+cj0+(((-1.0)*r12*x3630))+(((-1.0)*x3623*x3631)));
evalcond[2]=((((-1.0)*x3627))+(((-1.0)*x3628*x3631))+(((-1.0)*r02*x3630))+((r01*x3632)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3626))+((x3622*x3624))+((r22*x3621))+(((-1.0)*x3625*x3630)));
evalcond[4]=((((-1.0)*x3628*x3630))+(((-1.0)*cj0*x3629))+((r02*x3621))+((r01*x3633))+(((-1.0)*cj0*sj1*x3626)));
evalcond[5]=(((r11*x3633))+(((-1.0)*x3627*x3629))+((r12*x3621))+(((-1.0)*sj0*sj1*x3626))+(((-1.0)*x3623*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3634=((-1.0)*r21);
IkReal x3636 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3636)==0){
continue;
}
IkReal x3635=pow(x3636,-0.5);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(x3634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3637.value))));
IkReal gconst100=(x3634*x3635);
IkReal gconst101=((1.0)*r20*x3635);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3639=((-1.0)*r21);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(x3639),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
IkReal x3640=((1.0)*(x3642.value));
IkReal x3641=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3640)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3640)));
IkReal gconst100=(x3639*x3641);
IkReal gconst101=((1.0)*r20*x3641);
IkReal x3643=r22*r22;
IkReal x3644=((1.0)*x3643);
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(((-1.0)+x3643),-1);
if(!x3648.valid){
continue;
}
IkReal x3645=x3648.value;
if((((1.0)+(((-1.0)*x3644)))) < -0.00001)
continue;
IkReal x3646=IKsqrt(((1.0)+(((-1.0)*x3644))));
IkReal x3647=(cj0*x3645*x3646);
j4eval[0]=((IKabs(((((-1.0)*x3644*x3647))+x3647)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3649=((-1.0)*r21);
CheckValue<IkReal> x3652 = IKatan2WithCheck(IkReal(x3649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
IkReal x3650=((1.0)*(x3652.value));
IkReal x3651=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3650)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3650)));
IkReal gconst100=(x3649*x3651);
IkReal gconst101=((1.0)*r20*x3651);
IkReal x3653=r22*r22;
IkReal x3654=((1.0)*x3653);
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(((-1.0)+x3653),-1);
if(!x3658.valid){
continue;
}
IkReal x3655=x3658.value;
if((((1.0)+(((-1.0)*x3654)))) < -0.00001)
continue;
IkReal x3656=IKsqrt(((1.0)+(((-1.0)*x3654))));
IkReal x3657=(sj0*x3655*x3656);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3657+(((-1.0)*x3654*x3657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3659=((-1.0)*r21);
CheckValue<IkReal> x3662 = IKatan2WithCheck(IkReal(x3659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3662.valid){
continue;
}
IkReal x3660=((1.0)*(x3662.value));
IkReal x3661=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3660)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3660)));
IkReal gconst100=(x3659*x3661);
IkReal gconst101=((1.0)*r20*x3661);
IkReal x3663=r22*r22;
IkReal x3664=(r12*sj0);
IkReal x3665=(cj0*r02);
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(((-1.0)+x3663),-1);
if(!x3669.valid){
continue;
}
IkReal x3666=x3669.value;
if((((1.0)+(((-1.0)*x3663)))) < -0.00001)
continue;
IkReal x3667=IKsqrt(((1.0)+(((-1.0)*x3663))));
IkReal x3668=(r22*x3666*x3667);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3664*x3668))+((x3665*x3668)))))+(IKabs(((((-1.0)*x3665))+(((-1.0)*x3664))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3670=((1.0)*sj0);
IkReal x3671=((1.0)*gconst100);
CheckValue<IkReal> x3672 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3670))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3670))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3671))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3672.valid){
continue;
}
CheckValue<IkReal> x3673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3671))+(((-1.0)*gconst101*r21)))),-1);
if(!x3673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3672.value)+(((1.5707963267949)*(x3673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3674=IKsin(j4);
IkReal x3675=IKcos(j4);
IkReal x3676=(gconst101*r20);
IkReal x3677=(gconst101*r10);
IkReal x3678=((1.0)*cj2);
IkReal x3679=(gconst101*r00);
IkReal x3680=((1.0)*sj0);
IkReal x3681=(cj1*sj2);
IkReal x3682=((1.0)*x3675);
IkReal x3683=((1.0)*x3674);
IkReal x3684=(gconst100*x3674);
IkReal x3685=(gconst100*x3675);
evalcond[0]=((((-1.0)*r22*x3682))+((r21*x3684))+(((-1.0)*x3676*x3683)));
evalcond[1]=(cj0+(((-1.0)*x3677*x3683))+(((-1.0)*r12*x3682))+((r11*x3684)));
evalcond[2]=(((r01*x3684))+(((-1.0)*x3680))+(((-1.0)*x3679*x3683))+(((-1.0)*r02*x3682)));
evalcond[3]=(((r21*x3685))+((sj1*sj2))+(((-1.0)*x3676*x3682))+((r22*x3674))+(((-1.0)*cj1*x3678)));
evalcond[4]=(((r01*x3685))+(((-1.0)*cj0*x3681))+((r02*x3674))+(((-1.0)*x3679*x3682))+(((-1.0)*cj0*sj1*x3678)));
evalcond[5]=(((r12*x3674))+(((-1.0)*x3677*x3682))+(((-1.0)*x3680*x3681))+((r11*x3685))+(((-1.0)*sj0*sj1*x3678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3686=((1.0)*gconst101);
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3686))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3686)))),-1);
if(!x3688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3687.value)+(((1.5707963267949)*(x3688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3689=IKsin(j4);
IkReal x3690=IKcos(j4);
IkReal x3691=(gconst101*r20);
IkReal x3692=(gconst101*r10);
IkReal x3693=((1.0)*cj2);
IkReal x3694=(gconst101*r00);
IkReal x3695=((1.0)*sj0);
IkReal x3696=(cj1*sj2);
IkReal x3697=((1.0)*x3690);
IkReal x3698=((1.0)*x3689);
IkReal x3699=(gconst100*x3689);
IkReal x3700=(gconst100*x3690);
evalcond[0]=((((-1.0)*r22*x3697))+((r21*x3699))+(((-1.0)*x3691*x3698)));
evalcond[1]=(cj0+(((-1.0)*r12*x3697))+((r11*x3699))+(((-1.0)*x3692*x3698)));
evalcond[2]=(((r01*x3699))+(((-1.0)*r02*x3697))+(((-1.0)*x3695))+(((-1.0)*x3694*x3698)));
evalcond[3]=((((-1.0)*cj1*x3693))+((sj1*sj2))+((r21*x3700))+((r22*x3689))+(((-1.0)*x3691*x3697)));
evalcond[4]=((((-1.0)*cj0*x3696))+((r01*x3700))+(((-1.0)*cj0*sj1*x3693))+((r02*x3689))+(((-1.0)*x3694*x3697)));
evalcond[5]=(((r11*x3700))+((r12*x3689))+(((-1.0)*sj0*sj1*x3693))+(((-1.0)*x3695*x3696))+(((-1.0)*x3692*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3701=((1.0)*gconst101);
CheckValue<IkReal> x3702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3701))+(((-1.0)*gconst100*r00)))),-1);
if(!x3702.valid){
continue;
}
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3702.value)))+(x3703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3704=IKsin(j4);
IkReal x3705=IKcos(j4);
IkReal x3706=(gconst101*r20);
IkReal x3707=(gconst101*r10);
IkReal x3708=((1.0)*cj2);
IkReal x3709=(gconst101*r00);
IkReal x3710=((1.0)*sj0);
IkReal x3711=(cj1*sj2);
IkReal x3712=((1.0)*x3705);
IkReal x3713=((1.0)*x3704);
IkReal x3714=(gconst100*x3704);
IkReal x3715=(gconst100*x3705);
evalcond[0]=((((-1.0)*x3706*x3713))+((r21*x3714))+(((-1.0)*r22*x3712)));
evalcond[1]=(((r11*x3714))+cj0+(((-1.0)*x3707*x3713))+(((-1.0)*r12*x3712)));
evalcond[2]=((((-1.0)*r02*x3712))+(((-1.0)*x3710))+((r01*x3714))+(((-1.0)*x3709*x3713)));
evalcond[3]=((((-1.0)*cj1*x3708))+((sj1*sj2))+(((-1.0)*x3706*x3712))+((r21*x3715))+((r22*x3704)));
evalcond[4]=((((-1.0)*cj0*sj1*x3708))+(((-1.0)*cj0*x3711))+((r01*x3715))+(((-1.0)*x3709*x3712))+((r02*x3704)));
evalcond[5]=(((r11*x3715))+((r12*x3704))+(((-1.0)*x3707*x3712))+(((-1.0)*x3710*x3711))+(((-1.0)*sj0*sj1*x3708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3716=((-1.0)*r10);
IkReal x3718 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3718)==0){
continue;
}
IkReal x3717=pow(x3718,-0.5);
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3716),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3719.value));
IkReal gconst103=(r11*x3717);
IkReal gconst104=(x3716*x3717);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3721=((-1.0)*r10);
IkReal x3722=x3717;
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3721),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3723=((-1.0)*(x3724.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3723;
IkReal gconst102=x3723;
IkReal gconst103=(r11*x3722);
IkReal gconst104=(x3721*x3722);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3725=((1.0)*sj0);
IkReal x3726=((1.0)*gconst103);
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3726)))),-1);
if(!x3727.valid){
continue;
}
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3725))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3726))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3725))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3727.value)))+(x3728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3729=IKsin(j4);
IkReal x3730=IKcos(j4);
IkReal x3731=(gconst103*r11);
IkReal x3732=((1.0)*cj2);
IkReal x3733=((1.0)*sj0);
IkReal x3734=(cj1*sj2);
IkReal x3735=((1.0)*x3730);
IkReal x3736=(gconst103*x3730);
IkReal x3737=(gconst103*x3729);
IkReal x3738=((1.0)*gconst104*x3729);
evalcond[0]=((((-1.0)*r20*x3738))+(((-1.0)*r22*x3735))+((r21*x3737)));
evalcond[1]=(cj0+((x3729*x3731))+(((-1.0)*r12*x3735))+(((-1.0)*r10*x3738)));
evalcond[2]=((((-1.0)*x3733))+((r01*x3737))+(((-1.0)*r00*x3738))+(((-1.0)*r02*x3735)));
evalcond[3]=((((-1.0)*cj1*x3732))+((r22*x3729))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3735))+((r21*x3736)));
evalcond[4]=((((-1.0)*gconst104*r00*x3735))+((r01*x3736))+(((-1.0)*cj0*x3734))+((r02*x3729))+(((-1.0)*cj0*sj1*x3732)));
evalcond[5]=((((-1.0)*sj0*sj1*x3732))+((x3730*x3731))+((r12*x3729))+(((-1.0)*x3733*x3734))+(((-1.0)*gconst104*r10*x3735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3739=((1.0)*gconst104);
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3739))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
CheckValue<IkReal> x3741=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3739)))),-1);
if(!x3741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3740.value)+(((1.5707963267949)*(x3741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3742=IKsin(j4);
IkReal x3743=IKcos(j4);
IkReal x3744=(gconst103*r11);
IkReal x3745=((1.0)*cj2);
IkReal x3746=((1.0)*sj0);
IkReal x3747=(cj1*sj2);
IkReal x3748=((1.0)*x3743);
IkReal x3749=(gconst103*x3743);
IkReal x3750=(gconst103*x3742);
IkReal x3751=((1.0)*gconst104*x3742);
evalcond[0]=((((-1.0)*r22*x3748))+(((-1.0)*r20*x3751))+((r21*x3750)));
evalcond[1]=(((x3742*x3744))+cj0+(((-1.0)*r12*x3748))+(((-1.0)*r10*x3751)));
evalcond[2]=(((r01*x3750))+(((-1.0)*r00*x3751))+(((-1.0)*x3746))+(((-1.0)*r02*x3748)));
evalcond[3]=((((-1.0)*gconst104*r20*x3748))+((sj1*sj2))+((r22*x3742))+((r21*x3749))+(((-1.0)*cj1*x3745)));
evalcond[4]=((((-1.0)*gconst104*r00*x3748))+((r01*x3749))+(((-1.0)*cj0*x3747))+((r02*x3742))+(((-1.0)*cj0*sj1*x3745)));
evalcond[5]=(((x3743*x3744))+(((-1.0)*sj0*sj1*x3745))+((r12*x3742))+(((-1.0)*x3746*x3747))+(((-1.0)*gconst104*r10*x3748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3752=((-1.0)*r11);
IkReal x3754 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3754)==0){
continue;
}
IkReal x3753=pow(x3754,-0.5);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(x3752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3755.value))));
IkReal gconst106=(x3752*x3753);
IkReal gconst107=((1.0)*r10*x3753);
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3756.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3757=((-1.0)*r11);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(x3757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal x3758=((1.0)*(x3760.value));
IkReal x3759=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3758)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3758)));
IkReal gconst106=(x3757*x3759);
IkReal gconst107=((1.0)*r10*x3759);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3761=((-1.0)*r11);
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(x3761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
IkReal x3762=((1.0)*(x3764.value));
IkReal x3763=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3762)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3762)));
IkReal gconst106=(x3761*x3763);
IkReal gconst107=((1.0)*r10*x3763);
IkReal x3765=r12*r12;
IkReal x3766=((1.0)*sj0);
IkReal x3767=(cj0*r02);
IkReal x3768=x3753;
j4eval[0]=((IKabs(((((-1.0)*x3767))+(((-1.0)*r12*x3766)))))+(IKabs((((r12*x3767*x3768))+((sj0*x3765*x3768))+(((-1.0)*x3766*x3768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3769=((-1.0)*r11);
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(x3769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
IkReal x3770=((1.0)*(x3772.value));
IkReal x3771=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3770)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3770)));
IkReal gconst106=(x3769*x3771);
IkReal gconst107=((1.0)*r10*x3771);
IkReal x3773=r12*r12;
IkReal x3774=((1.0)+(((-1.0)*x3773)));
IkReal x3775=(r22*sj1*sj2);
IkReal x3776=(cj1*cj2*r22);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(x3774,-1);
if(!x3783.valid){
continue;
}
IkReal x3777=x3783.value;
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(((-1.0)+x3773),-1);
if(!x3784.valid){
continue;
}
IkReal x3778=x3784.value;
IkReal x3779=((1.0)*x3777);
if((x3774) < -0.00001)
continue;
IkReal x3780=IKsqrt(x3774);
IkReal x3781=(r12*x3778*x3780);
IkReal x3782=((((-2.0)*r10*r11*r20*r21*x3777))+(((-1.0)*x3779*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3779*(r11*r11)*(r21*r21))));
j4eval[0]=x3782;
j4eval[1]=((IKabs(((((-1.0)*x3775*x3781))+((x3776*x3781)))))+(IKabs(((((-1.0)*x3776))+x3775))));
j4eval[2]=IKsign(x3782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=(sj1*sj2);
IkReal x3786=(gconst106*r21);
IkReal x3787=(gconst107*r20);
IkReal x3788=(cj1*cj2);
CheckValue<IkReal> x3789 = IKatan2WithCheck(IkReal((((r22*x3785))+(((-1.0)*r22*x3788)))),IkReal((((x3785*x3786))+((x3787*x3788))+(((-1.0)*x3785*x3787))+(((-1.0)*x3786*x3788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790=IKPowWithIntegerCheck(IKsign(((((2.0)*x3786*x3787))+(((-1.0)*(x3786*x3786)))+(((-1.0)*(x3787*x3787)))+(((-1.0)*(r22*r22))))),-1);
if(!x3790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3789.value)+(((1.5707963267949)*(x3790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3791=IKsin(j4);
IkReal x3792=IKcos(j4);
IkReal x3793=(gconst107*r10);
IkReal x3794=(gconst107*r00);
IkReal x3795=((1.0)*cj2);
IkReal x3796=(gconst107*r20);
IkReal x3797=((1.0)*sj0);
IkReal x3798=(cj1*sj2);
IkReal x3799=((1.0)*x3792);
IkReal x3800=(gconst106*x3792);
IkReal x3801=(gconst106*x3791);
IkReal x3802=((1.0)*x3791);
evalcond[0]=(((r21*x3801))+(((-1.0)*x3796*x3802))+(((-1.0)*r22*x3799)));
evalcond[1]=((((-1.0)*r12*x3799))+((r11*x3801))+cj0+(((-1.0)*x3793*x3802)));
evalcond[2]=((((-1.0)*x3797))+((r01*x3801))+(((-1.0)*x3794*x3802))+(((-1.0)*r02*x3799)));
evalcond[3]=((((-1.0)*x3796*x3799))+((r22*x3791))+((r21*x3800))+((sj1*sj2))+(((-1.0)*cj1*x3795)));
evalcond[4]=(((r01*x3800))+((r02*x3791))+(((-1.0)*cj0*sj1*x3795))+(((-1.0)*cj0*x3798))+(((-1.0)*x3794*x3799)));
evalcond[5]=((((-1.0)*sj0*sj1*x3795))+((r11*x3800))+(((-1.0)*x3797*x3798))+((r12*x3791))+(((-1.0)*x3793*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3803=((1.0)*sj0);
IkReal x3804=((1.0)*gconst106);
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3804)))),-1);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3803)))),IkReal(((((-1.0)*gconst106*r11*x3803))+(((-1.0)*cj0*r01*x3804))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3805.value)))+(x3806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3807=IKsin(j4);
IkReal x3808=IKcos(j4);
IkReal x3809=(gconst107*r10);
IkReal x3810=(gconst107*r00);
IkReal x3811=((1.0)*cj2);
IkReal x3812=(gconst107*r20);
IkReal x3813=((1.0)*sj0);
IkReal x3814=(cj1*sj2);
IkReal x3815=((1.0)*x3808);
IkReal x3816=(gconst106*x3808);
IkReal x3817=(gconst106*x3807);
IkReal x3818=((1.0)*x3807);
evalcond[0]=((((-1.0)*r22*x3815))+((r21*x3817))+(((-1.0)*x3812*x3818)));
evalcond[1]=((((-1.0)*r12*x3815))+cj0+((r11*x3817))+(((-1.0)*x3809*x3818)));
evalcond[2]=((((-1.0)*r02*x3815))+(((-1.0)*x3810*x3818))+(((-1.0)*x3813))+((r01*x3817)));
evalcond[3]=(((r21*x3816))+((r22*x3807))+(((-1.0)*cj1*x3811))+((sj1*sj2))+(((-1.0)*x3812*x3815)));
evalcond[4]=((((-1.0)*cj0*x3814))+(((-1.0)*x3810*x3815))+((r02*x3807))+(((-1.0)*cj0*sj1*x3811))+((r01*x3816)));
evalcond[5]=((((-1.0)*sj0*sj1*x3811))+((r11*x3816))+((r12*x3807))+(((-1.0)*x3813*x3814))+(((-1.0)*x3809*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3819=((1.0)*gconst107);
CheckValue<IkReal> x3820 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3819))+(((-1.0)*gconst106*r00)))),-1);
if(!x3821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3820.value)+(((1.5707963267949)*(x3821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3822=IKsin(j4);
IkReal x3823=IKcos(j4);
IkReal x3824=(gconst107*r10);
IkReal x3825=(gconst107*r00);
IkReal x3826=((1.0)*cj2);
IkReal x3827=(gconst107*r20);
IkReal x3828=((1.0)*sj0);
IkReal x3829=(cj1*sj2);
IkReal x3830=((1.0)*x3823);
IkReal x3831=(gconst106*x3823);
IkReal x3832=(gconst106*x3822);
IkReal x3833=((1.0)*x3822);
evalcond[0]=(((r21*x3832))+(((-1.0)*r22*x3830))+(((-1.0)*x3827*x3833)));
evalcond[1]=(cj0+(((-1.0)*r12*x3830))+((r11*x3832))+(((-1.0)*x3824*x3833)));
evalcond[2]=(((r01*x3832))+(((-1.0)*x3828))+(((-1.0)*r02*x3830))+(((-1.0)*x3825*x3833)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3826))+((r22*x3822))+((r21*x3831))+(((-1.0)*x3827*x3830)));
evalcond[4]=((((-1.0)*cj0*x3829))+((r01*x3831))+((r02*x3822))+(((-1.0)*cj0*sj1*x3826))+(((-1.0)*x3825*x3830)));
evalcond[5]=(((r12*x3822))+(((-1.0)*sj0*sj1*x3826))+((r11*x3831))+(((-1.0)*x3828*x3829))+(((-1.0)*x3824*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3834=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3834;
j4eval[1]=IKsign(x3834);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3835=((1.0)*cj5);
IkReal x3836=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3835)));
j4eval[0]=x3836;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3835))+((r21*sj5))))));
j4eval[2]=IKsign(x3836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3837=(sj1*sj2);
IkReal x3838=(cj5*r10);
IkReal x3839=(r11*sj5);
IkReal x3840=(cj1*cj2);
IkReal x3841=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3841;
j4eval[1]=((IKabs(((((-1.0)*x3837*x3838))+(((-1.0)*x3839*x3840))+((x3838*x3840))+((x3837*x3839)))))+(IKabs((((r12*x3840))+(((-1.0)*r12*x3837))))));
j4eval[2]=IKsign(x3841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3842=(sj1*sj2);
IkReal x3843=(cj5*r10);
IkReal x3844=(r11*sj5);
IkReal x3845=(cj1*cj2);
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847 = IKatan2WithCheck(IkReal(((((-1.0)*x3844*x3845))+((x3842*x3844))+((x3843*x3845))+(((-1.0)*x3842*x3843)))),IkReal((((r12*x3845))+(((-1.0)*r12*x3842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3846.value)))+(x3847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3848=IKcos(j4);
IkReal x3849=IKsin(j4);
IkReal x3850=(cj5*r00);
IkReal x3851=(cj5*r10);
IkReal x3852=(r21*sj5);
IkReal x3853=((1.0)*cj2);
IkReal x3854=(cj5*r20);
IkReal x3855=((1.0)*x3848);
IkReal x3856=((1.0)*x3849);
IkReal x3857=(sj5*x3849);
IkReal x3858=(sj5*x3848);
evalcond[0]=(((r12*x3849))+((r11*x3858))+(((-1.0)*x3851*x3855)));
evalcond[1]=(((x3849*x3852))+(((-1.0)*x3854*x3856))+(((-1.0)*r22*x3855)));
evalcond[2]=((((-1.0)*x3850*x3856))+((r01*x3857))+(((-1.0)*r02*x3855)));
evalcond[3]=((1.0)+((r11*x3857))+(((-1.0)*r12*x3855))+(((-1.0)*x3851*x3856)));
evalcond[4]=(((x3848*x3852))+(((-1.0)*x3854*x3855))+((sj1*sj2))+(((-1.0)*cj1*x3853))+((r22*x3849)));
evalcond[5]=((((-1.0)*x3850*x3855))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3853))+((r01*x3858))+((r02*x3849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3859=((1.0)*cj5);
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3859))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3859)))),-1);
if(!x3861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3860.value)+(((1.5707963267949)*(x3861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3862=IKcos(j4);
IkReal x3863=IKsin(j4);
IkReal x3864=(cj5*r00);
IkReal x3865=(cj5*r10);
IkReal x3866=(r21*sj5);
IkReal x3867=((1.0)*cj2);
IkReal x3868=(cj5*r20);
IkReal x3869=((1.0)*x3862);
IkReal x3870=((1.0)*x3863);
IkReal x3871=(sj5*x3863);
IkReal x3872=(sj5*x3862);
evalcond[0]=((((-1.0)*x3865*x3869))+((r11*x3872))+((r12*x3863)));
evalcond[1]=(((x3863*x3866))+(((-1.0)*x3868*x3870))+(((-1.0)*r22*x3869)));
evalcond[2]=((((-1.0)*r02*x3869))+((r01*x3871))+(((-1.0)*x3864*x3870)));
evalcond[3]=((1.0)+(((-1.0)*x3865*x3870))+(((-1.0)*r12*x3869))+((r11*x3871)));
evalcond[4]=((((-1.0)*x3868*x3869))+((sj1*sj2))+(((-1.0)*cj1*x3867))+((x3862*x3866))+((r22*x3863)));
evalcond[5]=(((r02*x3863))+((r01*x3872))+(((-1.0)*x3864*x3869))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3873.value)))+(x3874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3875=IKcos(j4);
IkReal x3876=IKsin(j4);
IkReal x3877=(cj5*r00);
IkReal x3878=(cj5*r10);
IkReal x3879=(r21*sj5);
IkReal x3880=((1.0)*cj2);
IkReal x3881=(cj5*r20);
IkReal x3882=((1.0)*x3875);
IkReal x3883=((1.0)*x3876);
IkReal x3884=(sj5*x3876);
IkReal x3885=(sj5*x3875);
evalcond[0]=(((r11*x3885))+(((-1.0)*x3878*x3882))+((r12*x3876)));
evalcond[1]=((((-1.0)*r22*x3882))+((x3876*x3879))+(((-1.0)*x3881*x3883)));
evalcond[2]=((((-1.0)*r02*x3882))+(((-1.0)*x3877*x3883))+((r01*x3884)));
evalcond[3]=((1.0)+((r11*x3884))+(((-1.0)*x3878*x3883))+(((-1.0)*r12*x3882)));
evalcond[4]=((((-1.0)*cj1*x3880))+((sj1*sj2))+((x3875*x3879))+((r22*x3876))+(((-1.0)*x3881*x3882)));
evalcond[5]=((((-1.0)*sj1*x3880))+(((-1.0)*cj1*sj2))+(((-1.0)*x3877*x3882))+((r01*x3885))+((r02*x3876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3886=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3886;
j4eval[1]=IKsign(x3886);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3887=((1.0)*cj5);
IkReal x3888=((((-1.0)*r21*x3887))+(((-1.0)*r20*sj5)));
j4eval[0]=x3888;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3887))))));
j4eval[2]=IKsign(x3888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3889=cj5*cj5;
IkReal x3890=r11*r11;
IkReal x3891=(r11*sj5);
IkReal x3892=(cj5*r10);
IkReal x3893=((r12*r12)+((x3889*(r10*r10)))+(((-1.0)*x3889*x3890))+x3890+(((-2.0)*x3891*x3892)));
j4eval[0]=x3893;
j4eval[1]=IKsign(x3893);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3892))+x3891))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3894=cj5*cj5;
IkReal x3895=r11*r11;
IkReal x3896=(cj5*r10);
IkReal x3897=(r11*sj5);
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((((-1.0)*x3896))+x3897)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3894*(r10*r10)))+(((-1.0)*x3894*x3895))+x3895+(((-2.0)*x3896*x3897)))),-1);
if(!x3899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3898.value)+(((1.5707963267949)*(x3899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3900=IKcos(j4);
IkReal x3901=IKsin(j4);
IkReal x3902=(cj5*r00);
IkReal x3903=(cj5*r10);
IkReal x3904=(r21*sj5);
IkReal x3905=(cj5*r20);
IkReal x3906=((1.0)*x3900);
IkReal x3907=((1.0)*x3901);
IkReal x3908=(sj5*x3901);
IkReal x3909=(sj5*x3900);
evalcond[0]=((((-1.0)*x3903*x3906))+((r12*x3901))+((r11*x3909)));
evalcond[1]=(((x3901*x3904))+(((-1.0)*x3905*x3907))+(((-1.0)*r22*x3906)));
evalcond[2]=((((-1.0)*x3902*x3907))+((r01*x3908))+(((-1.0)*r02*x3906)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3906))+(((-1.0)*x3903*x3907))+((r11*x3908)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3902*x3906))+((r01*x3909))+((r02*x3901)));
evalcond[5]=(((x3900*x3904))+((r22*x3901))+(((-1.0)*x3905*x3906))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3910=((1.0)*cj5);
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3910))+(((-1.0)*r20*sj5)))),-1);
if(!x3912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3911.value)+(((1.5707963267949)*(x3912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3913=IKcos(j4);
IkReal x3914=IKsin(j4);
IkReal x3915=(cj5*r00);
IkReal x3916=(cj5*r10);
IkReal x3917=(r21*sj5);
IkReal x3918=(cj5*r20);
IkReal x3919=((1.0)*x3913);
IkReal x3920=((1.0)*x3914);
IkReal x3921=(sj5*x3914);
IkReal x3922=(sj5*x3913);
evalcond[0]=(((r11*x3922))+(((-1.0)*x3916*x3919))+((r12*x3914)));
evalcond[1]=(((x3914*x3917))+(((-1.0)*r22*x3919))+(((-1.0)*x3918*x3920)));
evalcond[2]=((((-1.0)*r02*x3919))+(((-1.0)*x3915*x3920))+((r01*x3921)));
evalcond[3]=((-1.0)+((r11*x3921))+(((-1.0)*x3916*x3920))+(((-1.0)*r12*x3919)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3915*x3919))+((cj1*sj2))+((r02*x3914))+((r01*x3922)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3913*x3917))+(((-1.0)*x3918*x3919))+((r22*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3923.value)+(((1.5707963267949)*(x3924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKcos(j4);
IkReal x3926=IKsin(j4);
IkReal x3927=(cj5*r00);
IkReal x3928=(cj5*r10);
IkReal x3929=(r21*sj5);
IkReal x3930=(cj5*r20);
IkReal x3931=((1.0)*x3925);
IkReal x3932=((1.0)*x3926);
IkReal x3933=(sj5*x3926);
IkReal x3934=(sj5*x3925);
evalcond[0]=(((r12*x3926))+(((-1.0)*x3928*x3931))+((r11*x3934)));
evalcond[1]=((((-1.0)*r22*x3931))+(((-1.0)*x3930*x3932))+((x3926*x3929)));
evalcond[2]=(((r01*x3933))+(((-1.0)*r02*x3931))+(((-1.0)*x3927*x3932)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3931))+(((-1.0)*x3928*x3932))+((r11*x3933)));
evalcond[4]=(((cj2*sj1))+((r01*x3934))+((cj1*sj2))+((r02*x3926))+(((-1.0)*x3927*x3931)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3930*x3931))+((r22*x3926))+((x3925*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3935=((-1.0)*r00);
IkReal x3937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3937)==0){
continue;
}
IkReal x3936=pow(x3937,-0.5);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3935),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3938.value));
IkReal gconst109=(r01*x3936);
IkReal gconst110=(x3935*x3936);
CheckValue<IkReal> x3939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3940=((-1.0)*r00);
IkReal x3941=x3936;
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3940),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
IkReal x3942=((-1.0)*(x3943.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3942;
IkReal gconst108=x3942;
IkReal gconst109=(r01*x3941);
IkReal gconst110=(x3940*x3941);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3944=((1.0)*sj0);
IkReal x3945=((1.0)*gconst109);
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3944)))),IkReal(((((-1.0)*cj0*r01*x3945))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3945))+(((-1.0)*gconst110*r21)))),-1);
if(!x3947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3946.value)+(((1.5707963267949)*(x3947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3948=IKsin(j4);
IkReal x3949=IKcos(j4);
IkReal x3950=(gconst109*r21);
IkReal x3951=((1.0)*cj2);
IkReal x3952=((1.0)*sj0);
IkReal x3953=(cj1*sj2);
IkReal x3954=((1.0)*x3949);
IkReal x3955=(gconst109*x3948);
IkReal x3956=(gconst109*x3949);
IkReal x3957=((1.0)*gconst110*x3948);
evalcond[0]=((((-1.0)*r22*x3954))+((x3948*x3950))+(((-1.0)*r20*x3957)));
evalcond[1]=(cj0+(((-1.0)*r12*x3954))+((r11*x3955))+(((-1.0)*r10*x3957)));
evalcond[2]=(((r01*x3955))+(((-1.0)*r00*x3957))+(((-1.0)*x3952))+(((-1.0)*r02*x3954)));
evalcond[3]=(((r22*x3948))+((sj1*sj2))+(((-1.0)*cj1*x3951))+((x3949*x3950))+(((-1.0)*gconst110*r20*x3954)));
evalcond[4]=((((-1.0)*cj0*sj1*x3951))+((r01*x3956))+(((-1.0)*cj0*x3953))+(((-1.0)*gconst110*r00*x3954))+((r02*x3948)));
evalcond[5]=((((-1.0)*x3952*x3953))+(((-1.0)*sj0*sj1*x3951))+((r11*x3956))+((r12*x3948))+(((-1.0)*gconst110*r10*x3954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=((1.0)*gconst110);
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3958))+(((-1.0)*gconst109*r10)))),-1);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3958))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3959.value)))+(x3960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3961=IKsin(j4);
IkReal x3962=IKcos(j4);
IkReal x3963=(gconst109*r21);
IkReal x3964=((1.0)*cj2);
IkReal x3965=((1.0)*sj0);
IkReal x3966=(cj1*sj2);
IkReal x3967=((1.0)*x3962);
IkReal x3968=(gconst109*x3961);
IkReal x3969=(gconst109*x3962);
IkReal x3970=((1.0)*gconst110*x3961);
evalcond[0]=((((-1.0)*r20*x3970))+((x3961*x3963))+(((-1.0)*r22*x3967)));
evalcond[1]=(cj0+((r11*x3968))+(((-1.0)*r10*x3970))+(((-1.0)*r12*x3967)));
evalcond[2]=((((-1.0)*x3965))+(((-1.0)*r02*x3967))+((r01*x3968))+(((-1.0)*r00*x3970)));
evalcond[3]=(((x3962*x3963))+(((-1.0)*gconst110*r20*x3967))+((r22*x3961))+((sj1*sj2))+(((-1.0)*cj1*x3964)));
evalcond[4]=((((-1.0)*cj0*x3966))+(((-1.0)*gconst110*r00*x3967))+((r02*x3961))+(((-1.0)*cj0*sj1*x3964))+((r01*x3969)));
evalcond[5]=((((-1.0)*gconst110*r10*x3967))+((r11*x3969))+(((-1.0)*x3965*x3966))+((r12*x3961))+(((-1.0)*sj0*sj1*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3971=((-1.0)*r01);
IkReal x3973 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3973)==0){
continue;
}
IkReal x3972=pow(x3973,-0.5);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(x3971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3974.value))));
IkReal gconst112=(x3971*x3972);
IkReal gconst113=((1.0)*r00*x3972);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3976=((-1.0)*r01);
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(x3976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
IkReal x3977=((1.0)*(x3979.value));
IkReal x3978=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3977)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3977)));
IkReal gconst112=(x3976*x3978);
IkReal gconst113=((1.0)*r00*x3978);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3980=((-1.0)*r01);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(x3980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3981=((1.0)*(x3983.value));
IkReal x3982=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3981)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3981)));
IkReal gconst112=(x3980*x3982);
IkReal gconst113=((1.0)*r00*x3982);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3984=((-1.0)*r01);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(x3984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
IkReal x3985=((1.0)*(x3987.value));
IkReal x3986=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3985)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3985)));
IkReal gconst112=(x3984*x3986);
IkReal gconst113=((1.0)*r00*x3986);
IkReal x3988=r02*r02;
IkReal x3989=(r12*sj0);
IkReal x3990=((1.0)*cj0);
IkReal x3991=x3972;
j4eval[0]=((IKabs((((cj0*x3988*x3991))+(((-1.0)*x3990*x3991))+((r02*x3989*x3991)))))+(IKabs(((((-1.0)*r02*x3990))+(((-1.0)*x3989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3992=((1.0)*sj0);
IkReal x3993=((1.0)*gconst112);
CheckValue<IkReal> x3994=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3993)))),-1);
if(!x3994.valid){
continue;
}
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3992))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3993))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3994.value)))+(x3995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3996=IKsin(j4);
IkReal x3997=IKcos(j4);
IkReal x3998=(gconst113*r20);
IkReal x3999=(gconst112*r21);
IkReal x4000=((1.0)*cj2);
IkReal x4001=(gconst113*r00);
IkReal x4002=(gconst113*r10);
IkReal x4003=((1.0)*sj0);
IkReal x4004=(cj1*sj2);
IkReal x4005=((1.0)*x3997);
IkReal x4006=((1.0)*x3996);
IkReal x4007=(gconst112*x3997);
IkReal x4008=(gconst112*x3996);
evalcond[0]=((((-1.0)*r22*x4005))+(((-1.0)*x3998*x4006))+((x3996*x3999)));
evalcond[1]=(cj0+(((-1.0)*x4002*x4006))+(((-1.0)*r12*x4005))+((r11*x4008)));
evalcond[2]=((((-1.0)*r02*x4005))+(((-1.0)*x4003))+((r01*x4008))+(((-1.0)*x4001*x4006)));
evalcond[3]=((((-1.0)*x3998*x4005))+((sj1*sj2))+(((-1.0)*cj1*x4000))+((r22*x3996))+((x3997*x3999)));
evalcond[4]=((((-1.0)*cj0*x4004))+((r01*x4007))+(((-1.0)*x4001*x4005))+((r02*x3996))+(((-1.0)*cj0*sj1*x4000)));
evalcond[5]=((((-1.0)*x4002*x4005))+((r12*x3996))+(((-1.0)*sj0*sj1*x4000))+(((-1.0)*x4003*x4004))+((r11*x4007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4009=((1.0)*gconst113);
CheckValue<IkReal> x4010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4009))+(((-1.0)*gconst112*r10)))),-1);
if(!x4010.valid){
continue;
}
CheckValue<IkReal> x4011 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4010.value)))+(x4011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4012=IKsin(j4);
IkReal x4013=IKcos(j4);
IkReal x4014=(gconst113*r20);
IkReal x4015=(gconst112*r21);
IkReal x4016=((1.0)*cj2);
IkReal x4017=(gconst113*r00);
IkReal x4018=(gconst113*r10);
IkReal x4019=((1.0)*sj0);
IkReal x4020=(cj1*sj2);
IkReal x4021=((1.0)*x4013);
IkReal x4022=((1.0)*x4012);
IkReal x4023=(gconst112*x4013);
IkReal x4024=(gconst112*x4012);
evalcond[0]=((((-1.0)*r22*x4021))+((x4012*x4015))+(((-1.0)*x4014*x4022)));
evalcond[1]=((((-1.0)*r12*x4021))+cj0+(((-1.0)*x4018*x4022))+((r11*x4024)));
evalcond[2]=((((-1.0)*r02*x4021))+((r01*x4024))+(((-1.0)*x4019))+(((-1.0)*x4017*x4022)));
evalcond[3]=((((-1.0)*cj1*x4016))+((sj1*sj2))+((x4013*x4015))+(((-1.0)*x4014*x4021))+((r22*x4012)));
evalcond[4]=(((r02*x4012))+(((-1.0)*cj0*x4020))+(((-1.0)*cj0*sj1*x4016))+((r01*x4023))+(((-1.0)*x4017*x4021)));
evalcond[5]=((((-1.0)*sj0*sj1*x4016))+(((-1.0)*x4018*x4021))+((r12*x4012))+((r11*x4023))+(((-1.0)*x4019*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4025=((1.0)*gconst113);
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4025))+(((-1.0)*gconst112*r00)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4026.value)))+(x4027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4028=IKsin(j4);
IkReal x4029=IKcos(j4);
IkReal x4030=(gconst113*r20);
IkReal x4031=(gconst112*r21);
IkReal x4032=((1.0)*cj2);
IkReal x4033=(gconst113*r00);
IkReal x4034=(gconst113*r10);
IkReal x4035=((1.0)*sj0);
IkReal x4036=(cj1*sj2);
IkReal x4037=((1.0)*x4029);
IkReal x4038=((1.0)*x4028);
IkReal x4039=(gconst112*x4029);
IkReal x4040=(gconst112*x4028);
evalcond[0]=((((-1.0)*x4030*x4038))+((x4028*x4031))+(((-1.0)*r22*x4037)));
evalcond[1]=((((-1.0)*x4034*x4038))+cj0+(((-1.0)*r12*x4037))+((r11*x4040)));
evalcond[2]=((((-1.0)*x4035))+((r01*x4040))+(((-1.0)*x4033*x4038))+(((-1.0)*r02*x4037)));
evalcond[3]=((((-1.0)*x4030*x4037))+((x4029*x4031))+(((-1.0)*cj1*x4032))+((sj1*sj2))+((r22*x4028)));
evalcond[4]=((((-1.0)*cj0*x4036))+((r01*x4039))+(((-1.0)*x4033*x4037))+(((-1.0)*cj0*sj1*x4032))+((r02*x4028)));
evalcond[5]=((((-1.0)*x4034*x4037))+(((-1.0)*x4035*x4036))+((r12*x4028))+((r11*x4039))+(((-1.0)*sj0*sj1*x4032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4041=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4041;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4042=((1.0)*cj5);
IkReal x4043=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4042)));
j4eval[0]=x4043;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4042))+((r21*sj5))))));
j4eval[2]=IKsign(x4043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4044=cj5*cj5;
IkReal x4045=r01*r01;
IkReal x4046=(cj5*r00);
IkReal x4047=(r01*sj5);
IkReal x4048=(((x4044*(r00*r00)))+x4045+(((-2.0)*x4046*x4047))+(((-1.0)*x4044*x4045))+(r02*r02));
j4eval[0]=x4048;
j4eval[1]=IKsign(x4048);
j4eval[2]=((IKabs(r02))+(IKabs((x4047+(((-1.0)*x4046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4049=cj5*cj5;
IkReal x4050=r01*r01;
IkReal x4051=(r01*sj5);
IkReal x4052=(cj5*r00);
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4051*x4052))+((x4049*(r00*r00)))+x4050+(r02*r02)+(((-1.0)*x4049*x4050)))),-1);
if(!x4053.valid){
continue;
}
CheckValue<IkReal> x4054 = IKatan2WithCheck(IkReal((x4051+(((-1.0)*x4052)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4053.value)))+(x4054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4055=IKcos(j4);
IkReal x4056=IKsin(j4);
IkReal x4057=(cj5*r00);
IkReal x4058=(cj5*r10);
IkReal x4059=(r21*sj5);
IkReal x4060=((1.0)*cj2);
IkReal x4061=(cj5*r20);
IkReal x4062=((1.0)*x4055);
IkReal x4063=((1.0)*x4056);
IkReal x4064=(sj5*x4056);
IkReal x4065=(sj5*x4055);
evalcond[0]=(((r02*x4056))+(((-1.0)*x4057*x4062))+((r01*x4065)));
evalcond[1]=((((-1.0)*x4061*x4063))+(((-1.0)*r22*x4062))+((x4056*x4059)));
evalcond[2]=((((-1.0)*r12*x4062))+((r11*x4064))+(((-1.0)*x4058*x4063)));
evalcond[3]=((-1.0)+(((-1.0)*x4057*x4063))+(((-1.0)*r02*x4062))+((r01*x4064)));
evalcond[4]=((((-1.0)*x4061*x4062))+((sj1*sj2))+((x4055*x4059))+(((-1.0)*cj1*x4060))+((r22*x4056)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4065))+((r12*x4056))+(((-1.0)*x4058*x4062))+(((-1.0)*sj1*x4060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4066=((1.0)*cj5);
CheckValue<IkReal> x4067 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4066))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4066)))),-1);
if(!x4068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4067.value)+(((1.5707963267949)*(x4068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4069=IKcos(j4);
IkReal x4070=IKsin(j4);
IkReal x4071=(cj5*r00);
IkReal x4072=(cj5*r10);
IkReal x4073=(r21*sj5);
IkReal x4074=((1.0)*cj2);
IkReal x4075=(cj5*r20);
IkReal x4076=((1.0)*x4069);
IkReal x4077=((1.0)*x4070);
IkReal x4078=(sj5*x4070);
IkReal x4079=(sj5*x4069);
evalcond[0]=((((-1.0)*x4071*x4076))+((r01*x4079))+((r02*x4070)));
evalcond[1]=((((-1.0)*x4075*x4077))+(((-1.0)*r22*x4076))+((x4070*x4073)));
evalcond[2]=((((-1.0)*r12*x4076))+(((-1.0)*x4072*x4077))+((r11*x4078)));
evalcond[3]=((-1.0)+(((-1.0)*x4071*x4077))+(((-1.0)*r02*x4076))+((r01*x4078)));
evalcond[4]=((((-1.0)*x4075*x4076))+((r22*x4070))+((sj1*sj2))+(((-1.0)*cj1*x4074))+((x4069*x4073)));
evalcond[5]=(((r12*x4070))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4074))+(((-1.0)*x4072*x4076))+((r11*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4080.value)))+(x4081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4082=IKcos(j4);
IkReal x4083=IKsin(j4);
IkReal x4084=(cj5*r00);
IkReal x4085=(cj5*r10);
IkReal x4086=(r21*sj5);
IkReal x4087=((1.0)*cj2);
IkReal x4088=(cj5*r20);
IkReal x4089=((1.0)*x4082);
IkReal x4090=((1.0)*x4083);
IkReal x4091=(sj5*x4083);
IkReal x4092=(sj5*x4082);
evalcond[0]=(((r01*x4092))+(((-1.0)*x4084*x4089))+((r02*x4083)));
evalcond[1]=(((x4083*x4086))+(((-1.0)*r22*x4089))+(((-1.0)*x4088*x4090)));
evalcond[2]=((((-1.0)*r12*x4089))+((r11*x4091))+(((-1.0)*x4085*x4090)));
evalcond[3]=((-1.0)+((r01*x4091))+(((-1.0)*r02*x4089))+(((-1.0)*x4084*x4090)));
evalcond[4]=(((x4082*x4086))+((sj1*sj2))+(((-1.0)*cj1*x4087))+(((-1.0)*x4088*x4089))+((r22*x4083)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4092))+(((-1.0)*sj1*x4087))+((r12*x4083))+(((-1.0)*x4085*x4089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4093=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4093;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4094=((1.0)*cj5);
IkReal x4095=((((-1.0)*r21*x4094))+(((-1.0)*r20*sj5)));
j4eval[0]=x4095;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4094))+((r11*sj5))))));
j4eval[2]=IKsign(x4095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4096=cj5*cj5;
IkReal x4097=r01*r01;
IkReal x4098=(r01*sj5);
IkReal x4099=(cj5*r00);
IkReal x4100=((((-1.0)*x4096*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4098*x4099))+(((-1.0)*x4097))+((x4096*x4097)));
j4eval[0]=x4100;
j4eval[1]=IKsign(x4100);
j4eval[2]=((IKabs(r02))+(IKabs((x4098+(((-1.0)*x4099))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4101=cj5*cj5;
IkReal x4102=r01*r01;
IkReal x4103=(r01*sj5);
IkReal x4104=(cj5*r00);
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal(((((-1.0)*x4104))+x4103)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
CheckValue<IkReal> x4106=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4102))+(((-1.0)*x4101*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4101*x4102))+(((2.0)*x4103*x4104)))),-1);
if(!x4106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4105.value)+(((1.5707963267949)*(x4106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4107=IKcos(j4);
IkReal x4108=IKsin(j4);
IkReal x4109=(cj5*r00);
IkReal x4110=(cj5*r10);
IkReal x4111=(r21*sj5);
IkReal x4112=(cj5*r20);
IkReal x4113=((1.0)*x4107);
IkReal x4114=((1.0)*x4108);
IkReal x4115=(sj5*x4108);
IkReal x4116=(sj5*x4107);
evalcond[0]=((((-1.0)*x4109*x4113))+((r02*x4108))+((r01*x4116)));
evalcond[1]=(((x4108*x4111))+(((-1.0)*r22*x4113))+(((-1.0)*x4112*x4114)));
evalcond[2]=((((-1.0)*r12*x4113))+(((-1.0)*x4110*x4114))+((r11*x4115)));
evalcond[3]=((1.0)+(((-1.0)*x4109*x4114))+(((-1.0)*r02*x4113))+((r01*x4115)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4110*x4113))+((r12*x4108))+((r11*x4116)));
evalcond[5]=(((r22*x4108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4112*x4113))+((x4107*x4111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4117=((1.0)*cj5);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
CheckValue<IkReal> x4119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4117))+(((-1.0)*r20*sj5)))),-1);
if(!x4119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4118.value)+(((1.5707963267949)*(x4119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4120=IKcos(j4);
IkReal x4121=IKsin(j4);
IkReal x4122=(cj5*r00);
IkReal x4123=(cj5*r10);
IkReal x4124=(r21*sj5);
IkReal x4125=(cj5*r20);
IkReal x4126=((1.0)*x4120);
IkReal x4127=((1.0)*x4121);
IkReal x4128=(sj5*x4121);
IkReal x4129=(sj5*x4120);
evalcond[0]=(((r02*x4121))+(((-1.0)*x4122*x4126))+((r01*x4129)));
evalcond[1]=((((-1.0)*r22*x4126))+((x4121*x4124))+(((-1.0)*x4125*x4127)));
evalcond[2]=((((-1.0)*r12*x4126))+(((-1.0)*x4123*x4127))+((r11*x4128)));
evalcond[3]=((1.0)+(((-1.0)*x4122*x4127))+(((-1.0)*r02*x4126))+((r01*x4128)));
evalcond[4]=(((r12*x4121))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4123*x4126))+((r11*x4129)));
evalcond[5]=(((x4120*x4124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4121))+(((-1.0)*x4125*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
CheckValue<IkReal> x4131=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4130.value)+(((1.5707963267949)*(x4131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4132=IKcos(j4);
IkReal x4133=IKsin(j4);
IkReal x4134=(cj5*r00);
IkReal x4135=(cj5*r10);
IkReal x4136=(r21*sj5);
IkReal x4137=(cj5*r20);
IkReal x4138=((1.0)*x4132);
IkReal x4139=((1.0)*x4133);
IkReal x4140=(sj5*x4133);
IkReal x4141=(sj5*x4132);
evalcond[0]=(((r01*x4141))+(((-1.0)*x4134*x4138))+((r02*x4133)));
evalcond[1]=((((-1.0)*x4137*x4139))+(((-1.0)*r22*x4138))+((x4133*x4136)));
evalcond[2]=((((-1.0)*x4135*x4139))+((r11*x4140))+(((-1.0)*r12*x4138)));
evalcond[3]=((1.0)+((r01*x4140))+(((-1.0)*x4134*x4139))+(((-1.0)*r02*x4138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4135*x4138))+((r11*x4141))+((r12*x4133)));
evalcond[5]=(((r22*x4133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4132*x4136))+(((-1.0)*x4137*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4142=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4142);
rxp1_1=(px*r21);
rxp1_2=(r11*x4142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4143=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4143);
rxp1_1=(px*r21);
rxp1_2=(r11*x4143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4144=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4144);
rxp1_1=(px*r21);
rxp1_2=(r11*x4144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4147.valid){
continue;
}
IkReal x4145=x4147.value;
IkReal x4146=(sj0*x4145);
cj4array[0]=(((cj1*sj2*x4146))+((cj2*sj1*x4146)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4148=IKsin(j4);
IkReal x4149=IKcos(j4);
IkReal x4150=(r21*sj5);
IkReal x4151=((1.0)*cj5*r20);
evalcond[0]=(r02*x4148);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4149)));
evalcond[2]=((((-1.0)*x4148*x4151))+((x4148*x4150)));
evalcond[3]=((((-1.0)*cj5*r10*x4148))+((r11*sj5*x4148)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4149*x4150))+(((-1.0)*x4149*x4151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4153.valid){
continue;
}
IkReal x4152=x4153.value;
cj4array[0]=(((cj1*cj2*x4152))+(((-1.0)*sj1*sj2*x4152)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4154=IKsin(j4);
IkReal x4155=IKcos(j4);
IkReal x4156=((1.0)*sj0);
IkReal x4157=((1.0)*cj5);
IkReal x4158=(sj5*x4154);
evalcond[0]=(r02*x4154);
evalcond[1]=((((-1.0)*x4156))+(((-1.0)*r02*x4155)));
evalcond[2]=((((-1.0)*r20*x4154*x4157))+((r21*x4158)));
evalcond[3]=(((r11*x4158))+(((-1.0)*r10*x4154*x4157)));
evalcond[4]=((((-1.0)*r10*x4155*x4157))+((r11*sj5*x4155))+(((-1.0)*cj1*sj2*x4156))+(((-1.0)*cj2*sj1*x4156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(r02,-1);
if(!x4159.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4159.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4160=IKsin(j4);
IkReal x4161=IKcos(j4);
IkReal x4162=((1.0)*cj1);
IkReal x4163=(r21*sj5);
IkReal x4164=((1.0)*cj5);
IkReal x4165=(r11*sj5);
evalcond[0]=(r02*x4160);
evalcond[1]=((((-1.0)*r20*x4160*x4164))+((x4160*x4163)));
evalcond[2]=(((x4160*x4165))+(((-1.0)*r10*x4160*x4164)));
evalcond[3]=((((-1.0)*cj2*x4162))+((sj1*sj2))+(((-1.0)*r20*x4161*x4164))+((x4161*x4163)));
evalcond[4]=((((-1.0)*sj0*sj2*x4162))+(((-1.0)*r10*x4161*x4164))+(((-1.0)*cj2*sj0*sj1))+((x4161*x4165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4166=((1.0)*sj0);
IkReal x4167=((1.0)*cj0);
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4167))+(((-1.0)*r12*x4166)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4167))+(((-1.0)*r11*sj5*x4166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
CheckValue<IkReal> x4169=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4168.value)+(((1.5707963267949)*(x4169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4170=IKsin(j4);
IkReal x4171=IKcos(j4);
IkReal x4172=(cj5*r00);
IkReal x4173=(cj5*r10);
IkReal x4174=(r21*sj5);
IkReal x4175=((1.0)*cj2);
IkReal x4176=((1.0)*sj0);
IkReal x4177=(cj1*sj2);
IkReal x4178=(cj5*r20);
IkReal x4179=((1.0)*x4171);
IkReal x4180=((1.0)*x4170);
IkReal x4181=(sj5*x4170);
IkReal x4182=(sj5*x4171);
evalcond[0]=(((x4170*x4174))+(((-1.0)*r22*x4179))+(((-1.0)*x4178*x4180)));
evalcond[1]=(cj0+((r11*x4181))+(((-1.0)*x4173*x4180))+(((-1.0)*r12*x4179)));
evalcond[2]=((((-1.0)*x4172*x4180))+(((-1.0)*x4176))+((r01*x4181))+(((-1.0)*r02*x4179)));
evalcond[3]=((((-1.0)*cj1*x4175))+((r22*x4170))+((sj1*sj2))+(((-1.0)*x4178*x4179))+((x4171*x4174)));
evalcond[4]=((((-1.0)*x4172*x4179))+(((-1.0)*cj0*x4177))+((r01*x4182))+((r02*x4170))+(((-1.0)*cj0*sj1*x4175)));
evalcond[5]=(((r12*x4170))+((r11*x4182))+(((-1.0)*x4176*x4177))+(((-1.0)*sj0*sj1*x4175))+(((-1.0)*x4173*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4183=((1.0)*cj5);
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4183))+(((-1.0)*r10*sj5)))),-1);
if(!x4184.valid){
continue;
}
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4183))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4184.value)))+(x4185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4186=IKsin(j4);
IkReal x4187=IKcos(j4);
IkReal x4188=(cj5*r00);
IkReal x4189=(cj5*r10);
IkReal x4190=(r21*sj5);
IkReal x4191=((1.0)*cj2);
IkReal x4192=((1.0)*sj0);
IkReal x4193=(cj1*sj2);
IkReal x4194=(cj5*r20);
IkReal x4195=((1.0)*x4187);
IkReal x4196=((1.0)*x4186);
IkReal x4197=(sj5*x4186);
IkReal x4198=(sj5*x4187);
evalcond[0]=((((-1.0)*x4194*x4196))+((x4186*x4190))+(((-1.0)*r22*x4195)));
evalcond[1]=((((-1.0)*r12*x4195))+((r11*x4197))+cj0+(((-1.0)*x4189*x4196)));
evalcond[2]=((((-1.0)*x4192))+(((-1.0)*r02*x4195))+((r01*x4197))+(((-1.0)*x4188*x4196)));
evalcond[3]=((((-1.0)*x4194*x4195))+((x4187*x4190))+((sj1*sj2))+((r22*x4186))+(((-1.0)*cj1*x4191)));
evalcond[4]=(((r02*x4186))+(((-1.0)*cj0*sj1*x4191))+(((-1.0)*cj0*x4193))+((r01*x4198))+(((-1.0)*x4188*x4195)));
evalcond[5]=(((r12*x4186))+((r11*x4198))+(((-1.0)*x4189*x4195))+(((-1.0)*sj0*sj1*x4191))+(((-1.0)*x4192*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4199=((1.0)*cj5);
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4199))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4199))+(((-1.0)*r00*sj5)))),-1);
if(!x4201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4200.value)+(((1.5707963267949)*(x4201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4202=IKsin(j4);
IkReal x4203=IKcos(j4);
IkReal x4204=(cj5*r00);
IkReal x4205=(cj5*r10);
IkReal x4206=(r21*sj5);
IkReal x4207=((1.0)*cj2);
IkReal x4208=((1.0)*sj0);
IkReal x4209=(cj1*sj2);
IkReal x4210=(cj5*r20);
IkReal x4211=((1.0)*x4203);
IkReal x4212=((1.0)*x4202);
IkReal x4213=(sj5*x4202);
IkReal x4214=(sj5*x4203);
evalcond[0]=((((-1.0)*x4210*x4212))+(((-1.0)*r22*x4211))+((x4202*x4206)));
evalcond[1]=(cj0+((r11*x4213))+(((-1.0)*r12*x4211))+(((-1.0)*x4205*x4212)));
evalcond[2]=((((-1.0)*x4204*x4212))+(((-1.0)*r02*x4211))+(((-1.0)*x4208))+((r01*x4213)));
evalcond[3]=(((r22*x4202))+(((-1.0)*x4210*x4211))+((sj1*sj2))+(((-1.0)*cj1*x4207))+((x4203*x4206)));
evalcond[4]=(((r02*x4202))+(((-1.0)*x4204*x4211))+(((-1.0)*cj0*x4209))+(((-1.0)*cj0*sj1*x4207))+((r01*x4214)));
evalcond[5]=((((-1.0)*x4208*x4209))+((r11*x4214))+(((-1.0)*x4205*x4211))+(((-1.0)*sj0*sj1*x4207))+((r12*x4202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4215=r21*r21;
IkReal x4216=cj5*cj5;
IkReal x4217=(sj1*sj2);
IkReal x4218=(r21*sj5);
IkReal x4219=(cj1*cj2);
IkReal x4220=(cj5*r20);
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign((((x4215*x4216))+(((2.0)*x4218*x4220))+(((-1.0)*(r22*r22)))+(((-1.0)*x4215))+(((-1.0)*x4216*(r20*r20))))),-1);
if(!x4221.valid){
continue;
}
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4219))+((r22*x4217)))),IkReal((((x4217*x4218))+(((-1.0)*x4218*x4219))+(((-1.0)*x4217*x4220))+((x4219*x4220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4221.value)))+(x4222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4223=IKsin(j4);
IkReal x4224=IKcos(j4);
IkReal x4225=(r21*sj5);
IkReal x4226=(cj5*r20);
IkReal x4227=((1.0)*x4224);
evalcond[0]=((((-1.0)*x4223*x4226))+(((-1.0)*r22*x4227))+((x4223*x4225)));
evalcond[1]=(((x4224*x4225))+(((-1.0)*x4226*x4227))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4228=(cj5*sj4);
IkReal x4229=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228))))+IKsqr((((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228))), (((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4230=IKcos(j0);
IkReal x4231=IKsin(j0);
IkReal x4232=((1.0)*cj1);
IkReal x4233=((0.39225)*sj1);
IkReal x4234=(r11*sj5);
IkReal x4235=(cj5*r11);
IkReal x4236=((1.0)*sj5);
IkReal x4237=((1.0)*sj1);
IkReal x4238=((0.09465)*sj5);
IkReal x4239=((1.0)*cj5);
IkReal x4240=((0.425)*cj1);
IkReal x4241=((1.0)*cj4);
IkReal x4242=(r01*sj5);
IkReal x4243=(sj2*x4230);
IkReal x4244=(sj2*x4231);
IkReal x4245=(cj4*x4239);
IkReal x4246=((0.39225)*cj1*cj2);
IkReal x4247=(cj2*x4230);
IkReal x4248=(cj2*x4231);
evalcond[0]=(((sj4*x4234))+(((-1.0)*r10*sj4*x4239))+(((-1.0)*r12*x4241))+x4230);
evalcond[1]=(((sj4*x4242))+(((-1.0)*x4231))+(((-1.0)*r00*sj4*x4239))+(((-1.0)*r02*x4241)));
evalcond[2]=(((sj1*x4243))+(((-1.0)*r01*x4239))+(((-1.0)*x4232*x4247))+(((-1.0)*r00*x4236)));
evalcond[3]=(((sj1*x4244))+(((-1.0)*x4235))+(((-1.0)*r10*x4236))+(((-1.0)*x4232*x4248)));
evalcond[4]=(((cj4*x4242))+((r02*sj4))+(((-1.0)*x4232*x4243))+(((-1.0)*x4237*x4247))+(((-1.0)*r00*x4245)));
evalcond[5]=(((cj4*x4234))+(((-1.0)*x4232*x4244))+(((-1.0)*x4237*x4248))+((r12*sj4))+(((-1.0)*r10*x4245)));
evalcond[6]=((((-1.0)*x4233*x4243))+((x4230*x4246))+((x4230*x4240))+(((-0.09465)*cj5*r01))+(((-0.10915)*x4231))+(((-1.0)*px))+(((-1.0)*r00*x4238)));
evalcond[7]=(((x4231*x4246))+((x4231*x4240))+(((-1.0)*x4233*x4244))+(((-0.09465)*x4235))+(((0.10915)*x4230))+(((-1.0)*r10*x4238))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4250.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4249.value)+(((1.5707963267949)*(x4250.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4251=IKcos(j0);
IkReal x4252=IKsin(j0);
IkReal x4253=(cj5*r11);
IkReal x4254=(cj5*r01);
IkReal x4255=((1.0)*sj5);
IkReal x4256=((0.09465)*sj5);
IkReal x4257=(sj1*sj2);
IkReal x4258=((0.39225)*cj2);
IkReal x4259=((1.0)*cj2);
IkReal x4260=((0.39225)*x4257);
IkReal x4261=(cj1*x4251);
IkReal x4262=(cj1*x4252);
evalcond[0]=((((-1.0)*x4259*x4261))+((x4251*x4257))+(((-1.0)*x4254))+(((-1.0)*r00*x4255)));
evalcond[1]=((((-1.0)*x4259*x4262))+(((-1.0)*x4253))+((x4252*x4257))+(((-1.0)*r10*x4255)));
evalcond[2]=((((-0.10915)*x4252))+(((-1.0)*px))+(((-0.09465)*x4254))+(((-1.0)*x4251*x4260))+((x4258*x4261))+(((0.425)*x4261))+(((-1.0)*r00*x4256)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x4253))+(((-1.0)*x4252*x4260))+((x4258*x4262))+(((0.425)*x4262))+(((0.10915)*x4251))+(((-1.0)*r10*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4263=((1.0)*cj5);
IkReal x4264=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4263)));
j4eval[0]=x4264;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4263)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4265=((1.0)*cj5);
IkReal x4266=((((-1.0)*r11*x4265))+(((-1.0)*r10*sj5)));
j4eval[0]=x4266;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x4265))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4267=((1.0)*sj0);
IkReal x4268=((1.0)*cj0);
IkReal x4269=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4269;
j4eval[1]=((IKabs(((((-1.0)*r12*x4267))+(((-1.0)*r02*x4268)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4268))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4267))))));
j4eval[2]=IKsign(x4269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4270=((-1.0)*r20);
IkReal x4272 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4272)==0){
continue;
}
IkReal x4271=pow(x4272,-0.5);
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4270),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4273.value));
IkReal gconst97=(r21*x4271);
IkReal gconst98=(x4270*x4271);
CheckValue<IkReal> x4274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4274.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4274.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4275=((-1.0)*r20);
IkReal x4276=x4271;
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4275),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
IkReal x4277=((-1.0)*(x4278.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4277;
IkReal gconst96=x4277;
IkReal gconst97=(r21*x4276);
IkReal gconst98=(x4275*x4276);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4279=((-1.0)*r20);
IkReal x4280=x4271;
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4279),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
IkReal x4281=((-1.0)*(x4282.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4281;
IkReal gconst96=x4281;
IkReal gconst97=(r21*x4280);
IkReal gconst98=(x4279*x4280);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4283=((-1.0)*r20);
IkReal x4284=x4271;
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4283),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
IkReal x4285=((-1.0)*(x4286.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4285;
IkReal gconst96=x4285;
IkReal gconst97=(r21*x4284);
IkReal gconst98=(x4283*x4284);
IkReal x4287=((1.0)*(r22*r22));
CheckValue<IkReal> x4291=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4287))),-1);
if(!x4291.valid){
continue;
}
IkReal x4288=x4291.value;
IkReal x4289=((1.0)*x4288);
IkReal x4290=((((-1.0)*x4287))+(((-2.0)*x4288*(r20*r20)*(r21*r21)))+(((-1.0)*x4289*(r20*r20*r20*r20)))+(((-1.0)*x4289*(r21*r21*r21*r21))));
j4eval[0]=x4290;
j4eval[1]=IKsign(x4290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4292=(cj1*cj2);
IkReal x4293=(gconst98*r20);
IkReal x4294=(sj1*sj2);
IkReal x4295=(gconst97*r21);
CheckValue<IkReal> x4296=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4293*x4293)))+(((-1.0)*(x4295*x4295)))+(((-1.0)*(r22*r22)))+(((2.0)*x4293*x4295)))),-1);
if(!x4296.valid){
continue;
}
CheckValue<IkReal> x4297 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4292))+((r22*x4294)))),IkReal((((x4292*x4293))+(((-1.0)*x4293*x4294))+(((-1.0)*x4292*x4295))+((x4294*x4295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4296.value)))+(x4297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4298=IKsin(j4);
IkReal x4299=IKcos(j4);
IkReal x4300=(gconst98*r10);
IkReal x4301=(gconst97*r21);
IkReal x4302=(gconst98*r20);
IkReal x4303=((1.0)*cj2);
IkReal x4304=((1.0)*sj0);
IkReal x4305=(gconst98*r00);
IkReal x4306=(cj1*sj2);
IkReal x4307=((1.0)*x4299);
IkReal x4308=((1.0)*x4298);
IkReal x4309=(gconst97*x4298);
IkReal x4310=(gconst97*x4299);
evalcond[0]=((((-1.0)*r22*x4307))+((x4298*x4301))+(((-1.0)*x4302*x4308)));
evalcond[1]=((((-1.0)*r12*x4307))+((r11*x4309))+cj0+(((-1.0)*x4300*x4308)));
evalcond[2]=(((r01*x4309))+(((-1.0)*x4305*x4308))+(((-1.0)*r02*x4307))+(((-1.0)*x4304)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4303))+((x4299*x4301))+((r22*x4298))+(((-1.0)*x4302*x4307)));
evalcond[4]=((((-1.0)*cj0*sj1*x4303))+((r01*x4310))+(((-1.0)*cj0*x4306))+(((-1.0)*x4305*x4307))+((r02*x4298)));
evalcond[5]=((((-1.0)*sj0*sj1*x4303))+((r11*x4310))+((r12*x4298))+(((-1.0)*x4304*x4306))+(((-1.0)*x4300*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4311=((1.0)*gconst98);
CheckValue<IkReal> x4312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4311))+(((-1.0)*gconst97*r10)))),-1);
if(!x4312.valid){
continue;
}
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4312.value)))+(x4313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4314=IKsin(j4);
IkReal x4315=IKcos(j4);
IkReal x4316=(gconst98*r10);
IkReal x4317=(gconst97*r21);
IkReal x4318=(gconst98*r20);
IkReal x4319=((1.0)*cj2);
IkReal x4320=((1.0)*sj0);
IkReal x4321=(gconst98*r00);
IkReal x4322=(cj1*sj2);
IkReal x4323=((1.0)*x4315);
IkReal x4324=((1.0)*x4314);
IkReal x4325=(gconst97*x4314);
IkReal x4326=(gconst97*x4315);
evalcond[0]=(((x4314*x4317))+(((-1.0)*r22*x4323))+(((-1.0)*x4318*x4324)));
evalcond[1]=(cj0+(((-1.0)*x4316*x4324))+(((-1.0)*r12*x4323))+((r11*x4325)));
evalcond[2]=((((-1.0)*r02*x4323))+(((-1.0)*x4320))+(((-1.0)*x4321*x4324))+((r01*x4325)));
evalcond[3]=((((-1.0)*cj1*x4319))+((x4315*x4317))+((sj1*sj2))+((r22*x4314))+(((-1.0)*x4318*x4323)));
evalcond[4]=((((-1.0)*x4321*x4323))+(((-1.0)*cj0*x4322))+(((-1.0)*cj0*sj1*x4319))+((r02*x4314))+((r01*x4326)));
evalcond[5]=((((-1.0)*x4316*x4323))+((r12*x4314))+(((-1.0)*sj0*sj1*x4319))+(((-1.0)*x4320*x4322))+((r11*x4326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4327=((1.0)*gconst98);
CheckValue<IkReal> x4328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4327))+(((-1.0)*gconst97*r00)))),-1);
if(!x4328.valid){
continue;
}
CheckValue<IkReal> x4329 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4327))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4328.value)))+(x4329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4330=IKsin(j4);
IkReal x4331=IKcos(j4);
IkReal x4332=(gconst98*r10);
IkReal x4333=(gconst97*r21);
IkReal x4334=(gconst98*r20);
IkReal x4335=((1.0)*cj2);
IkReal x4336=((1.0)*sj0);
IkReal x4337=(gconst98*r00);
IkReal x4338=(cj1*sj2);
IkReal x4339=((1.0)*x4331);
IkReal x4340=((1.0)*x4330);
IkReal x4341=(gconst97*x4330);
IkReal x4342=(gconst97*x4331);
evalcond[0]=((((-1.0)*r22*x4339))+((x4330*x4333))+(((-1.0)*x4334*x4340)));
evalcond[1]=(cj0+(((-1.0)*r12*x4339))+(((-1.0)*x4332*x4340))+((r11*x4341)));
evalcond[2]=((((-1.0)*r02*x4339))+(((-1.0)*x4336))+(((-1.0)*x4337*x4340))+((r01*x4341)));
evalcond[3]=((((-1.0)*x4334*x4339))+((sj1*sj2))+((x4331*x4333))+(((-1.0)*cj1*x4335))+((r22*x4330)));
evalcond[4]=((((-1.0)*cj0*sj1*x4335))+((r02*x4330))+(((-1.0)*cj0*x4338))+((r01*x4342))+(((-1.0)*x4337*x4339)));
evalcond[5]=((((-1.0)*x4332*x4339))+(((-1.0)*sj0*sj1*x4335))+((r12*x4330))+(((-1.0)*x4336*x4338))+((r11*x4342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4343=((-1.0)*r21);
IkReal x4345 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4345)==0){
continue;
}
IkReal x4344=pow(x4345,-0.5);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(x4343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4346.value))));
IkReal gconst100=(x4343*x4344);
IkReal gconst101=((1.0)*r20*x4344);
CheckValue<IkReal> x4347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4347.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4348=((-1.0)*r21);
CheckValue<IkReal> x4351 = IKatan2WithCheck(IkReal(x4348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4351.valid){
continue;
}
IkReal x4349=((1.0)*(x4351.value));
IkReal x4350=x4344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4349)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4349)));
IkReal gconst100=(x4348*x4350);
IkReal gconst101=((1.0)*r20*x4350);
IkReal x4352=r22*r22;
IkReal x4353=((1.0)*x4352);
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(((-1.0)+x4352),-1);
if(!x4357.valid){
continue;
}
IkReal x4354=x4357.value;
if((((1.0)+(((-1.0)*x4353)))) < -0.00001)
continue;
IkReal x4355=IKsqrt(((1.0)+(((-1.0)*x4353))));
IkReal x4356=(cj0*x4354*x4355);
j4eval[0]=((IKabs(((((-1.0)*x4353*x4356))+x4356)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4358=((-1.0)*r21);
CheckValue<IkReal> x4361 = IKatan2WithCheck(IkReal(x4358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4361.valid){
continue;
}
IkReal x4359=((1.0)*(x4361.value));
IkReal x4360=x4344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4359)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4359)));
IkReal gconst100=(x4358*x4360);
IkReal gconst101=((1.0)*r20*x4360);
IkReal x4362=r22*r22;
IkReal x4363=((1.0)*x4362);
CheckValue<IkReal> x4367=IKPowWithIntegerCheck(((-1.0)+x4362),-1);
if(!x4367.valid){
continue;
}
IkReal x4364=x4367.value;
if((((1.0)+(((-1.0)*x4363)))) < -0.00001)
continue;
IkReal x4365=IKsqrt(((1.0)+(((-1.0)*x4363))));
IkReal x4366=(sj0*x4364*x4365);
j4eval[0]=((IKabs((x4366+(((-1.0)*x4363*x4366)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4368=((-1.0)*r21);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(x4368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
IkReal x4369=((1.0)*(x4371.value));
IkReal x4370=x4344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4369)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4369)));
IkReal gconst100=(x4368*x4370);
IkReal gconst101=((1.0)*r20*x4370);
IkReal x4372=r22*r22;
IkReal x4373=(r12*sj0);
IkReal x4374=(cj0*r02);
CheckValue<IkReal> x4378=IKPowWithIntegerCheck(((-1.0)+x4372),-1);
if(!x4378.valid){
continue;
}
IkReal x4375=x4378.value;
if((((1.0)+(((-1.0)*x4372)))) < -0.00001)
continue;
IkReal x4376=IKsqrt(((1.0)+(((-1.0)*x4372))));
IkReal x4377=(r22*x4375*x4376);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4374))+(((-1.0)*x4373)))))+(IKabs((((x4374*x4377))+((x4373*x4377))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4379=((1.0)*sj0);
IkReal x4380=((1.0)*gconst100);
CheckValue<IkReal> x4381=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4380)))),-1);
if(!x4381.valid){
continue;
}
CheckValue<IkReal> x4382 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4379)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4380))+(((-1.0)*gconst100*r11*x4379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4381.value)))+(x4382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4383=IKsin(j4);
IkReal x4384=IKcos(j4);
IkReal x4385=(gconst101*r20);
IkReal x4386=(gconst101*r10);
IkReal x4387=((1.0)*cj2);
IkReal x4388=(gconst101*r00);
IkReal x4389=((1.0)*sj0);
IkReal x4390=(cj1*sj2);
IkReal x4391=((1.0)*x4384);
IkReal x4392=((1.0)*x4383);
IkReal x4393=(gconst100*x4383);
IkReal x4394=(gconst100*x4384);
evalcond[0]=((((-1.0)*r22*x4391))+((r21*x4393))+(((-1.0)*x4385*x4392)));
evalcond[1]=((((-1.0)*r12*x4391))+cj0+(((-1.0)*x4386*x4392))+((r11*x4393)));
evalcond[2]=(((r01*x4393))+(((-1.0)*r02*x4391))+(((-1.0)*x4388*x4392))+(((-1.0)*x4389)));
evalcond[3]=(((r22*x4383))+((sj1*sj2))+((r21*x4394))+(((-1.0)*cj1*x4387))+(((-1.0)*x4385*x4391)));
evalcond[4]=(((r01*x4394))+(((-1.0)*x4388*x4391))+(((-1.0)*cj0*sj1*x4387))+((r02*x4383))+(((-1.0)*cj0*x4390)));
evalcond[5]=((((-1.0)*x4389*x4390))+(((-1.0)*x4386*x4391))+((r11*x4394))+((r12*x4383))+(((-1.0)*sj0*sj1*x4387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4395=((1.0)*gconst101);
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4395))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
CheckValue<IkReal> x4397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4395))+(((-1.0)*gconst100*r10)))),-1);
if(!x4397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4396.value)+(((1.5707963267949)*(x4397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4398=IKsin(j4);
IkReal x4399=IKcos(j4);
IkReal x4400=(gconst101*r20);
IkReal x4401=(gconst101*r10);
IkReal x4402=((1.0)*cj2);
IkReal x4403=(gconst101*r00);
IkReal x4404=((1.0)*sj0);
IkReal x4405=(cj1*sj2);
IkReal x4406=((1.0)*x4399);
IkReal x4407=((1.0)*x4398);
IkReal x4408=(gconst100*x4398);
IkReal x4409=(gconst100*x4399);
evalcond[0]=(((r21*x4408))+(((-1.0)*x4400*x4407))+(((-1.0)*r22*x4406)));
evalcond[1]=(((r11*x4408))+cj0+(((-1.0)*r12*x4406))+(((-1.0)*x4401*x4407)));
evalcond[2]=((((-1.0)*x4403*x4407))+((r01*x4408))+(((-1.0)*r02*x4406))+(((-1.0)*x4404)));
evalcond[3]=(((r21*x4409))+((r22*x4398))+(((-1.0)*x4400*x4406))+((sj1*sj2))+(((-1.0)*cj1*x4402)));
evalcond[4]=((((-1.0)*cj0*x4405))+(((-1.0)*x4403*x4406))+((r02*x4398))+((r01*x4409))+(((-1.0)*cj0*sj1*x4402)));
evalcond[5]=(((r11*x4409))+(((-1.0)*x4401*x4406))+(((-1.0)*sj0*sj1*x4402))+(((-1.0)*x4404*x4405))+((r12*x4398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4410=((1.0)*gconst101);
CheckValue<IkReal> x4411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4410)))),-1);
if(!x4411.valid){
continue;
}
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4411.value)))+(x4412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4413=IKsin(j4);
IkReal x4414=IKcos(j4);
IkReal x4415=(gconst101*r20);
IkReal x4416=(gconst101*r10);
IkReal x4417=((1.0)*cj2);
IkReal x4418=(gconst101*r00);
IkReal x4419=((1.0)*sj0);
IkReal x4420=(cj1*sj2);
IkReal x4421=((1.0)*x4414);
IkReal x4422=((1.0)*x4413);
IkReal x4423=(gconst100*x4413);
IkReal x4424=(gconst100*x4414);
evalcond[0]=((((-1.0)*x4415*x4422))+(((-1.0)*r22*x4421))+((r21*x4423)));
evalcond[1]=(cj0+(((-1.0)*r12*x4421))+((r11*x4423))+(((-1.0)*x4416*x4422)));
evalcond[2]=((((-1.0)*x4419))+((r01*x4423))+(((-1.0)*r02*x4421))+(((-1.0)*x4418*x4422)));
evalcond[3]=((((-1.0)*x4415*x4421))+((r22*x4413))+((sj1*sj2))+((r21*x4424))+(((-1.0)*cj1*x4417)));
evalcond[4]=((((-1.0)*cj0*sj1*x4417))+(((-1.0)*cj0*x4420))+((r01*x4424))+((r02*x4413))+(((-1.0)*x4418*x4421)));
evalcond[5]=(((r12*x4413))+(((-1.0)*sj0*sj1*x4417))+(((-1.0)*x4419*x4420))+((r11*x4424))+(((-1.0)*x4416*x4421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4425=((-1.0)*r10);
IkReal x4427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4427)==0){
continue;
}
IkReal x4426=pow(x4427,-0.5);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4425),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4428.value));
IkReal gconst103=(r11*x4426);
IkReal gconst104=(x4425*x4426);
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4430=((-1.0)*r10);
IkReal x4431=x4426;
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4430),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
IkReal x4432=((-1.0)*(x4433.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4432;
IkReal gconst102=x4432;
IkReal gconst103=(r11*x4431);
IkReal gconst104=(x4430*x4431);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4434=((1.0)*sj0);
IkReal x4435=((1.0)*gconst103);
CheckValue<IkReal> x4436 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4434)))),IkReal(((((-1.0)*gconst103*r11*x4434))+(((-1.0)*cj0*r01*x4435))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4436.valid){
continue;
}
CheckValue<IkReal> x4437=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4435)))),-1);
if(!x4437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4436.value)+(((1.5707963267949)*(x4437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4438=IKsin(j4);
IkReal x4439=IKcos(j4);
IkReal x4440=(gconst103*r11);
IkReal x4441=((1.0)*cj2);
IkReal x4442=((1.0)*sj0);
IkReal x4443=(cj1*sj2);
IkReal x4444=((1.0)*x4439);
IkReal x4445=(gconst103*x4439);
IkReal x4446=(gconst103*x4438);
IkReal x4447=((1.0)*gconst104*x4438);
evalcond[0]=(((r21*x4446))+(((-1.0)*r22*x4444))+(((-1.0)*r20*x4447)));
evalcond[1]=(cj0+(((-1.0)*r12*x4444))+(((-1.0)*r10*x4447))+((x4438*x4440)));
evalcond[2]=((((-1.0)*x4442))+((r01*x4446))+(((-1.0)*r02*x4444))+(((-1.0)*r00*x4447)));
evalcond[3]=(((r22*x4438))+((r21*x4445))+((sj1*sj2))+(((-1.0)*cj1*x4441))+(((-1.0)*gconst104*r20*x4444)));
evalcond[4]=((((-1.0)*gconst104*r00*x4444))+((r01*x4445))+(((-1.0)*cj0*sj1*x4441))+(((-1.0)*cj0*x4443))+((r02*x4438)));
evalcond[5]=(((r12*x4438))+(((-1.0)*gconst104*r10*x4444))+(((-1.0)*x4442*x4443))+((x4439*x4440))+(((-1.0)*sj0*sj1*x4441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4448=((1.0)*gconst104);
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4448))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
CheckValue<IkReal> x4450=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4448)))),-1);
if(!x4450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4449.value)+(((1.5707963267949)*(x4450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4451=IKsin(j4);
IkReal x4452=IKcos(j4);
IkReal x4453=(gconst103*r11);
IkReal x4454=((1.0)*cj2);
IkReal x4455=((1.0)*sj0);
IkReal x4456=(cj1*sj2);
IkReal x4457=((1.0)*x4452);
IkReal x4458=(gconst103*x4452);
IkReal x4459=(gconst103*x4451);
IkReal x4460=((1.0)*gconst104*x4451);
evalcond[0]=(((r21*x4459))+(((-1.0)*r22*x4457))+(((-1.0)*r20*x4460)));
evalcond[1]=(cj0+((x4451*x4453))+(((-1.0)*r12*x4457))+(((-1.0)*r10*x4460)));
evalcond[2]=((((-1.0)*x4455))+((r01*x4459))+(((-1.0)*r02*x4457))+(((-1.0)*r00*x4460)));
evalcond[3]=((((-1.0)*gconst104*r20*x4457))+((r21*x4458))+((sj1*sj2))+(((-1.0)*cj1*x4454))+((r22*x4451)));
evalcond[4]=((((-1.0)*gconst104*r00*x4457))+((r01*x4458))+(((-1.0)*cj0*sj1*x4454))+(((-1.0)*cj0*x4456))+((r02*x4451)));
evalcond[5]=((((-1.0)*x4455*x4456))+((x4452*x4453))+(((-1.0)*gconst104*r10*x4457))+((r12*x4451))+(((-1.0)*sj0*sj1*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4461=((-1.0)*r11);
IkReal x4463 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4463)==0){
continue;
}
IkReal x4462=pow(x4463,-0.5);
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(x4461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4464.value))));
IkReal gconst106=(x4461*x4462);
IkReal gconst107=((1.0)*r10*x4462);
CheckValue<IkReal> x4465 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4465.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4466=((-1.0)*r11);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(x4466),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
IkReal x4467=((1.0)*(x4469.value));
IkReal x4468=x4462;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4467)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4467)));
IkReal gconst106=(x4466*x4468);
IkReal gconst107=((1.0)*r10*x4468);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4470=((-1.0)*r11);
CheckValue<IkReal> x4473 = IKatan2WithCheck(IkReal(x4470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4473.valid){
continue;
}
IkReal x4471=((1.0)*(x4473.value));
IkReal x4472=x4462;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4471)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4471)));
IkReal gconst106=(x4470*x4472);
IkReal gconst107=((1.0)*r10*x4472);
IkReal x4474=r12*r12;
IkReal x4475=((1.0)*sj0);
IkReal x4476=(cj0*r02);
IkReal x4477=x4462;
j4eval[0]=((IKabs(((((-1.0)*x4475*x4477))+((r12*x4476*x4477))+((sj0*x4474*x4477)))))+(IKabs(((((-1.0)*r12*x4475))+(((-1.0)*x4476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4478=((-1.0)*r11);
CheckValue<IkReal> x4481 = IKatan2WithCheck(IkReal(x4478),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4481.valid){
continue;
}
IkReal x4479=((1.0)*(x4481.value));
IkReal x4480=x4462;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4479)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4479)));
IkReal gconst106=(x4478*x4480);
IkReal gconst107=((1.0)*r10*x4480);
IkReal x4482=r12*r12;
IkReal x4483=((1.0)+(((-1.0)*x4482)));
IkReal x4484=(r22*sj1*sj2);
IkReal x4485=(cj1*cj2*r22);
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(x4483,-1);
if(!x4492.valid){
continue;
}
IkReal x4486=x4492.value;
CheckValue<IkReal> x4493=IKPowWithIntegerCheck(((-1.0)+x4482),-1);
if(!x4493.valid){
continue;
}
IkReal x4487=x4493.value;
IkReal x4488=((1.0)*x4486);
if((x4483) < -0.00001)
continue;
IkReal x4489=IKsqrt(x4483);
IkReal x4490=(r12*x4487*x4489);
IkReal x4491=((((-1.0)*x4488*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4486))+(((-1.0)*(r22*r22)))+(((-1.0)*x4488*(r10*r10)*(r20*r20))));
j4eval[0]=x4491;
j4eval[1]=((IKabs((((x4485*x4490))+(((-1.0)*x4484*x4490)))))+(IKabs(((((-1.0)*x4485))+x4484))));
j4eval[2]=IKsign(x4491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4494=(sj1*sj2);
IkReal x4495=(gconst106*r21);
IkReal x4496=(gconst107*r20);
IkReal x4497=(cj1*cj2);
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4495*x4495)))+(((2.0)*x4495*x4496))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4496*x4496))))),-1);
if(!x4498.valid){
continue;
}
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4497))+((r22*x4494)))),IkReal(((((-1.0)*x4494*x4496))+((x4494*x4495))+(((-1.0)*x4495*x4497))+((x4496*x4497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4498.value)))+(x4499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4500=IKsin(j4);
IkReal x4501=IKcos(j4);
IkReal x4502=(gconst107*r10);
IkReal x4503=(gconst107*r00);
IkReal x4504=((1.0)*cj2);
IkReal x4505=(gconst107*r20);
IkReal x4506=((1.0)*sj0);
IkReal x4507=(cj1*sj2);
IkReal x4508=((1.0)*x4501);
IkReal x4509=(gconst106*x4501);
IkReal x4510=(gconst106*x4500);
IkReal x4511=((1.0)*x4500);
evalcond[0]=((((-1.0)*x4505*x4511))+((r21*x4510))+(((-1.0)*r22*x4508)));
evalcond[1]=(cj0+(((-1.0)*x4502*x4511))+((r11*x4510))+(((-1.0)*r12*x4508)));
evalcond[2]=((((-1.0)*x4506))+(((-1.0)*r02*x4508))+((r01*x4510))+(((-1.0)*x4503*x4511)));
evalcond[3]=((((-1.0)*cj1*x4504))+((r22*x4500))+((r21*x4509))+((sj1*sj2))+(((-1.0)*x4505*x4508)));
evalcond[4]=((((-1.0)*x4503*x4508))+((r02*x4500))+(((-1.0)*cj0*x4507))+((r01*x4509))+(((-1.0)*cj0*sj1*x4504)));
evalcond[5]=((((-1.0)*x4506*x4507))+((r12*x4500))+((r11*x4509))+(((-1.0)*sj0*sj1*x4504))+(((-1.0)*x4502*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4512=((1.0)*sj0);
IkReal x4513=((1.0)*gconst106);
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4512))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4513))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4512))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
CheckValue<IkReal> x4515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4513)))),-1);
if(!x4515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4514.value)+(((1.5707963267949)*(x4515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4516=IKsin(j4);
IkReal x4517=IKcos(j4);
IkReal x4518=(gconst107*r10);
IkReal x4519=(gconst107*r00);
IkReal x4520=((1.0)*cj2);
IkReal x4521=(gconst107*r20);
IkReal x4522=((1.0)*sj0);
IkReal x4523=(cj1*sj2);
IkReal x4524=((1.0)*x4517);
IkReal x4525=(gconst106*x4517);
IkReal x4526=(gconst106*x4516);
IkReal x4527=((1.0)*x4516);
evalcond[0]=(((r21*x4526))+(((-1.0)*x4521*x4527))+(((-1.0)*r22*x4524)));
evalcond[1]=((((-1.0)*r12*x4524))+((r11*x4526))+cj0+(((-1.0)*x4518*x4527)));
evalcond[2]=(((r01*x4526))+(((-1.0)*x4522))+(((-1.0)*r02*x4524))+(((-1.0)*x4519*x4527)));
evalcond[3]=(((r21*x4525))+((sj1*sj2))+(((-1.0)*cj1*x4520))+(((-1.0)*x4521*x4524))+((r22*x4516)));
evalcond[4]=(((r02*x4516))+((r01*x4525))+(((-1.0)*cj0*sj1*x4520))+(((-1.0)*cj0*x4523))+(((-1.0)*x4519*x4524)));
evalcond[5]=(((r11*x4525))+((r12*x4516))+(((-1.0)*x4518*x4524))+(((-1.0)*x4522*x4523))+(((-1.0)*sj0*sj1*x4520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4528=((1.0)*gconst107);
CheckValue<IkReal> x4529 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4528))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4529.valid){
continue;
}
CheckValue<IkReal> x4530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4528)))),-1);
if(!x4530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4529.value)+(((1.5707963267949)*(x4530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4531=IKsin(j4);
IkReal x4532=IKcos(j4);
IkReal x4533=(gconst107*r10);
IkReal x4534=(gconst107*r00);
IkReal x4535=((1.0)*cj2);
IkReal x4536=(gconst107*r20);
IkReal x4537=((1.0)*sj0);
IkReal x4538=(cj1*sj2);
IkReal x4539=((1.0)*x4532);
IkReal x4540=(gconst106*x4532);
IkReal x4541=(gconst106*x4531);
IkReal x4542=((1.0)*x4531);
evalcond[0]=((((-1.0)*x4536*x4542))+(((-1.0)*r22*x4539))+((r21*x4541)));
evalcond[1]=(cj0+(((-1.0)*x4533*x4542))+((r11*x4541))+(((-1.0)*r12*x4539)));
evalcond[2]=((((-1.0)*x4537))+(((-1.0)*x4534*x4542))+((r01*x4541))+(((-1.0)*r02*x4539)));
evalcond[3]=((((-1.0)*cj1*x4535))+((sj1*sj2))+((r22*x4531))+((r21*x4540))+(((-1.0)*x4536*x4539)));
evalcond[4]=(((r01*x4540))+((r02*x4531))+(((-1.0)*cj0*x4538))+(((-1.0)*x4534*x4539))+(((-1.0)*cj0*sj1*x4535)));
evalcond[5]=((((-1.0)*x4537*x4538))+((r12*x4531))+(((-1.0)*x4533*x4539))+((r11*x4540))+(((-1.0)*sj0*sj1*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4543=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4543;
j4eval[1]=IKsign(x4543);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4544=((1.0)*cj5);
IkReal x4545=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4544)));
j4eval[0]=x4545;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4544)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4546=(sj1*sj2);
IkReal x4547=(cj5*r10);
IkReal x4548=(r11*sj5);
IkReal x4549=(cj1*cj2);
IkReal x4550=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4550;
j4eval[1]=((IKabs((((x4547*x4549))+((x4546*x4548))+(((-1.0)*x4548*x4549))+(((-1.0)*x4546*x4547)))))+(IKabs((((r12*x4549))+(((-1.0)*r12*x4546))))));
j4eval[2]=IKsign(x4550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4551=(sj1*sj2);
IkReal x4552=(cj5*r10);
IkReal x4553=(r11*sj5);
IkReal x4554=(cj1*cj2);
CheckValue<IkReal> x4555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4555.valid){
continue;
}
CheckValue<IkReal> x4556 = IKatan2WithCheck(IkReal((((x4552*x4554))+(((-1.0)*x4551*x4552))+((x4551*x4553))+(((-1.0)*x4553*x4554)))),IkReal((((r12*x4554))+(((-1.0)*r12*x4551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4555.value)))+(x4556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4557=IKcos(j4);
IkReal x4558=IKsin(j4);
IkReal x4559=(cj5*r00);
IkReal x4560=(cj5*r10);
IkReal x4561=(r21*sj5);
IkReal x4562=((1.0)*cj2);
IkReal x4563=(cj5*r20);
IkReal x4564=((1.0)*x4557);
IkReal x4565=((1.0)*x4558);
IkReal x4566=(sj5*x4558);
IkReal x4567=(sj5*x4557);
evalcond[0]=(((r11*x4567))+((r12*x4558))+(((-1.0)*x4560*x4564)));
evalcond[1]=((((-1.0)*r22*x4564))+(((-1.0)*x4563*x4565))+((x4558*x4561)));
evalcond[2]=((((-1.0)*r02*x4564))+(((-1.0)*x4559*x4565))+((r01*x4566)));
evalcond[3]=((1.0)+((r11*x4566))+(((-1.0)*x4560*x4565))+(((-1.0)*r12*x4564)));
evalcond[4]=((((-1.0)*cj1*x4562))+((x4557*x4561))+((sj1*sj2))+((r22*x4558))+(((-1.0)*x4563*x4564)));
evalcond[5]=((((-1.0)*sj1*x4562))+(((-1.0)*cj1*sj2))+((r02*x4558))+(((-1.0)*x4559*x4564))+((r01*x4567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4568=((1.0)*cj5);
CheckValue<IkReal> x4569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4568))+(((-1.0)*r00*sj5)))),-1);
if(!x4569.valid){
continue;
}
CheckValue<IkReal> x4570 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4568))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4569.value)))+(x4570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4571=IKcos(j4);
IkReal x4572=IKsin(j4);
IkReal x4573=(cj5*r00);
IkReal x4574=(cj5*r10);
IkReal x4575=(r21*sj5);
IkReal x4576=((1.0)*cj2);
IkReal x4577=(cj5*r20);
IkReal x4578=((1.0)*x4571);
IkReal x4579=((1.0)*x4572);
IkReal x4580=(sj5*x4572);
IkReal x4581=(sj5*x4571);
evalcond[0]=(((r12*x4572))+((r11*x4581))+(((-1.0)*x4574*x4578)));
evalcond[1]=((((-1.0)*x4577*x4579))+(((-1.0)*r22*x4578))+((x4572*x4575)));
evalcond[2]=((((-1.0)*r02*x4578))+(((-1.0)*x4573*x4579))+((r01*x4580)));
evalcond[3]=((1.0)+((r11*x4580))+(((-1.0)*x4574*x4579))+(((-1.0)*r12*x4578)));
evalcond[4]=((((-1.0)*x4577*x4578))+(((-1.0)*cj1*x4576))+((r22*x4572))+((sj1*sj2))+((x4571*x4575)));
evalcond[5]=((((-1.0)*sj1*x4576))+((r02*x4572))+(((-1.0)*cj1*sj2))+(((-1.0)*x4573*x4578))+((r01*x4581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4582=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4582.valid){
continue;
}
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4582.value)))+(x4583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4584=IKcos(j4);
IkReal x4585=IKsin(j4);
IkReal x4586=(cj5*r00);
IkReal x4587=(cj5*r10);
IkReal x4588=(r21*sj5);
IkReal x4589=((1.0)*cj2);
IkReal x4590=(cj5*r20);
IkReal x4591=((1.0)*x4584);
IkReal x4592=((1.0)*x4585);
IkReal x4593=(sj5*x4585);
IkReal x4594=(sj5*x4584);
evalcond[0]=((((-1.0)*x4587*x4591))+((r11*x4594))+((r12*x4585)));
evalcond[1]=((((-1.0)*r22*x4591))+((x4585*x4588))+(((-1.0)*x4590*x4592)));
evalcond[2]=((((-1.0)*x4586*x4592))+(((-1.0)*r02*x4591))+((r01*x4593)));
evalcond[3]=((1.0)+(((-1.0)*x4587*x4592))+((r11*x4593))+(((-1.0)*r12*x4591)));
evalcond[4]=(((r22*x4585))+((sj1*sj2))+((x4584*x4588))+(((-1.0)*x4590*x4591))+(((-1.0)*cj1*x4589)));
evalcond[5]=(((r02*x4585))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4589))+(((-1.0)*x4586*x4591))+((r01*x4594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4595=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4595;
j4eval[1]=IKsign(x4595);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4596=((1.0)*cj5);
IkReal x4597=((((-1.0)*r21*x4596))+(((-1.0)*r20*sj5)));
j4eval[0]=x4597;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4596))))));
j4eval[2]=IKsign(x4597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4598=cj5*cj5;
IkReal x4599=r11*r11;
IkReal x4600=(r11*sj5);
IkReal x4601=(cj5*r10);
IkReal x4602=((r12*r12)+x4599+(((-2.0)*x4600*x4601))+((x4598*(r10*r10)))+(((-1.0)*x4598*x4599)));
j4eval[0]=x4602;
j4eval[1]=IKsign(x4602);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4601))+x4600))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4603=cj5*cj5;
IkReal x4604=r11*r11;
IkReal x4605=(cj5*r10);
IkReal x4606=(r11*sj5);
CheckValue<IkReal> x4607=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4603*x4604))+x4604+((x4603*(r10*r10)))+(((-2.0)*x4605*x4606)))),-1);
if(!x4607.valid){
continue;
}
CheckValue<IkReal> x4608 = IKatan2WithCheck(IkReal(((((-1.0)*x4605))+x4606)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4607.value)))+(x4608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4609=IKcos(j4);
IkReal x4610=IKsin(j4);
IkReal x4611=(cj5*r00);
IkReal x4612=(cj5*r10);
IkReal x4613=(r21*sj5);
IkReal x4614=(cj5*r20);
IkReal x4615=((1.0)*x4609);
IkReal x4616=((1.0)*x4610);
IkReal x4617=(sj5*x4610);
IkReal x4618=(sj5*x4609);
evalcond[0]=((((-1.0)*x4612*x4615))+((r12*x4610))+((r11*x4618)));
evalcond[1]=((((-1.0)*x4614*x4616))+((x4610*x4613))+(((-1.0)*r22*x4615)));
evalcond[2]=((((-1.0)*r02*x4615))+((r01*x4617))+(((-1.0)*x4611*x4616)));
evalcond[3]=((-1.0)+(((-1.0)*x4612*x4616))+((r11*x4617))+(((-1.0)*r12*x4615)));
evalcond[4]=(((cj2*sj1))+((r02*x4610))+((cj1*sj2))+((r01*x4618))+(((-1.0)*x4611*x4615)));
evalcond[5]=(((x4609*x4613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4610))+(((-1.0)*x4614*x4615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4619=((1.0)*cj5);
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
CheckValue<IkReal> x4621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4619))+(((-1.0)*r20*sj5)))),-1);
if(!x4621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4620.value)+(((1.5707963267949)*(x4621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4622=IKcos(j4);
IkReal x4623=IKsin(j4);
IkReal x4624=(cj5*r00);
IkReal x4625=(cj5*r10);
IkReal x4626=(r21*sj5);
IkReal x4627=(cj5*r20);
IkReal x4628=((1.0)*x4622);
IkReal x4629=((1.0)*x4623);
IkReal x4630=(sj5*x4623);
IkReal x4631=(sj5*x4622);
evalcond[0]=(((r12*x4623))+((r11*x4631))+(((-1.0)*x4625*x4628)));
evalcond[1]=((((-1.0)*x4627*x4629))+((x4623*x4626))+(((-1.0)*r22*x4628)));
evalcond[2]=(((r01*x4630))+(((-1.0)*r02*x4628))+(((-1.0)*x4624*x4629)));
evalcond[3]=((-1.0)+((r11*x4630))+(((-1.0)*x4625*x4629))+(((-1.0)*r12*x4628)));
evalcond[4]=(((cj2*sj1))+((r01*x4631))+((cj1*sj2))+((r02*x4623))+(((-1.0)*x4624*x4628)));
evalcond[5]=((((-1.0)*x4627*x4628))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4622*x4626))+((r22*x4623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4632 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4632.valid){
continue;
}
CheckValue<IkReal> x4633=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4632.value)+(((1.5707963267949)*(x4633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4634=IKcos(j4);
IkReal x4635=IKsin(j4);
IkReal x4636=(cj5*r00);
IkReal x4637=(cj5*r10);
IkReal x4638=(r21*sj5);
IkReal x4639=(cj5*r20);
IkReal x4640=((1.0)*x4634);
IkReal x4641=((1.0)*x4635);
IkReal x4642=(sj5*x4635);
IkReal x4643=(sj5*x4634);
evalcond[0]=(((r12*x4635))+(((-1.0)*x4637*x4640))+((r11*x4643)));
evalcond[1]=((((-1.0)*r22*x4640))+((x4635*x4638))+(((-1.0)*x4639*x4641)));
evalcond[2]=((((-1.0)*r02*x4640))+(((-1.0)*x4636*x4641))+((r01*x4642)));
evalcond[3]=((-1.0)+(((-1.0)*x4637*x4641))+((r11*x4642))+(((-1.0)*r12*x4640)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4636*x4640))+((cj1*sj2))+((r01*x4643))+((r02*x4635)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4634*x4638))+((r22*x4635))+(((-1.0)*x4639*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4644=((-1.0)*r00);
IkReal x4646 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4646)==0){
continue;
}
IkReal x4645=pow(x4646,-0.5);
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4644),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4647.value));
IkReal gconst109=(r01*x4645);
IkReal gconst110=(x4644*x4645);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4649=((-1.0)*r00);
IkReal x4650=x4645;
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4649),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
IkReal x4651=((-1.0)*(x4652.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4651;
IkReal gconst108=x4651;
IkReal gconst109=(r01*x4650);
IkReal gconst110=(x4649*x4650);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4653=((1.0)*sj0);
IkReal x4654=((1.0)*gconst109);
CheckValue<IkReal> x4655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4654))+(((-1.0)*gconst110*r21)))),-1);
if(!x4655.valid){
continue;
}
CheckValue<IkReal> x4656 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4653)))),IkReal(((((-1.0)*cj0*r01*x4654))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4655.value)))+(x4656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4657=IKsin(j4);
IkReal x4658=IKcos(j4);
IkReal x4659=(gconst109*r21);
IkReal x4660=((1.0)*cj2);
IkReal x4661=((1.0)*sj0);
IkReal x4662=(cj1*sj2);
IkReal x4663=((1.0)*x4658);
IkReal x4664=(gconst109*x4657);
IkReal x4665=(gconst109*x4658);
IkReal x4666=((1.0)*gconst110*x4657);
evalcond[0]=((((-1.0)*r20*x4666))+((x4657*x4659))+(((-1.0)*r22*x4663)));
evalcond[1]=(cj0+(((-1.0)*r10*x4666))+((r11*x4664))+(((-1.0)*r12*x4663)));
evalcond[2]=(((r01*x4664))+(((-1.0)*r00*x4666))+(((-1.0)*x4661))+(((-1.0)*r02*x4663)));
evalcond[3]=((((-1.0)*gconst110*r20*x4663))+((sj1*sj2))+((x4658*x4659))+((r22*x4657))+(((-1.0)*cj1*x4660)));
evalcond[4]=((((-1.0)*cj0*x4662))+((r01*x4665))+((r02*x4657))+(((-1.0)*cj0*sj1*x4660))+(((-1.0)*gconst110*r00*x4663)));
evalcond[5]=((((-1.0)*x4661*x4662))+((r12*x4657))+(((-1.0)*gconst110*r10*x4663))+((r11*x4665))+(((-1.0)*sj0*sj1*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=((1.0)*gconst110);
CheckValue<IkReal> x4668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4667))+(((-1.0)*gconst109*r10)))),-1);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4667))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4668.value)))+(x4669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKsin(j4);
IkReal x4671=IKcos(j4);
IkReal x4672=(gconst109*r21);
IkReal x4673=((1.0)*cj2);
IkReal x4674=((1.0)*sj0);
IkReal x4675=(cj1*sj2);
IkReal x4676=((1.0)*x4671);
IkReal x4677=(gconst109*x4670);
IkReal x4678=(gconst109*x4671);
IkReal x4679=((1.0)*gconst110*x4670);
evalcond[0]=(((x4670*x4672))+(((-1.0)*r20*x4679))+(((-1.0)*r22*x4676)));
evalcond[1]=(cj0+((r11*x4677))+(((-1.0)*r12*x4676))+(((-1.0)*r10*x4679)));
evalcond[2]=((((-1.0)*r02*x4676))+(((-1.0)*x4674))+((r01*x4677))+(((-1.0)*r00*x4679)));
evalcond[3]=((((-1.0)*cj1*x4673))+((sj1*sj2))+((r22*x4670))+(((-1.0)*gconst110*r20*x4676))+((x4671*x4672)));
evalcond[4]=(((r02*x4670))+(((-1.0)*cj0*x4675))+(((-1.0)*cj0*sj1*x4673))+((r01*x4678))+(((-1.0)*gconst110*r00*x4676)));
evalcond[5]=((((-1.0)*x4674*x4675))+(((-1.0)*gconst110*r10*x4676))+((r11*x4678))+(((-1.0)*sj0*sj1*x4673))+((r12*x4670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4680=((-1.0)*r01);
IkReal x4682 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4682)==0){
continue;
}
IkReal x4681=pow(x4682,-0.5);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal(x4680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4683.value))));
IkReal gconst112=(x4680*x4681);
IkReal gconst113=((1.0)*r00*x4681);
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4684.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4685=((-1.0)*r01);
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal(x4685),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
IkReal x4686=((1.0)*(x4688.value));
IkReal x4687=x4681;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4686)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4686)));
IkReal gconst112=(x4685*x4687);
IkReal gconst113=((1.0)*r00*x4687);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4689=((-1.0)*r01);
CheckValue<IkReal> x4692 = IKatan2WithCheck(IkReal(x4689),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
IkReal x4690=((1.0)*(x4692.value));
IkReal x4691=x4681;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4690)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4690)));
IkReal gconst112=(x4689*x4691);
IkReal gconst113=((1.0)*r00*x4691);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4693=((-1.0)*r01);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(x4693),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
IkReal x4694=((1.0)*(x4696.value));
IkReal x4695=x4681;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4694)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4694)));
IkReal gconst112=(x4693*x4695);
IkReal gconst113=((1.0)*r00*x4695);
IkReal x4697=r02*r02;
IkReal x4698=(r12*sj0);
IkReal x4699=((1.0)*cj0);
IkReal x4700=x4681;
j4eval[0]=((IKabs((((r02*x4698*x4700))+((cj0*x4697*x4700))+(((-1.0)*x4699*x4700)))))+(IKabs(((((-1.0)*r02*x4699))+(((-1.0)*x4698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4701=((1.0)*sj0);
IkReal x4702=((1.0)*gconst112);
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4702)))),-1);
if(!x4703.valid){
continue;
}
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4701))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4702))+(((-1.0)*gconst112*r11*x4701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4703.value)))+(x4704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4705=IKsin(j4);
IkReal x4706=IKcos(j4);
IkReal x4707=(gconst113*r20);
IkReal x4708=(gconst112*r21);
IkReal x4709=((1.0)*cj2);
IkReal x4710=(gconst113*r00);
IkReal x4711=(gconst113*r10);
IkReal x4712=((1.0)*sj0);
IkReal x4713=(cj1*sj2);
IkReal x4714=((1.0)*x4706);
IkReal x4715=((1.0)*x4705);
IkReal x4716=(gconst112*x4706);
IkReal x4717=(gconst112*x4705);
evalcond[0]=((((-1.0)*r22*x4714))+((x4705*x4708))+(((-1.0)*x4707*x4715)));
evalcond[1]=(cj0+(((-1.0)*x4711*x4715))+(((-1.0)*r12*x4714))+((r11*x4717)));
evalcond[2]=((((-1.0)*r02*x4714))+(((-1.0)*x4710*x4715))+((r01*x4717))+(((-1.0)*x4712)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4709))+((x4706*x4708))+(((-1.0)*x4707*x4714))+((r22*x4705)));
evalcond[4]=((((-1.0)*x4710*x4714))+(((-1.0)*cj0*x4713))+(((-1.0)*cj0*sj1*x4709))+((r01*x4716))+((r02*x4705)));
evalcond[5]=((((-1.0)*x4712*x4713))+(((-1.0)*sj0*sj1*x4709))+(((-1.0)*x4711*x4714))+((r11*x4716))+((r12*x4705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4718=((1.0)*gconst113);
CheckValue<IkReal> x4719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4718))+(((-1.0)*gconst112*r10)))),-1);
if(!x4719.valid){
continue;
}
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4719.value)))+(x4720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4721=IKsin(j4);
IkReal x4722=IKcos(j4);
IkReal x4723=(gconst113*r20);
IkReal x4724=(gconst112*r21);
IkReal x4725=((1.0)*cj2);
IkReal x4726=(gconst113*r00);
IkReal x4727=(gconst113*r10);
IkReal x4728=((1.0)*sj0);
IkReal x4729=(cj1*sj2);
IkReal x4730=((1.0)*x4722);
IkReal x4731=((1.0)*x4721);
IkReal x4732=(gconst112*x4722);
IkReal x4733=(gconst112*x4721);
evalcond[0]=((((-1.0)*x4723*x4731))+((x4721*x4724))+(((-1.0)*r22*x4730)));
evalcond[1]=(((r11*x4733))+cj0+(((-1.0)*r12*x4730))+(((-1.0)*x4727*x4731)));
evalcond[2]=((((-1.0)*x4728))+(((-1.0)*x4726*x4731))+((r01*x4733))+(((-1.0)*r02*x4730)));
evalcond[3]=((((-1.0)*x4723*x4730))+(((-1.0)*cj1*x4725))+((sj1*sj2))+((x4722*x4724))+((r22*x4721)));
evalcond[4]=(((r02*x4721))+(((-1.0)*x4726*x4730))+(((-1.0)*cj0*sj1*x4725))+(((-1.0)*cj0*x4729))+((r01*x4732)));
evalcond[5]=(((r11*x4732))+(((-1.0)*x4728*x4729))+(((-1.0)*x4727*x4730))+(((-1.0)*sj0*sj1*x4725))+((r12*x4721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4734=((1.0)*gconst113);
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4734))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
CheckValue<IkReal> x4736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4734))+(((-1.0)*gconst112*r00)))),-1);
if(!x4736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4735.value)+(((1.5707963267949)*(x4736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4737=IKsin(j4);
IkReal x4738=IKcos(j4);
IkReal x4739=(gconst113*r20);
IkReal x4740=(gconst112*r21);
IkReal x4741=((1.0)*cj2);
IkReal x4742=(gconst113*r00);
IkReal x4743=(gconst113*r10);
IkReal x4744=((1.0)*sj0);
IkReal x4745=(cj1*sj2);
IkReal x4746=((1.0)*x4738);
IkReal x4747=((1.0)*x4737);
IkReal x4748=(gconst112*x4738);
IkReal x4749=(gconst112*x4737);
evalcond[0]=(((x4737*x4740))+(((-1.0)*r22*x4746))+(((-1.0)*x4739*x4747)));
evalcond[1]=(((r11*x4749))+(((-1.0)*r12*x4746))+cj0+(((-1.0)*x4743*x4747)));
evalcond[2]=(((r01*x4749))+(((-1.0)*x4744))+(((-1.0)*x4742*x4747))+(((-1.0)*r02*x4746)));
evalcond[3]=(((x4738*x4740))+(((-1.0)*cj1*x4741))+((sj1*sj2))+((r22*x4737))+(((-1.0)*x4739*x4746)));
evalcond[4]=((((-1.0)*cj0*x4745))+((r01*x4748))+((r02*x4737))+(((-1.0)*x4742*x4746))+(((-1.0)*cj0*sj1*x4741)));
evalcond[5]=(((r11*x4748))+(((-1.0)*x4744*x4745))+(((-1.0)*sj0*sj1*x4741))+(((-1.0)*x4743*x4746))+((r12*x4737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4750=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4750;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4751=((1.0)*cj5);
IkReal x4752=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4751)));
j4eval[0]=x4752;
j4eval[1]=((IKabs(((((-1.0)*r20*x4751))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4753=cj5*cj5;
IkReal x4754=r01*r01;
IkReal x4755=(cj5*r00);
IkReal x4756=(r01*sj5);
IkReal x4757=(x4754+(((-1.0)*x4753*x4754))+((x4753*(r00*r00)))+(((-2.0)*x4755*x4756))+(r02*r02));
j4eval[0]=x4757;
j4eval[1]=IKsign(x4757);
j4eval[2]=((IKabs(r02))+(IKabs((x4756+(((-1.0)*x4755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4758=cj5*cj5;
IkReal x4759=r01*r01;
IkReal x4760=(r01*sj5);
IkReal x4761=(cj5*r00);
CheckValue<IkReal> x4762 = IKatan2WithCheck(IkReal(((((-1.0)*x4761))+x4760)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4762.valid){
continue;
}
CheckValue<IkReal> x4763=IKPowWithIntegerCheck(IKsign((x4759+(((-1.0)*x4758*x4759))+(((-2.0)*x4760*x4761))+((x4758*(r00*r00)))+(r02*r02))),-1);
if(!x4763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4762.value)+(((1.5707963267949)*(x4763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4764=IKcos(j4);
IkReal x4765=IKsin(j4);
IkReal x4766=(cj5*r00);
IkReal x4767=(cj5*r10);
IkReal x4768=(r21*sj5);
IkReal x4769=((1.0)*cj2);
IkReal x4770=(cj5*r20);
IkReal x4771=((1.0)*x4764);
IkReal x4772=((1.0)*x4765);
IkReal x4773=(sj5*x4765);
IkReal x4774=(sj5*x4764);
evalcond[0]=(((r02*x4765))+(((-1.0)*x4766*x4771))+((r01*x4774)));
evalcond[1]=((((-1.0)*r22*x4771))+(((-1.0)*x4770*x4772))+((x4765*x4768)));
evalcond[2]=(((r11*x4773))+(((-1.0)*r12*x4771))+(((-1.0)*x4767*x4772)));
evalcond[3]=((-1.0)+(((-1.0)*x4766*x4772))+((r01*x4773))+(((-1.0)*r02*x4771)));
evalcond[4]=(((r22*x4765))+((sj1*sj2))+(((-1.0)*cj1*x4769))+((x4764*x4768))+(((-1.0)*x4770*x4771)));
evalcond[5]=(((r11*x4774))+(((-1.0)*x4767*x4771))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4769))+((r12*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4775=((1.0)*cj5);
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4775))+(((-1.0)*r10*sj5)))),-1);
if(!x4777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4776.value)+(((1.5707963267949)*(x4777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4778=IKcos(j4);
IkReal x4779=IKsin(j4);
IkReal x4780=(cj5*r00);
IkReal x4781=(cj5*r10);
IkReal x4782=(r21*sj5);
IkReal x4783=((1.0)*cj2);
IkReal x4784=(cj5*r20);
IkReal x4785=((1.0)*x4778);
IkReal x4786=((1.0)*x4779);
IkReal x4787=(sj5*x4779);
IkReal x4788=(sj5*x4778);
evalcond[0]=(((r01*x4788))+((r02*x4779))+(((-1.0)*x4780*x4785)));
evalcond[1]=(((x4779*x4782))+(((-1.0)*r22*x4785))+(((-1.0)*x4784*x4786)));
evalcond[2]=(((r11*x4787))+(((-1.0)*x4781*x4786))+(((-1.0)*r12*x4785)));
evalcond[3]=((-1.0)+((r01*x4787))+(((-1.0)*r02*x4785))+(((-1.0)*x4780*x4786)));
evalcond[4]=(((x4778*x4782))+((sj1*sj2))+(((-1.0)*cj1*x4783))+((r22*x4779))+(((-1.0)*x4784*x4785)));
evalcond[5]=(((r12*x4779))+(((-1.0)*cj1*sj2))+((r11*x4788))+(((-1.0)*x4781*x4785))+(((-1.0)*sj1*x4783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4791=IKcos(j4);
IkReal x4792=IKsin(j4);
IkReal x4793=(cj5*r00);
IkReal x4794=(cj5*r10);
IkReal x4795=(r21*sj5);
IkReal x4796=((1.0)*cj2);
IkReal x4797=(cj5*r20);
IkReal x4798=((1.0)*x4791);
IkReal x4799=((1.0)*x4792);
IkReal x4800=(sj5*x4792);
IkReal x4801=(sj5*x4791);
evalcond[0]=(((r01*x4801))+((r02*x4792))+(((-1.0)*x4793*x4798)));
evalcond[1]=((((-1.0)*r22*x4798))+((x4792*x4795))+(((-1.0)*x4797*x4799)));
evalcond[2]=((((-1.0)*x4794*x4799))+(((-1.0)*r12*x4798))+((r11*x4800)));
evalcond[3]=((-1.0)+((r01*x4800))+(((-1.0)*r02*x4798))+(((-1.0)*x4793*x4799)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4797*x4798))+((x4791*x4795))+(((-1.0)*cj1*x4796))+((r22*x4792)));
evalcond[5]=((((-1.0)*sj1*x4796))+(((-1.0)*cj1*sj2))+(((-1.0)*x4794*x4798))+((r12*x4792))+((r11*x4801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4802=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4802;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4803=((1.0)*cj5);
IkReal x4804=((((-1.0)*r21*x4803))+(((-1.0)*r20*sj5)));
j4eval[0]=x4804;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4803))))));
j4eval[2]=IKsign(x4804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4805=cj5*cj5;
IkReal x4806=r01*r01;
IkReal x4807=(r01*sj5);
IkReal x4808=(cj5*r00);
IkReal x4809=((((-1.0)*x4805*(r00*r00)))+((x4805*x4806))+(((-1.0)*(r02*r02)))+(((2.0)*x4807*x4808))+(((-1.0)*x4806)));
j4eval[0]=x4809;
j4eval[1]=IKsign(x4809);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4808))+x4807))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4810=cj5*cj5;
IkReal x4811=r01*r01;
IkReal x4812=(r01*sj5);
IkReal x4813=(cj5*r00);
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(((((-1.0)*x4813))+x4812)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815=IKPowWithIntegerCheck(IKsign(((((2.0)*x4812*x4813))+(((-1.0)*x4811))+(((-1.0)*(r02*r02)))+((x4810*x4811))+(((-1.0)*x4810*(r00*r00))))),-1);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4814.value)+(((1.5707963267949)*(x4815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4816=IKcos(j4);
IkReal x4817=IKsin(j4);
IkReal x4818=(cj5*r00);
IkReal x4819=(cj5*r10);
IkReal x4820=(r21*sj5);
IkReal x4821=(cj5*r20);
IkReal x4822=((1.0)*x4816);
IkReal x4823=((1.0)*x4817);
IkReal x4824=(sj5*x4817);
IkReal x4825=(sj5*x4816);
evalcond[0]=(((r02*x4817))+(((-1.0)*x4818*x4822))+((r01*x4825)));
evalcond[1]=(((x4817*x4820))+(((-1.0)*r22*x4822))+(((-1.0)*x4821*x4823)));
evalcond[2]=(((r11*x4824))+(((-1.0)*x4819*x4823))+(((-1.0)*r12*x4822)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4822))+(((-1.0)*x4818*x4823))+((r01*x4824)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4825))+(((-1.0)*x4819*x4822))+((r12*x4817)));
evalcond[5]=(((x4816*x4820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4821*x4822))+((r22*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4826=((1.0)*cj5);
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4826))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
CheckValue<IkReal> x4828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4826))+(((-1.0)*r20*sj5)))),-1);
if(!x4828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4827.value)+(((1.5707963267949)*(x4828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4829=IKcos(j4);
IkReal x4830=IKsin(j4);
IkReal x4831=(cj5*r00);
IkReal x4832=(cj5*r10);
IkReal x4833=(r21*sj5);
IkReal x4834=(cj5*r20);
IkReal x4835=((1.0)*x4829);
IkReal x4836=((1.0)*x4830);
IkReal x4837=(sj5*x4830);
IkReal x4838=(sj5*x4829);
evalcond[0]=(((r01*x4838))+(((-1.0)*x4831*x4835))+((r02*x4830)));
evalcond[1]=((((-1.0)*x4834*x4836))+(((-1.0)*r22*x4835))+((x4830*x4833)));
evalcond[2]=(((r11*x4837))+(((-1.0)*x4832*x4836))+(((-1.0)*r12*x4835)));
evalcond[3]=((1.0)+((r01*x4837))+(((-1.0)*x4831*x4836))+(((-1.0)*r02*x4835)));
evalcond[4]=(((r12*x4830))+((cj2*sj1))+((r11*x4838))+(((-1.0)*x4832*x4835))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x4834*x4835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4830))+((x4829*x4833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4839 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4839.valid){
continue;
}
CheckValue<IkReal> x4840=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4839.value)+(((1.5707963267949)*(x4840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4841=IKcos(j4);
IkReal x4842=IKsin(j4);
IkReal x4843=(cj5*r00);
IkReal x4844=(cj5*r10);
IkReal x4845=(r21*sj5);
IkReal x4846=(cj5*r20);
IkReal x4847=((1.0)*x4841);
IkReal x4848=((1.0)*x4842);
IkReal x4849=(sj5*x4842);
IkReal x4850=(sj5*x4841);
evalcond[0]=(((r02*x4842))+((r01*x4850))+(((-1.0)*x4843*x4847)));
evalcond[1]=(((x4842*x4845))+(((-1.0)*x4846*x4848))+(((-1.0)*r22*x4847)));
evalcond[2]=((((-1.0)*x4844*x4848))+((r11*x4849))+(((-1.0)*r12*x4847)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4847))+((r01*x4849))+(((-1.0)*x4843*x4848)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4844*x4847))+((r12*x4842))+((r11*x4850)));
evalcond[5]=(((x4841*x4845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4846*x4847))+((r22*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4851=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4851);
rxp1_1=(px*r21);
rxp1_2=(r11*x4851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4852=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4852);
rxp1_1=(px*r21);
rxp1_2=(r11*x4852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4853=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4853);
rxp1_1=(px*r21);
rxp1_2=(r11*x4853);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4856=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4856.valid){
continue;
}
IkReal x4854=x4856.value;
IkReal x4855=(sj0*x4854);
cj4array[0]=(((cj1*sj2*x4855))+((cj2*sj1*x4855)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4857=IKsin(j4);
IkReal x4858=IKcos(j4);
IkReal x4859=(r21*sj5);
IkReal x4860=((1.0)*cj5*r20);
evalcond[0]=(r02*x4857);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4858)));
evalcond[2]=((((-1.0)*x4857*x4860))+((x4857*x4859)));
evalcond[3]=(((r11*sj5*x4857))+(((-1.0)*cj5*r10*x4857)));
evalcond[4]=((((-1.0)*x4858*x4860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4858*x4859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4862=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4862.valid){
continue;
}
IkReal x4861=x4862.value;
cj4array[0]=(((cj1*cj2*x4861))+(((-1.0)*sj1*sj2*x4861)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4863=IKsin(j4);
IkReal x4864=IKcos(j4);
IkReal x4865=((1.0)*sj0);
IkReal x4866=((1.0)*cj5);
IkReal x4867=(sj5*x4863);
evalcond[0]=(r02*x4863);
evalcond[1]=((((-1.0)*r02*x4864))+(((-1.0)*x4865)));
evalcond[2]=((((-1.0)*r20*x4863*x4866))+((r21*x4867)));
evalcond[3]=(((r11*x4867))+(((-1.0)*r10*x4863*x4866)));
evalcond[4]=((((-1.0)*r10*x4864*x4866))+(((-1.0)*cj2*sj1*x4865))+((r11*sj5*x4864))+(((-1.0)*cj1*sj2*x4865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(r02,-1);
if(!x4868.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4868.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4869=IKsin(j4);
IkReal x4870=IKcos(j4);
IkReal x4871=((1.0)*cj1);
IkReal x4872=(r21*sj5);
IkReal x4873=((1.0)*cj5);
IkReal x4874=(r11*sj5);
evalcond[0]=(r02*x4869);
evalcond[1]=(((x4869*x4872))+(((-1.0)*r20*x4869*x4873)));
evalcond[2]=(((x4869*x4874))+(((-1.0)*r10*x4869*x4873)));
evalcond[3]=((((-1.0)*cj2*x4871))+((sj1*sj2))+((x4870*x4872))+(((-1.0)*r20*x4870*x4873)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4870*x4873))+(((-1.0)*sj0*sj2*x4871))+((x4870*x4874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4875=((1.0)*sj0);
IkReal x4876=((1.0)*cj0);
CheckValue<IkReal> x4877 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4875))+(((-1.0)*r02*x4876)))),IkReal(((((-1.0)*r01*sj5*x4876))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4877.valid){
continue;
}
CheckValue<IkReal> x4878=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4877.value)+(((1.5707963267949)*(x4878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4879=IKsin(j4);
IkReal x4880=IKcos(j4);
IkReal x4881=(cj5*r00);
IkReal x4882=(cj5*r10);
IkReal x4883=(r21*sj5);
IkReal x4884=((1.0)*cj2);
IkReal x4885=((1.0)*sj0);
IkReal x4886=(cj1*sj2);
IkReal x4887=(cj5*r20);
IkReal x4888=((1.0)*x4880);
IkReal x4889=((1.0)*x4879);
IkReal x4890=(sj5*x4879);
IkReal x4891=(sj5*x4880);
evalcond[0]=(((x4879*x4883))+(((-1.0)*x4887*x4889))+(((-1.0)*r22*x4888)));
evalcond[1]=(((r11*x4890))+cj0+(((-1.0)*r12*x4888))+(((-1.0)*x4882*x4889)));
evalcond[2]=((((-1.0)*x4885))+(((-1.0)*x4881*x4889))+(((-1.0)*r02*x4888))+((r01*x4890)));
evalcond[3]=((((-1.0)*cj1*x4884))+((sj1*sj2))+((x4880*x4883))+(((-1.0)*x4887*x4888))+((r22*x4879)));
evalcond[4]=((((-1.0)*cj0*x4886))+((r02*x4879))+(((-1.0)*x4881*x4888))+(((-1.0)*cj0*sj1*x4884))+((r01*x4891)));
evalcond[5]=(((r11*x4891))+(((-1.0)*x4882*x4888))+(((-1.0)*sj0*sj1*x4884))+(((-1.0)*x4885*x4886))+((r12*x4879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4892=((1.0)*cj5);
CheckValue<IkReal> x4893 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4892))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4893.valid){
continue;
}
CheckValue<IkReal> x4894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4892))+(((-1.0)*r10*sj5)))),-1);
if(!x4894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4893.value)+(((1.5707963267949)*(x4894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4895=IKsin(j4);
IkReal x4896=IKcos(j4);
IkReal x4897=(cj5*r00);
IkReal x4898=(cj5*r10);
IkReal x4899=(r21*sj5);
IkReal x4900=((1.0)*cj2);
IkReal x4901=((1.0)*sj0);
IkReal x4902=(cj1*sj2);
IkReal x4903=(cj5*r20);
IkReal x4904=((1.0)*x4896);
IkReal x4905=((1.0)*x4895);
IkReal x4906=(sj5*x4895);
IkReal x4907=(sj5*x4896);
evalcond[0]=((((-1.0)*x4903*x4905))+((x4895*x4899))+(((-1.0)*r22*x4904)));
evalcond[1]=((((-1.0)*r12*x4904))+(((-1.0)*x4898*x4905))+cj0+((r11*x4906)));
evalcond[2]=((((-1.0)*x4901))+(((-1.0)*x4897*x4905))+(((-1.0)*r02*x4904))+((r01*x4906)));
evalcond[3]=((((-1.0)*x4903*x4904))+((sj1*sj2))+((x4896*x4899))+((r22*x4895))+(((-1.0)*cj1*x4900)));
evalcond[4]=((((-1.0)*cj0*x4902))+((r02*x4895))+(((-1.0)*x4897*x4904))+(((-1.0)*cj0*sj1*x4900))+((r01*x4907)));
evalcond[5]=((((-1.0)*x4898*x4904))+((r12*x4895))+(((-1.0)*sj0*sj1*x4900))+((r11*x4907))+(((-1.0)*x4901*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4908=((1.0)*cj5);
CheckValue<IkReal> x4909 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4909.valid){
continue;
}
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4908))+(((-1.0)*r00*sj5)))),-1);
if(!x4910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4909.value)+(((1.5707963267949)*(x4910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4911=IKsin(j4);
IkReal x4912=IKcos(j4);
IkReal x4913=(cj5*r00);
IkReal x4914=(cj5*r10);
IkReal x4915=(r21*sj5);
IkReal x4916=((1.0)*cj2);
IkReal x4917=((1.0)*sj0);
IkReal x4918=(cj1*sj2);
IkReal x4919=(cj5*r20);
IkReal x4920=((1.0)*x4912);
IkReal x4921=((1.0)*x4911);
IkReal x4922=(sj5*x4911);
IkReal x4923=(sj5*x4912);
evalcond[0]=(((x4911*x4915))+(((-1.0)*x4919*x4921))+(((-1.0)*r22*x4920)));
evalcond[1]=(cj0+(((-1.0)*x4914*x4921))+(((-1.0)*r12*x4920))+((r11*x4922)));
evalcond[2]=((((-1.0)*r02*x4920))+(((-1.0)*x4917))+((r01*x4922))+(((-1.0)*x4913*x4921)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4919*x4920))+((x4912*x4915))+(((-1.0)*cj1*x4916))+((r22*x4911)));
evalcond[4]=((((-1.0)*cj0*sj1*x4916))+((r02*x4911))+((r01*x4923))+(((-1.0)*x4913*x4920))+(((-1.0)*cj0*x4918)));
evalcond[5]=((((-1.0)*x4914*x4920))+(((-1.0)*sj0*sj1*x4916))+((r12*x4911))+((r11*x4923))+(((-1.0)*x4917*x4918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4924=((1.0)*cj5);
IkReal x4925=((1.0)*sj5);
IkReal x4926=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4926;
j0eval[1]=((IKabs(((((-1.0)*r01*x4924))+(((-1.0)*r00*x4925)))))+(IKabs(((((-1.0)*r11*x4924))+(((-1.0)*r10*x4925))))));
j0eval[2]=IKsign(x4926);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4927=r21*r21;
IkReal x4928=cj5*cj5;
IkReal x4929=(cj2*sj1);
IkReal x4930=(cj1*sj2);
IkReal x4931=(r21*sj5);
IkReal x4932=((1.0)*cj5*r20);
IkReal x4933=((((2.0)*cj5*r20*x4931))+(((-1.0)*x4927))+((x4927*x4928))+(((-1.0)*(r22*r22)))+(((-1.0)*x4928*(r20*r20))));
j4eval[0]=x4933;
j4eval[1]=((IKabs((((r22*x4930))+((r22*x4929)))))+(IKabs(((((-1.0)*x4930*x4932))+((x4929*x4931))+(((-1.0)*x4929*x4932))+((x4930*x4931))))));
j4eval[2]=IKsign(x4933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4934=cj1*cj1;
IkReal x4935=(cj2*sj2);
IkReal x4936=(cj2*sj1);
IkReal x4937=(cj1*sj1);
j0eval[0]=(x4935+x4937+(((-1.08349267049076)*cj1*x4936))+(((-1.08349267049076)*sj2*x4934))+(((-2.0)*cj1*cj2*x4936))+(((-2.0)*x4934*x4935)));
j0eval[1]=((((-1.0)*x4936))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4938=IKsin(j0);
IkReal x4939=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4939))+(((-0.10915)*x4938)));
evalcond[1]=((((0.10915)*x4939))+(((-1.0)*py))+(((0.81725)*x4938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4940=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4940;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4941=((1.0)*cj5);
IkReal x4942=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4941)));
j4eval[0]=x4942;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4941))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4943=((1.0)*cj5);
IkReal x4944=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4943)));
j4eval[0]=x4944;
j4eval[1]=IKsign(x4944);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4943))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4945=((1.0)*cj5);
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4945))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4945)))),-1);
if(!x4947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4946.value)+(((1.5707963267949)*(x4947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4948=IKcos(j4);
IkReal x4949=IKsin(j4);
IkReal x4950=((1.0)*sj0);
IkReal x4951=(cj5*r00);
IkReal x4952=(cj5*r10);
IkReal x4953=(cj5*r20);
IkReal x4954=((1.0)*x4948);
IkReal x4955=((1.0)*x4949);
IkReal x4956=(sj5*x4948);
IkReal x4957=(sj5*x4949);
evalcond[0]=(((r21*x4956))+(((-1.0)*x4953*x4954))+((r22*x4949)));
evalcond[1]=((((-1.0)*r22*x4954))+((r21*x4957))+(((-1.0)*x4953*x4955)));
evalcond[2]=(cj0+((r11*x4957))+(((-1.0)*r12*x4954))+(((-1.0)*x4952*x4955)));
evalcond[3]=(((r02*x4949))+((r01*x4956))+(((-1.0)*cj0))+(((-1.0)*x4951*x4954)));
evalcond[4]=((((-1.0)*x4950))+((r12*x4949))+((r11*x4956))+(((-1.0)*x4952*x4954)));
evalcond[5]=((((-1.0)*x4950))+(((-1.0)*r02*x4954))+((r01*x4957))+(((-1.0)*x4951*x4955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4958=((1.0)*cj5);
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
CheckValue<IkReal> x4960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4958)))),-1);
if(!x4960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4959.value)+(((1.5707963267949)*(x4960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4961=IKcos(j4);
IkReal x4962=IKsin(j4);
IkReal x4963=((1.0)*sj0);
IkReal x4964=(cj5*r00);
IkReal x4965=(cj5*r10);
IkReal x4966=(cj5*r20);
IkReal x4967=((1.0)*x4961);
IkReal x4968=((1.0)*x4962);
IkReal x4969=(sj5*x4961);
IkReal x4970=(sj5*x4962);
evalcond[0]=(((r22*x4962))+(((-1.0)*x4966*x4967))+((r21*x4969)));
evalcond[1]=((((-1.0)*r22*x4967))+(((-1.0)*x4966*x4968))+((r21*x4970)));
evalcond[2]=(cj0+((r11*x4970))+(((-1.0)*r12*x4967))+(((-1.0)*x4965*x4968)));
evalcond[3]=(((r02*x4962))+(((-1.0)*x4964*x4967))+((r01*x4969))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4962))+(((-1.0)*x4963))+((r11*x4969))+(((-1.0)*x4965*x4967)));
evalcond[5]=((((-1.0)*x4963))+(((-1.0)*r02*x4967))+(((-1.0)*x4964*x4968))+((r01*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4971 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4971.valid){
continue;
}
CheckValue<IkReal> x4972=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4971.value)+(((1.5707963267949)*(x4972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4973=IKcos(j4);
IkReal x4974=IKsin(j4);
IkReal x4975=((1.0)*sj0);
IkReal x4976=(cj5*r00);
IkReal x4977=(cj5*r10);
IkReal x4978=(cj5*r20);
IkReal x4979=((1.0)*x4973);
IkReal x4980=((1.0)*x4974);
IkReal x4981=(sj5*x4973);
IkReal x4982=(sj5*x4974);
evalcond[0]=(((r22*x4974))+(((-1.0)*x4978*x4979))+((r21*x4981)));
evalcond[1]=(((r21*x4982))+(((-1.0)*r22*x4979))+(((-1.0)*x4978*x4980)));
evalcond[2]=((((-1.0)*x4977*x4980))+cj0+((r11*x4982))+(((-1.0)*r12*x4979)));
evalcond[3]=(((r01*x4981))+(((-1.0)*x4976*x4979))+((r02*x4974))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4981))+((r12*x4974))+(((-1.0)*x4975))+(((-1.0)*x4977*x4979)));
evalcond[5]=(((r01*x4982))+(((-1.0)*x4975))+(((-1.0)*r02*x4979))+(((-1.0)*x4976*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4983=IKsin(j0);
IkReal x4984=IKcos(j0);
evalcond[0]=((((-0.10915)*x4983))+(((0.03275)*x4984))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x4983))+(((-1.0)*py))+(((0.10915)*x4984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4985=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4985;
j4eval[1]=IKsign(x4985);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4986=((1.0)*cj5);
IkReal x4987=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4986)));
j4eval[0]=x4987;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4986))))));
j4eval[2]=IKsign(x4987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4988=cj5*cj5;
IkReal x4989=((1.0)*r20);
IkReal x4990=(r01*r21);
IkReal x4991=(r21*sj5);
IkReal x4992=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4988*x4989))+((x4988*x4990))+(((-1.0)*x4990))+((cj5*r00*x4991)));
j4eval[0]=x4992;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4989))+((cj0*x4991)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4993=cj5*cj5;
IkReal x4994=((1.0)*r20);
IkReal x4995=(r01*r21);
IkReal x4996=(r21*sj5);
CheckValue<IkReal> x4997=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x4993*x4995))+(((-1.0)*r00*x4993*x4994))+(((-1.0)*r02*r22))+(((-1.0)*x4995))+((cj5*r00*x4996)))),-1);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4994))+((cj0*x4996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4997.value)))+(x4998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4999=IKcos(j4);
IkReal x5000=IKsin(j4);
IkReal x5001=(cj5*r00);
IkReal x5002=(cj5*r10);
IkReal x5003=(cj5*r20);
IkReal x5004=((1.0)*x4999);
IkReal x5005=((1.0)*x5000);
IkReal x5006=(sj5*x4999);
IkReal x5007=(sj5*x5000);
evalcond[0]=((((-1.0)*x5003*x5004))+((r22*x5000))+((r21*x5006)));
evalcond[1]=((((-1.0)*x5003*x5005))+((r21*x5007))+(((-1.0)*r22*x5004)));
evalcond[2]=(cj0+((r02*x5000))+(((-1.0)*x5001*x5004))+((r01*x5006)));
evalcond[3]=(((r12*x5000))+sj0+((r11*x5006))+(((-1.0)*x5002*x5004)));
evalcond[4]=(((r11*x5007))+cj0+(((-1.0)*x5002*x5005))+(((-1.0)*r12*x5004)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5001*x5005))+((r01*x5007))+(((-1.0)*r02*x5004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5008=((1.0)*cj5);
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5008)))),-1);
if(!x5009.valid){
continue;
}
CheckValue<IkReal> x5010 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5008)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5009.value)))+(x5010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5011=IKcos(j4);
IkReal x5012=IKsin(j4);
IkReal x5013=(cj5*r00);
IkReal x5014=(cj5*r10);
IkReal x5015=(cj5*r20);
IkReal x5016=((1.0)*x5011);
IkReal x5017=((1.0)*x5012);
IkReal x5018=(sj5*x5011);
IkReal x5019=(sj5*x5012);
evalcond[0]=(((r21*x5018))+((r22*x5012))+(((-1.0)*x5015*x5016)));
evalcond[1]=((((-1.0)*r22*x5016))+((r21*x5019))+(((-1.0)*x5015*x5017)));
evalcond[2]=(cj0+((r02*x5012))+(((-1.0)*x5013*x5016))+((r01*x5018)));
evalcond[3]=(sj0+(((-1.0)*x5014*x5016))+((r11*x5018))+((r12*x5012)));
evalcond[4]=(cj0+(((-1.0)*x5014*x5017))+(((-1.0)*r12*x5016))+((r11*x5019)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5016))+(((-1.0)*x5013*x5017))+((r01*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5020 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5020.valid){
continue;
}
CheckValue<IkReal> x5021=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5020.value)+(((1.5707963267949)*(x5021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5022=IKcos(j4);
IkReal x5023=IKsin(j4);
IkReal x5024=(cj5*r00);
IkReal x5025=(cj5*r10);
IkReal x5026=(cj5*r20);
IkReal x5027=((1.0)*x5022);
IkReal x5028=((1.0)*x5023);
IkReal x5029=(sj5*x5022);
IkReal x5030=(sj5*x5023);
evalcond[0]=(((r22*x5023))+(((-1.0)*x5026*x5027))+((r21*x5029)));
evalcond[1]=(((r21*x5030))+(((-1.0)*r22*x5027))+(((-1.0)*x5026*x5028)));
evalcond[2]=(((r02*x5023))+cj0+((r01*x5029))+(((-1.0)*x5024*x5027)));
evalcond[3]=(((r11*x5029))+(((-1.0)*x5025*x5027))+sj0+((r12*x5023)));
evalcond[4]=((((-1.0)*x5025*x5028))+cj0+((r11*x5030))+(((-1.0)*r12*x5027)));
evalcond[5]=((((-1.0)*r02*x5027))+(((-1.0)*sj0))+((r01*x5030))+(((-1.0)*x5024*x5028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5031=IKsin(j0);
IkReal x5032=IKcos(j0);
IkReal x5033=(r00*sj5);
IkReal x5034=(r10*sj5);
IkReal x5035=(cj5*r11);
IkReal x5036=(cj5*r01);
evalcond[0]=((((-1.0)*x5032))+x5036+x5033);
evalcond[1]=((((-1.0)*x5031))+x5034+x5035);
evalcond[2]=((((-0.09465)*x5036))+(((-0.09465)*x5033))+(((-1.0)*px))+(((-0.10915)*x5031)));
evalcond[3]=((((-0.09465)*x5034))+(((-0.09465)*x5035))+(((0.10915)*x5032))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5037=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5037;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5038=((1.0)*cj5);
IkReal x5039=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5038)));
j4eval[0]=x5039;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5038))))));
j4eval[2]=IKsign(x5039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5040=cj5*cj5;
IkReal x5041=(r01*r11);
IkReal x5042=((1.0)*r00);
IkReal x5043=(r01*sj5);
IkReal x5044=(((x5040*x5041))+(((-1.0)*r02*r12))+(((-1.0)*x5041))+(((-1.0)*r10*x5040*x5042))+((cj5*r10*x5043))+((cj5*r00*r11*sj5)));
j4eval[0]=x5044;
j4eval[1]=IKsign(x5044);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5043))+(((-1.0)*cj0*cj5*x5042))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5045=cj5*cj5;
IkReal x5046=(r01*r11);
IkReal x5047=(cj5*r00);
IkReal x5048=(r01*sj5);
CheckValue<IkReal> x5049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5046))+((x5045*x5046))+(((-1.0)*r00*r10*x5045))+((cj5*r10*x5048))+((r11*sj5*x5047)))),-1);
if(!x5049.valid){
continue;
}
CheckValue<IkReal> x5050 = IKatan2WithCheck(IkReal((((cj0*x5048))+(((-1.0)*cj0*x5047)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5049.value)))+(x5050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5051=IKcos(j4);
IkReal x5052=IKsin(j4);
IkReal x5053=(cj5*r00);
IkReal x5054=(r01*sj5);
IkReal x5055=(cj5*r10);
IkReal x5056=(cj5*r20);
IkReal x5057=((1.0)*x5051);
IkReal x5058=((1.0)*x5052);
IkReal x5059=(sj5*x5052);
IkReal x5060=(sj5*x5051);
evalcond[0]=((((-1.0)*x5053*x5057))+((x5051*x5054))+((r02*x5052)));
evalcond[1]=(((r12*x5052))+(((-1.0)*x5055*x5057))+((r11*x5060)));
evalcond[2]=(((r21*x5059))+(((-1.0)*r22*x5057))+(((-1.0)*x5056*x5058)));
evalcond[3]=((1.0)+((r22*x5052))+((r21*x5060))+(((-1.0)*x5056*x5057)));
evalcond[4]=(cj0+(((-1.0)*x5055*x5058))+(((-1.0)*r12*x5057))+((r11*x5059)));
evalcond[5]=((((-1.0)*sj0))+((x5052*x5054))+(((-1.0)*x5053*x5058))+(((-1.0)*r02*x5057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5061=((1.0)*cj5);
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5061)))),-1);
if(!x5062.valid){
continue;
}
CheckValue<IkReal> x5063 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5061)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5062.value)))+(x5063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5064=IKcos(j4);
IkReal x5065=IKsin(j4);
IkReal x5066=(cj5*r00);
IkReal x5067=(r01*sj5);
IkReal x5068=(cj5*r10);
IkReal x5069=(cj5*r20);
IkReal x5070=((1.0)*x5064);
IkReal x5071=((1.0)*x5065);
IkReal x5072=(sj5*x5065);
IkReal x5073=(sj5*x5064);
evalcond[0]=((((-1.0)*x5066*x5070))+((r02*x5065))+((x5064*x5067)));
evalcond[1]=((((-1.0)*x5068*x5070))+((r12*x5065))+((r11*x5073)));
evalcond[2]=((((-1.0)*x5069*x5071))+((r21*x5072))+(((-1.0)*r22*x5070)));
evalcond[3]=((1.0)+(((-1.0)*x5069*x5070))+((r21*x5073))+((r22*x5065)));
evalcond[4]=(cj0+(((-1.0)*r12*x5070))+(((-1.0)*x5068*x5071))+((r11*x5072)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5070))+(((-1.0)*x5066*x5071))+((x5065*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5074.value)+(((1.5707963267949)*(x5075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKcos(j4);
IkReal x5077=IKsin(j4);
IkReal x5078=(cj5*r00);
IkReal x5079=(r01*sj5);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5076);
IkReal x5083=((1.0)*x5077);
IkReal x5084=(sj5*x5077);
IkReal x5085=(sj5*x5076);
evalcond[0]=(((x5076*x5079))+((r02*x5077))+(((-1.0)*x5078*x5082)));
evalcond[1]=((((-1.0)*x5080*x5082))+((r11*x5085))+((r12*x5077)));
evalcond[2]=(((r21*x5084))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[3]=((1.0)+((r21*x5085))+(((-1.0)*x5081*x5082))+((r22*x5077)));
evalcond[4]=((((-1.0)*r12*x5082))+(((-1.0)*x5080*x5083))+cj0+((r11*x5084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5078*x5083))+((x5077*x5079))+(((-1.0)*r02*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5086=IKcos(j0);
IkReal x5087=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5086))+(((-0.10915)*x5087)));
evalcond[1]=((((0.10915)*x5086))+(((-1.0)*py))+(((-0.39225)*x5087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5088=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5088;
j4eval[1]=IKsign(x5088);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5089=((1.0)*cj5);
IkReal x5090=((((-1.0)*r11*x5089))+(((-1.0)*r10*sj5)));
j4eval[0]=x5090;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5089)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5091=cj5*cj5;
IkReal x5092=((1.0)*r20);
IkReal x5093=(r01*r21);
IkReal x5094=(r21*sj5);
IkReal x5095=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5093))+((x5091*x5093))+((cj5*r00*x5094))+(((-1.0)*r00*x5091*x5092)));
j4eval[0]=x5095;
j4eval[1]=((IKabs((((cj0*x5094))+(((-1.0)*cj0*cj5*x5092)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5096=cj5*cj5;
IkReal x5097=((1.0)*r20);
IkReal x5098=(r01*r21);
IkReal x5099=(r21*sj5);
CheckValue<IkReal> x5100 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5099))+(((-1.0)*cj0*cj5*x5097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5098))+((cj5*r00*x5099))+((x5096*x5098))+(((-1.0)*r00*x5096*x5097)))),-1);
if(!x5101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5100.value)+(((1.5707963267949)*(x5101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5102=IKcos(j4);
IkReal x5103=IKsin(j4);
IkReal x5104=(cj5*r00);
IkReal x5105=(cj5*r10);
IkReal x5106=(cj5*r20);
IkReal x5107=((1.0)*x5102);
IkReal x5108=((1.0)*x5103);
IkReal x5109=(sj5*x5102);
IkReal x5110=(sj5*x5103);
evalcond[0]=((((-1.0)*x5106*x5107))+((r22*x5103))+((r21*x5109)));
evalcond[1]=((((-1.0)*x5106*x5108))+(((-1.0)*r22*x5107))+((r21*x5110)));
evalcond[2]=(((r01*x5109))+cj0+((r02*x5103))+(((-1.0)*x5104*x5107)));
evalcond[3]=(((r12*x5103))+sj0+((r11*x5109))+(((-1.0)*x5105*x5107)));
evalcond[4]=(cj0+(((-1.0)*r12*x5107))+(((-1.0)*x5105*x5108))+((r11*x5110)));
evalcond[5]=(((r01*x5110))+(((-1.0)*sj0))+(((-1.0)*r02*x5107))+(((-1.0)*x5104*x5108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5111=((1.0)*cj5);
CheckValue<IkReal> x5112 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5111)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5112.valid){
continue;
}
CheckValue<IkReal> x5113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5111)))),-1);
if(!x5113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5112.value)+(((1.5707963267949)*(x5113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5114=IKcos(j4);
IkReal x5115=IKsin(j4);
IkReal x5116=(cj5*r00);
IkReal x5117=(cj5*r10);
IkReal x5118=(cj5*r20);
IkReal x5119=((1.0)*x5114);
IkReal x5120=((1.0)*x5115);
IkReal x5121=(sj5*x5114);
IkReal x5122=(sj5*x5115);
evalcond[0]=(((r22*x5115))+((r21*x5121))+(((-1.0)*x5118*x5119)));
evalcond[1]=((((-1.0)*r22*x5119))+(((-1.0)*x5118*x5120))+((r21*x5122)));
evalcond[2]=(cj0+((r02*x5115))+(((-1.0)*x5116*x5119))+((r01*x5121)));
evalcond[3]=(sj0+(((-1.0)*x5117*x5119))+((r11*x5121))+((r12*x5115)));
evalcond[4]=(cj0+((r11*x5122))+(((-1.0)*x5117*x5120))+(((-1.0)*r12*x5119)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5119))+((r01*x5122))+(((-1.0)*x5116*x5120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
CheckValue<IkReal> x5124=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5123.value)+(((1.5707963267949)*(x5124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5125=IKcos(j4);
IkReal x5126=IKsin(j4);
IkReal x5127=(cj5*r00);
IkReal x5128=(cj5*r10);
IkReal x5129=(cj5*r20);
IkReal x5130=((1.0)*x5125);
IkReal x5131=((1.0)*x5126);
IkReal x5132=(sj5*x5125);
IkReal x5133=(sj5*x5126);
evalcond[0]=(((r22*x5126))+(((-1.0)*x5129*x5130))+((r21*x5132)));
evalcond[1]=((((-1.0)*x5129*x5131))+((r21*x5133))+(((-1.0)*r22*x5130)));
evalcond[2]=(cj0+((r01*x5132))+(((-1.0)*x5127*x5130))+((r02*x5126)));
evalcond[3]=(sj0+(((-1.0)*x5128*x5130))+((r12*x5126))+((r11*x5132)));
evalcond[4]=(cj0+(((-1.0)*x5128*x5131))+((r11*x5133))+(((-1.0)*r12*x5130)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5133))+(((-1.0)*r02*x5130))+(((-1.0)*x5127*x5131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5134=((1.0)*sj5);
IkReal x5135=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5134))+(((-1.0)*r11*x5135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5135))+(((-1.0)*r00*x5134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5134))+(((-1.0)*r11*x5135))))+IKsqr(((((-1.0)*r01*x5135))+(((-1.0)*r00*x5134))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5134))+(((-1.0)*r11*x5135))), ((((-1.0)*r01*x5135))+(((-1.0)*r00*x5134))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5136=IKsin(j0);
IkReal x5137=IKcos(j0);
IkReal x5138=(r00*sj5);
IkReal x5139=(r10*sj5);
IkReal x5140=(cj5*r11);
IkReal x5141=(cj5*r01);
evalcond[0]=(x5141+x5138+x5137);
evalcond[1]=(x5140+x5139+x5136);
evalcond[2]=((((-0.09465)*x5141))+(((-0.10915)*x5136))+(((-0.09465)*x5138))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5140))+(((0.10915)*x5137))+(((-0.09465)*x5139))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5142=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5142;
j4eval[1]=IKsign(x5142);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5143=((1.0)*cj5);
IkReal x5144=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5143)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5145=cj5*cj5;
IkReal x5146=(r01*r11);
IkReal x5147=((1.0)*r00);
IkReal x5148=(r01*sj5);
IkReal x5149=((((-1.0)*r02*r12))+((x5145*x5146))+(((-1.0)*x5146))+(((-1.0)*r10*x5145*x5147))+((cj5*r10*x5148))+((cj5*r00*r11*sj5)));
j4eval[0]=x5149;
j4eval[1]=IKsign(x5149);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5148))+(((-1.0)*cj0*cj5*x5147))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5150=cj5*cj5;
IkReal x5151=(r01*r11);
IkReal x5152=(cj5*r00);
IkReal x5153=(r01*sj5);
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5152))+((cj0*x5153)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
CheckValue<IkReal> x5155=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5153))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5150))+(((-1.0)*x5151))+((r11*sj5*x5152))+((x5150*x5151)))),-1);
if(!x5155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5154.value)+(((1.5707963267949)*(x5155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5156=IKcos(j4);
IkReal x5157=IKsin(j4);
IkReal x5158=(cj5*r00);
IkReal x5159=(r01*sj5);
IkReal x5160=(cj5*r10);
IkReal x5161=(cj5*r20);
IkReal x5162=((1.0)*x5156);
IkReal x5163=((1.0)*x5157);
IkReal x5164=(sj5*x5157);
IkReal x5165=(sj5*x5156);
evalcond[0]=(((r02*x5157))+(((-1.0)*x5158*x5162))+((x5156*x5159)));
evalcond[1]=((((-1.0)*x5160*x5162))+((r12*x5157))+((r11*x5165)));
evalcond[2]=((((-1.0)*r22*x5162))+((r21*x5164))+(((-1.0)*x5161*x5163)));
evalcond[3]=((-1.0)+((r21*x5165))+(((-1.0)*x5161*x5162))+((r22*x5157)));
evalcond[4]=(cj0+(((-1.0)*x5160*x5163))+(((-1.0)*r12*x5162))+((r11*x5164)));
evalcond[5]=((((-1.0)*sj0))+((x5157*x5159))+(((-1.0)*r02*x5162))+(((-1.0)*x5158*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5166=((1.0)*cj5);
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5166)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
CheckValue<IkReal> x5168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5166)))),-1);
if(!x5168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5167.value)+(((1.5707963267949)*(x5168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5169=IKcos(j4);
IkReal x5170=IKsin(j4);
IkReal x5171=(cj5*r00);
IkReal x5172=(r01*sj5);
IkReal x5173=(cj5*r10);
IkReal x5174=(cj5*r20);
IkReal x5175=((1.0)*x5169);
IkReal x5176=((1.0)*x5170);
IkReal x5177=(sj5*x5170);
IkReal x5178=(sj5*x5169);
evalcond[0]=(((r02*x5170))+((x5169*x5172))+(((-1.0)*x5171*x5175)));
evalcond[1]=((((-1.0)*x5173*x5175))+((r12*x5170))+((r11*x5178)));
evalcond[2]=((((-1.0)*x5174*x5176))+(((-1.0)*r22*x5175))+((r21*x5177)));
evalcond[3]=((-1.0)+(((-1.0)*x5174*x5175))+((r22*x5170))+((r21*x5178)));
evalcond[4]=((((-1.0)*x5173*x5176))+cj0+(((-1.0)*r12*x5175))+((r11*x5177)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5175))+((x5170*x5172))+(((-1.0)*x5171*x5176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5179=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5179.value)))+(x5180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKcos(j4);
IkReal x5182=IKsin(j4);
IkReal x5183=(cj5*r00);
IkReal x5184=(r01*sj5);
IkReal x5185=(cj5*r10);
IkReal x5186=(cj5*r20);
IkReal x5187=((1.0)*x5181);
IkReal x5188=((1.0)*x5182);
IkReal x5189=(sj5*x5182);
IkReal x5190=(sj5*x5181);
evalcond[0]=((((-1.0)*x5183*x5187))+((x5181*x5184))+((r02*x5182)));
evalcond[1]=(((r11*x5190))+(((-1.0)*x5185*x5187))+((r12*x5182)));
evalcond[2]=((((-1.0)*r22*x5187))+((r21*x5189))+(((-1.0)*x5186*x5188)));
evalcond[3]=((-1.0)+((r22*x5182))+((r21*x5190))+(((-1.0)*x5186*x5187)));
evalcond[4]=(cj0+(((-1.0)*x5185*x5188))+(((-1.0)*r12*x5187))+((r11*x5189)));
evalcond[5]=((((-1.0)*x5183*x5188))+(((-1.0)*sj0))+(((-1.0)*r02*x5187))+((x5182*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5191=IKsin(j0);
IkReal x5192=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x5191))+(((0.39225)*x5192)));
evalcond[1]=((((0.10915)*x5192))+(((-1.0)*py))+(((0.39225)*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5193=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5193;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5194=((1.0)*cj5);
IkReal x5195=((((-1.0)*r01*x5194))+(((-1.0)*r00*sj5)));
j4eval[0]=x5195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5194)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5196=((1.0)*cj5);
IkReal x5197=((((-1.0)*r01*x5196))+(((-1.0)*r00*sj5)));
j4eval[0]=x5197;
j4eval[1]=IKsign(x5197);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5196))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5198=((1.0)*cj5);
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5198)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5198))+(((-1.0)*r00*sj5)))),-1);
if(!x5200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5199.value)+(((1.5707963267949)*(x5200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5201=IKcos(j4);
IkReal x5202=IKsin(j4);
IkReal x5203=((1.0)*sj0);
IkReal x5204=(cj5*r00);
IkReal x5205=(cj5*r10);
IkReal x5206=(cj5*r20);
IkReal x5207=((1.0)*x5201);
IkReal x5208=((1.0)*x5202);
IkReal x5209=(sj5*x5201);
IkReal x5210=(sj5*x5202);
evalcond[0]=((((-1.0)*x5206*x5207))+((r22*x5202))+((r21*x5209)));
evalcond[1]=((((-1.0)*x5206*x5208))+(((-1.0)*r22*x5207))+((r21*x5210)));
evalcond[2]=(cj0+((r11*x5210))+(((-1.0)*x5205*x5208))+(((-1.0)*r12*x5207)));
evalcond[3]=(((r01*x5209))+((r02*x5202))+(((-1.0)*x5204*x5207))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5203))+((r11*x5209))+(((-1.0)*x5205*x5207))+((r12*x5202)));
evalcond[5]=((((-1.0)*x5203))+((r01*x5210))+(((-1.0)*r02*x5207))+(((-1.0)*x5204*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5211=((1.0)*cj5);
CheckValue<IkReal> x5212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5211)))),-1);
if(!x5212.valid){
continue;
}
CheckValue<IkReal> x5213 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5212.value)))+(x5213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5214=IKcos(j4);
IkReal x5215=IKsin(j4);
IkReal x5216=((1.0)*sj0);
IkReal x5217=(cj5*r00);
IkReal x5218=(cj5*r10);
IkReal x5219=(cj5*r20);
IkReal x5220=((1.0)*x5214);
IkReal x5221=((1.0)*x5215);
IkReal x5222=(sj5*x5214);
IkReal x5223=(sj5*x5215);
evalcond[0]=(((r21*x5222))+(((-1.0)*x5219*x5220))+((r22*x5215)));
evalcond[1]=(((r21*x5223))+(((-1.0)*x5219*x5221))+(((-1.0)*r22*x5220)));
evalcond[2]=(cj0+(((-1.0)*x5218*x5221))+(((-1.0)*r12*x5220))+((r11*x5223)));
evalcond[3]=((((-1.0)*x5217*x5220))+((r02*x5215))+((r01*x5222))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5216))+((r12*x5215))+(((-1.0)*x5218*x5220))+((r11*x5222)));
evalcond[5]=((((-1.0)*x5216))+(((-1.0)*x5217*x5221))+(((-1.0)*r02*x5220))+((r01*x5223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5224.value)+(((1.5707963267949)*(x5225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5226=IKcos(j4);
IkReal x5227=IKsin(j4);
IkReal x5228=((1.0)*sj0);
IkReal x5229=(cj5*r00);
IkReal x5230=(cj5*r10);
IkReal x5231=(cj5*r20);
IkReal x5232=((1.0)*x5226);
IkReal x5233=((1.0)*x5227);
IkReal x5234=(sj5*x5226);
IkReal x5235=(sj5*x5227);
evalcond[0]=(((r22*x5227))+(((-1.0)*x5231*x5232))+((r21*x5234)));
evalcond[1]=((((-1.0)*r22*x5232))+(((-1.0)*x5231*x5233))+((r21*x5235)));
evalcond[2]=(cj0+((r11*x5235))+(((-1.0)*r12*x5232))+(((-1.0)*x5230*x5233)));
evalcond[3]=(((r02*x5227))+((r01*x5234))+(((-1.0)*x5229*x5232))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5234))+(((-1.0)*x5228))+((r12*x5227))+(((-1.0)*x5230*x5232)));
evalcond[5]=((((-1.0)*r02*x5232))+((r01*x5235))+(((-1.0)*x5229*x5233))+(((-1.0)*x5228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5236=IKcos(j0);
IkReal x5237=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5236))+(((-0.10915)*x5237)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5236))+(((-0.81725)*x5237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5238=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5238;
j4eval[1]=IKsign(x5238);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5239=((1.0)*cj5);
IkReal x5240=((((-1.0)*r11*x5239))+(((-1.0)*r10*sj5)));
j4eval[0]=x5240;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5239))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5241=cj5*cj5;
IkReal x5242=((1.0)*r20);
IkReal x5243=(r01*r21);
IkReal x5244=(r21*sj5);
IkReal x5245=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5241*x5242))+(((-1.0)*r02*r22))+(((-1.0)*x5243))+((x5241*x5243))+((cj5*r00*x5244)));
j4eval[0]=x5245;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5244))+(((-1.0)*cj0*cj5*x5242))))));
j4eval[2]=IKsign(x5245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5246=cj5*cj5;
IkReal x5247=((1.0)*r20);
IkReal x5248=(r01*r21);
IkReal x5249=(r21*sj5);
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5249))+(((-1.0)*cj0*cj5*x5247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5246*x5248))+(((-1.0)*x5248))+(((-1.0)*r00*x5246*x5247))+((cj5*r00*x5249)))),-1);
if(!x5251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5250.value)+(((1.5707963267949)*(x5251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5252=IKcos(j4);
IkReal x5253=IKsin(j4);
IkReal x5254=(cj5*r00);
IkReal x5255=(cj5*r10);
IkReal x5256=(cj5*r20);
IkReal x5257=((1.0)*x5252);
IkReal x5258=((1.0)*x5253);
IkReal x5259=(sj5*x5252);
IkReal x5260=(sj5*x5253);
evalcond[0]=(((r22*x5253))+((r21*x5259))+(((-1.0)*x5256*x5257)));
evalcond[1]=((((-1.0)*r22*x5257))+((r21*x5260))+(((-1.0)*x5256*x5258)));
evalcond[2]=(((r01*x5259))+cj0+(((-1.0)*x5254*x5257))+((r02*x5253)));
evalcond[3]=(sj0+((r12*x5253))+(((-1.0)*x5255*x5257))+((r11*x5259)));
evalcond[4]=(cj0+((r11*x5260))+(((-1.0)*x5255*x5258))+(((-1.0)*r12*x5257)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5257))+(((-1.0)*x5254*x5258))+((r01*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5261=((1.0)*cj5);
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5261)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
CheckValue<IkReal> x5263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5261)))),-1);
if(!x5263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5262.value)+(((1.5707963267949)*(x5263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5264=IKcos(j4);
IkReal x5265=IKsin(j4);
IkReal x5266=(cj5*r00);
IkReal x5267=(cj5*r10);
IkReal x5268=(cj5*r20);
IkReal x5269=((1.0)*x5264);
IkReal x5270=((1.0)*x5265);
IkReal x5271=(sj5*x5264);
IkReal x5272=(sj5*x5265);
evalcond[0]=((((-1.0)*x5268*x5269))+((r21*x5271))+((r22*x5265)));
evalcond[1]=(((r21*x5272))+(((-1.0)*r22*x5269))+(((-1.0)*x5268*x5270)));
evalcond[2]=(((r02*x5265))+cj0+((r01*x5271))+(((-1.0)*x5266*x5269)));
evalcond[3]=(sj0+((r12*x5265))+(((-1.0)*x5267*x5269))+((r11*x5271)));
evalcond[4]=(cj0+(((-1.0)*r12*x5269))+(((-1.0)*x5267*x5270))+((r11*x5272)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5269))+(((-1.0)*x5266*x5270))+((r01*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5273 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5273.valid){
continue;
}
CheckValue<IkReal> x5274=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5273.value)+(((1.5707963267949)*(x5274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5275=IKcos(j4);
IkReal x5276=IKsin(j4);
IkReal x5277=(cj5*r00);
IkReal x5278=(cj5*r10);
IkReal x5279=(cj5*r20);
IkReal x5280=((1.0)*x5275);
IkReal x5281=((1.0)*x5276);
IkReal x5282=(sj5*x5275);
IkReal x5283=(sj5*x5276);
evalcond[0]=(((r22*x5276))+(((-1.0)*x5279*x5280))+((r21*x5282)));
evalcond[1]=((((-1.0)*r22*x5280))+(((-1.0)*x5279*x5281))+((r21*x5283)));
evalcond[2]=(((r02*x5276))+cj0+((r01*x5282))+(((-1.0)*x5277*x5280)));
evalcond[3]=(sj0+(((-1.0)*x5278*x5280))+((r11*x5282))+((r12*x5276)));
evalcond[4]=(cj0+(((-1.0)*x5278*x5281))+(((-1.0)*r12*x5280))+((r11*x5283)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5283))+(((-1.0)*r02*x5280))+(((-1.0)*x5277*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5284=IKcos(j0);
IkReal x5285=IKsin(j0);
evalcond[0]=((((-0.03275)*x5284))+(((-1.0)*px))+(((-0.10915)*x5285)));
evalcond[1]=((((-0.03275)*x5285))+(((-1.0)*py))+(((0.10915)*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5286=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5286;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5287=((1.0)*cj5);
IkReal x5288=((((-1.0)*r01*x5287))+(((-1.0)*r00*sj5)));
j4eval[0]=x5288;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5287)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5289=((1.0)*cj5);
IkReal x5290=((((-1.0)*r01*x5289))+(((-1.0)*r00*sj5)));
j4eval[0]=x5290;
j4eval[1]=IKsign(x5290);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5291=((1.0)*cj5);
CheckValue<IkReal> x5292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5291))+(((-1.0)*r00*sj5)))),-1);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5291)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5292.value)))+(x5293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5294=IKcos(j4);
IkReal x5295=IKsin(j4);
IkReal x5296=((1.0)*sj0);
IkReal x5297=(cj5*r00);
IkReal x5298=(cj5*r10);
IkReal x5299=(cj5*r20);
IkReal x5300=((1.0)*x5294);
IkReal x5301=((1.0)*x5295);
IkReal x5302=(sj5*x5294);
IkReal x5303=(sj5*x5295);
evalcond[0]=(((r21*x5302))+((r22*x5295))+(((-1.0)*x5299*x5300)));
evalcond[1]=((((-1.0)*r22*x5300))+((r21*x5303))+(((-1.0)*x5299*x5301)));
evalcond[2]=(cj0+(((-1.0)*r12*x5300))+(((-1.0)*x5298*x5301))+((r11*x5303)));
evalcond[3]=((((-1.0)*x5297*x5300))+((r02*x5295))+((r01*x5302))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5295))+(((-1.0)*x5296))+(((-1.0)*x5298*x5300))+((r11*x5302)));
evalcond[5]=((((-1.0)*x5297*x5301))+(((-1.0)*x5296))+(((-1.0)*r02*x5300))+((r01*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5304=((1.0)*cj5);
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5304)))),-1);
if(!x5305.valid){
continue;
}
CheckValue<IkReal> x5306 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5305.value)))+(x5306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5307=IKcos(j4);
IkReal x5308=IKsin(j4);
IkReal x5309=((1.0)*sj0);
IkReal x5310=(cj5*r00);
IkReal x5311=(cj5*r10);
IkReal x5312=(cj5*r20);
IkReal x5313=((1.0)*x5307);
IkReal x5314=((1.0)*x5308);
IkReal x5315=(sj5*x5307);
IkReal x5316=(sj5*x5308);
evalcond[0]=((((-1.0)*x5312*x5313))+((r21*x5315))+((r22*x5308)));
evalcond[1]=((((-1.0)*x5312*x5314))+((r21*x5316))+(((-1.0)*r22*x5313)));
evalcond[2]=((((-1.0)*r12*x5313))+cj0+((r11*x5316))+(((-1.0)*x5311*x5314)));
evalcond[3]=((((-1.0)*x5310*x5313))+((r01*x5315))+((r02*x5308))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5309))+((r12*x5308))+((r11*x5315))+(((-1.0)*x5311*x5313)));
evalcond[5]=((((-1.0)*x5310*x5314))+((r01*x5316))+(((-1.0)*x5309))+(((-1.0)*r02*x5313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5317 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5317.valid){
continue;
}
CheckValue<IkReal> x5318=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5317.value)+(((1.5707963267949)*(x5318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5319=IKcos(j4);
IkReal x5320=IKsin(j4);
IkReal x5321=((1.0)*sj0);
IkReal x5322=(cj5*r00);
IkReal x5323=(cj5*r10);
IkReal x5324=(cj5*r20);
IkReal x5325=((1.0)*x5319);
IkReal x5326=((1.0)*x5320);
IkReal x5327=(sj5*x5319);
IkReal x5328=(sj5*x5320);
evalcond[0]=(((r22*x5320))+(((-1.0)*x5324*x5325))+((r21*x5327)));
evalcond[1]=((((-1.0)*r22*x5325))+(((-1.0)*x5324*x5326))+((r21*x5328)));
evalcond[2]=(((r11*x5328))+cj0+(((-1.0)*x5323*x5326))+(((-1.0)*r12*x5325)));
evalcond[3]=((((-1.0)*x5322*x5325))+((r01*x5327))+((r02*x5320))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5327))+(((-1.0)*x5323*x5325))+((r12*x5320))+(((-1.0)*x5321)));
evalcond[5]=((((-1.0)*r02*x5325))+(((-1.0)*x5322*x5326))+((r01*x5328))+(((-1.0)*x5321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5329=((1.0)*sj5);
IkReal x5330=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5330))+(((-1.0)*r10*x5329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5329))+(((-1.0)*r01*x5330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5330))+(((-1.0)*r10*x5329))))+IKsqr(((((-1.0)*r00*x5329))+(((-1.0)*r01*x5330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5330))+(((-1.0)*r10*x5329))), ((((-1.0)*r00*x5329))+(((-1.0)*r01*x5330))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5331=IKsin(j0);
IkReal x5332=IKcos(j0);
IkReal x5333=(r00*sj5);
IkReal x5334=(r10*sj5);
IkReal x5335=(cj5*r11);
IkReal x5336=(cj5*r01);
evalcond[0]=(x5333+x5332+x5336);
evalcond[1]=(x5331+x5335+x5334);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5336))+(((-0.09465)*x5333))+(((-0.10915)*x5331)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5332))+(((-0.09465)*x5335))+(((-0.09465)*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5337=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5337;
j4eval[1]=IKsign(x5337);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5338=((1.0)*cj5);
IkReal x5339=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5338)));
j4eval[0]=x5339;
j4eval[1]=IKsign(x5339);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5338))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5340=cj5*cj5;
IkReal x5341=(r01*r11);
IkReal x5342=((1.0)*r00);
IkReal x5343=(r01*sj5);
IkReal x5344=(((cj5*r10*x5343))+(((-1.0)*r10*x5340*x5342))+(((-1.0)*r02*r12))+(((-1.0)*x5341))+((x5340*x5341))+((cj5*r00*r11*sj5)));
j4eval[0]=x5344;
j4eval[1]=IKsign(x5344);
j4eval[2]=((IKabs((((cj0*x5343))+(((-1.0)*cj0*cj5*x5342)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5345=cj5*cj5;
IkReal x5346=(r01*r11);
IkReal x5347=(cj5*r00);
IkReal x5348=(r01*sj5);
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5348))+(((-1.0)*r00*r10*x5345))+(((-1.0)*r02*r12))+((r11*sj5*x5347))+((x5345*x5346))+(((-1.0)*x5346)))),-1);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal((((cj0*x5348))+(((-1.0)*cj0*x5347)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5349.value)))+(x5350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5351=IKcos(j4);
IkReal x5352=IKsin(j4);
IkReal x5353=(cj5*r00);
IkReal x5354=(r01*sj5);
IkReal x5355=(cj5*r10);
IkReal x5356=(cj5*r20);
IkReal x5357=((1.0)*x5351);
IkReal x5358=((1.0)*x5352);
IkReal x5359=(sj5*x5352);
IkReal x5360=(sj5*x5351);
evalcond[0]=((((-1.0)*x5353*x5357))+((x5351*x5354))+((r02*x5352)));
evalcond[1]=((((-1.0)*x5355*x5357))+((r12*x5352))+((r11*x5360)));
evalcond[2]=((((-1.0)*x5356*x5358))+(((-1.0)*r22*x5357))+((r21*x5359)));
evalcond[3]=((-1.0)+(((-1.0)*x5356*x5357))+((r22*x5352))+((r21*x5360)));
evalcond[4]=((((-1.0)*x5355*x5358))+cj0+((r11*x5359))+(((-1.0)*r12*x5357)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5357))+(((-1.0)*x5353*x5358))+((x5352*x5354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5361=((1.0)*cj5);
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5361)))),-1);
if(!x5362.valid){
continue;
}
CheckValue<IkReal> x5363 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5361)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5362.value)))+(x5363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5364=IKcos(j4);
IkReal x5365=IKsin(j4);
IkReal x5366=(cj5*r00);
IkReal x5367=(r01*sj5);
IkReal x5368=(cj5*r10);
IkReal x5369=(cj5*r20);
IkReal x5370=((1.0)*x5364);
IkReal x5371=((1.0)*x5365);
IkReal x5372=(sj5*x5365);
IkReal x5373=(sj5*x5364);
evalcond[0]=(((r02*x5365))+((x5364*x5367))+(((-1.0)*x5366*x5370)));
evalcond[1]=(((r12*x5365))+((r11*x5373))+(((-1.0)*x5368*x5370)));
evalcond[2]=((((-1.0)*r22*x5370))+((r21*x5372))+(((-1.0)*x5369*x5371)));
evalcond[3]=((-1.0)+((r22*x5365))+((r21*x5373))+(((-1.0)*x5369*x5370)));
evalcond[4]=(cj0+(((-1.0)*r12*x5370))+((r11*x5372))+(((-1.0)*x5368*x5371)));
evalcond[5]=((((-1.0)*sj0))+((x5365*x5367))+(((-1.0)*x5366*x5371))+(((-1.0)*r02*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5374.valid){
continue;
}
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5374.value)))+(x5375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5376=IKcos(j4);
IkReal x5377=IKsin(j4);
IkReal x5378=(cj5*r00);
IkReal x5379=(r01*sj5);
IkReal x5380=(cj5*r10);
IkReal x5381=(cj5*r20);
IkReal x5382=((1.0)*x5376);
IkReal x5383=((1.0)*x5377);
IkReal x5384=(sj5*x5377);
IkReal x5385=(sj5*x5376);
evalcond[0]=(((r02*x5377))+((x5376*x5379))+(((-1.0)*x5378*x5382)));
evalcond[1]=(((r11*x5385))+(((-1.0)*x5380*x5382))+((r12*x5377)));
evalcond[2]=((((-1.0)*r22*x5382))+((r21*x5384))+(((-1.0)*x5381*x5383)));
evalcond[3]=((-1.0)+((r22*x5377))+((r21*x5385))+(((-1.0)*x5381*x5382)));
evalcond[4]=(cj0+((r11*x5384))+(((-1.0)*x5380*x5383))+(((-1.0)*r12*x5382)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5382))+((x5377*x5379))+(((-1.0)*x5378*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5386=IKsin(j0);
IkReal x5387=IKcos(j0);
evalcond[0]=((((-0.10915)*x5386))+(((0.39225)*x5387))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5386))+(((0.10915)*x5387))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5388=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5388;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5389=((1.0)*cj5);
IkReal x5390=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5389)));
j4eval[0]=x5390;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5389))))));
j4eval[2]=IKsign(x5390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5391=((1.0)*cj5);
IkReal x5392=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5391)));
j4eval[0]=x5392;
j4eval[1]=IKsign(x5392);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5391))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5393=((1.0)*cj5);
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5393)))),-1);
if(!x5394.valid){
continue;
}
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5393))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5394.value)))+(x5395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5396=IKcos(j4);
IkReal x5397=IKsin(j4);
IkReal x5398=((1.0)*sj0);
IkReal x5399=(cj5*r00);
IkReal x5400=(cj5*r10);
IkReal x5401=(cj5*r20);
IkReal x5402=((1.0)*x5396);
IkReal x5403=((1.0)*x5397);
IkReal x5404=(sj5*x5396);
IkReal x5405=(sj5*x5397);
evalcond[0]=(((r21*x5404))+((r22*x5397))+(((-1.0)*x5401*x5402)));
evalcond[1]=(((r21*x5405))+(((-1.0)*r22*x5402))+(((-1.0)*x5401*x5403)));
evalcond[2]=((((-1.0)*x5400*x5403))+cj0+(((-1.0)*r12*x5402))+((r11*x5405)));
evalcond[3]=(((r02*x5397))+(((-1.0)*x5399*x5402))+((r01*x5404))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5400*x5402))+((r12*x5397))+(((-1.0)*x5398))+((r11*x5404)));
evalcond[5]=((((-1.0)*r02*x5402))+(((-1.0)*x5399*x5403))+(((-1.0)*x5398))+((r01*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5406=((1.0)*cj5);
CheckValue<IkReal> x5407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5406))+(((-1.0)*r00*sj5)))),-1);
if(!x5407.valid){
continue;
}
CheckValue<IkReal> x5408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5406))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5407.value)))+(x5408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5409=IKcos(j4);
IkReal x5410=IKsin(j4);
IkReal x5411=((1.0)*sj0);
IkReal x5412=(cj5*r00);
IkReal x5413=(cj5*r10);
IkReal x5414=(cj5*r20);
IkReal x5415=((1.0)*x5409);
IkReal x5416=((1.0)*x5410);
IkReal x5417=(sj5*x5409);
IkReal x5418=(sj5*x5410);
evalcond[0]=((((-1.0)*x5414*x5415))+((r22*x5410))+((r21*x5417)));
evalcond[1]=((((-1.0)*x5414*x5416))+(((-1.0)*r22*x5415))+((r21*x5418)));
evalcond[2]=(((r11*x5418))+cj0+(((-1.0)*r12*x5415))+(((-1.0)*x5413*x5416)));
evalcond[3]=((((-1.0)*x5412*x5415))+((r02*x5410))+((r01*x5417))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5417))+(((-1.0)*x5411))+((r12*x5410))+(((-1.0)*x5413*x5415)));
evalcond[5]=((((-1.0)*x5412*x5416))+(((-1.0)*r02*x5415))+(((-1.0)*x5411))+((r01*x5418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5419.value)+(((1.5707963267949)*(x5420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5421=IKcos(j4);
IkReal x5422=IKsin(j4);
IkReal x5423=((1.0)*sj0);
IkReal x5424=(cj5*r00);
IkReal x5425=(cj5*r10);
IkReal x5426=(cj5*r20);
IkReal x5427=((1.0)*x5421);
IkReal x5428=((1.0)*x5422);
IkReal x5429=(sj5*x5421);
IkReal x5430=(sj5*x5422);
evalcond[0]=(((r22*x5422))+(((-1.0)*x5426*x5427))+((r21*x5429)));
evalcond[1]=((((-1.0)*x5426*x5428))+(((-1.0)*r22*x5427))+((r21*x5430)));
evalcond[2]=(cj0+(((-1.0)*x5425*x5428))+((r11*x5430))+(((-1.0)*r12*x5427)));
evalcond[3]=(((r01*x5429))+(((-1.0)*x5424*x5427))+((r02*x5422))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5423))+((r12*x5422))+(((-1.0)*x5425*x5427))+((r11*x5429)));
evalcond[5]=((((-1.0)*x5423))+(((-1.0)*x5424*x5428))+(((-1.0)*r02*x5427))+((r01*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5431=IKsin(j0);
IkReal x5432=IKcos(j0);
IkReal x5433=(r00*sj5);
IkReal x5434=(r10*sj5);
IkReal x5435=(cj5*r11);
IkReal x5436=(cj5*r01);
evalcond[0]=(x5433+x5436+(((-1.0)*x5432)));
evalcond[1]=(x5434+x5435+(((-1.0)*x5431)));
evalcond[2]=((((-0.10915)*x5431))+(((-0.09465)*x5433))+(((-0.09465)*x5436))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5435))+(((-0.09465)*x5434))+(((-1.0)*py))+(((0.10915)*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5437=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5437;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5438=((1.0)*cj5);
IkReal x5439=((((-1.0)*r01*x5438))+(((-1.0)*r00*sj5)));
j4eval[0]=x5439;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5438))))));
j4eval[2]=IKsign(x5439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5440=cj5*cj5;
IkReal x5441=(r01*r11);
IkReal x5442=((1.0)*r00);
IkReal x5443=(r01*sj5);
IkReal x5444=((((-1.0)*x5441))+((x5440*x5441))+(((-1.0)*r02*r12))+((cj5*r10*x5443))+(((-1.0)*r10*x5440*x5442))+((cj5*r00*r11*sj5)));
j4eval[0]=x5444;
j4eval[1]=IKsign(x5444);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5442))+((cj0*x5443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5445=cj5*cj5;
IkReal x5446=(r01*r11);
IkReal x5447=(cj5*r00);
IkReal x5448=(r01*sj5);
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5447))+((cj0*x5448)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5446))+(((-1.0)*r02*r12))+((cj5*r10*x5448))+((x5445*x5446))+(((-1.0)*r00*r10*x5445))+((r11*sj5*x5447)))),-1);
if(!x5450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5449.value)+(((1.5707963267949)*(x5450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5451=IKcos(j4);
IkReal x5452=IKsin(j4);
IkReal x5453=(cj5*r00);
IkReal x5454=(r01*sj5);
IkReal x5455=(cj5*r10);
IkReal x5456=(cj5*r20);
IkReal x5457=((1.0)*x5451);
IkReal x5458=((1.0)*x5452);
IkReal x5459=(sj5*x5452);
IkReal x5460=(sj5*x5451);
evalcond[0]=(((r02*x5452))+(((-1.0)*x5453*x5457))+((x5451*x5454)));
evalcond[1]=((((-1.0)*x5455*x5457))+((r12*x5452))+((r11*x5460)));
evalcond[2]=(((r21*x5459))+(((-1.0)*x5456*x5458))+(((-1.0)*r22*x5457)));
evalcond[3]=((1.0)+((r22*x5452))+(((-1.0)*x5456*x5457))+((r21*x5460)));
evalcond[4]=((((-1.0)*r12*x5457))+(((-1.0)*x5455*x5458))+cj0+((r11*x5459)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5457))+((x5452*x5454))+(((-1.0)*x5453*x5458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5461=((1.0)*cj5);
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5461))+(((-1.0)*r00*sj5)))),-1);
if(!x5462.valid){
continue;
}
CheckValue<IkReal> x5463 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5461))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5462.value)))+(x5463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5464=IKcos(j4);
IkReal x5465=IKsin(j4);
IkReal x5466=(cj5*r00);
IkReal x5467=(r01*sj5);
IkReal x5468=(cj5*r10);
IkReal x5469=(cj5*r20);
IkReal x5470=((1.0)*x5464);
IkReal x5471=((1.0)*x5465);
IkReal x5472=(sj5*x5465);
IkReal x5473=(sj5*x5464);
evalcond[0]=(((r02*x5465))+(((-1.0)*x5466*x5470))+((x5464*x5467)));
evalcond[1]=((((-1.0)*x5468*x5470))+((r12*x5465))+((r11*x5473)));
evalcond[2]=((((-1.0)*r22*x5470))+(((-1.0)*x5469*x5471))+((r21*x5472)));
evalcond[3]=((1.0)+((r22*x5465))+(((-1.0)*x5469*x5470))+((r21*x5473)));
evalcond[4]=((((-1.0)*x5468*x5471))+cj0+(((-1.0)*r12*x5470))+((r11*x5472)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5466*x5471))+(((-1.0)*r02*x5470))+((x5465*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5474 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5474.valid){
continue;
}
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5474.value)+(((1.5707963267949)*(x5475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5476=IKcos(j4);
IkReal x5477=IKsin(j4);
IkReal x5478=(cj5*r00);
IkReal x5479=(r01*sj5);
IkReal x5480=(cj5*r10);
IkReal x5481=(cj5*r20);
IkReal x5482=((1.0)*x5476);
IkReal x5483=((1.0)*x5477);
IkReal x5484=(sj5*x5477);
IkReal x5485=(sj5*x5476);
evalcond[0]=((((-1.0)*x5478*x5482))+((r02*x5477))+((x5476*x5479)));
evalcond[1]=(((r11*x5485))+((r12*x5477))+(((-1.0)*x5480*x5482)));
evalcond[2]=((((-1.0)*x5481*x5483))+(((-1.0)*r22*x5482))+((r21*x5484)));
evalcond[3]=((1.0)+(((-1.0)*x5481*x5482))+((r21*x5485))+((r22*x5477)));
evalcond[4]=((((-1.0)*r12*x5482))+cj0+((r11*x5484))+(((-1.0)*x5480*x5483)));
evalcond[5]=((((-1.0)*sj0))+((x5477*x5479))+(((-1.0)*x5478*x5483))+(((-1.0)*r02*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5486=IKcos(j0);
IkReal x5487=IKsin(j0);
evalcond[0]=((((-0.39225)*x5486))+(((-0.10915)*x5487))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5486))+(((-0.39225)*x5487))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5488=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5488;
j4eval[1]=IKsign(x5488);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5489=((1.0)*cj5);
IkReal x5490=((((-1.0)*r11*x5489))+(((-1.0)*r10*sj5)));
j4eval[0]=x5490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5489)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5491=cj5*cj5;
IkReal x5492=((1.0)*r20);
IkReal x5493=(r01*r21);
IkReal x5494=(r21*sj5);
IkReal x5495=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5491*x5492))+(((-1.0)*r02*r22))+((cj5*r00*x5494))+((x5491*x5493))+(((-1.0)*x5493)));
j4eval[0]=x5495;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5494))+(((-1.0)*cj0*cj5*x5492))))));
j4eval[2]=IKsign(x5495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5496=cj5*cj5;
IkReal x5497=((1.0)*r20);
IkReal x5498=(r01*r21);
IkReal x5499=(r21*sj5);
CheckValue<IkReal> x5500 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5499))+(((-1.0)*cj0*cj5*x5497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5500.valid){
continue;
}
CheckValue<IkReal> x5501=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5499))+(((-1.0)*r00*x5496*x5497))+(((-1.0)*x5498))+((x5496*x5498)))),-1);
if(!x5501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5500.value)+(((1.5707963267949)*(x5501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5502=IKcos(j4);
IkReal x5503=IKsin(j4);
IkReal x5504=(cj5*r00);
IkReal x5505=(cj5*r10);
IkReal x5506=(cj5*r20);
IkReal x5507=((1.0)*x5502);
IkReal x5508=((1.0)*x5503);
IkReal x5509=(sj5*x5502);
IkReal x5510=(sj5*x5503);
evalcond[0]=(((r21*x5509))+(((-1.0)*x5506*x5507))+((r22*x5503)));
evalcond[1]=((((-1.0)*r22*x5507))+((r21*x5510))+(((-1.0)*x5506*x5508)));
evalcond[2]=(cj0+((r02*x5503))+(((-1.0)*x5504*x5507))+((r01*x5509)));
evalcond[3]=(sj0+((r12*x5503))+((r11*x5509))+(((-1.0)*x5505*x5507)));
evalcond[4]=(cj0+(((-1.0)*r12*x5507))+(((-1.0)*x5505*x5508))+((r11*x5510)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5507))+(((-1.0)*x5504*x5508))+((r01*x5510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5511=((1.0)*cj5);
CheckValue<IkReal> x5512 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5511)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5512.valid){
continue;
}
CheckValue<IkReal> x5513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5511)))),-1);
if(!x5513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5512.value)+(((1.5707963267949)*(x5513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5514=IKcos(j4);
IkReal x5515=IKsin(j4);
IkReal x5516=(cj5*r00);
IkReal x5517=(cj5*r10);
IkReal x5518=(cj5*r20);
IkReal x5519=((1.0)*x5514);
IkReal x5520=((1.0)*x5515);
IkReal x5521=(sj5*x5514);
IkReal x5522=(sj5*x5515);
evalcond[0]=(((r21*x5521))+((r22*x5515))+(((-1.0)*x5518*x5519)));
evalcond[1]=((((-1.0)*r22*x5519))+((r21*x5522))+(((-1.0)*x5518*x5520)));
evalcond[2]=(cj0+((r02*x5515))+((r01*x5521))+(((-1.0)*x5516*x5519)));
evalcond[3]=(sj0+((r12*x5515))+((r11*x5521))+(((-1.0)*x5517*x5519)));
evalcond[4]=(cj0+(((-1.0)*x5517*x5520))+(((-1.0)*r12*x5519))+((r11*x5522)));
evalcond[5]=((((-1.0)*x5516*x5520))+(((-1.0)*sj0))+(((-1.0)*r02*x5519))+((r01*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5523 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5523.valid){
continue;
}
CheckValue<IkReal> x5524=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5523.value)+(((1.5707963267949)*(x5524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5525=IKcos(j4);
IkReal x5526=IKsin(j4);
IkReal x5527=(cj5*r00);
IkReal x5528=(cj5*r10);
IkReal x5529=(cj5*r20);
IkReal x5530=((1.0)*x5525);
IkReal x5531=((1.0)*x5526);
IkReal x5532=(sj5*x5525);
IkReal x5533=(sj5*x5526);
evalcond[0]=(((r22*x5526))+((r21*x5532))+(((-1.0)*x5529*x5530)));
evalcond[1]=((((-1.0)*r22*x5530))+((r21*x5533))+(((-1.0)*x5529*x5531)));
evalcond[2]=(((r02*x5526))+cj0+(((-1.0)*x5527*x5530))+((r01*x5532)));
evalcond[3]=(sj0+(((-1.0)*x5528*x5530))+((r11*x5532))+((r12*x5526)));
evalcond[4]=((((-1.0)*x5528*x5531))+cj0+((r11*x5533))+(((-1.0)*r12*x5530)));
evalcond[5]=((((-1.0)*r02*x5530))+(((-1.0)*sj0))+(((-1.0)*x5527*x5531))+((r01*x5533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5534=cj1*cj1;
IkReal x5535=(cj1*sj1);
IkReal x5536=(cj5*r01);
IkReal x5537=(r00*sj5);
IkReal x5538=(r10*sj5);
IkReal x5539=(cj5*r11);
IkReal x5540=(cj1*sj2);
IkReal x5541=((20000.0)*py);
IkReal x5542=(cj2*sj1);
IkReal x5543=((1893.0)*x5542);
IkReal x5544=(sj2*x5534);
CheckValue<IkReal> x5545=IKPowWithIntegerCheck(((((-8500.0)*cj2*x5535))+(((-15690.0)*x5535*(cj2*cj2)))+(((7845.0)*x5535))+(((-8500.0)*x5544))+(((-15690.0)*cj2*x5544))+(((7845.0)*cj2*sj2))),-1);
if(!x5545.valid){
continue;
}
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(((((-1.0)*x5542))+(((-1.0)*x5540))),-1);
if(!x5546.valid){
continue;
}
if( IKabs(((x5545.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5539*x5543))+(((-1.0)*x5541*x5542))+(((-1.0)*x5540*x5541))+(((2183.0)*x5536))+(((2183.0)*x5537))+(((-1893.0)*x5538*x5540))+(((-1893.0)*x5539*x5540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5546.value)*(((((-1.0)*x5537))+(((-1.0)*x5536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5545.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5539*x5543))+(((-1.0)*x5541*x5542))+(((-1.0)*x5540*x5541))+(((2183.0)*x5536))+(((2183.0)*x5537))+(((-1893.0)*x5538*x5540))+(((-1893.0)*x5539*x5540))))))+IKsqr(((x5546.value)*(((((-1.0)*x5537))+(((-1.0)*x5536))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5545.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5539*x5543))+(((-1.0)*x5541*x5542))+(((-1.0)*x5540*x5541))+(((2183.0)*x5536))+(((2183.0)*x5537))+(((-1893.0)*x5538*x5540))+(((-1893.0)*x5539*x5540))))), ((x5546.value)*(((((-1.0)*x5537))+(((-1.0)*x5536))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5547=IKcos(j0);
IkReal x5548=IKsin(j0);
IkReal x5549=(cj5*r01);
IkReal x5550=((1.0)*cj1);
IkReal x5551=((0.39225)*sj1);
IkReal x5552=(cj5*r11);
IkReal x5553=(r00*sj5);
IkReal x5554=((0.39225)*cj2);
IkReal x5555=(r10*sj5);
IkReal x5556=(sj2*x5547);
IkReal x5557=(sj2*x5548);
IkReal x5558=(cj1*x5547);
IkReal x5559=((1.0)*cj2*sj1);
IkReal x5560=(cj1*x5548);
evalcond[0]=(x5549+x5553+(((-1.0)*x5550*x5556))+(((-1.0)*x5547*x5559)));
evalcond[1]=(x5555+x5552+(((-1.0)*x5550*x5557))+(((-1.0)*x5548*x5559)));
evalcond[2]=(((x5554*x5558))+(((-0.10915)*x5548))+(((-1.0)*x5551*x5556))+(((-0.09465)*x5549))+(((-0.09465)*x5553))+(((0.425)*x5558))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5547))+(((0.425)*x5560))+(((-1.0)*x5551*x5557))+((x5554*x5560))+(((-0.09465)*x5552))+(((-0.09465)*x5555))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5561=((1.0)*cj5);
IkReal x5562=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5561)));
j4eval[0]=x5562;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5561))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5563=((1.0)*cj5);
IkReal x5564=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5563)));
j4eval[0]=x5564;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5563))))));
j4eval[2]=IKsign(x5564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5565=((1.0)*sj0);
IkReal x5566=((1.0)*cj0);
IkReal x5567=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5567;
j4eval[1]=((IKabs(((((-1.0)*r12*x5565))+(((-1.0)*r02*x5566)))))+(IKabs(((((-1.0)*r01*sj5*x5566))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5565))))));
j4eval[2]=IKsign(x5567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5568=((-1.0)*r20);
IkReal x5570 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5570)==0){
continue;
}
IkReal x5569=pow(x5570,-0.5);
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5568),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5571.value));
IkReal gconst115=(r21*x5569);
IkReal gconst116=(x5568*x5569);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5572.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5573=((-1.0)*r20);
IkReal x5574=x5569;
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5573),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5575=((-1.0)*(x5576.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5575;
IkReal gconst114=x5575;
IkReal gconst115=(r21*x5574);
IkReal gconst116=(x5573*x5574);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5577=((-1.0)*r20);
IkReal x5578=x5569;
CheckValue<IkReal> x5580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5577),IKFAST_ATAN2_MAGTHRESH);
if(!x5580.valid){
continue;
}
IkReal x5579=((-1.0)*(x5580.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5579;
IkReal gconst114=x5579;
IkReal gconst115=(r21*x5578);
IkReal gconst116=(x5577*x5578);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5581=((-1.0)*r20);
IkReal x5582=x5569;
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5581),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
IkReal x5583=((-1.0)*(x5584.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5583;
IkReal gconst114=x5583;
IkReal gconst115=(r21*x5582);
IkReal gconst116=(x5581*x5582);
IkReal x5585=((1.0)*(r22*r22));
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5585))),-1);
if(!x5589.valid){
continue;
}
IkReal x5586=x5589.value;
IkReal x5587=((1.0)*x5586);
IkReal x5588=((((-1.0)*x5587*(r21*r21*r21*r21)))+(((-2.0)*x5586*(r20*r20)*(r21*r21)))+(((-1.0)*x5587*(r20*r20*r20*r20)))+(((-1.0)*x5585)));
j4eval[0]=x5588;
j4eval[1]=IKsign(x5588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5590=(cj2*sj1);
IkReal x5591=(gconst115*r21);
IkReal x5592=(cj1*sj2);
IkReal x5593=((1.0)*gconst116*r20);
CheckValue<IkReal> x5594 = IKatan2WithCheck(IkReal((((r22*x5590))+((r22*x5592)))),IkReal(((((-1.0)*x5592*x5593))+((x5590*x5591))+(((-1.0)*x5590*x5593))+((x5591*x5592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5591))+(((-1.0)*gconst116*r20*x5593))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5591*x5591))))),-1);
if(!x5595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5594.value)+(((1.5707963267949)*(x5595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5596=IKsin(j4);
IkReal x5597=IKcos(j4);
IkReal x5598=(sj1*sj2);
IkReal x5599=((1.0)*x5597);
IkReal x5600=((1.0)*cj1*cj2);
IkReal x5601=(gconst115*x5596);
IkReal x5602=(gconst115*x5597);
IkReal x5603=((1.0)*gconst116*x5596);
evalcond[0]=(((r21*x5601))+(((-1.0)*r22*x5599))+(((-1.0)*r20*x5603)));
evalcond[1]=((((-1.0)*r10*x5603))+(((-1.0)*r12*x5599))+cj0+((r11*x5601)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5603))+(((-1.0)*r02*x5599))+((r01*x5601)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5599))+((r21*x5602))+((r22*x5596)));
evalcond[4]=((((-1.0)*cj0*x5600))+((cj0*x5598))+((r02*x5596))+((r01*x5602))+(((-1.0)*gconst116*r00*x5599)));
evalcond[5]=(((sj0*x5598))+((r12*x5596))+(((-1.0)*gconst116*r10*x5599))+(((-1.0)*sj0*x5600))+((r11*x5602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5604=((1.0)*gconst116);
CheckValue<IkReal> x5605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5604)))),-1);
if(!x5605.valid){
continue;
}
CheckValue<IkReal> x5606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5605.value)))+(x5606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5607=IKsin(j4);
IkReal x5608=IKcos(j4);
IkReal x5609=(sj1*sj2);
IkReal x5610=((1.0)*x5608);
IkReal x5611=((1.0)*cj1*cj2);
IkReal x5612=(gconst115*x5607);
IkReal x5613=(gconst115*x5608);
IkReal x5614=((1.0)*gconst116*x5607);
evalcond[0]=((((-1.0)*r22*x5610))+((r21*x5612))+(((-1.0)*r20*x5614)));
evalcond[1]=(cj0+(((-1.0)*r10*x5614))+(((-1.0)*r12*x5610))+((r11*x5612)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5614))+((r01*x5612))+(((-1.0)*r02*x5610)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5610))+((cj1*sj2))+((r21*x5613))+((r22*x5607)));
evalcond[4]=(((r02*x5607))+(((-1.0)*cj0*x5611))+((r01*x5613))+(((-1.0)*gconst116*r00*x5610))+((cj0*x5609)));
evalcond[5]=(((sj0*x5609))+(((-1.0)*gconst116*r10*x5610))+((r12*x5607))+(((-1.0)*sj0*x5611))+((r11*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5615=((1.0)*gconst116);
CheckValue<IkReal> x5616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5615))+(((-1.0)*gconst115*r00)))),-1);
if(!x5616.valid){
continue;
}
CheckValue<IkReal> x5617 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5615))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5616.value)))+(x5617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5618=IKsin(j4);
IkReal x5619=IKcos(j4);
IkReal x5620=(sj1*sj2);
IkReal x5621=((1.0)*x5619);
IkReal x5622=((1.0)*cj1*cj2);
IkReal x5623=(gconst115*x5618);
IkReal x5624=(gconst115*x5619);
IkReal x5625=((1.0)*gconst116*x5618);
evalcond[0]=((((-1.0)*r22*x5621))+((r21*x5623))+(((-1.0)*r20*x5625)));
evalcond[1]=(cj0+(((-1.0)*r10*x5625))+(((-1.0)*r12*x5621))+((r11*x5623)));
evalcond[2]=((((-1.0)*r00*x5625))+(((-1.0)*sj0))+((r01*x5623))+(((-1.0)*r02*x5621)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5621))+((r21*x5624))+((r22*x5618)));
evalcond[4]=(((cj0*x5620))+((r02*x5618))+(((-1.0)*cj0*x5622))+((r01*x5624))+(((-1.0)*gconst116*r00*x5621)));
evalcond[5]=(((sj0*x5620))+(((-1.0)*gconst116*r10*x5621))+((r12*x5618))+((r11*x5624))+(((-1.0)*sj0*x5622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5626=((-1.0)*r21);
IkReal x5628 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5628)==0){
continue;
}
IkReal x5627=pow(x5628,-0.5);
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal(x5626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5629.value))));
IkReal gconst118=(x5626*x5627);
IkReal gconst119=((1.0)*r20*x5627);
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5630.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5631=((-1.0)*r21);
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal(x5631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
IkReal x5632=((1.0)*(x5634.value));
IkReal x5633=x5627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5632)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5632)));
IkReal gconst118=(x5631*x5633);
IkReal gconst119=((1.0)*r20*x5633);
IkReal x5635=r22*r22;
IkReal x5636=((1.0)*x5635);
CheckValue<IkReal> x5640=IKPowWithIntegerCheck(((-1.0)+x5635),-1);
if(!x5640.valid){
continue;
}
IkReal x5637=x5640.value;
if((((1.0)+(((-1.0)*x5636)))) < -0.00001)
continue;
IkReal x5638=IKsqrt(((1.0)+(((-1.0)*x5636))));
IkReal x5639=(cj0*x5637*x5638);
j4eval[0]=((IKabs((x5639+(((-1.0)*x5636*x5639)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5641=((-1.0)*r21);
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(x5641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
IkReal x5642=((1.0)*(x5644.value));
IkReal x5643=x5627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5642)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5642)));
IkReal gconst118=(x5641*x5643);
IkReal gconst119=((1.0)*r20*x5643);
IkReal x5645=r22*r22;
IkReal x5646=((1.0)*x5645);
CheckValue<IkReal> x5650=IKPowWithIntegerCheck(((-1.0)+x5645),-1);
if(!x5650.valid){
continue;
}
IkReal x5647=x5650.value;
if((((1.0)+(((-1.0)*x5646)))) < -0.00001)
continue;
IkReal x5648=IKsqrt(((1.0)+(((-1.0)*x5646))));
IkReal x5649=(sj0*x5647*x5648);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5649+(((-1.0)*x5646*x5649))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5651=((-1.0)*r21);
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(x5651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
IkReal x5652=((1.0)*(x5654.value));
IkReal x5653=x5627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5652)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5652)));
IkReal gconst118=(x5651*x5653);
IkReal gconst119=((1.0)*r20*x5653);
IkReal x5655=r22*r22;
IkReal x5656=(r12*sj0);
IkReal x5657=(cj0*r02);
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(((-1.0)+x5655),-1);
if(!x5661.valid){
continue;
}
IkReal x5658=x5661.value;
if((((1.0)+(((-1.0)*x5655)))) < -0.00001)
continue;
IkReal x5659=IKsqrt(((1.0)+(((-1.0)*x5655))));
IkReal x5660=(r22*x5658*x5659);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5656*x5660))+((x5657*x5660)))))+(IKabs(((((-1.0)*x5656))+(((-1.0)*x5657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5662=((1.0)*sj0);
IkReal x5663=((1.0)*gconst118);
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5662)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5663))+(((-1.0)*gconst118*r11*x5662))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
CheckValue<IkReal> x5665=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5663)))),-1);
if(!x5665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5664.value)+(((1.5707963267949)*(x5665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5666=IKsin(j4);
IkReal x5667=IKcos(j4);
IkReal x5668=(gconst118*r01);
IkReal x5669=(sj1*sj2);
IkReal x5670=(gconst119*r20);
IkReal x5671=(gconst119*r10);
IkReal x5672=(gconst119*r00);
IkReal x5673=(gconst118*r21);
IkReal x5674=(gconst118*r11);
IkReal x5675=((1.0)*x5667);
IkReal x5676=((1.0)*cj1*cj2);
IkReal x5677=((1.0)*x5666);
evalcond[0]=((((-1.0)*x5670*x5677))+(((-1.0)*r22*x5675))+((x5666*x5673)));
evalcond[1]=(cj0+(((-1.0)*r12*x5675))+(((-1.0)*x5671*x5677))+((x5666*x5674)));
evalcond[2]=((((-1.0)*x5672*x5677))+(((-1.0)*sj0))+((x5666*x5668))+(((-1.0)*r02*x5675)));
evalcond[3]=(((cj2*sj1))+((r22*x5666))+(((-1.0)*x5670*x5675))+((cj1*sj2))+((x5667*x5673)));
evalcond[4]=((((-1.0)*x5672*x5675))+((r02*x5666))+(((-1.0)*cj0*x5676))+((x5667*x5668))+((cj0*x5669)));
evalcond[5]=((((-1.0)*x5671*x5675))+((x5667*x5674))+((sj0*x5669))+((r12*x5666))+(((-1.0)*sj0*x5676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5678=((1.0)*gconst119);
CheckValue<IkReal> x5679 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5678))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5679.valid){
continue;
}
CheckValue<IkReal> x5680=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5678)))),-1);
if(!x5680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5679.value)+(((1.5707963267949)*(x5680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5681=IKsin(j4);
IkReal x5682=IKcos(j4);
IkReal x5683=(gconst118*r01);
IkReal x5684=(sj1*sj2);
IkReal x5685=(gconst119*r20);
IkReal x5686=(gconst119*r10);
IkReal x5687=(gconst119*r00);
IkReal x5688=(gconst118*r21);
IkReal x5689=(gconst118*r11);
IkReal x5690=((1.0)*x5682);
IkReal x5691=((1.0)*cj1*cj2);
IkReal x5692=((1.0)*x5681);
evalcond[0]=(((x5681*x5688))+(((-1.0)*x5685*x5692))+(((-1.0)*r22*x5690)));
evalcond[1]=(((x5681*x5689))+cj0+(((-1.0)*x5686*x5692))+(((-1.0)*r12*x5690)));
evalcond[2]=((((-1.0)*sj0))+((x5681*x5683))+(((-1.0)*r02*x5690))+(((-1.0)*x5687*x5692)));
evalcond[3]=(((cj2*sj1))+((r22*x5681))+((cj1*sj2))+(((-1.0)*x5685*x5690))+((x5682*x5688)));
evalcond[4]=((((-1.0)*cj0*x5691))+((r02*x5681))+(((-1.0)*x5687*x5690))+((cj0*x5684))+((x5682*x5683)));
evalcond[5]=((((-1.0)*x5686*x5690))+(((-1.0)*sj0*x5691))+((sj0*x5684))+((r12*x5681))+((x5682*x5689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5693=((1.0)*gconst119);
CheckValue<IkReal> x5694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5693)))),-1);
if(!x5694.valid){
continue;
}
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5694.value)))+(x5695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5696=IKsin(j4);
IkReal x5697=IKcos(j4);
IkReal x5698=(gconst118*r01);
IkReal x5699=(sj1*sj2);
IkReal x5700=(gconst119*r20);
IkReal x5701=(gconst119*r10);
IkReal x5702=(gconst119*r00);
IkReal x5703=(gconst118*r21);
IkReal x5704=(gconst118*r11);
IkReal x5705=((1.0)*x5697);
IkReal x5706=((1.0)*cj1*cj2);
IkReal x5707=((1.0)*x5696);
evalcond[0]=(((x5696*x5703))+(((-1.0)*x5700*x5707))+(((-1.0)*r22*x5705)));
evalcond[1]=((((-1.0)*r12*x5705))+cj0+((x5696*x5704))+(((-1.0)*x5701*x5707)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5702*x5707))+((x5696*x5698))+(((-1.0)*r02*x5705)));
evalcond[3]=(((cj2*sj1))+((r22*x5696))+(((-1.0)*x5700*x5705))+((cj1*sj2))+((x5697*x5703)));
evalcond[4]=((((-1.0)*x5702*x5705))+((r02*x5696))+(((-1.0)*cj0*x5706))+((cj0*x5699))+((x5697*x5698)));
evalcond[5]=(((x5697*x5704))+(((-1.0)*x5701*x5705))+((sj0*x5699))+(((-1.0)*sj0*x5706))+((r12*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5708=((-1.0)*r10);
IkReal x5710 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5710)==0){
continue;
}
IkReal x5709=pow(x5710,-0.5);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5708),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5711.value));
IkReal gconst121=(r11*x5709);
IkReal gconst122=(x5708*x5709);
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5712.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5713=((-1.0)*r10);
IkReal x5714=x5709;
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5713),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
IkReal x5715=((-1.0)*(x5716.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5715;
IkReal gconst120=x5715;
IkReal gconst121=(r11*x5714);
IkReal gconst122=(x5713*x5714);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5717=((1.0)*sj0);
IkReal x5718=((1.0)*gconst121);
CheckValue<IkReal> x5719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5718)))),-1);
if(!x5719.valid){
continue;
}
CheckValue<IkReal> x5720 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5717)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5717))+(((-1.0)*cj0*r01*x5718))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5719.value)))+(x5720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5721=IKsin(j4);
IkReal x5722=IKcos(j4);
IkReal x5723=(gconst121*r11);
IkReal x5724=(sj1*sj2);
IkReal x5725=(gconst122*r00);
IkReal x5726=(gconst122*r10);
IkReal x5727=(gconst122*r20);
IkReal x5728=((1.0)*x5722);
IkReal x5729=((1.0)*cj1*cj2);
IkReal x5730=((1.0)*x5721);
IkReal x5731=(gconst121*x5721);
IkReal x5732=(gconst121*x5722);
evalcond[0]=(((r21*x5731))+(((-1.0)*x5727*x5730))+(((-1.0)*r22*x5728)));
evalcond[1]=(((x5721*x5723))+cj0+(((-1.0)*r12*x5728))+(((-1.0)*x5726*x5730)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5731))+(((-1.0)*x5725*x5730))+(((-1.0)*r02*x5728)));
evalcond[3]=(((cj2*sj1))+((r21*x5732))+(((-1.0)*x5727*x5728))+((cj1*sj2))+((r22*x5721)));
evalcond[4]=((((-1.0)*x5725*x5728))+((r01*x5732))+(((-1.0)*cj0*x5729))+((cj0*x5724))+((r02*x5721)));
evalcond[5]=(((sj0*x5724))+((r12*x5721))+(((-1.0)*sj0*x5729))+((x5722*x5723))+(((-1.0)*x5726*x5728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5733=((1.0)*gconst122);
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5733))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
CheckValue<IkReal> x5735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5733)))),-1);
if(!x5735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5734.value)+(((1.5707963267949)*(x5735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5736=IKsin(j4);
IkReal x5737=IKcos(j4);
IkReal x5738=(gconst121*r11);
IkReal x5739=(sj1*sj2);
IkReal x5740=(gconst122*r00);
IkReal x5741=(gconst122*r10);
IkReal x5742=(gconst122*r20);
IkReal x5743=((1.0)*x5737);
IkReal x5744=((1.0)*cj1*cj2);
IkReal x5745=((1.0)*x5736);
IkReal x5746=(gconst121*x5736);
IkReal x5747=(gconst121*x5737);
evalcond[0]=((((-1.0)*r22*x5743))+(((-1.0)*x5742*x5745))+((r21*x5746)));
evalcond[1]=(cj0+((x5736*x5738))+(((-1.0)*x5741*x5745))+(((-1.0)*r12*x5743)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5746))+(((-1.0)*r02*x5743))+(((-1.0)*x5740*x5745)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5742*x5743))+((r21*x5747))+((r22*x5736)));
evalcond[4]=(((r01*x5747))+(((-1.0)*cj0*x5744))+((cj0*x5739))+(((-1.0)*x5740*x5743))+((r02*x5736)));
evalcond[5]=(((r12*x5736))+((x5737*x5738))+(((-1.0)*x5741*x5743))+((sj0*x5739))+(((-1.0)*sj0*x5744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5748=((-1.0)*r11);
IkReal x5750 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5750)==0){
continue;
}
IkReal x5749=pow(x5750,-0.5);
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal(x5748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5751.value))));
IkReal gconst124=(x5748*x5749);
IkReal gconst125=((1.0)*r10*x5749);
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5752.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5753=((-1.0)*r11);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(x5753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
IkReal x5754=((1.0)*(x5756.value));
IkReal x5755=x5749;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5754)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5754)));
IkReal gconst124=(x5753*x5755);
IkReal gconst125=((1.0)*r10*x5755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5757=((-1.0)*r11);
CheckValue<IkReal> x5760 = IKatan2WithCheck(IkReal(x5757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5760.valid){
continue;
}
IkReal x5758=((1.0)*(x5760.value));
IkReal x5759=x5749;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5758)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5758)));
IkReal gconst124=(x5757*x5759);
IkReal gconst125=((1.0)*r10*x5759);
IkReal x5761=r12*r12;
IkReal x5762=((1.0)*sj0);
IkReal x5763=(cj0*r02);
IkReal x5764=x5749;
j4eval[0]=((IKabs(((((-1.0)*r12*x5762))+(((-1.0)*x5763)))))+(IKabs(((((-1.0)*x5762*x5764))+((sj0*x5761*x5764))+((r12*x5763*x5764))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5765=((-1.0)*r11);
CheckValue<IkReal> x5768 = IKatan2WithCheck(IkReal(x5765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5768.valid){
continue;
}
IkReal x5766=((1.0)*(x5768.value));
IkReal x5767=x5749;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5766)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5766)));
IkReal gconst124=(x5765*x5767);
IkReal gconst125=((1.0)*r10*x5767);
IkReal x5769=r12*r12;
IkReal x5770=((1.0)+(((-1.0)*x5769)));
IkReal x5771=(cj2*r22*sj1);
IkReal x5772=(cj1*r22*sj2);
CheckValue<IkReal> x5779=IKPowWithIntegerCheck(x5770,-1);
if(!x5779.valid){
continue;
}
IkReal x5773=x5779.value;
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(((-1.0)+x5769),-1);
if(!x5780.valid){
continue;
}
IkReal x5774=x5780.value;
IkReal x5775=((1.0)*x5773);
if((x5770) < -0.00001)
continue;
IkReal x5776=IKsqrt(x5770);
IkReal x5777=((1.0)*r12*x5774*x5776);
IkReal x5778=((((-1.0)*x5775*(r11*r11)*(r21*r21)))+(((-1.0)*x5775*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5773))+(((-1.0)*(r22*r22))));
j4eval[0]=x5778;
j4eval[1]=IKsign(x5778);
j4eval[2]=((IKabs((x5771+x5772)))+(IKabs(((((-1.0)*x5771*x5777))+(((-1.0)*x5772*x5777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5781=(gconst124*r21);
IkReal x5782=(cj1*sj2);
IkReal x5783=(cj2*sj1);
IkReal x5784=(gconst125*r20);
CheckValue<IkReal> x5785=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5781*x5781)))+(((-1.0)*(r22*r22)))+(((2.0)*x5781*x5784))+(((-1.0)*(x5784*x5784))))),-1);
if(!x5785.valid){
continue;
}
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal((((r22*x5782))+((r22*x5783)))),IkReal(((((-1.0)*x5782*x5784))+(((-1.0)*x5783*x5784))+((x5781*x5782))+((x5781*x5783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5785.value)))+(x5786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5787=IKsin(j4);
IkReal x5788=IKcos(j4);
IkReal x5789=(sj1*sj2);
IkReal x5790=(gconst125*r20);
IkReal x5791=(gconst124*r01);
IkReal x5792=(gconst125*r00);
IkReal x5793=(gconst125*r10);
IkReal x5794=((1.0)*x5788);
IkReal x5795=((1.0)*cj1*cj2);
IkReal x5796=((1.0)*x5787);
IkReal x5797=(gconst124*x5787);
IkReal x5798=(gconst124*x5788);
evalcond[0]=(((r21*x5797))+(((-1.0)*r22*x5794))+(((-1.0)*x5790*x5796)));
evalcond[1]=((((-1.0)*x5793*x5796))+cj0+((r11*x5797))+(((-1.0)*r12*x5794)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5792*x5796))+(((-1.0)*r02*x5794))+((x5787*x5791)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5798))+((r22*x5787))+(((-1.0)*x5790*x5794)));
evalcond[4]=(((x5788*x5791))+(((-1.0)*x5792*x5794))+(((-1.0)*cj0*x5795))+((r02*x5787))+((cj0*x5789)));
evalcond[5]=((((-1.0)*x5793*x5794))+((r12*x5787))+((r11*x5798))+((sj0*x5789))+(((-1.0)*sj0*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5799=((1.0)*sj0);
IkReal x5800=((1.0)*cj0);
CheckValue<IkReal> x5801 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5799))+(((-1.0)*r02*x5800)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5800))+(((-1.0)*gconst124*r11*x5799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5801.valid){
continue;
}
CheckValue<IkReal> x5802=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5801.value)+(((1.5707963267949)*(x5802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5803=IKsin(j4);
IkReal x5804=IKcos(j4);
IkReal x5805=(sj1*sj2);
IkReal x5806=(gconst125*r20);
IkReal x5807=(gconst124*r01);
IkReal x5808=(gconst125*r00);
IkReal x5809=(gconst125*r10);
IkReal x5810=((1.0)*x5804);
IkReal x5811=((1.0)*cj1*cj2);
IkReal x5812=((1.0)*x5803);
IkReal x5813=(gconst124*x5803);
IkReal x5814=(gconst124*x5804);
evalcond[0]=(((r21*x5813))+(((-1.0)*x5806*x5812))+(((-1.0)*r22*x5810)));
evalcond[1]=((((-1.0)*r12*x5810))+cj0+((r11*x5813))+(((-1.0)*x5809*x5812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5808*x5812))+(((-1.0)*r02*x5810))+((x5803*x5807)));
evalcond[3]=(((r21*x5814))+((cj2*sj1))+((cj1*sj2))+((r22*x5803))+(((-1.0)*x5806*x5810)));
evalcond[4]=((((-1.0)*cj0*x5811))+((cj0*x5805))+(((-1.0)*x5808*x5810))+((r02*x5803))+((x5804*x5807)));
evalcond[5]=((((-1.0)*sj0*x5811))+((r11*x5814))+(((-1.0)*x5809*x5810))+((r12*x5803))+((sj0*x5805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5815=((1.0)*gconst125);
CheckValue<IkReal> x5816 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5815))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5816.valid){
continue;
}
CheckValue<IkReal> x5817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5815)))),-1);
if(!x5817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5816.value)+(((1.5707963267949)*(x5817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5818=IKsin(j4);
IkReal x5819=IKcos(j4);
IkReal x5820=(sj1*sj2);
IkReal x5821=(gconst125*r20);
IkReal x5822=(gconst124*r01);
IkReal x5823=(gconst125*r00);
IkReal x5824=(gconst125*r10);
IkReal x5825=((1.0)*x5819);
IkReal x5826=((1.0)*cj1*cj2);
IkReal x5827=((1.0)*x5818);
IkReal x5828=(gconst124*x5818);
IkReal x5829=(gconst124*x5819);
evalcond[0]=((((-1.0)*r22*x5825))+((r21*x5828))+(((-1.0)*x5821*x5827)));
evalcond[1]=(cj0+((r11*x5828))+(((-1.0)*x5824*x5827))+(((-1.0)*r12*x5825)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5825))+(((-1.0)*x5823*x5827))+((x5818*x5822)));
evalcond[3]=(((r21*x5829))+((cj2*sj1))+((r22*x5818))+(((-1.0)*x5821*x5825))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5823*x5825))+((r02*x5818))+((cj0*x5820))+(((-1.0)*cj0*x5826))+((x5819*x5822)));
evalcond[5]=(((r11*x5829))+((sj0*x5820))+((r12*x5818))+(((-1.0)*sj0*x5826))+(((-1.0)*x5824*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5830=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5830;
j4eval[1]=IKsign(x5830);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5831=((1.0)*cj5);
IkReal x5832=((((-1.0)*r01*x5831))+(((-1.0)*r00*sj5)));
j4eval[0]=x5832;
j4eval[1]=((IKabs(((((-1.0)*r20*x5831))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5833=cj5*cj5;
IkReal x5834=r11*r11;
IkReal x5835=(cj5*r10);
IkReal x5836=(r11*sj5);
IkReal x5837=((((2.0)*x5835*x5836))+(((-1.0)*x5833*(r10*r10)))+((x5833*x5834))+(((-1.0)*(r12*r12)))+(((-1.0)*x5834)));
j4eval[0]=x5837;
j4eval[1]=IKsign(x5837);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5835))+x5836))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5838=cj5*cj5;
IkReal x5839=r11*r11;
IkReal x5840=(cj5*r10);
IkReal x5841=(r11*sj5);
CheckValue<IkReal> x5842=IKPowWithIntegerCheck(IKsign(((((2.0)*x5840*x5841))+(((-1.0)*(r12*r12)))+(((-1.0)*x5839))+((x5838*x5839))+(((-1.0)*x5838*(r10*r10))))),-1);
if(!x5842.valid){
continue;
}
CheckValue<IkReal> x5843 = IKatan2WithCheck(IkReal(((((-1.0)*x5840))+x5841)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5842.value)))+(x5843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5844=IKcos(j4);
IkReal x5845=IKsin(j4);
IkReal x5846=(cj5*r00);
IkReal x5847=(cj5*r10);
IkReal x5848=(r21*sj5);
IkReal x5849=(cj5*r20);
IkReal x5850=((1.0)*x5844);
IkReal x5851=((1.0)*x5845);
IkReal x5852=(sj5*x5845);
IkReal x5853=(sj5*x5844);
evalcond[0]=((((-1.0)*x5847*x5850))+((r11*x5853))+((r12*x5845)));
evalcond[1]=(((x5845*x5848))+(((-1.0)*x5849*x5851))+(((-1.0)*r22*x5850)));
evalcond[2]=(((r01*x5852))+(((-1.0)*x5846*x5851))+(((-1.0)*r02*x5850)));
evalcond[3]=((1.0)+(((-1.0)*x5847*x5851))+((r11*x5852))+(((-1.0)*r12*x5850)));
evalcond[4]=(((cj2*sj1))+((x5844*x5848))+(((-1.0)*x5849*x5850))+((cj1*sj2))+((r22*x5845)));
evalcond[5]=(((r01*x5853))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5846*x5850))+((r02*x5845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5854=((1.0)*cj5);
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5854))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5854)))),-1);
if(!x5856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5855.value)+(((1.5707963267949)*(x5856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5857=IKcos(j4);
IkReal x5858=IKsin(j4);
IkReal x5859=(cj5*r00);
IkReal x5860=(cj5*r10);
IkReal x5861=(r21*sj5);
IkReal x5862=(cj5*r20);
IkReal x5863=((1.0)*x5857);
IkReal x5864=((1.0)*x5858);
IkReal x5865=(sj5*x5858);
IkReal x5866=(sj5*x5857);
evalcond[0]=(((r12*x5858))+((r11*x5866))+(((-1.0)*x5860*x5863)));
evalcond[1]=((((-1.0)*r22*x5863))+(((-1.0)*x5862*x5864))+((x5858*x5861)));
evalcond[2]=((((-1.0)*x5859*x5864))+(((-1.0)*r02*x5863))+((r01*x5865)));
evalcond[3]=((1.0)+((r11*x5865))+(((-1.0)*x5860*x5864))+(((-1.0)*r12*x5863)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5862*x5863))+((r22*x5858))+((x5857*x5861)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5859*x5863))+((r02*x5858))+((r01*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5867=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5867.valid){
continue;
}
CheckValue<IkReal> x5868 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5867.value)))+(x5868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5869=IKcos(j4);
IkReal x5870=IKsin(j4);
IkReal x5871=(cj5*r00);
IkReal x5872=(cj5*r10);
IkReal x5873=(r21*sj5);
IkReal x5874=(cj5*r20);
IkReal x5875=((1.0)*x5869);
IkReal x5876=((1.0)*x5870);
IkReal x5877=(sj5*x5870);
IkReal x5878=(sj5*x5869);
evalcond[0]=((((-1.0)*x5872*x5875))+((r12*x5870))+((r11*x5878)));
evalcond[1]=((((-1.0)*r22*x5875))+(((-1.0)*x5874*x5876))+((x5870*x5873)));
evalcond[2]=((((-1.0)*r02*x5875))+(((-1.0)*x5871*x5876))+((r01*x5877)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5875))+(((-1.0)*x5872*x5876))+((r11*x5877)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5870))+(((-1.0)*x5874*x5875))+((x5869*x5873)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5870))+(((-1.0)*x5871*x5875))+((r01*x5878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5879=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5879;
j4eval[1]=IKsign(x5879);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5880=((1.0)*cj5);
IkReal x5881=((((-1.0)*r21*x5880))+(((-1.0)*r20*sj5)));
j4eval[0]=x5881;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5880))))));
j4eval[2]=IKsign(x5881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5882=cj5*cj5;
IkReal x5883=r11*r11;
IkReal x5884=(r11*sj5);
IkReal x5885=(cj5*r10);
IkReal x5886=((r12*r12)+(((-1.0)*x5882*x5883))+((x5882*(r10*r10)))+x5883+(((-2.0)*x5884*x5885)));
j4eval[0]=x5886;
j4eval[1]=IKsign(x5886);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5885))+x5884))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5887=cj5*cj5;
IkReal x5888=r11*r11;
IkReal x5889=(cj5*r10);
IkReal x5890=(r11*sj5);
CheckValue<IkReal> x5891=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5889*x5890))+((x5887*(r10*r10)))+(((-1.0)*x5887*x5888))+x5888)),-1);
if(!x5891.valid){
continue;
}
CheckValue<IkReal> x5892 = IKatan2WithCheck(IkReal(((((-1.0)*x5889))+x5890)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5891.value)))+(x5892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5893=IKcos(j4);
IkReal x5894=IKsin(j4);
IkReal x5895=(cj5*r00);
IkReal x5896=(cj5*r10);
IkReal x5897=(r21*sj5);
IkReal x5898=(cj5*r20);
IkReal x5899=((1.0)*x5893);
IkReal x5900=((1.0)*x5894);
IkReal x5901=(sj5*x5894);
IkReal x5902=(sj5*x5893);
evalcond[0]=((((-1.0)*x5896*x5899))+((r12*x5894))+((r11*x5902)));
evalcond[1]=((((-1.0)*r22*x5899))+(((-1.0)*x5898*x5900))+((x5894*x5897)));
evalcond[2]=((((-1.0)*x5895*x5900))+(((-1.0)*r02*x5899))+((r01*x5901)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5899))+(((-1.0)*x5896*x5900))+((r11*x5901)));
evalcond[4]=(((r22*x5894))+((cj2*sj1))+(((-1.0)*x5898*x5899))+((cj1*sj2))+((x5893*x5897)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5894))+(((-1.0)*x5895*x5899))+((cj1*cj2))+((r01*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5903=((1.0)*cj5);
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5903))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
CheckValue<IkReal> x5905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5903))+(((-1.0)*r20*sj5)))),-1);
if(!x5905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5904.value)+(((1.5707963267949)*(x5905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5906=IKcos(j4);
IkReal x5907=IKsin(j4);
IkReal x5908=(cj5*r00);
IkReal x5909=(cj5*r10);
IkReal x5910=(r21*sj5);
IkReal x5911=(cj5*r20);
IkReal x5912=((1.0)*x5906);
IkReal x5913=((1.0)*x5907);
IkReal x5914=(sj5*x5907);
IkReal x5915=(sj5*x5906);
evalcond[0]=(((r12*x5907))+(((-1.0)*x5909*x5912))+((r11*x5915)));
evalcond[1]=((((-1.0)*r22*x5912))+((x5907*x5910))+(((-1.0)*x5911*x5913)));
evalcond[2]=(((r01*x5914))+(((-1.0)*x5908*x5913))+(((-1.0)*r02*x5912)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5912))+(((-1.0)*x5909*x5913))+((r11*x5914)));
evalcond[4]=(((cj2*sj1))+((r22*x5907))+((cj1*sj2))+(((-1.0)*x5911*x5912))+((x5906*x5910)));
evalcond[5]=(((r01*x5915))+(((-1.0)*sj1*sj2))+((r02*x5907))+(((-1.0)*x5908*x5912))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5916 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5916.valid){
continue;
}
CheckValue<IkReal> x5917=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5916.value)+(((1.5707963267949)*(x5917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5918=IKcos(j4);
IkReal x5919=IKsin(j4);
IkReal x5920=(cj5*r00);
IkReal x5921=(cj5*r10);
IkReal x5922=(r21*sj5);
IkReal x5923=(cj5*r20);
IkReal x5924=((1.0)*x5918);
IkReal x5925=((1.0)*x5919);
IkReal x5926=(sj5*x5919);
IkReal x5927=(sj5*x5918);
evalcond[0]=(((r12*x5919))+((r11*x5927))+(((-1.0)*x5921*x5924)));
evalcond[1]=((((-1.0)*r22*x5924))+((x5919*x5922))+(((-1.0)*x5923*x5925)));
evalcond[2]=((((-1.0)*r02*x5924))+(((-1.0)*x5920*x5925))+((r01*x5926)));
evalcond[3]=((-1.0)+((r11*x5926))+(((-1.0)*r12*x5924))+(((-1.0)*x5921*x5925)));
evalcond[4]=(((cj2*sj1))+((r22*x5919))+((cj1*sj2))+((x5918*x5922))+(((-1.0)*x5923*x5924)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5920*x5924))+((r02*x5919))+((cj1*cj2))+((r01*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5928=((-1.0)*r00);
IkReal x5930 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5930)==0){
continue;
}
IkReal x5929=pow(x5930,-0.5);
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5928),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5931.value));
IkReal gconst127=(r01*x5929);
IkReal gconst128=(x5928*x5929);
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5932.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5933=((-1.0)*r00);
IkReal x5934=x5929;
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5933),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
IkReal x5935=((-1.0)*(x5936.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5935;
IkReal gconst126=x5935;
IkReal gconst127=(r01*x5934);
IkReal gconst128=(x5933*x5934);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5937=((1.0)*sj0);
IkReal x5938=((1.0)*gconst127);
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5937)))),IkReal(((((-1.0)*cj0*r01*x5938))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
CheckValue<IkReal> x5940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5938)))),-1);
if(!x5940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5939.value)+(((1.5707963267949)*(x5940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5941=IKsin(j4);
IkReal x5942=IKcos(j4);
IkReal x5943=(gconst127*r01);
IkReal x5944=(sj1*sj2);
IkReal x5945=(gconst128*r10);
IkReal x5946=(gconst128*r00);
IkReal x5947=(gconst128*r20);
IkReal x5948=((1.0)*x5942);
IkReal x5949=((1.0)*cj1*cj2);
IkReal x5950=((1.0)*x5941);
IkReal x5951=(gconst127*x5942);
IkReal x5952=(gconst127*x5941);
evalcond[0]=((((-1.0)*r22*x5948))+((r21*x5952))+(((-1.0)*x5947*x5950)));
evalcond[1]=(cj0+((r11*x5952))+(((-1.0)*r12*x5948))+(((-1.0)*x5945*x5950)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5946*x5950))+((x5941*x5943))+(((-1.0)*r02*x5948)));
evalcond[3]=(((cj2*sj1))+((r21*x5951))+((cj1*sj2))+((r22*x5941))+(((-1.0)*x5947*x5948)));
evalcond[4]=(((cj0*x5944))+((x5942*x5943))+(((-1.0)*cj0*x5949))+(((-1.0)*x5946*x5948))+((r02*x5941)));
evalcond[5]=((((-1.0)*x5945*x5948))+((r11*x5951))+(((-1.0)*sj0*x5949))+((r12*x5941))+((sj0*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5953=((1.0)*gconst128);
CheckValue<IkReal> x5954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5953))+(((-1.0)*gconst127*r10)))),-1);
if(!x5954.valid){
continue;
}
CheckValue<IkReal> x5955 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5954.value)))+(x5955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5956=IKsin(j4);
IkReal x5957=IKcos(j4);
IkReal x5958=(gconst127*r01);
IkReal x5959=(sj1*sj2);
IkReal x5960=(gconst128*r10);
IkReal x5961=(gconst128*r00);
IkReal x5962=(gconst128*r20);
IkReal x5963=((1.0)*x5957);
IkReal x5964=((1.0)*cj1*cj2);
IkReal x5965=((1.0)*x5956);
IkReal x5966=(gconst127*x5957);
IkReal x5967=(gconst127*x5956);
evalcond[0]=((((-1.0)*r22*x5963))+((r21*x5967))+(((-1.0)*x5962*x5965)));
evalcond[1]=(cj0+(((-1.0)*x5960*x5965))+(((-1.0)*r12*x5963))+((r11*x5967)));
evalcond[2]=((((-1.0)*sj0))+((x5956*x5958))+(((-1.0)*x5961*x5965))+(((-1.0)*r02*x5963)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5966))+((r22*x5956))+(((-1.0)*x5962*x5963)));
evalcond[4]=(((x5957*x5958))+((r02*x5956))+(((-1.0)*cj0*x5964))+(((-1.0)*x5961*x5963))+((cj0*x5959)));
evalcond[5]=(((sj0*x5959))+(((-1.0)*x5960*x5963))+(((-1.0)*sj0*x5964))+((r12*x5956))+((r11*x5966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5968=((-1.0)*r01);
IkReal x5970 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5970)==0){
continue;
}
IkReal x5969=pow(x5970,-0.5);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(x5968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5971.value))));
IkReal gconst130=(x5968*x5969);
IkReal gconst131=((1.0)*r00*x5969);
CheckValue<IkReal> x5972 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5972.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5972.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5973=((-1.0)*r01);
CheckValue<IkReal> x5976 = IKatan2WithCheck(IkReal(x5973),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5976.valid){
continue;
}
IkReal x5974=((1.0)*(x5976.value));
IkReal x5975=x5969;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5974)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5974)));
IkReal gconst130=(x5973*x5975);
IkReal gconst131=((1.0)*r00*x5975);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5977=((-1.0)*r01);
CheckValue<IkReal> x5980 = IKatan2WithCheck(IkReal(x5977),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5980.valid){
continue;
}
IkReal x5978=((1.0)*(x5980.value));
IkReal x5979=x5969;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5978)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5978)));
IkReal gconst130=(x5977*x5979);
IkReal gconst131=((1.0)*r00*x5979);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5981=((-1.0)*r01);
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal(x5981),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
IkReal x5982=((1.0)*(x5984.value));
IkReal x5983=x5969;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5982)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5982)));
IkReal gconst130=(x5981*x5983);
IkReal gconst131=((1.0)*r00*x5983);
IkReal x5985=r02*r02;
IkReal x5986=(r12*sj0);
IkReal x5987=((1.0)*cj0);
IkReal x5988=x5969;
j4eval[0]=((IKabs(((((-1.0)*x5987*x5988))+((cj0*x5985*x5988))+((r02*x5986*x5988)))))+(IKabs(((((-1.0)*x5986))+(((-1.0)*r02*x5987))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5989=((1.0)*sj0);
IkReal x5990=((1.0)*gconst130);
CheckValue<IkReal> x5991 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5989))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5989))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x5990))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5991.valid){
continue;
}
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5990))+(((-1.0)*gconst131*r21)))),-1);
if(!x5992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5991.value)+(((1.5707963267949)*(x5992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5993=IKsin(j4);
IkReal x5994=IKcos(j4);
IkReal x5995=(gconst131*r10);
IkReal x5996=(sj1*sj2);
IkReal x5997=(gconst131*r20);
IkReal x5998=(gconst131*r00);
IkReal x5999=((1.0)*x5994);
IkReal x6000=((1.0)*cj1*cj2);
IkReal x6001=(gconst130*x5993);
IkReal x6002=((1.0)*x5993);
IkReal x6003=(gconst130*x5994);
evalcond[0]=(((r21*x6001))+(((-1.0)*x5997*x6002))+(((-1.0)*r22*x5999)));
evalcond[1]=((((-1.0)*r12*x5999))+cj0+((r11*x6001))+(((-1.0)*x5995*x6002)));
evalcond[2]=((((-1.0)*x5998*x6002))+(((-1.0)*sj0))+(((-1.0)*r02*x5999))+((r01*x6001)));
evalcond[3]=(((r21*x6003))+((cj2*sj1))+(((-1.0)*x5997*x5999))+((cj1*sj2))+((r22*x5993)));
evalcond[4]=(((r02*x5993))+(((-1.0)*cj0*x6000))+(((-1.0)*x5998*x5999))+((cj0*x5996))+((r01*x6003)));
evalcond[5]=(((r12*x5993))+(((-1.0)*sj0*x6000))+((sj0*x5996))+((r11*x6003))+(((-1.0)*x5995*x5999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6004=((1.0)*gconst131);
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6004))+(((-1.0)*gconst130*r10)))),-1);
if(!x6005.valid){
continue;
}
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6005.value)))+(x6006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6007=IKsin(j4);
IkReal x6008=IKcos(j4);
IkReal x6009=(gconst131*r10);
IkReal x6010=(sj1*sj2);
IkReal x6011=(gconst131*r20);
IkReal x6012=(gconst131*r00);
IkReal x6013=((1.0)*x6008);
IkReal x6014=((1.0)*cj1*cj2);
IkReal x6015=(gconst130*x6007);
IkReal x6016=((1.0)*x6007);
IkReal x6017=(gconst130*x6008);
evalcond[0]=(((r21*x6015))+(((-1.0)*x6011*x6016))+(((-1.0)*r22*x6013)));
evalcond[1]=(((r11*x6015))+cj0+(((-1.0)*r12*x6013))+(((-1.0)*x6009*x6016)));
evalcond[2]=(((r01*x6015))+(((-1.0)*sj0))+(((-1.0)*r02*x6013))+(((-1.0)*x6012*x6016)));
evalcond[3]=(((cj2*sj1))+((r22*x6007))+((r21*x6017))+((cj1*sj2))+(((-1.0)*x6011*x6013)));
evalcond[4]=(((r01*x6017))+((cj0*x6010))+((r02*x6007))+(((-1.0)*x6012*x6013))+(((-1.0)*cj0*x6014)));
evalcond[5]=(((r12*x6007))+((r11*x6017))+(((-1.0)*sj0*x6014))+(((-1.0)*x6009*x6013))+((sj0*x6010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6018=((1.0)*gconst131);
CheckValue<IkReal> x6019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6018))+(((-1.0)*gconst130*r00)))),-1);
if(!x6019.valid){
continue;
}
CheckValue<IkReal> x6020 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6019.value)))+(x6020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6021=IKsin(j4);
IkReal x6022=IKcos(j4);
IkReal x6023=(gconst131*r10);
IkReal x6024=(sj1*sj2);
IkReal x6025=(gconst131*r20);
IkReal x6026=(gconst131*r00);
IkReal x6027=((1.0)*x6022);
IkReal x6028=((1.0)*cj1*cj2);
IkReal x6029=(gconst130*x6021);
IkReal x6030=((1.0)*x6021);
IkReal x6031=(gconst130*x6022);
evalcond[0]=((((-1.0)*r22*x6027))+((r21*x6029))+(((-1.0)*x6025*x6030)));
evalcond[1]=(cj0+((r11*x6029))+(((-1.0)*x6023*x6030))+(((-1.0)*r12*x6027)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6029))+(((-1.0)*r02*x6027))+(((-1.0)*x6026*x6030)));
evalcond[3]=(((cj2*sj1))+((r21*x6031))+(((-1.0)*x6025*x6027))+((cj1*sj2))+((r22*x6021)));
evalcond[4]=((((-1.0)*x6026*x6027))+((r02*x6021))+(((-1.0)*cj0*x6028))+((cj0*x6024))+((r01*x6031)));
evalcond[5]=(((sj0*x6024))+(((-1.0)*x6023*x6027))+((r11*x6031))+(((-1.0)*sj0*x6028))+((r12*x6021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6032=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6032;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6033=((1.0)*cj5);
IkReal x6034=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6033)));
j4eval[0]=x6034;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6033)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6035=cj5*cj5;
IkReal x6036=r01*r01;
IkReal x6037=(cj5*r00);
IkReal x6038=(r01*sj5);
IkReal x6039=((((-1.0)*x6035*x6036))+x6036+((x6035*(r00*r00)))+(r02*r02)+(((-2.0)*x6037*x6038)));
j4eval[0]=x6039;
j4eval[1]=IKsign(x6039);
j4eval[2]=((IKabs(r02))+(IKabs((x6038+(((-1.0)*x6037))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6040=cj5*cj5;
IkReal x6041=r01*r01;
IkReal x6042=(r01*sj5);
IkReal x6043=(cj5*r00);
CheckValue<IkReal> x6044 = IKatan2WithCheck(IkReal((x6042+(((-1.0)*x6043)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6044.valid){
continue;
}
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign((x6041+(((-2.0)*x6042*x6043))+(((-1.0)*x6040*x6041))+(r02*r02)+((x6040*(r00*r00))))),-1);
if(!x6045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6044.value)+(((1.5707963267949)*(x6045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6046=IKcos(j4);
IkReal x6047=IKsin(j4);
IkReal x6048=(cj5*r00);
IkReal x6049=(cj5*r10);
IkReal x6050=(r21*sj5);
IkReal x6051=(cj5*r20);
IkReal x6052=((1.0)*x6046);
IkReal x6053=((1.0)*x6047);
IkReal x6054=(sj5*x6047);
IkReal x6055=(sj5*x6046);
evalcond[0]=(((r01*x6055))+(((-1.0)*x6048*x6052))+((r02*x6047)));
evalcond[1]=((((-1.0)*x6051*x6053))+((x6047*x6050))+(((-1.0)*r22*x6052)));
evalcond[2]=((((-1.0)*x6049*x6053))+(((-1.0)*r12*x6052))+((r11*x6054)));
evalcond[3]=((-1.0)+((r01*x6054))+(((-1.0)*x6048*x6053))+(((-1.0)*r02*x6052)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6051*x6052))+((cj1*sj2))+((r22*x6047))+((x6046*x6050)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6049*x6052))+((r12*x6047))+((r11*x6055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6056=((1.0)*cj5);
CheckValue<IkReal> x6057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6057.valid){
continue;
}
CheckValue<IkReal> x6058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6056)))),-1);
if(!x6058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6057.value)+(((1.5707963267949)*(x6058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6059=IKcos(j4);
IkReal x6060=IKsin(j4);
IkReal x6061=(cj5*r00);
IkReal x6062=(cj5*r10);
IkReal x6063=(r21*sj5);
IkReal x6064=(cj5*r20);
IkReal x6065=((1.0)*x6059);
IkReal x6066=((1.0)*x6060);
IkReal x6067=(sj5*x6060);
IkReal x6068=(sj5*x6059);
evalcond[0]=(((r01*x6068))+(((-1.0)*x6061*x6065))+((r02*x6060)));
evalcond[1]=((((-1.0)*x6064*x6066))+(((-1.0)*r22*x6065))+((x6060*x6063)));
evalcond[2]=(((r11*x6067))+(((-1.0)*r12*x6065))+(((-1.0)*x6062*x6066)));
evalcond[3]=((-1.0)+((r01*x6067))+(((-1.0)*x6061*x6066))+(((-1.0)*r02*x6065)));
evalcond[4]=((((-1.0)*x6064*x6065))+((cj2*sj1))+((cj1*sj2))+((x6059*x6063))+((r22*x6060)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6068))+((r12*x6060))+(((-1.0)*x6062*x6065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6069.valid){
continue;
}
CheckValue<IkReal> x6070 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6069.value)))+(x6070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6071=IKcos(j4);
IkReal x6072=IKsin(j4);
IkReal x6073=(cj5*r00);
IkReal x6074=(cj5*r10);
IkReal x6075=(r21*sj5);
IkReal x6076=(cj5*r20);
IkReal x6077=((1.0)*x6071);
IkReal x6078=((1.0)*x6072);
IkReal x6079=(sj5*x6072);
IkReal x6080=(sj5*x6071);
evalcond[0]=(((r01*x6080))+(((-1.0)*x6073*x6077))+((r02*x6072)));
evalcond[1]=((((-1.0)*x6076*x6078))+(((-1.0)*r22*x6077))+((x6072*x6075)));
evalcond[2]=(((r11*x6079))+(((-1.0)*x6074*x6078))+(((-1.0)*r12*x6077)));
evalcond[3]=((-1.0)+((r01*x6079))+(((-1.0)*r02*x6077))+(((-1.0)*x6073*x6078)));
evalcond[4]=(((cj2*sj1))+((x6071*x6075))+((cj1*sj2))+((r22*x6072))+(((-1.0)*x6076*x6077)));
evalcond[5]=((((-1.0)*x6074*x6077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6080))+((r12*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6081=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6081;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6082=((1.0)*cj5);
IkReal x6083=((((-1.0)*r21*x6082))+(((-1.0)*r20*sj5)));
j4eval[0]=x6083;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6082)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6084=(r01*sj5);
IkReal x6085=(cj1*sj2);
IkReal x6086=(cj2*sj1);
IkReal x6087=((1.0)*r02);
IkReal x6088=((1.0)*cj5*r00);
IkReal x6089=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6089;
j4eval[1]=((IKabs(((((-1.0)*x6085*x6087))+(((-1.0)*x6086*x6087)))))+(IKabs(((((-1.0)*x6085*x6088))+((x6084*x6085))+((x6084*x6086))+(((-1.0)*x6086*x6088))))));
j4eval[2]=IKsign(x6089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6090=(r01*sj5);
IkReal x6091=(cj1*sj2);
IkReal x6092=(cj2*sj1);
IkReal x6093=((1.0)*r02);
IkReal x6094=((1.0)*cj5*r00);
CheckValue<IkReal> x6095 = IKatan2WithCheck(IkReal((((x6090*x6092))+((x6090*x6091))+(((-1.0)*x6091*x6094))+(((-1.0)*x6092*x6094)))),IkReal(((((-1.0)*x6091*x6093))+(((-1.0)*x6092*x6093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6095.valid){
continue;
}
CheckValue<IkReal> x6096=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6095.value)+(((1.5707963267949)*(x6096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6097=IKcos(j4);
IkReal x6098=IKsin(j4);
IkReal x6099=(cj5*r00);
IkReal x6100=(cj5*r10);
IkReal x6101=(r21*sj5);
IkReal x6102=(cj5*r20);
IkReal x6103=((1.0)*x6097);
IkReal x6104=((1.0)*x6098);
IkReal x6105=(sj5*x6098);
IkReal x6106=(sj5*x6097);
evalcond[0]=((((-1.0)*x6099*x6103))+((r01*x6106))+((r02*x6098)));
evalcond[1]=((((-1.0)*x6102*x6104))+(((-1.0)*r22*x6103))+((x6098*x6101)));
evalcond[2]=(((r11*x6105))+(((-1.0)*r12*x6103))+(((-1.0)*x6100*x6104)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6103))+(((-1.0)*x6099*x6104))+((r01*x6105)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6102*x6103))+((cj1*sj2))+((r22*x6098))+((x6097*x6101)));
evalcond[5]=(((r11*x6106))+(((-1.0)*sj1*sj2))+((r12*x6098))+((cj1*cj2))+(((-1.0)*x6100*x6103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6107=((1.0)*cj5);
CheckValue<IkReal> x6108 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6108.valid){
continue;
}
CheckValue<IkReal> x6109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6107))+(((-1.0)*r20*sj5)))),-1);
if(!x6109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6108.value)+(((1.5707963267949)*(x6109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6110=IKcos(j4);
IkReal x6111=IKsin(j4);
IkReal x6112=(cj5*r00);
IkReal x6113=(cj5*r10);
IkReal x6114=(r21*sj5);
IkReal x6115=(cj5*r20);
IkReal x6116=((1.0)*x6110);
IkReal x6117=((1.0)*x6111);
IkReal x6118=(sj5*x6111);
IkReal x6119=(sj5*x6110);
evalcond[0]=(((r02*x6111))+(((-1.0)*x6112*x6116))+((r01*x6119)));
evalcond[1]=((((-1.0)*r22*x6116))+(((-1.0)*x6115*x6117))+((x6111*x6114)));
evalcond[2]=((((-1.0)*r12*x6116))+(((-1.0)*x6113*x6117))+((r11*x6118)));
evalcond[3]=((1.0)+(((-1.0)*x6112*x6117))+(((-1.0)*r02*x6116))+((r01*x6118)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6115*x6116))+((x6110*x6114))+((cj1*sj2))+((r22*x6111)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6111))+(((-1.0)*x6113*x6116))+((r11*x6119))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6120.value)+(((1.5707963267949)*(x6121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6122=IKcos(j4);
IkReal x6123=IKsin(j4);
IkReal x6124=(cj5*r00);
IkReal x6125=(cj5*r10);
IkReal x6126=(r21*sj5);
IkReal x6127=(cj5*r20);
IkReal x6128=((1.0)*x6122);
IkReal x6129=((1.0)*x6123);
IkReal x6130=(sj5*x6123);
IkReal x6131=(sj5*x6122);
evalcond[0]=((((-1.0)*x6124*x6128))+((r02*x6123))+((r01*x6131)));
evalcond[1]=((((-1.0)*r22*x6128))+((x6123*x6126))+(((-1.0)*x6127*x6129)));
evalcond[2]=((((-1.0)*x6125*x6129))+((r11*x6130))+(((-1.0)*r12*x6128)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6128))+(((-1.0)*x6124*x6129))+((r01*x6130)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6122*x6126))+(((-1.0)*x6127*x6128))+((r22*x6123)));
evalcond[5]=((((-1.0)*x6125*x6128))+((r11*x6131))+((r12*x6123))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6132=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6132);
rxp1_1=(px*r21);
rxp1_2=(r11*x6132);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6133=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6133);
rxp1_1=(px*r21);
rxp1_2=(r11*x6133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6134=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6134);
rxp1_1=(px*r21);
rxp1_2=(r11*x6134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6137.valid){
continue;
}
IkReal x6135=x6137.value;
IkReal x6136=(sj0*x6135);
cj4array[0]=(((cj1*cj2*x6136))+(((-1.0)*sj1*sj2*x6136)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(r21*sj5);
IkReal x6141=((1.0)*cj5*r20);
evalcond[0]=(r02*x6138);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6139)));
evalcond[2]=((((-1.0)*x6138*x6141))+((x6138*x6140)));
evalcond[3]=(((r11*sj5*x6138))+(((-1.0)*cj5*r10*x6138)));
evalcond[4]=(((x6139*x6140))+(((-1.0)*x6139*x6141))+((cj2*sj1))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6144=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6144.valid){
continue;
}
IkReal x6142=x6144.value;
IkReal x6143=((1.0)*x6142);
cj4array[0]=((((-1.0)*cj2*sj1*x6143))+(((-1.0)*cj1*sj2*x6143)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6145=IKsin(j4);
IkReal x6146=IKcos(j4);
IkReal x6147=((1.0)*sj0);
IkReal x6148=((1.0)*cj5);
IkReal x6149=(sj5*x6145);
evalcond[0]=(r02*x6145);
evalcond[1]=((((-1.0)*x6147))+(((-1.0)*r02*x6146)));
evalcond[2]=((((-1.0)*r20*x6145*x6148))+((r21*x6149)));
evalcond[3]=(((r11*x6149))+(((-1.0)*r10*x6145*x6148)));
evalcond[4]=(((r11*sj5*x6146))+(((-1.0)*r10*x6146*x6148))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6150=IKPowWithIntegerCheck(r02,-1);
if(!x6150.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6150.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6151=IKsin(j4);
IkReal x6152=IKcos(j4);
IkReal x6153=(r21*sj5);
IkReal x6154=((1.0)*cj5);
IkReal x6155=(r11*sj5);
evalcond[0]=(r02*x6151);
evalcond[1]=((((-1.0)*r20*x6151*x6154))+((x6151*x6153)));
evalcond[2]=(((x6151*x6155))+(((-1.0)*r10*x6151*x6154)));
evalcond[3]=(((cj2*sj1))+((x6152*x6153))+((cj1*sj2))+(((-1.0)*r20*x6152*x6154)));
evalcond[4]=(((x6152*x6155))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6152*x6154))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6156=((1.0)*sj0);
IkReal x6157=((1.0)*cj0);
CheckValue<IkReal> x6158 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6157))+(((-1.0)*r12*x6156)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6157))+(((-1.0)*r11*sj5*x6156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6158.valid){
continue;
}
CheckValue<IkReal> x6159=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6158.value)+(((1.5707963267949)*(x6159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6160=IKsin(j4);
IkReal x6161=IKcos(j4);
IkReal x6162=(cj5*r00);
IkReal x6163=(cj5*r10);
IkReal x6164=(r21*sj5);
IkReal x6165=(sj1*sj2);
IkReal x6166=(cj5*r20);
IkReal x6167=((1.0)*x6161);
IkReal x6168=((1.0)*cj1*cj2);
IkReal x6169=((1.0)*x6160);
IkReal x6170=(sj5*x6160);
IkReal x6171=(sj5*x6161);
evalcond[0]=((((-1.0)*x6166*x6169))+((x6160*x6164))+(((-1.0)*r22*x6167)));
evalcond[1]=(cj0+((r11*x6170))+(((-1.0)*r12*x6167))+(((-1.0)*x6163*x6169)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6170))+(((-1.0)*r02*x6167))+(((-1.0)*x6162*x6169)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6166*x6167))+((cj1*sj2))+((x6161*x6164))+((r22*x6160)));
evalcond[4]=((((-1.0)*cj0*x6168))+((r02*x6160))+((r01*x6171))+((cj0*x6165))+(((-1.0)*x6162*x6167)));
evalcond[5]=((((-1.0)*sj0*x6168))+((sj0*x6165))+((r12*x6160))+((r11*x6171))+(((-1.0)*x6163*x6167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6172=((1.0)*cj5);
CheckValue<IkReal> x6173 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6172))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6173.valid){
continue;
}
CheckValue<IkReal> x6174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6172)))),-1);
if(!x6174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6173.value)+(((1.5707963267949)*(x6174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6175=IKsin(j4);
IkReal x6176=IKcos(j4);
IkReal x6177=(cj5*r00);
IkReal x6178=(cj5*r10);
IkReal x6179=(r21*sj5);
IkReal x6180=(sj1*sj2);
IkReal x6181=(cj5*r20);
IkReal x6182=((1.0)*x6176);
IkReal x6183=((1.0)*cj1*cj2);
IkReal x6184=((1.0)*x6175);
IkReal x6185=(sj5*x6175);
IkReal x6186=(sj5*x6176);
evalcond[0]=((((-1.0)*r22*x6182))+((x6175*x6179))+(((-1.0)*x6181*x6184)));
evalcond[1]=(cj0+(((-1.0)*x6178*x6184))+(((-1.0)*r12*x6182))+((r11*x6185)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6182))+((r01*x6185))+(((-1.0)*x6177*x6184)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6176*x6179))+((r22*x6175))+(((-1.0)*x6181*x6182)));
evalcond[4]=(((r01*x6186))+((r02*x6175))+((cj0*x6180))+(((-1.0)*x6177*x6182))+(((-1.0)*cj0*x6183)));
evalcond[5]=(((r12*x6175))+(((-1.0)*x6178*x6182))+((r11*x6186))+((sj0*x6180))+(((-1.0)*sj0*x6183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6187=((1.0)*cj5);
CheckValue<IkReal> x6188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6187))+(((-1.0)*r00*sj5)))),-1);
if(!x6188.valid){
continue;
}
CheckValue<IkReal> x6189 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6188.value)))+(x6189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6190=IKsin(j4);
IkReal x6191=IKcos(j4);
IkReal x6192=(cj5*r00);
IkReal x6193=(cj5*r10);
IkReal x6194=(r21*sj5);
IkReal x6195=(sj1*sj2);
IkReal x6196=(cj5*r20);
IkReal x6197=((1.0)*x6191);
IkReal x6198=((1.0)*cj1*cj2);
IkReal x6199=((1.0)*x6190);
IkReal x6200=(sj5*x6190);
IkReal x6201=(sj5*x6191);
evalcond[0]=(((x6190*x6194))+(((-1.0)*x6196*x6199))+(((-1.0)*r22*x6197)));
evalcond[1]=(cj0+(((-1.0)*r12*x6197))+(((-1.0)*x6193*x6199))+((r11*x6200)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6200))+(((-1.0)*x6192*x6199))+(((-1.0)*r02*x6197)));
evalcond[3]=(((x6191*x6194))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6196*x6197))+((r22*x6190)));
evalcond[4]=(((r01*x6201))+(((-1.0)*x6192*x6197))+((r02*x6190))+(((-1.0)*cj0*x6198))+((cj0*x6195)));
evalcond[5]=((((-1.0)*x6193*x6197))+(((-1.0)*sj0*x6198))+((r12*x6190))+((sj0*x6195))+((r11*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6202=r21*r21;
IkReal x6203=cj5*cj5;
IkReal x6204=(cj2*sj1);
IkReal x6205=(cj1*sj2);
IkReal x6206=(r21*sj5);
IkReal x6207=((1.0)*cj5*r20);
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal((((r22*x6204))+((r22*x6205)))),IkReal(((((-1.0)*x6205*x6207))+((x6205*x6206))+((x6204*x6206))+(((-1.0)*x6204*x6207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
CheckValue<IkReal> x6209=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6202))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6206))+((x6202*x6203))+(((-1.0)*x6203*(r20*r20))))),-1);
if(!x6209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6208.value)+(((1.5707963267949)*(x6209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6210=IKsin(j4);
IkReal x6211=IKcos(j4);
IkReal x6212=(r21*sj5);
IkReal x6213=(cj5*r20);
IkReal x6214=((1.0)*x6211);
evalcond[0]=((((-1.0)*x6210*x6213))+((x6210*x6212))+(((-1.0)*r22*x6214)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6213*x6214))+((x6211*x6212))+((r22*x6210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6215=(cj5*sj4);
IkReal x6216=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6216))+(((-1.0)*r00*x6215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6215))+(((-1.0)*r11*x6216))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6216))+(((-1.0)*r00*x6215))))+IKsqr((((r10*x6215))+(((-1.0)*r11*x6216))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6216))+(((-1.0)*r00*x6215))), (((r10*x6215))+(((-1.0)*r11*x6216))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6217=IKcos(j0);
IkReal x6218=IKsin(j0);
IkReal x6219=(cj5*r01);
IkReal x6220=((1.0)*cj1);
IkReal x6221=((0.39225)*sj1);
IkReal x6222=(r11*sj5);
IkReal x6223=((0.39225)*cj2);
IkReal x6224=((1.0)*sj1);
IkReal x6225=(r00*sj5);
IkReal x6226=(cj5*r11);
IkReal x6227=((1.0)*cj4);
IkReal x6228=(r01*sj5);
IkReal x6229=(r10*sj5);
IkReal x6230=(sj2*x6217);
IkReal x6231=(sj2*x6218);
IkReal x6232=(cj5*x6227);
IkReal x6233=(cj1*x6217);
IkReal x6234=(cj1*x6218);
IkReal x6235=(cj2*x6217);
IkReal x6236=((1.0)*cj5*sj4);
IkReal x6237=(cj2*x6218);
evalcond[0]=(x6217+(((-1.0)*r10*x6236))+(((-1.0)*r12*x6227))+((sj4*x6222)));
evalcond[1]=((((-1.0)*x6218))+((sj4*x6228))+(((-1.0)*r00*x6236))+(((-1.0)*r02*x6227)));
evalcond[2]=((((-1.0)*x6224*x6235))+x6219+x6225+(((-1.0)*x6220*x6230)));
evalcond[3]=((((-1.0)*x6224*x6237))+x6226+x6229+(((-1.0)*x6220*x6231)));
evalcond[4]=(((sj1*x6230))+((r02*sj4))+(((-1.0)*r00*x6232))+((cj4*x6228))+(((-1.0)*x6220*x6235)));
evalcond[5]=((((-1.0)*r10*x6232))+((sj1*x6231))+((r12*sj4))+((cj4*x6222))+(((-1.0)*x6220*x6237)));
evalcond[6]=((((-0.09465)*x6225))+(((-0.10915)*x6218))+(((-1.0)*px))+((x6223*x6233))+(((-1.0)*x6221*x6230))+(((0.425)*x6233))+(((-0.09465)*x6219)));
evalcond[7]=((((-0.09465)*x6226))+(((-0.09465)*x6229))+(((0.10915)*x6217))+(((-1.0)*py))+((x6223*x6234))+(((-1.0)*x6221*x6231))+(((0.425)*x6234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6238=((1.0)*cj5);
IkReal x6239=((1.0)*sj5);
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6238))+(((-1.0)*r10*x6239)))),IkReal(((((-1.0)*r00*x6239))+(((-1.0)*r01*x6238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6241.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6240.value)+(((1.5707963267949)*(x6241.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6242=IKcos(j0);
IkReal x6243=IKsin(j0);
IkReal x6244=(cj5*r01);
IkReal x6245=((1.0)*cj1);
IkReal x6246=((0.39225)*sj1);
IkReal x6247=(cj5*r11);
IkReal x6248=(r00*sj5);
IkReal x6249=((0.39225)*cj2);
IkReal x6250=(r10*sj5);
IkReal x6251=(sj2*x6242);
IkReal x6252=(sj2*x6243);
IkReal x6253=(cj1*x6242);
IkReal x6254=((1.0)*cj2*sj1);
IkReal x6255=(cj1*x6243);
evalcond[0]=(x6248+x6244+(((-1.0)*x6242*x6254))+(((-1.0)*x6245*x6251)));
evalcond[1]=(x6247+x6250+(((-1.0)*x6245*x6252))+(((-1.0)*x6243*x6254)));
evalcond[2]=((((-1.0)*x6246*x6251))+(((-0.09465)*x6248))+(((-0.09465)*x6244))+((x6249*x6253))+(((-1.0)*px))+(((-0.10915)*x6243))+(((0.425)*x6253)));
evalcond[3]=((((-1.0)*x6246*x6252))+(((-0.09465)*x6247))+(((-0.09465)*x6250))+((x6249*x6255))+(((-1.0)*py))+(((0.425)*x6255))+(((0.10915)*x6242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6256=((1.0)*cj5);
IkReal x6257=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6256)));
j4eval[0]=x6257;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6256))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6258=((1.0)*cj5);
IkReal x6259=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6258)));
j4eval[0]=x6259;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6258))))));
j4eval[2]=IKsign(x6259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6260=((1.0)*sj0);
IkReal x6261=((1.0)*cj0);
IkReal x6262=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6262;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6260))+(((-1.0)*r01*sj5*x6261)))))+(IKabs(((((-1.0)*r02*x6261))+(((-1.0)*r12*x6260))))));
j4eval[2]=IKsign(x6262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6263=((-1.0)*r20);
IkReal x6265 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6265)==0){
continue;
}
IkReal x6264=pow(x6265,-0.5);
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6263),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6266.value));
IkReal gconst115=(r21*x6264);
IkReal gconst116=(x6263*x6264);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6267.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6268=((-1.0)*r20);
IkReal x6269=x6264;
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6268),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
IkReal x6270=((-1.0)*(x6271.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6270;
IkReal gconst114=x6270;
IkReal gconst115=(r21*x6269);
IkReal gconst116=(x6268*x6269);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6272=((-1.0)*r20);
IkReal x6273=x6264;
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6272),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
IkReal x6274=((-1.0)*(x6275.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6274;
IkReal gconst114=x6274;
IkReal gconst115=(r21*x6273);
IkReal gconst116=(x6272*x6273);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6276=((-1.0)*r20);
IkReal x6277=x6264;
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6276),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
IkReal x6278=((-1.0)*(x6279.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6278;
IkReal gconst114=x6278;
IkReal gconst115=(r21*x6277);
IkReal gconst116=(x6276*x6277);
IkReal x6280=((1.0)*(r22*r22));
CheckValue<IkReal> x6284=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6280))),-1);
if(!x6284.valid){
continue;
}
IkReal x6281=x6284.value;
IkReal x6282=((1.0)*x6281);
IkReal x6283=((((-1.0)*x6282*(r20*r20*r20*r20)))+(((-1.0)*x6282*(r21*r21*r21*r21)))+(((-2.0)*x6281*(r20*r20)*(r21*r21)))+(((-1.0)*x6280)));
j4eval[0]=x6283;
j4eval[1]=IKsign(x6283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6285=(cj2*sj1);
IkReal x6286=(gconst115*r21);
IkReal x6287=(cj1*sj2);
IkReal x6288=((1.0)*gconst116*r20);
CheckValue<IkReal> x6289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6288))+(((-1.0)*(x6286*x6286)))+(((2.0)*gconst116*r20*x6286))+(((-1.0)*(r22*r22))))),-1);
if(!x6289.valid){
continue;
}
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal((((r22*x6285))+((r22*x6287)))),IkReal((((x6285*x6286))+(((-1.0)*x6285*x6288))+((x6286*x6287))+(((-1.0)*x6287*x6288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6289.value)))+(x6290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6291=IKsin(j4);
IkReal x6292=IKcos(j4);
IkReal x6293=(sj1*sj2);
IkReal x6294=((1.0)*x6292);
IkReal x6295=((1.0)*cj1*cj2);
IkReal x6296=(gconst115*x6291);
IkReal x6297=(gconst115*x6292);
IkReal x6298=((1.0)*gconst116*x6291);
evalcond[0]=((((-1.0)*r20*x6298))+(((-1.0)*r22*x6294))+((r21*x6296)));
evalcond[1]=(cj0+((r11*x6296))+(((-1.0)*r10*x6298))+(((-1.0)*r12*x6294)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6298))+((r01*x6296))+(((-1.0)*r02*x6294)));
evalcond[3]=(((cj2*sj1))+((r22*x6291))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6294))+((r21*x6297)));
evalcond[4]=(((r01*x6297))+(((-1.0)*gconst116*r00*x6294))+((cj0*x6293))+((r02*x6291))+(((-1.0)*cj0*x6295)));
evalcond[5]=(((r11*x6297))+((r12*x6291))+(((-1.0)*gconst116*r10*x6294))+((sj0*x6293))+(((-1.0)*sj0*x6295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6299=((1.0)*gconst116);
CheckValue<IkReal> x6300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6299)))),-1);
if(!x6300.valid){
continue;
}
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6299))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6300.value)))+(x6301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6302=IKsin(j4);
IkReal x6303=IKcos(j4);
IkReal x6304=(sj1*sj2);
IkReal x6305=((1.0)*x6303);
IkReal x6306=((1.0)*cj1*cj2);
IkReal x6307=(gconst115*x6302);
IkReal x6308=(gconst115*x6303);
IkReal x6309=((1.0)*gconst116*x6302);
evalcond[0]=(((r21*x6307))+(((-1.0)*r20*x6309))+(((-1.0)*r22*x6305)));
evalcond[1]=(cj0+(((-1.0)*r10*x6309))+(((-1.0)*r12*x6305))+((r11*x6307)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6305))+((r01*x6307))+(((-1.0)*r00*x6309)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6302))+((r21*x6308))+(((-1.0)*gconst116*r20*x6305)));
evalcond[4]=(((r01*x6308))+((r02*x6302))+((cj0*x6304))+(((-1.0)*gconst116*r00*x6305))+(((-1.0)*cj0*x6306)));
evalcond[5]=(((r11*x6308))+(((-1.0)*sj0*x6306))+((r12*x6302))+(((-1.0)*gconst116*r10*x6305))+((sj0*x6304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6310=((1.0)*gconst116);
CheckValue<IkReal> x6311 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6311.valid){
continue;
}
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6310)))),-1);
if(!x6312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6311.value)+(((1.5707963267949)*(x6312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6313=IKsin(j4);
IkReal x6314=IKcos(j4);
IkReal x6315=(sj1*sj2);
IkReal x6316=((1.0)*x6314);
IkReal x6317=((1.0)*cj1*cj2);
IkReal x6318=(gconst115*x6313);
IkReal x6319=(gconst115*x6314);
IkReal x6320=((1.0)*gconst116*x6313);
evalcond[0]=((((-1.0)*r22*x6316))+(((-1.0)*r20*x6320))+((r21*x6318)));
evalcond[1]=(cj0+(((-1.0)*r12*x6316))+((r11*x6318))+(((-1.0)*r10*x6320)));
evalcond[2]=((((-1.0)*r00*x6320))+(((-1.0)*sj0))+(((-1.0)*r02*x6316))+((r01*x6318)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6313))+((r21*x6319))+(((-1.0)*gconst116*r20*x6316)));
evalcond[4]=(((r01*x6319))+((r02*x6313))+((cj0*x6315))+(((-1.0)*gconst116*r00*x6316))+(((-1.0)*cj0*x6317)));
evalcond[5]=(((r11*x6319))+(((-1.0)*sj0*x6317))+(((-1.0)*gconst116*r10*x6316))+((r12*x6313))+((sj0*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6321=((-1.0)*r21);
IkReal x6323 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6323)==0){
continue;
}
IkReal x6322=pow(x6323,-0.5);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal(x6321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6324.value))));
IkReal gconst118=(x6321*x6322);
IkReal gconst119=((1.0)*r20*x6322);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6325.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6326=((-1.0)*r21);
CheckValue<IkReal> x6329 = IKatan2WithCheck(IkReal(x6326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6329.valid){
continue;
}
IkReal x6327=((1.0)*(x6329.value));
IkReal x6328=x6322;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6327)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6327)));
IkReal gconst118=(x6326*x6328);
IkReal gconst119=((1.0)*r20*x6328);
IkReal x6330=r22*r22;
IkReal x6331=((1.0)*x6330);
CheckValue<IkReal> x6335=IKPowWithIntegerCheck(((-1.0)+x6330),-1);
if(!x6335.valid){
continue;
}
IkReal x6332=x6335.value;
if((((1.0)+(((-1.0)*x6331)))) < -0.00001)
continue;
IkReal x6333=IKsqrt(((1.0)+(((-1.0)*x6331))));
IkReal x6334=(cj0*x6332*x6333);
j4eval[0]=((IKabs((x6334+(((-1.0)*x6331*x6334)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6336=((-1.0)*r21);
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(x6336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
IkReal x6337=((1.0)*(x6339.value));
IkReal x6338=x6322;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6337)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6337)));
IkReal gconst118=(x6336*x6338);
IkReal gconst119=((1.0)*r20*x6338);
IkReal x6340=r22*r22;
IkReal x6341=((1.0)*x6340);
CheckValue<IkReal> x6345=IKPowWithIntegerCheck(((-1.0)+x6340),-1);
if(!x6345.valid){
continue;
}
IkReal x6342=x6345.value;
if((((1.0)+(((-1.0)*x6341)))) < -0.00001)
continue;
IkReal x6343=IKsqrt(((1.0)+(((-1.0)*x6341))));
IkReal x6344=(sj0*x6342*x6343);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6341*x6344))+x6344))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6346=((-1.0)*r21);
CheckValue<IkReal> x6349 = IKatan2WithCheck(IkReal(x6346),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6349.valid){
continue;
}
IkReal x6347=((1.0)*(x6349.value));
IkReal x6348=x6322;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6347)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6347)));
IkReal gconst118=(x6346*x6348);
IkReal gconst119=((1.0)*r20*x6348);
IkReal x6350=r22*r22;
IkReal x6351=(r12*sj0);
IkReal x6352=(cj0*r02);
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(((-1.0)+x6350),-1);
if(!x6356.valid){
continue;
}
IkReal x6353=x6356.value;
if((((1.0)+(((-1.0)*x6350)))) < -0.00001)
continue;
IkReal x6354=IKsqrt(((1.0)+(((-1.0)*x6350))));
IkReal x6355=(r22*x6353*x6354);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6352*x6355))+((x6351*x6355)))))+(IKabs(((((-1.0)*x6351))+(((-1.0)*x6352))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6357=((1.0)*sj0);
IkReal x6358=((1.0)*gconst118);
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6358)))),-1);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6357)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6357))+(((-1.0)*cj0*r01*x6358))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6359.value)))+(x6360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKsin(j4);
IkReal x6362=IKcos(j4);
IkReal x6363=(gconst118*r01);
IkReal x6364=(sj1*sj2);
IkReal x6365=(gconst119*r20);
IkReal x6366=(gconst119*r10);
IkReal x6367=(gconst119*r00);
IkReal x6368=(gconst118*r21);
IkReal x6369=(gconst118*r11);
IkReal x6370=((1.0)*x6362);
IkReal x6371=((1.0)*cj1*cj2);
IkReal x6372=((1.0)*x6361);
evalcond[0]=((((-1.0)*x6365*x6372))+((x6361*x6368))+(((-1.0)*r22*x6370)));
evalcond[1]=((((-1.0)*x6366*x6372))+cj0+((x6361*x6369))+(((-1.0)*r12*x6370)));
evalcond[2]=((((-1.0)*sj0))+((x6361*x6363))+(((-1.0)*r02*x6370))+(((-1.0)*x6367*x6372)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6365*x6370))+((x6362*x6368))+((cj1*sj2))+((r22*x6361)));
evalcond[4]=(((x6362*x6363))+(((-1.0)*x6367*x6370))+((cj0*x6364))+((r02*x6361))+(((-1.0)*cj0*x6371)));
evalcond[5]=((((-1.0)*x6366*x6370))+(((-1.0)*sj0*x6371))+((x6362*x6369))+((r12*x6361))+((sj0*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6373=((1.0)*gconst119);
CheckValue<IkReal> x6374=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6373)))),-1);
if(!x6374.valid){
continue;
}
CheckValue<IkReal> x6375 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6373))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6374.value)))+(x6375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6376=IKsin(j4);
IkReal x6377=IKcos(j4);
IkReal x6378=(gconst118*r01);
IkReal x6379=(sj1*sj2);
IkReal x6380=(gconst119*r20);
IkReal x6381=(gconst119*r10);
IkReal x6382=(gconst119*r00);
IkReal x6383=(gconst118*r21);
IkReal x6384=(gconst118*r11);
IkReal x6385=((1.0)*x6377);
IkReal x6386=((1.0)*cj1*cj2);
IkReal x6387=((1.0)*x6376);
evalcond[0]=((((-1.0)*x6380*x6387))+((x6376*x6383))+(((-1.0)*r22*x6385)));
evalcond[1]=(cj0+(((-1.0)*x6381*x6387))+(((-1.0)*r12*x6385))+((x6376*x6384)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6382*x6387))+(((-1.0)*r02*x6385))+((x6376*x6378)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6380*x6385))+((cj1*sj2))+((x6377*x6383))+((r22*x6376)));
evalcond[4]=(((x6377*x6378))+(((-1.0)*x6382*x6385))+(((-1.0)*cj0*x6386))+((cj0*x6379))+((r02*x6376)));
evalcond[5]=((((-1.0)*x6381*x6385))+((r12*x6376))+((x6377*x6384))+((sj0*x6379))+(((-1.0)*sj0*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6388=((1.0)*gconst119);
CheckValue<IkReal> x6389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6388)))),-1);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6389.value)+(((1.5707963267949)*(x6390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKsin(j4);
IkReal x6392=IKcos(j4);
IkReal x6393=(gconst118*r01);
IkReal x6394=(sj1*sj2);
IkReal x6395=(gconst119*r20);
IkReal x6396=(gconst119*r10);
IkReal x6397=(gconst119*r00);
IkReal x6398=(gconst118*r21);
IkReal x6399=(gconst118*r11);
IkReal x6400=((1.0)*x6392);
IkReal x6401=((1.0)*cj1*cj2);
IkReal x6402=((1.0)*x6391);
evalcond[0]=(((x6391*x6398))+(((-1.0)*r22*x6400))+(((-1.0)*x6395*x6402)));
evalcond[1]=(((x6391*x6399))+cj0+(((-1.0)*x6396*x6402))+(((-1.0)*r12*x6400)));
evalcond[2]=(((x6391*x6393))+(((-1.0)*sj0))+(((-1.0)*r02*x6400))+(((-1.0)*x6397*x6402)));
evalcond[3]=(((cj2*sj1))+((x6392*x6398))+((cj1*sj2))+(((-1.0)*x6395*x6400))+((r22*x6391)));
evalcond[4]=(((cj0*x6394))+((x6392*x6393))+(((-1.0)*cj0*x6401))+(((-1.0)*x6397*x6400))+((r02*x6391)));
evalcond[5]=(((x6392*x6399))+((r12*x6391))+(((-1.0)*x6396*x6400))+((sj0*x6394))+(((-1.0)*sj0*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6403=((-1.0)*r10);
IkReal x6405 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6405)==0){
continue;
}
IkReal x6404=pow(x6405,-0.5);
CheckValue<IkReal> x6406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6403),IKFAST_ATAN2_MAGTHRESH);
if(!x6406.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6406.value));
IkReal gconst121=(r11*x6404);
IkReal gconst122=(x6403*x6404);
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6407.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6408=((-1.0)*r10);
IkReal x6409=x6404;
CheckValue<IkReal> x6411 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6408),IKFAST_ATAN2_MAGTHRESH);
if(!x6411.valid){
continue;
}
IkReal x6410=((-1.0)*(x6411.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6410;
IkReal gconst120=x6410;
IkReal gconst121=(r11*x6409);
IkReal gconst122=(x6408*x6409);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6412=((1.0)*sj0);
IkReal x6413=((1.0)*gconst121);
CheckValue<IkReal> x6414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6413))+(((-1.0)*gconst122*r21)))),-1);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6412)))),IkReal(((((-1.0)*cj0*r01*x6413))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6412))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6414.value)))+(x6415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6416=IKsin(j4);
IkReal x6417=IKcos(j4);
IkReal x6418=(gconst121*r11);
IkReal x6419=(sj1*sj2);
IkReal x6420=(gconst122*r00);
IkReal x6421=(gconst122*r10);
IkReal x6422=(gconst122*r20);
IkReal x6423=((1.0)*x6417);
IkReal x6424=((1.0)*cj1*cj2);
IkReal x6425=((1.0)*x6416);
IkReal x6426=(gconst121*x6416);
IkReal x6427=(gconst121*x6417);
evalcond[0]=(((r21*x6426))+(((-1.0)*x6422*x6425))+(((-1.0)*r22*x6423)));
evalcond[1]=((((-1.0)*x6421*x6425))+cj0+((x6416*x6418))+(((-1.0)*r12*x6423)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6426))+(((-1.0)*x6420*x6425))+(((-1.0)*r02*x6423)));
evalcond[3]=(((r21*x6427))+(((-1.0)*x6422*x6423))+((cj2*sj1))+((cj1*sj2))+((r22*x6416)));
evalcond[4]=(((r02*x6416))+(((-1.0)*cj0*x6424))+((cj0*x6419))+((r01*x6427))+(((-1.0)*x6420*x6423)));
evalcond[5]=((((-1.0)*x6421*x6423))+((sj0*x6419))+(((-1.0)*sj0*x6424))+((x6417*x6418))+((r12*x6416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6428=((1.0)*gconst122);
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6428))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
CheckValue<IkReal> x6430=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6428)))),-1);
if(!x6430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6429.value)+(((1.5707963267949)*(x6430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6431=IKsin(j4);
IkReal x6432=IKcos(j4);
IkReal x6433=(gconst121*r11);
IkReal x6434=(sj1*sj2);
IkReal x6435=(gconst122*r00);
IkReal x6436=(gconst122*r10);
IkReal x6437=(gconst122*r20);
IkReal x6438=((1.0)*x6432);
IkReal x6439=((1.0)*cj1*cj2);
IkReal x6440=((1.0)*x6431);
IkReal x6441=(gconst121*x6431);
IkReal x6442=(gconst121*x6432);
evalcond[0]=((((-1.0)*r22*x6438))+(((-1.0)*x6437*x6440))+((r21*x6441)));
evalcond[1]=(cj0+(((-1.0)*x6436*x6440))+(((-1.0)*r12*x6438))+((x6431*x6433)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6438))+((r01*x6441))+(((-1.0)*x6435*x6440)));
evalcond[3]=(((r22*x6431))+((cj2*sj1))+((cj1*sj2))+((r21*x6442))+(((-1.0)*x6437*x6438)));
evalcond[4]=((((-1.0)*x6435*x6438))+((r01*x6442))+((cj0*x6434))+(((-1.0)*cj0*x6439))+((r02*x6431)));
evalcond[5]=(((r12*x6431))+(((-1.0)*sj0*x6439))+((x6432*x6433))+(((-1.0)*x6436*x6438))+((sj0*x6434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6443=((-1.0)*r11);
IkReal x6445 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6445)==0){
continue;
}
IkReal x6444=pow(x6445,-0.5);
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal(x6443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6446.value))));
IkReal gconst124=(x6443*x6444);
IkReal gconst125=((1.0)*r10*x6444);
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6447.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6448=((-1.0)*r11);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal(x6448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
IkReal x6449=((1.0)*(x6451.value));
IkReal x6450=x6444;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6449)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6449)));
IkReal gconst124=(x6448*x6450);
IkReal gconst125=((1.0)*r10*x6450);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6452=((-1.0)*r11);
CheckValue<IkReal> x6455 = IKatan2WithCheck(IkReal(x6452),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6455.valid){
continue;
}
IkReal x6453=((1.0)*(x6455.value));
IkReal x6454=x6444;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6453)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6453)));
IkReal gconst124=(x6452*x6454);
IkReal gconst125=((1.0)*r10*x6454);
IkReal x6456=r12*r12;
IkReal x6457=((1.0)*sj0);
IkReal x6458=(cj0*r02);
IkReal x6459=x6444;
j4eval[0]=((IKabs((((r12*x6458*x6459))+(((-1.0)*x6457*x6459))+((sj0*x6456*x6459)))))+(IKabs(((((-1.0)*x6458))+(((-1.0)*r12*x6457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6460=((-1.0)*r11);
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal(x6460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
IkReal x6461=((1.0)*(x6463.value));
IkReal x6462=x6444;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6461)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6461)));
IkReal gconst124=(x6460*x6462);
IkReal gconst125=((1.0)*r10*x6462);
IkReal x6464=r12*r12;
IkReal x6465=((1.0)+(((-1.0)*x6464)));
IkReal x6466=(cj2*r22*sj1);
IkReal x6467=(cj1*r22*sj2);
CheckValue<IkReal> x6474=IKPowWithIntegerCheck(x6465,-1);
if(!x6474.valid){
continue;
}
IkReal x6468=x6474.value;
CheckValue<IkReal> x6475=IKPowWithIntegerCheck(((-1.0)+x6464),-1);
if(!x6475.valid){
continue;
}
IkReal x6469=x6475.value;
IkReal x6470=((1.0)*x6468);
if((x6465) < -0.00001)
continue;
IkReal x6471=IKsqrt(x6465);
IkReal x6472=((1.0)*r12*x6469*x6471);
IkReal x6473=((((-1.0)*(r22*r22)))+(((-1.0)*x6470*(r11*r11)*(r21*r21)))+(((-1.0)*x6470*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6468)));
j4eval[0]=x6473;
j4eval[1]=IKsign(x6473);
j4eval[2]=((IKabs((x6466+x6467)))+(IKabs(((((-1.0)*x6467*x6472))+(((-1.0)*x6466*x6472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6476=(gconst124*r21);
IkReal x6477=(cj1*sj2);
IkReal x6478=(cj2*sj1);
IkReal x6479=(gconst125*r20);
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal((((r22*x6478))+((r22*x6477)))),IkReal((((x6476*x6477))+((x6476*x6478))+(((-1.0)*x6477*x6479))+(((-1.0)*x6478*x6479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
CheckValue<IkReal> x6481=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6479*x6479)))+(((2.0)*x6476*x6479))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6476*x6476))))),-1);
if(!x6481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6480.value)+(((1.5707963267949)*(x6481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6482=IKsin(j4);
IkReal x6483=IKcos(j4);
IkReal x6484=(sj1*sj2);
IkReal x6485=(gconst125*r20);
IkReal x6486=(gconst124*r01);
IkReal x6487=(gconst125*r00);
IkReal x6488=(gconst125*r10);
IkReal x6489=((1.0)*x6483);
IkReal x6490=((1.0)*cj1*cj2);
IkReal x6491=((1.0)*x6482);
IkReal x6492=(gconst124*x6482);
IkReal x6493=(gconst124*x6483);
evalcond[0]=((((-1.0)*r22*x6489))+(((-1.0)*x6485*x6491))+((r21*x6492)));
evalcond[1]=(cj0+(((-1.0)*r12*x6489))+((r11*x6492))+(((-1.0)*x6488*x6491)));
evalcond[2]=((((-1.0)*x6487*x6491))+(((-1.0)*sj0))+((x6482*x6486))+(((-1.0)*r02*x6489)));
evalcond[3]=((((-1.0)*x6485*x6489))+((cj2*sj1))+((cj1*sj2))+((r22*x6482))+((r21*x6493)));
evalcond[4]=((((-1.0)*x6487*x6489))+((cj0*x6484))+((r02*x6482))+(((-1.0)*cj0*x6490))+((x6483*x6486)));
evalcond[5]=((((-1.0)*x6488*x6489))+((r11*x6493))+(((-1.0)*sj0*x6490))+((r12*x6482))+((sj0*x6484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6494=((1.0)*sj0);
IkReal x6495=((1.0)*cj0);
CheckValue<IkReal> x6496 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6495))+(((-1.0)*r12*x6494)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6494))+(((-1.0)*gconst124*r01*x6495))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6496.value)+(((1.5707963267949)*(x6497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKsin(j4);
IkReal x6499=IKcos(j4);
IkReal x6500=(sj1*sj2);
IkReal x6501=(gconst125*r20);
IkReal x6502=(gconst124*r01);
IkReal x6503=(gconst125*r00);
IkReal x6504=(gconst125*r10);
IkReal x6505=((1.0)*x6499);
IkReal x6506=((1.0)*cj1*cj2);
IkReal x6507=((1.0)*x6498);
IkReal x6508=(gconst124*x6498);
IkReal x6509=(gconst124*x6499);
evalcond[0]=((((-1.0)*x6501*x6507))+((r21*x6508))+(((-1.0)*r22*x6505)));
evalcond[1]=((((-1.0)*r12*x6505))+cj0+((r11*x6508))+(((-1.0)*x6504*x6507)));
evalcond[2]=((((-1.0)*sj0))+((x6498*x6502))+(((-1.0)*x6503*x6507))+(((-1.0)*r02*x6505)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6501*x6505))+((r21*x6509))+((cj1*sj2))+((r22*x6498)));
evalcond[4]=((((-1.0)*x6503*x6505))+((r02*x6498))+(((-1.0)*cj0*x6506))+((cj0*x6500))+((x6499*x6502)));
evalcond[5]=(((sj0*x6500))+((r12*x6498))+(((-1.0)*sj0*x6506))+((r11*x6509))+(((-1.0)*x6504*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6510=((1.0)*gconst125);
CheckValue<IkReal> x6511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6510)))),-1);
if(!x6511.valid){
continue;
}
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6510))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6511.value)))+(x6512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6513=IKsin(j4);
IkReal x6514=IKcos(j4);
IkReal x6515=(sj1*sj2);
IkReal x6516=(gconst125*r20);
IkReal x6517=(gconst124*r01);
IkReal x6518=(gconst125*r00);
IkReal x6519=(gconst125*r10);
IkReal x6520=((1.0)*x6514);
IkReal x6521=((1.0)*cj1*cj2);
IkReal x6522=((1.0)*x6513);
IkReal x6523=(gconst124*x6513);
IkReal x6524=(gconst124*x6514);
evalcond[0]=((((-1.0)*r22*x6520))+(((-1.0)*x6516*x6522))+((r21*x6523)));
evalcond[1]=(cj0+(((-1.0)*x6519*x6522))+(((-1.0)*r12*x6520))+((r11*x6523)));
evalcond[2]=((((-1.0)*sj0))+((x6513*x6517))+(((-1.0)*x6518*x6522))+(((-1.0)*r02*x6520)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6516*x6520))+((r21*x6524))+((r22*x6513)));
evalcond[4]=(((x6514*x6517))+((cj0*x6515))+(((-1.0)*x6518*x6520))+(((-1.0)*cj0*x6521))+((r02*x6513)));
evalcond[5]=((((-1.0)*x6519*x6520))+((r12*x6513))+((sj0*x6515))+((r11*x6524))+(((-1.0)*sj0*x6521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6525=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6525;
j4eval[1]=IKsign(x6525);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6526=((1.0)*cj5);
IkReal x6527=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6526)));
j4eval[0]=x6527;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6526))))));
j4eval[2]=IKsign(x6527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6528=cj5*cj5;
IkReal x6529=r11*r11;
IkReal x6530=(cj5*r10);
IkReal x6531=(r11*sj5);
IkReal x6532=((((2.0)*x6530*x6531))+((x6528*x6529))+(((-1.0)*x6528*(r10*r10)))+(((-1.0)*x6529))+(((-1.0)*(r12*r12))));
j4eval[0]=x6532;
j4eval[1]=IKsign(x6532);
j4eval[2]=((IKabs((x6531+(((-1.0)*x6530)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6533=cj5*cj5;
IkReal x6534=r11*r11;
IkReal x6535=(cj5*r10);
IkReal x6536=(r11*sj5);
CheckValue<IkReal> x6537 = IKatan2WithCheck(IkReal((x6536+(((-1.0)*x6535)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6537.valid){
continue;
}
CheckValue<IkReal> x6538=IKPowWithIntegerCheck(IKsign(((((2.0)*x6535*x6536))+((x6533*x6534))+(((-1.0)*x6534))+(((-1.0)*(r12*r12)))+(((-1.0)*x6533*(r10*r10))))),-1);
if(!x6538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6537.value)+(((1.5707963267949)*(x6538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6539=IKcos(j4);
IkReal x6540=IKsin(j4);
IkReal x6541=(cj5*r00);
IkReal x6542=(cj5*r10);
IkReal x6543=(r21*sj5);
IkReal x6544=(cj5*r20);
IkReal x6545=((1.0)*x6539);
IkReal x6546=((1.0)*x6540);
IkReal x6547=(sj5*x6540);
IkReal x6548=(sj5*x6539);
evalcond[0]=((((-1.0)*x6542*x6545))+((r11*x6548))+((r12*x6540)));
evalcond[1]=((((-1.0)*r22*x6545))+((x6540*x6543))+(((-1.0)*x6544*x6546)));
evalcond[2]=((((-1.0)*x6541*x6546))+(((-1.0)*r02*x6545))+((r01*x6547)));
evalcond[3]=((1.0)+(((-1.0)*x6542*x6546))+(((-1.0)*r12*x6545))+((r11*x6547)));
evalcond[4]=(((x6539*x6543))+((cj2*sj1))+((cj1*sj2))+((r22*x6540))+(((-1.0)*x6544*x6545)));
evalcond[5]=((((-1.0)*x6541*x6545))+((r02*x6540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6549=((1.0)*cj5);
CheckValue<IkReal> x6550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6549)))),-1);
if(!x6550.valid){
continue;
}
CheckValue<IkReal> x6551 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6550.value)))+(x6551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6552=IKcos(j4);
IkReal x6553=IKsin(j4);
IkReal x6554=(cj5*r00);
IkReal x6555=(cj5*r10);
IkReal x6556=(r21*sj5);
IkReal x6557=(cj5*r20);
IkReal x6558=((1.0)*x6552);
IkReal x6559=((1.0)*x6553);
IkReal x6560=(sj5*x6553);
IkReal x6561=(sj5*x6552);
evalcond[0]=((((-1.0)*x6555*x6558))+((r11*x6561))+((r12*x6553)));
evalcond[1]=(((x6553*x6556))+(((-1.0)*r22*x6558))+(((-1.0)*x6557*x6559)));
evalcond[2]=((((-1.0)*x6554*x6559))+(((-1.0)*r02*x6558))+((r01*x6560)));
evalcond[3]=((1.0)+(((-1.0)*x6555*x6559))+((r11*x6560))+(((-1.0)*r12*x6558)));
evalcond[4]=(((cj2*sj1))+((x6552*x6556))+((cj1*sj2))+((r22*x6553))+(((-1.0)*x6557*x6558)));
evalcond[5]=(((r02*x6553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6554*x6558))+((r01*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6562.valid){
continue;
}
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6562.value)))+(x6563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6564=IKcos(j4);
IkReal x6565=IKsin(j4);
IkReal x6566=(cj5*r00);
IkReal x6567=(cj5*r10);
IkReal x6568=(r21*sj5);
IkReal x6569=(cj5*r20);
IkReal x6570=((1.0)*x6564);
IkReal x6571=((1.0)*x6565);
IkReal x6572=(sj5*x6565);
IkReal x6573=(sj5*x6564);
evalcond[0]=((((-1.0)*x6567*x6570))+((r12*x6565))+((r11*x6573)));
evalcond[1]=((((-1.0)*r22*x6570))+((x6565*x6568))+(((-1.0)*x6569*x6571)));
evalcond[2]=(((r01*x6572))+(((-1.0)*x6566*x6571))+(((-1.0)*r02*x6570)));
evalcond[3]=((1.0)+(((-1.0)*x6567*x6571))+((r11*x6572))+(((-1.0)*r12*x6570)));
evalcond[4]=(((cj2*sj1))+((r22*x6565))+((x6564*x6568))+((cj1*sj2))+(((-1.0)*x6569*x6570)));
evalcond[5]=(((r01*x6573))+(((-1.0)*x6566*x6570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6574=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6574;
j4eval[1]=IKsign(x6574);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6575=((1.0)*cj5);
IkReal x6576=((((-1.0)*r21*x6575))+(((-1.0)*r20*sj5)));
j4eval[0]=x6576;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x6575)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6577=cj5*cj5;
IkReal x6578=r11*r11;
IkReal x6579=(r11*sj5);
IkReal x6580=(cj5*r10);
IkReal x6581=((r12*r12)+x6578+(((-2.0)*x6579*x6580))+(((-1.0)*x6577*x6578))+((x6577*(r10*r10))));
j4eval[0]=x6581;
j4eval[1]=IKsign(x6581);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6580))+x6579))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6582=cj5*cj5;
IkReal x6583=r11*r11;
IkReal x6584=(cj5*r10);
IkReal x6585=(r11*sj5);
CheckValue<IkReal> x6586 = IKatan2WithCheck(IkReal(((((-1.0)*x6584))+x6585)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6586.valid){
continue;
}
CheckValue<IkReal> x6587=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6584*x6585))+(r12*r12)+x6583+(((-1.0)*x6582*x6583))+((x6582*(r10*r10))))),-1);
if(!x6587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6586.value)+(((1.5707963267949)*(x6587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6588=IKcos(j4);
IkReal x6589=IKsin(j4);
IkReal x6590=(cj5*r00);
IkReal x6591=(cj5*r10);
IkReal x6592=(r21*sj5);
IkReal x6593=(cj5*r20);
IkReal x6594=((1.0)*x6588);
IkReal x6595=((1.0)*x6589);
IkReal x6596=(sj5*x6589);
IkReal x6597=(sj5*x6588);
evalcond[0]=(((r11*x6597))+(((-1.0)*x6591*x6594))+((r12*x6589)));
evalcond[1]=((((-1.0)*x6593*x6595))+((x6589*x6592))+(((-1.0)*r22*x6594)));
evalcond[2]=((((-1.0)*x6590*x6595))+(((-1.0)*r02*x6594))+((r01*x6596)));
evalcond[3]=((-1.0)+((r11*x6596))+(((-1.0)*r12*x6594))+(((-1.0)*x6591*x6595)));
evalcond[4]=(((cj2*sj1))+((x6588*x6592))+((r22*x6589))+((cj1*sj2))+(((-1.0)*x6593*x6594)));
evalcond[5]=(((r02*x6589))+(((-1.0)*x6590*x6594))+(((-1.0)*sj1*sj2))+((r01*x6597))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6598=((1.0)*cj5);
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6598))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6598))+(((-1.0)*r20*sj5)))),-1);
if(!x6600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6599.value)+(((1.5707963267949)*(x6600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6601=IKcos(j4);
IkReal x6602=IKsin(j4);
IkReal x6603=(cj5*r00);
IkReal x6604=(cj5*r10);
IkReal x6605=(r21*sj5);
IkReal x6606=(cj5*r20);
IkReal x6607=((1.0)*x6601);
IkReal x6608=((1.0)*x6602);
IkReal x6609=(sj5*x6602);
IkReal x6610=(sj5*x6601);
evalcond[0]=((((-1.0)*x6604*x6607))+((r11*x6610))+((r12*x6602)));
evalcond[1]=((((-1.0)*r22*x6607))+(((-1.0)*x6606*x6608))+((x6602*x6605)));
evalcond[2]=(((r01*x6609))+(((-1.0)*r02*x6607))+(((-1.0)*x6603*x6608)));
evalcond[3]=((-1.0)+(((-1.0)*x6604*x6608))+(((-1.0)*r12*x6607))+((r11*x6609)));
evalcond[4]=(((cj2*sj1))+((r22*x6602))+((cj1*sj2))+((x6601*x6605))+(((-1.0)*x6606*x6607)));
evalcond[5]=(((r01*x6610))+(((-1.0)*sj1*sj2))+(((-1.0)*x6603*x6607))+((r02*x6602))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6611.value)+(((1.5707963267949)*(x6612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6613=IKcos(j4);
IkReal x6614=IKsin(j4);
IkReal x6615=(cj5*r00);
IkReal x6616=(cj5*r10);
IkReal x6617=(r21*sj5);
IkReal x6618=(cj5*r20);
IkReal x6619=((1.0)*x6613);
IkReal x6620=((1.0)*x6614);
IkReal x6621=(sj5*x6614);
IkReal x6622=(sj5*x6613);
evalcond[0]=(((r12*x6614))+(((-1.0)*x6616*x6619))+((r11*x6622)));
evalcond[1]=((((-1.0)*x6618*x6620))+(((-1.0)*r22*x6619))+((x6614*x6617)));
evalcond[2]=(((r01*x6621))+(((-1.0)*r02*x6619))+(((-1.0)*x6615*x6620)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6619))+(((-1.0)*x6616*x6620))+((r11*x6621)));
evalcond[4]=(((cj2*sj1))+((x6613*x6617))+(((-1.0)*x6618*x6619))+((cj1*sj2))+((r22*x6614)));
evalcond[5]=(((r02*x6614))+((r01*x6622))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6615*x6619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6623=((-1.0)*r00);
IkReal x6625 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6625)==0){
continue;
}
IkReal x6624=pow(x6625,-0.5);
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6623),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6626.value));
IkReal gconst127=(r01*x6624);
IkReal gconst128=(x6623*x6624);
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6627.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6628=((-1.0)*r00);
IkReal x6629=x6624;
CheckValue<IkReal> x6631 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6628),IKFAST_ATAN2_MAGTHRESH);
if(!x6631.valid){
continue;
}
IkReal x6630=((-1.0)*(x6631.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6630;
IkReal gconst126=x6630;
IkReal gconst127=(r01*x6629);
IkReal gconst128=(x6628*x6629);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6632=((1.0)*sj0);
IkReal x6633=((1.0)*gconst127);
CheckValue<IkReal> x6634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6633)))),-1);
if(!x6634.valid){
continue;
}
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6632)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6632))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6634.value)))+(x6635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6636=IKsin(j4);
IkReal x6637=IKcos(j4);
IkReal x6638=(gconst127*r01);
IkReal x6639=(sj1*sj2);
IkReal x6640=(gconst128*r10);
IkReal x6641=(gconst128*r00);
IkReal x6642=(gconst128*r20);
IkReal x6643=((1.0)*x6637);
IkReal x6644=((1.0)*cj1*cj2);
IkReal x6645=((1.0)*x6636);
IkReal x6646=(gconst127*x6637);
IkReal x6647=(gconst127*x6636);
evalcond[0]=((((-1.0)*r22*x6643))+((r21*x6647))+(((-1.0)*x6642*x6645)));
evalcond[1]=(cj0+(((-1.0)*x6640*x6645))+((r11*x6647))+(((-1.0)*r12*x6643)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6641*x6645))+((x6636*x6638))+(((-1.0)*r02*x6643)));
evalcond[3]=(((cj2*sj1))+((r21*x6646))+((cj1*sj2))+(((-1.0)*x6642*x6643))+((r22*x6636)));
evalcond[4]=(((x6637*x6638))+(((-1.0)*x6641*x6643))+(((-1.0)*cj0*x6644))+((cj0*x6639))+((r02*x6636)));
evalcond[5]=((((-1.0)*x6640*x6643))+((r11*x6646))+((r12*x6636))+(((-1.0)*sj0*x6644))+((sj0*x6639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6648=((1.0)*gconst128);
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6648))+(((-1.0)*gconst127*r10)))),-1);
if(!x6649.valid){
continue;
}
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6649.value)))+(x6650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6651=IKsin(j4);
IkReal x6652=IKcos(j4);
IkReal x6653=(gconst127*r01);
IkReal x6654=(sj1*sj2);
IkReal x6655=(gconst128*r10);
IkReal x6656=(gconst128*r00);
IkReal x6657=(gconst128*r20);
IkReal x6658=((1.0)*x6652);
IkReal x6659=((1.0)*cj1*cj2);
IkReal x6660=((1.0)*x6651);
IkReal x6661=(gconst127*x6652);
IkReal x6662=(gconst127*x6651);
evalcond[0]=((((-1.0)*r22*x6658))+(((-1.0)*x6657*x6660))+((r21*x6662)));
evalcond[1]=(cj0+(((-1.0)*r12*x6658))+((r11*x6662))+(((-1.0)*x6655*x6660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6658))+((x6651*x6653))+(((-1.0)*x6656*x6660)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6657*x6658))+((cj1*sj2))+((r21*x6661))+((r22*x6651)));
evalcond[4]=(((r02*x6651))+((x6652*x6653))+(((-1.0)*cj0*x6659))+(((-1.0)*x6656*x6658))+((cj0*x6654)));
evalcond[5]=(((r12*x6651))+(((-1.0)*sj0*x6659))+((r11*x6661))+(((-1.0)*x6655*x6658))+((sj0*x6654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6663=((-1.0)*r01);
IkReal x6665 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6665)==0){
continue;
}
IkReal x6664=pow(x6665,-0.5);
CheckValue<IkReal> x6666 = IKatan2WithCheck(IkReal(x6663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6666.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6666.value))));
IkReal gconst130=(x6663*x6664);
IkReal gconst131=((1.0)*r00*x6664);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6667.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6668=((-1.0)*r01);
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal(x6668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
IkReal x6669=((1.0)*(x6671.value));
IkReal x6670=x6664;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6669)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6669)));
IkReal gconst130=(x6668*x6670);
IkReal gconst131=((1.0)*r00*x6670);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6672=((-1.0)*r01);
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal(x6672),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
IkReal x6673=((1.0)*(x6675.value));
IkReal x6674=x6664;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6673)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6673)));
IkReal gconst130=(x6672*x6674);
IkReal gconst131=((1.0)*r00*x6674);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6676=((-1.0)*r01);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(x6676),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
IkReal x6677=((1.0)*(x6679.value));
IkReal x6678=x6664;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6677)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6677)));
IkReal gconst130=(x6676*x6678);
IkReal gconst131=((1.0)*r00*x6678);
IkReal x6680=r02*r02;
IkReal x6681=(r12*sj0);
IkReal x6682=((1.0)*cj0);
IkReal x6683=x6664;
j4eval[0]=((IKabs(((((-1.0)*r02*x6682))+(((-1.0)*x6681)))))+(IKabs((((r02*x6681*x6683))+((cj0*x6680*x6683))+(((-1.0)*x6682*x6683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6684=((1.0)*sj0);
IkReal x6685=((1.0)*gconst130);
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6685))+(((-1.0)*gconst131*r21)))),-1);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6684)))),IkReal(((((-1.0)*gconst130*r11*x6684))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6685))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6686.value)))+(x6687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j4);
IkReal x6689=IKcos(j4);
IkReal x6690=(gconst131*r10);
IkReal x6691=(sj1*sj2);
IkReal x6692=(gconst131*r20);
IkReal x6693=(gconst131*r00);
IkReal x6694=((1.0)*x6689);
IkReal x6695=((1.0)*cj1*cj2);
IkReal x6696=(gconst130*x6688);
IkReal x6697=((1.0)*x6688);
IkReal x6698=(gconst130*x6689);
evalcond[0]=(((r21*x6696))+(((-1.0)*x6692*x6697))+(((-1.0)*r22*x6694)));
evalcond[1]=(((r11*x6696))+cj0+(((-1.0)*x6690*x6697))+(((-1.0)*r12*x6694)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6694))+(((-1.0)*x6693*x6697))+((r01*x6696)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6688))+((r21*x6698))+(((-1.0)*x6692*x6694)));
evalcond[4]=(((r02*x6688))+((cj0*x6691))+(((-1.0)*cj0*x6695))+(((-1.0)*x6693*x6694))+((r01*x6698)));
evalcond[5]=(((r12*x6688))+((r11*x6698))+(((-1.0)*sj0*x6695))+((sj0*x6691))+(((-1.0)*x6690*x6694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6699=((1.0)*gconst131);
CheckValue<IkReal> x6700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6699)))),-1);
if(!x6700.valid){
continue;
}
CheckValue<IkReal> x6701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6699))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6700.value)))+(x6701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6702=IKsin(j4);
IkReal x6703=IKcos(j4);
IkReal x6704=(gconst131*r10);
IkReal x6705=(sj1*sj2);
IkReal x6706=(gconst131*r20);
IkReal x6707=(gconst131*r00);
IkReal x6708=((1.0)*x6703);
IkReal x6709=((1.0)*cj1*cj2);
IkReal x6710=(gconst130*x6702);
IkReal x6711=((1.0)*x6702);
IkReal x6712=(gconst130*x6703);
evalcond[0]=((((-1.0)*r22*x6708))+((r21*x6710))+(((-1.0)*x6706*x6711)));
evalcond[1]=(cj0+((r11*x6710))+(((-1.0)*x6704*x6711))+(((-1.0)*r12*x6708)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6708))+(((-1.0)*x6707*x6711))+((r01*x6710)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6706*x6708))+((r21*x6712))+((r22*x6702)));
evalcond[4]=((((-1.0)*cj0*x6709))+((cj0*x6705))+((r01*x6712))+(((-1.0)*x6707*x6708))+((r02*x6702)));
evalcond[5]=(((r11*x6712))+((sj0*x6705))+((r12*x6702))+(((-1.0)*sj0*x6709))+(((-1.0)*x6704*x6708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6713=((1.0)*gconst131);
CheckValue<IkReal> x6714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6713))+(((-1.0)*gconst130*r00)))),-1);
if(!x6714.valid){
continue;
}
CheckValue<IkReal> x6715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6713))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6714.value)))+(x6715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6716=IKsin(j4);
IkReal x6717=IKcos(j4);
IkReal x6718=(gconst131*r10);
IkReal x6719=(sj1*sj2);
IkReal x6720=(gconst131*r20);
IkReal x6721=(gconst131*r00);
IkReal x6722=((1.0)*x6717);
IkReal x6723=((1.0)*cj1*cj2);
IkReal x6724=(gconst130*x6716);
IkReal x6725=((1.0)*x6716);
IkReal x6726=(gconst130*x6717);
evalcond[0]=((((-1.0)*r22*x6722))+((r21*x6724))+(((-1.0)*x6720*x6725)));
evalcond[1]=(((r11*x6724))+(((-1.0)*x6718*x6725))+cj0+(((-1.0)*r12*x6722)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6722))+(((-1.0)*x6721*x6725))+((r01*x6724)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6716))+((r21*x6726))+(((-1.0)*x6720*x6722)));
evalcond[4]=(((cj0*x6719))+((r02*x6716))+(((-1.0)*cj0*x6723))+(((-1.0)*x6721*x6722))+((r01*x6726)));
evalcond[5]=(((r11*x6726))+(((-1.0)*sj0*x6723))+(((-1.0)*x6718*x6722))+((sj0*x6719))+((r12*x6716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6727=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6727;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6728=((1.0)*cj5);
IkReal x6729=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6728)));
j4eval[0]=x6729;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6728))+((r21*sj5))))));
j4eval[2]=IKsign(x6729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6730=cj5*cj5;
IkReal x6731=r01*r01;
IkReal x6732=(cj5*r00);
IkReal x6733=(r01*sj5);
IkReal x6734=((((-2.0)*x6732*x6733))+((x6730*(r00*r00)))+x6731+(r02*r02)+(((-1.0)*x6730*x6731)));
j4eval[0]=x6734;
j4eval[1]=IKsign(x6734);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6732))+x6733))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6735=cj5*cj5;
IkReal x6736=r01*r01;
IkReal x6737=(r01*sj5);
IkReal x6738=(cj5*r00);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((x6736+((x6735*(r00*r00)))+(((-1.0)*x6735*x6736))+(r02*r02)+(((-2.0)*x6737*x6738)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6738))+x6737)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKcos(j4);
IkReal x6742=IKsin(j4);
IkReal x6743=(cj5*r00);
IkReal x6744=(cj5*r10);
IkReal x6745=(r21*sj5);
IkReal x6746=(cj5*r20);
IkReal x6747=((1.0)*x6741);
IkReal x6748=((1.0)*x6742);
IkReal x6749=(sj5*x6742);
IkReal x6750=(sj5*x6741);
evalcond[0]=(((r02*x6742))+((r01*x6750))+(((-1.0)*x6743*x6747)));
evalcond[1]=((((-1.0)*r22*x6747))+((x6742*x6745))+(((-1.0)*x6746*x6748)));
evalcond[2]=((((-1.0)*x6744*x6748))+(((-1.0)*r12*x6747))+((r11*x6749)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6747))+(((-1.0)*x6743*x6748))+((r01*x6749)));
evalcond[4]=(((cj2*sj1))+((x6741*x6745))+((cj1*sj2))+(((-1.0)*x6746*x6747))+((r22*x6742)));
evalcond[5]=((((-1.0)*x6744*x6747))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6750))+((r12*x6742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6751=((1.0)*cj5);
CheckValue<IkReal> x6752 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6751))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6751)))),-1);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6752.value)+(((1.5707963267949)*(x6753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6754=IKcos(j4);
IkReal x6755=IKsin(j4);
IkReal x6756=(cj5*r00);
IkReal x6757=(cj5*r10);
IkReal x6758=(r21*sj5);
IkReal x6759=(cj5*r20);
IkReal x6760=((1.0)*x6754);
IkReal x6761=((1.0)*x6755);
IkReal x6762=(sj5*x6755);
IkReal x6763=(sj5*x6754);
evalcond[0]=(((r01*x6763))+(((-1.0)*x6756*x6760))+((r02*x6755)));
evalcond[1]=((((-1.0)*x6759*x6761))+(((-1.0)*r22*x6760))+((x6755*x6758)));
evalcond[2]=(((r11*x6762))+(((-1.0)*r12*x6760))+(((-1.0)*x6757*x6761)));
evalcond[3]=((-1.0)+((r01*x6762))+(((-1.0)*x6756*x6761))+(((-1.0)*r02*x6760)));
evalcond[4]=(((cj2*sj1))+((r22*x6755))+(((-1.0)*x6759*x6760))+((cj1*sj2))+((x6754*x6758)));
evalcond[5]=(((r12*x6755))+(((-1.0)*cj1*cj2))+((r11*x6763))+((sj1*sj2))+(((-1.0)*x6757*x6760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6764=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6764.valid){
continue;
}
CheckValue<IkReal> x6765 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6764.value)))+(x6765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6766=IKcos(j4);
IkReal x6767=IKsin(j4);
IkReal x6768=(cj5*r00);
IkReal x6769=(cj5*r10);
IkReal x6770=(r21*sj5);
IkReal x6771=(cj5*r20);
IkReal x6772=((1.0)*x6766);
IkReal x6773=((1.0)*x6767);
IkReal x6774=(sj5*x6767);
IkReal x6775=(sj5*x6766);
evalcond[0]=((((-1.0)*x6768*x6772))+((r02*x6767))+((r01*x6775)));
evalcond[1]=((((-1.0)*r22*x6772))+(((-1.0)*x6771*x6773))+((x6767*x6770)));
evalcond[2]=(((r11*x6774))+(((-1.0)*x6769*x6773))+(((-1.0)*r12*x6772)));
evalcond[3]=((-1.0)+(((-1.0)*x6768*x6773))+(((-1.0)*r02*x6772))+((r01*x6774)));
evalcond[4]=(((cj2*sj1))+((r22*x6767))+((cj1*sj2))+((x6766*x6770))+(((-1.0)*x6771*x6772)));
evalcond[5]=(((r11*x6775))+((r12*x6767))+(((-1.0)*x6769*x6772))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6776=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6776;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6777=((1.0)*cj5);
IkReal x6778=((((-1.0)*r21*x6777))+(((-1.0)*r20*sj5)));
j4eval[0]=x6778;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6777))))));
j4eval[2]=IKsign(x6778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6779=(r01*sj5);
IkReal x6780=(cj1*sj2);
IkReal x6781=(cj2*sj1);
IkReal x6782=((1.0)*r02);
IkReal x6783=((1.0)*cj5*r00);
IkReal x6784=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6784;
j4eval[1]=((IKabs(((((-1.0)*x6781*x6783))+((x6779*x6781))+((x6779*x6780))+(((-1.0)*x6780*x6783)))))+(IKabs(((((-1.0)*x6781*x6782))+(((-1.0)*x6780*x6782))))));
j4eval[2]=IKsign(x6784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6785=(r01*sj5);
IkReal x6786=(cj1*sj2);
IkReal x6787=(cj2*sj1);
IkReal x6788=((1.0)*r02);
IkReal x6789=((1.0)*cj5*r00);
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6790.valid){
continue;
}
CheckValue<IkReal> x6791 = IKatan2WithCheck(IkReal(((((-1.0)*x6787*x6789))+(((-1.0)*x6786*x6789))+((x6785*x6786))+((x6785*x6787)))),IkReal(((((-1.0)*x6787*x6788))+(((-1.0)*x6786*x6788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6790.value)))+(x6791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6792=IKcos(j4);
IkReal x6793=IKsin(j4);
IkReal x6794=(cj5*r00);
IkReal x6795=(cj5*r10);
IkReal x6796=(r21*sj5);
IkReal x6797=(cj5*r20);
IkReal x6798=((1.0)*x6792);
IkReal x6799=((1.0)*x6793);
IkReal x6800=(sj5*x6793);
IkReal x6801=(sj5*x6792);
evalcond[0]=(((r02*x6793))+((r01*x6801))+(((-1.0)*x6794*x6798)));
evalcond[1]=(((x6793*x6796))+(((-1.0)*r22*x6798))+(((-1.0)*x6797*x6799)));
evalcond[2]=((((-1.0)*x6795*x6799))+((r11*x6800))+(((-1.0)*r12*x6798)));
evalcond[3]=((1.0)+((r01*x6800))+(((-1.0)*x6794*x6799))+(((-1.0)*r02*x6798)));
evalcond[4]=(((cj2*sj1))+((r22*x6793))+((x6792*x6796))+((cj1*sj2))+(((-1.0)*x6797*x6798)));
evalcond[5]=((((-1.0)*x6795*x6798))+(((-1.0)*sj1*sj2))+((r11*x6801))+((r12*x6793))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6802=((1.0)*cj5);
CheckValue<IkReal> x6803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6802))+(((-1.0)*r20*sj5)))),-1);
if(!x6803.valid){
continue;
}
CheckValue<IkReal> x6804 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6803.value)))+(x6804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6805=IKcos(j4);
IkReal x6806=IKsin(j4);
IkReal x6807=(cj5*r00);
IkReal x6808=(cj5*r10);
IkReal x6809=(r21*sj5);
IkReal x6810=(cj5*r20);
IkReal x6811=((1.0)*x6805);
IkReal x6812=((1.0)*x6806);
IkReal x6813=(sj5*x6806);
IkReal x6814=(sj5*x6805);
evalcond[0]=((((-1.0)*x6807*x6811))+((r01*x6814))+((r02*x6806)));
evalcond[1]=((((-1.0)*x6810*x6812))+(((-1.0)*r22*x6811))+((x6806*x6809)));
evalcond[2]=(((r11*x6813))+(((-1.0)*x6808*x6812))+(((-1.0)*r12*x6811)));
evalcond[3]=((1.0)+(((-1.0)*x6807*x6812))+(((-1.0)*r02*x6811))+((r01*x6813)));
evalcond[4]=(((x6805*x6809))+((cj2*sj1))+((r22*x6806))+((cj1*sj2))+(((-1.0)*x6810*x6811)));
evalcond[5]=(((r11*x6814))+(((-1.0)*sj1*sj2))+(((-1.0)*x6808*x6811))+((r12*x6806))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6815.value)+(((1.5707963267949)*(x6816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKcos(j4);
IkReal x6818=IKsin(j4);
IkReal x6819=(cj5*r00);
IkReal x6820=(cj5*r10);
IkReal x6821=(r21*sj5);
IkReal x6822=(cj5*r20);
IkReal x6823=((1.0)*x6817);
IkReal x6824=((1.0)*x6818);
IkReal x6825=(sj5*x6818);
IkReal x6826=(sj5*x6817);
evalcond[0]=(((r01*x6826))+((r02*x6818))+(((-1.0)*x6819*x6823)));
evalcond[1]=(((x6818*x6821))+(((-1.0)*r22*x6823))+(((-1.0)*x6822*x6824)));
evalcond[2]=((((-1.0)*r12*x6823))+((r11*x6825))+(((-1.0)*x6820*x6824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6823))+((r01*x6825))+(((-1.0)*x6819*x6824)));
evalcond[4]=(((cj2*sj1))+((x6817*x6821))+((cj1*sj2))+((r22*x6818))+(((-1.0)*x6822*x6823)));
evalcond[5]=(((r12*x6818))+(((-1.0)*sj1*sj2))+((r11*x6826))+(((-1.0)*x6820*x6823))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6827=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6827);
rxp1_1=(px*r21);
rxp1_2=(r11*x6827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6828=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6828);
rxp1_1=(px*r21);
rxp1_2=(r11*x6828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6829=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6829);
rxp1_1=(px*r21);
rxp1_2=(r11*x6829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6832=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6832.valid){
continue;
}
IkReal x6830=x6832.value;
IkReal x6831=(sj0*x6830);
cj4array[0]=(((cj1*cj2*x6831))+(((-1.0)*sj1*sj2*x6831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6833=IKsin(j4);
IkReal x6834=IKcos(j4);
IkReal x6835=(r21*sj5);
IkReal x6836=((1.0)*cj5*r20);
evalcond[0]=(r02*x6833);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6834)));
evalcond[2]=(((x6833*x6835))+(((-1.0)*x6833*x6836)));
evalcond[3]=((((-1.0)*cj5*r10*x6833))+((r11*sj5*x6833)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6834*x6835))+(((-1.0)*x6834*x6836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6839=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6839.valid){
continue;
}
IkReal x6837=x6839.value;
IkReal x6838=((1.0)*x6837);
cj4array[0]=((((-1.0)*cj2*sj1*x6838))+(((-1.0)*cj1*sj2*x6838)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6840=IKsin(j4);
IkReal x6841=IKcos(j4);
IkReal x6842=((1.0)*sj0);
IkReal x6843=((1.0)*cj5);
IkReal x6844=(sj5*x6840);
evalcond[0]=(r02*x6840);
evalcond[1]=((((-1.0)*x6842))+(((-1.0)*r02*x6841)));
evalcond[2]=((((-1.0)*r20*x6840*x6843))+((r21*x6844)));
evalcond[3]=(((r11*x6844))+(((-1.0)*r10*x6840*x6843)));
evalcond[4]=(((r11*sj5*x6841))+(((-1.0)*r10*x6841*x6843))+(((-1.0)*cj1*cj2*x6842))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6845=IKPowWithIntegerCheck(r02,-1);
if(!x6845.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6845.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6846=IKsin(j4);
IkReal x6847=IKcos(j4);
IkReal x6848=(r21*sj5);
IkReal x6849=((1.0)*cj5);
IkReal x6850=(r11*sj5);
evalcond[0]=(r02*x6846);
evalcond[1]=(((x6846*x6848))+(((-1.0)*r20*x6846*x6849)));
evalcond[2]=((((-1.0)*r10*x6846*x6849))+((x6846*x6850)));
evalcond[3]=(((cj2*sj1))+((x6847*x6848))+(((-1.0)*r20*x6847*x6849))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r10*x6847*x6849))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6847*x6850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6851=((1.0)*sj0);
IkReal x6852=((1.0)*cj0);
CheckValue<IkReal> x6853 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6852))+(((-1.0)*r12*x6851)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6851))+(((-1.0)*r01*sj5*x6852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6853.valid){
continue;
}
CheckValue<IkReal> x6854=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6853.value)+(((1.5707963267949)*(x6854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6855=IKsin(j4);
IkReal x6856=IKcos(j4);
IkReal x6857=(cj5*r00);
IkReal x6858=(cj5*r10);
IkReal x6859=(r21*sj5);
IkReal x6860=(sj1*sj2);
IkReal x6861=(cj5*r20);
IkReal x6862=((1.0)*x6856);
IkReal x6863=((1.0)*cj1*cj2);
IkReal x6864=((1.0)*x6855);
IkReal x6865=(sj5*x6855);
IkReal x6866=(sj5*x6856);
evalcond[0]=((((-1.0)*r22*x6862))+((x6855*x6859))+(((-1.0)*x6861*x6864)));
evalcond[1]=(((r11*x6865))+cj0+(((-1.0)*r12*x6862))+(((-1.0)*x6858*x6864)));
evalcond[2]=((((-1.0)*x6857*x6864))+(((-1.0)*sj0))+(((-1.0)*r02*x6862))+((r01*x6865)));
evalcond[3]=(((cj2*sj1))+((x6856*x6859))+((r22*x6855))+((cj1*sj2))+(((-1.0)*x6861*x6862)));
evalcond[4]=((((-1.0)*x6857*x6862))+((r02*x6855))+((cj0*x6860))+((r01*x6866))+(((-1.0)*cj0*x6863)));
evalcond[5]=(((sj0*x6860))+((r11*x6866))+((r12*x6855))+(((-1.0)*x6858*x6862))+(((-1.0)*sj0*x6863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6867=((1.0)*cj5);
CheckValue<IkReal> x6868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6867)))),-1);
if(!x6868.valid){
continue;
}
CheckValue<IkReal> x6869 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6867))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6868.value)))+(x6869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6870=IKsin(j4);
IkReal x6871=IKcos(j4);
IkReal x6872=(cj5*r00);
IkReal x6873=(cj5*r10);
IkReal x6874=(r21*sj5);
IkReal x6875=(sj1*sj2);
IkReal x6876=(cj5*r20);
IkReal x6877=((1.0)*x6871);
IkReal x6878=((1.0)*cj1*cj2);
IkReal x6879=((1.0)*x6870);
IkReal x6880=(sj5*x6870);
IkReal x6881=(sj5*x6871);
evalcond[0]=((((-1.0)*x6876*x6879))+((x6870*x6874))+(((-1.0)*r22*x6877)));
evalcond[1]=(((r11*x6880))+cj0+(((-1.0)*r12*x6877))+(((-1.0)*x6873*x6879)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6872*x6879))+(((-1.0)*r02*x6877))+((r01*x6880)));
evalcond[3]=((((-1.0)*x6876*x6877))+((cj2*sj1))+((r22*x6870))+((cj1*sj2))+((x6871*x6874)));
evalcond[4]=(((r02*x6870))+((cj0*x6875))+(((-1.0)*x6872*x6877))+((r01*x6881))+(((-1.0)*cj0*x6878)));
evalcond[5]=(((sj0*x6875))+((r11*x6881))+((r12*x6870))+(((-1.0)*x6873*x6877))+(((-1.0)*sj0*x6878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6882=((1.0)*cj5);
CheckValue<IkReal> x6883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6883.valid){
continue;
}
CheckValue<IkReal> x6884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6882)))),-1);
if(!x6884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6883.value)+(((1.5707963267949)*(x6884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6885=IKsin(j4);
IkReal x6886=IKcos(j4);
IkReal x6887=(cj5*r00);
IkReal x6888=(cj5*r10);
IkReal x6889=(r21*sj5);
IkReal x6890=(sj1*sj2);
IkReal x6891=(cj5*r20);
IkReal x6892=((1.0)*x6886);
IkReal x6893=((1.0)*cj1*cj2);
IkReal x6894=((1.0)*x6885);
IkReal x6895=(sj5*x6885);
IkReal x6896=(sj5*x6886);
evalcond[0]=((((-1.0)*x6891*x6894))+((x6885*x6889))+(((-1.0)*r22*x6892)));
evalcond[1]=(cj0+(((-1.0)*x6888*x6894))+(((-1.0)*r12*x6892))+((r11*x6895)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6892))+((r01*x6895))+(((-1.0)*x6887*x6894)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6891*x6892))+((r22*x6885))+((x6886*x6889)));
evalcond[4]=((((-1.0)*cj0*x6893))+((r02*x6885))+((cj0*x6890))+((r01*x6896))+(((-1.0)*x6887*x6892)));
evalcond[5]=((((-1.0)*x6888*x6892))+((sj0*x6890))+(((-1.0)*sj0*x6893))+((r11*x6896))+((r12*x6885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6897=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6897;
j0eval[1]=IKsign(x6897);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6898=cj5*cj5;
IkReal x6899=r21*r21;
IkReal x6900=(cj2*sj1);
IkReal x6901=(cj1*sj2);
IkReal x6902=(r21*sj5);
IkReal x6903=((1.0)*cj5*r20);
IkReal x6904=(((x6898*(r20*r20)))+(r22*r22)+(((-1.0)*x6898*x6899))+x6899+(((-2.0)*cj5*r20*x6902)));
j4eval[0]=x6904;
j4eval[1]=IKsign(x6904);
j4eval[2]=((IKabs((((r22*x6901))+((r22*x6900)))))+(IKabs(((((-1.0)*x6900*x6903))+((x6900*x6902))+((x6901*x6902))+(((-1.0)*x6901*x6903))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6905=cj1*cj1;
IkReal x6906=(cj2*sj2);
IkReal x6907=(cj2*sj1);
IkReal x6908=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6907))+(((-2.0)*cj1*cj2*x6907))+(((-2.0)*x6905*x6906))+x6906+x6908+(((-1.08349267049076)*sj2*x6905)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6907)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6909=IKsin(j0);
IkReal x6910=IKcos(j0);
evalcond[0]=((((-0.10915)*x6909))+(((0.81725)*x6910))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6909))+(((-1.0)*py))+(((0.10915)*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=((1.0)*cj5);
IkReal x6912=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6911)));
j4eval[0]=x6912;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6911))))));
j4eval[2]=IKsign(x6912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=((1.0)*cj5);
IkReal x6914=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6913)));
j4eval[0]=x6914;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6913))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6915=cj5*cj5;
IkReal x6916=((1.0)*sj5);
IkReal x6917=(cj5*r20);
IkReal x6918=(r11*r21);
IkReal x6919=(((r12*r22))+((r10*r20*x6915))+(((-1.0)*cj5*r10*r21*x6916))+x6918+(((-1.0)*x6915*x6918))+(((-1.0)*r11*x6916*x6917)));
j4eval[0]=x6919;
j4eval[1]=IKsign(x6919);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6916))+((cj0*x6917)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6920=cj5*cj5;
IkReal x6921=((1.0)*sj5);
IkReal x6922=(cj5*r20);
IkReal x6923=(r11*r21);
CheckValue<IkReal> x6924=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6921))+(((-1.0)*r11*x6921*x6922))+((r12*r22))+(((-1.0)*x6920*x6923))+x6923+((r10*r20*x6920)))),-1);
if(!x6924.valid){
continue;
}
CheckValue<IkReal> x6925 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6921))+((cj0*x6922)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6924.value)))+(x6925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6926=IKsin(j4);
IkReal x6927=IKcos(j4);
IkReal x6928=((1.0)*sj0);
IkReal x6929=(cj5*r00);
IkReal x6930=(r11*sj5);
IkReal x6931=(cj5*r10);
IkReal x6932=(r21*sj5);
IkReal x6933=(cj5*r20);
IkReal x6934=(r01*sj5);
IkReal x6935=((1.0)*x6927);
IkReal x6936=((1.0)*x6926);
evalcond[0]=(((x6926*x6932))+(((-1.0)*r22*x6935))+(((-1.0)*x6933*x6936)));
evalcond[1]=(((x6927*x6933))+(((-1.0)*x6932*x6935))+(((-1.0)*r22*x6936)));
evalcond[2]=(cj0+((x6926*x6930))+(((-1.0)*r12*x6935))+(((-1.0)*x6931*x6936)));
evalcond[3]=(((x6926*x6934))+(((-1.0)*r02*x6935))+(((-1.0)*x6928))+(((-1.0)*x6929*x6936)));
evalcond[4]=(((x6927*x6929))+(((-1.0)*r02*x6936))+(((-1.0)*x6934*x6935))+(((-1.0)*cj0)));
evalcond[5]=(((x6927*x6931))+(((-1.0)*x6930*x6935))+(((-1.0)*r12*x6936))+(((-1.0)*x6928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6937=((1.0)*cj5);
CheckValue<IkReal> x6938 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6938.valid){
continue;
}
CheckValue<IkReal> x6939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6937)))),-1);
if(!x6939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6938.value)+(((1.5707963267949)*(x6939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6940=IKsin(j4);
IkReal x6941=IKcos(j4);
IkReal x6942=((1.0)*sj0);
IkReal x6943=(cj5*r00);
IkReal x6944=(r11*sj5);
IkReal x6945=(cj5*r10);
IkReal x6946=(r21*sj5);
IkReal x6947=(cj5*r20);
IkReal x6948=(r01*sj5);
IkReal x6949=((1.0)*x6941);
IkReal x6950=((1.0)*x6940);
evalcond[0]=(((x6940*x6946))+(((-1.0)*r22*x6949))+(((-1.0)*x6947*x6950)));
evalcond[1]=(((x6941*x6947))+(((-1.0)*r22*x6950))+(((-1.0)*x6946*x6949)));
evalcond[2]=(cj0+(((-1.0)*r12*x6949))+((x6940*x6944))+(((-1.0)*x6945*x6950)));
evalcond[3]=((((-1.0)*x6943*x6950))+(((-1.0)*x6942))+((x6940*x6948))+(((-1.0)*r02*x6949)));
evalcond[4]=((((-1.0)*x6948*x6949))+((x6941*x6943))+(((-1.0)*r02*x6950))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6950))+((x6941*x6945))+(((-1.0)*x6942))+(((-1.0)*x6944*x6949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6951=((1.0)*cj5);
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6951)))),-1);
if(!x6953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6952.value)+(((1.5707963267949)*(x6953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6954=IKsin(j4);
IkReal x6955=IKcos(j4);
IkReal x6956=((1.0)*sj0);
IkReal x6957=(cj5*r00);
IkReal x6958=(r11*sj5);
IkReal x6959=(cj5*r10);
IkReal x6960=(r21*sj5);
IkReal x6961=(cj5*r20);
IkReal x6962=(r01*sj5);
IkReal x6963=((1.0)*x6955);
IkReal x6964=((1.0)*x6954);
evalcond[0]=(((x6954*x6960))+(((-1.0)*x6961*x6964))+(((-1.0)*r22*x6963)));
evalcond[1]=(((x6955*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6960*x6963)));
evalcond[2]=((((-1.0)*x6959*x6964))+cj0+(((-1.0)*r12*x6963))+((x6954*x6958)));
evalcond[3]=((((-1.0)*r02*x6963))+((x6954*x6962))+(((-1.0)*x6956))+(((-1.0)*x6957*x6964)));
evalcond[4]=((((-1.0)*r02*x6964))+(((-1.0)*x6962*x6963))+((x6955*x6957))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6958*x6963))+(((-1.0)*x6956))+(((-1.0)*r12*x6964))+((x6955*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6965=IKsin(j0);
IkReal x6966=IKcos(j0);
evalcond[0]=((((0.03275)*x6966))+(((-1.0)*px))+(((-0.10915)*x6965)));
evalcond[1]=((((0.10915)*x6966))+(((0.03275)*x6965))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6967=((1.0)*cj5);
IkReal x6968=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6967)));
j4eval[0]=x6968;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6967))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6969=cj5*cj5;
IkReal x6970=((1.0)*r21);
IkReal x6971=(cj5*sj5);
IkReal x6972=((1.0)*r20);
IkReal x6973=(((r01*r21))+((r00*r20*x6969))+(((-1.0)*r01*x6969*x6970))+((r02*r22))+(((-1.0)*r00*x6970*x6971))+(((-1.0)*r01*x6971*x6972)));
j4eval[0]=x6973;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6972))))));
j4eval[2]=IKsign(x6973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6974=cj5*cj5;
IkReal x6975=(r21*sj5);
IkReal x6976=(r11*r21);
IkReal x6977=((1.0)*cj5*r20);
IkReal x6978=(((r10*r20*x6974))+(((-1.0)*cj5*r10*x6975))+(((-1.0)*r11*sj5*x6977))+((r12*r22))+(((-1.0)*x6974*x6976))+x6976);
j4eval[0]=x6978;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6975))+(((-1.0)*sj0*x6977))))));
j4eval[2]=IKsign(x6978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6979=cj5*cj5;
IkReal x6980=(r21*sj5);
IkReal x6981=(r11*r21);
IkReal x6982=((1.0)*cj5*r20);
CheckValue<IkReal> x6983 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6982))+((sj0*x6980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6983.valid){
continue;
}
CheckValue<IkReal> x6984=IKPowWithIntegerCheck(IKsign((((r10*r20*x6979))+((r12*r22))+(((-1.0)*r11*sj5*x6982))+(((-1.0)*cj5*r10*x6980))+x6981+(((-1.0)*x6979*x6981)))),-1);
if(!x6984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6983.value)+(((1.5707963267949)*(x6984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6985=IKsin(j4);
IkReal x6986=IKcos(j4);
IkReal x6987=(r11*sj5);
IkReal x6988=(cj5*r00);
IkReal x6989=(cj5*r10);
IkReal x6990=(r21*sj5);
IkReal x6991=(cj5*r20);
IkReal x6992=(r01*sj5);
IkReal x6993=((1.0)*x6986);
IkReal x6994=((1.0)*x6985);
evalcond[0]=(((x6985*x6990))+(((-1.0)*r22*x6993))+(((-1.0)*x6991*x6994)));
evalcond[1]=(((x6986*x6991))+(((-1.0)*r22*x6994))+(((-1.0)*x6990*x6993)));
evalcond[2]=((((-1.0)*r12*x6993))+cj0+((x6985*x6987))+(((-1.0)*x6989*x6994)));
evalcond[3]=(cj0+((x6986*x6988))+(((-1.0)*x6992*x6993))+(((-1.0)*r02*x6994)));
evalcond[4]=((((-1.0)*r12*x6994))+sj0+(((-1.0)*x6987*x6993))+((x6986*x6989)));
evalcond[5]=(((x6985*x6992))+(((-1.0)*sj0))+(((-1.0)*r02*x6993))+(((-1.0)*x6988*x6994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6995=cj5*cj5;
IkReal x6996=((1.0)*r21);
IkReal x6997=(cj5*sj5);
IkReal x6998=((1.0)*r20);
CheckValue<IkReal> x6999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6995*x6996))+((r01*r21))+(((-1.0)*r01*x6997*x6998))+(((-1.0)*r00*x6996*x6997))+((r00*r20*x6995))+((r02*r22)))),-1);
if(!x6999.valid){
continue;
}
CheckValue<IkReal> x7000 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6999.value)))+(x7000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7001=IKsin(j4);
IkReal x7002=IKcos(j4);
IkReal x7003=(r11*sj5);
IkReal x7004=(cj5*r00);
IkReal x7005=(cj5*r10);
IkReal x7006=(r21*sj5);
IkReal x7007=(cj5*r20);
IkReal x7008=(r01*sj5);
IkReal x7009=((1.0)*x7002);
IkReal x7010=((1.0)*x7001);
evalcond[0]=((((-1.0)*r22*x7009))+((x7001*x7006))+(((-1.0)*x7007*x7010)));
evalcond[1]=((((-1.0)*r22*x7010))+(((-1.0)*x7006*x7009))+((x7002*x7007)));
evalcond[2]=((((-1.0)*r12*x7009))+cj0+((x7001*x7003))+(((-1.0)*x7005*x7010)));
evalcond[3]=((((-1.0)*x7008*x7009))+cj0+((x7002*x7004))+(((-1.0)*r02*x7010)));
evalcond[4]=(sj0+(((-1.0)*x7003*x7009))+((x7002*x7005))+(((-1.0)*r12*x7010)));
evalcond[5]=((((-1.0)*r02*x7009))+(((-1.0)*sj0))+((x7001*x7008))+(((-1.0)*x7004*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7011=((1.0)*cj5);
CheckValue<IkReal> x7012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7012.valid){
continue;
}
CheckValue<IkReal> x7013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7011)))),-1);
if(!x7013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7012.value)+(((1.5707963267949)*(x7013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7014=IKsin(j4);
IkReal x7015=IKcos(j4);
IkReal x7016=(r11*sj5);
IkReal x7017=(cj5*r00);
IkReal x7018=(cj5*r10);
IkReal x7019=(r21*sj5);
IkReal x7020=(cj5*r20);
IkReal x7021=(r01*sj5);
IkReal x7022=((1.0)*x7015);
IkReal x7023=((1.0)*x7014);
evalcond[0]=((((-1.0)*r22*x7022))+((x7014*x7019))+(((-1.0)*x7020*x7023)));
evalcond[1]=((((-1.0)*r22*x7023))+(((-1.0)*x7019*x7022))+((x7015*x7020)));
evalcond[2]=((((-1.0)*r12*x7022))+cj0+(((-1.0)*x7018*x7023))+((x7014*x7016)));
evalcond[3]=((((-1.0)*x7021*x7022))+cj0+((x7015*x7017))+(((-1.0)*r02*x7023)));
evalcond[4]=((((-1.0)*r12*x7023))+sj0+((x7015*x7018))+(((-1.0)*x7016*x7022)));
evalcond[5]=((((-1.0)*sj0))+((x7014*x7021))+(((-1.0)*r02*x7022))+(((-1.0)*x7017*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7024=((1.0)*sj5);
IkReal x7025=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7025))+(((-1.0)*r10*x7024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7024))+(((-1.0)*r01*x7025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7025))+(((-1.0)*r10*x7024))))+IKsqr(((((-1.0)*r00*x7024))+(((-1.0)*r01*x7025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7025))+(((-1.0)*r10*x7024))), ((((-1.0)*r00*x7024))+(((-1.0)*r01*x7025))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7026=IKsin(j0);
IkReal x7027=IKcos(j0);
IkReal x7028=((1.0)*cj5);
IkReal x7029=((1.0)*sj5);
IkReal x7030=((0.09465)*cj5);
IkReal x7031=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7027))+(((-1.0)*r00*x7029))+(((-1.0)*r01*x7028)));
evalcond[1]=((((-1.0)*r11*x7028))+(((-1.0)*r10*x7029))+(((-1.0)*x7026)));
evalcond[2]=((((-1.0)*r01*x7030))+(((-1.0)*r00*x7031))+(((-0.10915)*x7026))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r11*x7030))+(((-1.0)*py))+(((0.10915)*x7027))+(((-1.0)*r10*x7031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7032=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7032;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7033=((1.0)*cj5);
IkReal x7034=((((-1.0)*r01*x7033))+(((-1.0)*r00*sj5)));
j4eval[0]=x7034;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7033)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7035=cj5*cj5;
IkReal x7036=r21*r21;
IkReal x7037=(r21*sj5);
IkReal x7038=(cj5*r20);
IkReal x7039=(x7036+(r22*r22)+(((-2.0)*x7037*x7038))+((x7035*(r20*r20)))+(((-1.0)*x7035*x7036)));
j4eval[0]=x7039;
j4eval[1]=IKsign(x7039);
j4eval[2]=((IKabs((x7037+(((-1.0)*x7038)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7040=cj5*cj5;
IkReal x7041=r21*r21;
IkReal x7042=(r21*sj5);
IkReal x7043=(cj5*r20);
CheckValue<IkReal> x7044 = IKatan2WithCheck(IkReal(r22),IkReal((x7042+(((-1.0)*x7043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7044.valid){
continue;
}
CheckValue<IkReal> x7045=IKPowWithIntegerCheck(IKsign((x7041+(((-1.0)*x7040*x7041))+(r22*r22)+((x7040*(r20*r20)))+(((-2.0)*x7042*x7043)))),-1);
if(!x7045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7044.value)+(((1.5707963267949)*(x7045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7046=IKsin(j4);
IkReal x7047=IKcos(j4);
IkReal x7048=(r11*sj5);
IkReal x7049=(r21*sj5);
IkReal x7050=(cj5*r00);
IkReal x7051=(cj5*r20);
IkReal x7052=(r01*sj5);
IkReal x7053=(cj5*r10);
IkReal x7054=((1.0)*x7047);
IkReal x7055=((1.0)*x7046);
evalcond[0]=(((x7046*x7049))+(((-1.0)*r22*x7054))+(((-1.0)*x7051*x7055)));
evalcond[1]=((((-1.0)*x7052*x7054))+((x7047*x7050))+(((-1.0)*r02*x7055)));
evalcond[2]=((((-1.0)*x7048*x7054))+((x7047*x7053))+(((-1.0)*r12*x7055)));
evalcond[3]=(((x7046*x7048))+cj0+(((-1.0)*x7053*x7055))+(((-1.0)*r12*x7054)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7055))+(((-1.0)*x7049*x7054))+((x7047*x7051)));
evalcond[5]=((((-1.0)*sj0))+((x7046*x7052))+(((-1.0)*x7050*x7055))+(((-1.0)*r02*x7054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7056=((1.0)*cj5);
CheckValue<IkReal> x7057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7056))+(((-1.0)*r00*sj5)))),-1);
if(!x7057.valid){
continue;
}
CheckValue<IkReal> x7058 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7056))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7057.value)))+(x7058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7059=IKsin(j4);
IkReal x7060=IKcos(j4);
IkReal x7061=(r11*sj5);
IkReal x7062=(r21*sj5);
IkReal x7063=(cj5*r00);
IkReal x7064=(cj5*r20);
IkReal x7065=(r01*sj5);
IkReal x7066=(cj5*r10);
IkReal x7067=((1.0)*x7060);
IkReal x7068=((1.0)*x7059);
evalcond[0]=(((x7059*x7062))+(((-1.0)*x7064*x7068))+(((-1.0)*r22*x7067)));
evalcond[1]=((((-1.0)*x7065*x7067))+((x7060*x7063))+(((-1.0)*r02*x7068)));
evalcond[2]=((((-1.0)*r12*x7068))+((x7060*x7066))+(((-1.0)*x7061*x7067)));
evalcond[3]=(cj0+((x7059*x7061))+(((-1.0)*x7066*x7068))+(((-1.0)*r12*x7067)));
evalcond[4]=((1.0)+(((-1.0)*x7062*x7067))+((x7060*x7064))+(((-1.0)*r22*x7068)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7063*x7068))+((x7059*x7065))+(((-1.0)*r02*x7067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7069 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7069.value)+(((1.5707963267949)*(x7070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j4);
IkReal x7072=IKcos(j4);
IkReal x7073=(r11*sj5);
IkReal x7074=(r21*sj5);
IkReal x7075=(cj5*r00);
IkReal x7076=(cj5*r20);
IkReal x7077=(r01*sj5);
IkReal x7078=(cj5*r10);
IkReal x7079=((1.0)*x7072);
IkReal x7080=((1.0)*x7071);
evalcond[0]=((((-1.0)*x7076*x7080))+((x7071*x7074))+(((-1.0)*r22*x7079)));
evalcond[1]=(((x7072*x7075))+(((-1.0)*x7077*x7079))+(((-1.0)*r02*x7080)));
evalcond[2]=(((x7072*x7078))+(((-1.0)*x7073*x7079))+(((-1.0)*r12*x7080)));
evalcond[3]=(cj0+((x7071*x7073))+(((-1.0)*r12*x7079))+(((-1.0)*x7078*x7080)));
evalcond[4]=((1.0)+((x7072*x7076))+(((-1.0)*r22*x7080))+(((-1.0)*x7074*x7079)));
evalcond[5]=((((-1.0)*sj0))+((x7071*x7077))+(((-1.0)*r02*x7079))+(((-1.0)*x7075*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7081=IKcos(j0);
IkReal x7082=IKsin(j0);
evalcond[0]=((((-0.10915)*x7082))+(((-1.0)*px))+(((-0.39225)*x7081)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7082))+(((0.10915)*x7081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7083=((1.0)*cj5);
IkReal x7084=((((-1.0)*r01*x7083))+(((-1.0)*r00*sj5)));
j4eval[0]=x7084;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7083)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7085=cj5*cj5;
IkReal x7086=((1.0)*r21);
IkReal x7087=(cj5*sj5);
IkReal x7088=((1.0)*r20);
IkReal x7089=((((-1.0)*r01*x7085*x7086))+((r01*r21))+(((-1.0)*r00*x7086*x7087))+((r00*r20*x7085))+((r02*r22))+(((-1.0)*r01*x7087*x7088)));
j4eval[0]=x7089;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7090=cj5*cj5;
IkReal x7091=(r21*sj5);
IkReal x7092=(r11*r21);
IkReal x7093=((1.0)*cj5*r20);
IkReal x7094=(x7092+(((-1.0)*cj5*r10*x7091))+((r12*r22))+((r10*r20*x7090))+(((-1.0)*r11*sj5*x7093))+(((-1.0)*x7090*x7092)));
j4eval[0]=x7094;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7091))+(((-1.0)*sj0*x7093))))));
j4eval[2]=IKsign(x7094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7095=cj5*cj5;
IkReal x7096=(r21*sj5);
IkReal x7097=(r11*r21);
IkReal x7098=((1.0)*cj5*r20);
CheckValue<IkReal> x7099 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7096))+(((-1.0)*sj0*x7098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7099.valid){
continue;
}
CheckValue<IkReal> x7100=IKPowWithIntegerCheck(IKsign((x7097+(((-1.0)*cj5*r10*x7096))+((r12*r22))+((r10*r20*x7095))+(((-1.0)*r11*sj5*x7098))+(((-1.0)*x7095*x7097)))),-1);
if(!x7100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7099.value)+(((1.5707963267949)*(x7100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7101=IKsin(j4);
IkReal x7102=IKcos(j4);
IkReal x7103=(r11*sj5);
IkReal x7104=(cj5*r00);
IkReal x7105=(cj5*r10);
IkReal x7106=(r21*sj5);
IkReal x7107=(cj5*r20);
IkReal x7108=(r01*sj5);
IkReal x7109=((1.0)*x7102);
IkReal x7110=((1.0)*x7101);
evalcond[0]=((((-1.0)*x7107*x7110))+(((-1.0)*r22*x7109))+((x7101*x7106)));
evalcond[1]=(((x7102*x7107))+(((-1.0)*r22*x7110))+(((-1.0)*x7106*x7109)));
evalcond[2]=(cj0+(((-1.0)*r12*x7109))+(((-1.0)*x7105*x7110))+((x7101*x7103)));
evalcond[3]=(((x7102*x7104))+(((-1.0)*x7108*x7109))+cj0+(((-1.0)*r02*x7110)));
evalcond[4]=(((x7102*x7105))+sj0+(((-1.0)*x7103*x7109))+(((-1.0)*r12*x7110)));
evalcond[5]=((((-1.0)*x7104*x7110))+(((-1.0)*sj0))+(((-1.0)*r02*x7109))+((x7101*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7111=cj5*cj5;
IkReal x7112=((1.0)*r21);
IkReal x7113=(cj5*sj5);
IkReal x7114=((1.0)*r20);
CheckValue<IkReal> x7115 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7115.valid){
continue;
}
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7113*x7114))+(((-1.0)*r00*x7112*x7113))+((r01*r21))+(((-1.0)*r01*x7111*x7112))+((r00*r20*x7111))+((r02*r22)))),-1);
if(!x7116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7115.value)+(((1.5707963267949)*(x7116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7117=IKsin(j4);
IkReal x7118=IKcos(j4);
IkReal x7119=(r11*sj5);
IkReal x7120=(cj5*r00);
IkReal x7121=(cj5*r10);
IkReal x7122=(r21*sj5);
IkReal x7123=(cj5*r20);
IkReal x7124=(r01*sj5);
IkReal x7125=((1.0)*x7118);
IkReal x7126=((1.0)*x7117);
evalcond[0]=((((-1.0)*x7123*x7126))+(((-1.0)*r22*x7125))+((x7117*x7122)));
evalcond[1]=((((-1.0)*x7122*x7125))+(((-1.0)*r22*x7126))+((x7118*x7123)));
evalcond[2]=(((x7117*x7119))+(((-1.0)*x7121*x7126))+cj0+(((-1.0)*r12*x7125)));
evalcond[3]=(cj0+((x7118*x7120))+(((-1.0)*r02*x7126))+(((-1.0)*x7124*x7125)));
evalcond[4]=(sj0+(((-1.0)*x7119*x7125))+((x7118*x7121))+(((-1.0)*r12*x7126)));
evalcond[5]=((((-1.0)*x7120*x7126))+(((-1.0)*sj0))+((x7117*x7124))+(((-1.0)*r02*x7125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7127=((1.0)*cj5);
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7127)))),-1);
if(!x7128.valid){
continue;
}
CheckValue<IkReal> x7129 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7128.value)))+(x7129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7130=IKsin(j4);
IkReal x7131=IKcos(j4);
IkReal x7132=(r11*sj5);
IkReal x7133=(cj5*r00);
IkReal x7134=(cj5*r10);
IkReal x7135=(r21*sj5);
IkReal x7136=(cj5*r20);
IkReal x7137=(r01*sj5);
IkReal x7138=((1.0)*x7131);
IkReal x7139=((1.0)*x7130);
evalcond[0]=((((-1.0)*x7136*x7139))+(((-1.0)*r22*x7138))+((x7130*x7135)));
evalcond[1]=((((-1.0)*r22*x7139))+((x7131*x7136))+(((-1.0)*x7135*x7138)));
evalcond[2]=((((-1.0)*r12*x7138))+cj0+((x7130*x7132))+(((-1.0)*x7134*x7139)));
evalcond[3]=(cj0+(((-1.0)*x7137*x7138))+((x7131*x7133))+(((-1.0)*r02*x7139)));
evalcond[4]=(sj0+(((-1.0)*r12*x7139))+(((-1.0)*x7132*x7138))+((x7131*x7134)));
evalcond[5]=((((-1.0)*sj0))+((x7130*x7137))+(((-1.0)*x7133*x7139))+(((-1.0)*r02*x7138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7140=IKsin(j0);
IkReal x7141=IKcos(j0);
IkReal x7142=((1.0)*cj5);
IkReal x7143=((1.0)*sj5);
IkReal x7144=((0.09465)*cj5);
IkReal x7145=((0.09465)*sj5);
evalcond[0]=(x7141+(((-1.0)*r01*x7142))+(((-1.0)*r00*x7143)));
evalcond[1]=(x7140+(((-1.0)*r11*x7142))+(((-1.0)*r10*x7143)));
evalcond[2]=((((-0.10915)*x7140))+(((-1.0)*r01*x7144))+(((-1.0)*px))+(((-1.0)*r00*x7145)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7144))+(((0.10915)*x7141))+(((-1.0)*r10*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7146=((1.0)*sj5);
IkReal x7147=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7146)));
j4eval[0]=x7147;
j4eval[1]=IKsign(x7147);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7146))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7148=((1.0)*cj5);
IkReal x7149=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7148)));
j4eval[0]=x7149;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7148)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7150=r21*r21;
IkReal x7151=cj5*cj5;
IkReal x7152=(r21*sj5);
IkReal x7153=(cj5*r20);
IkReal x7154=((((-1.0)*x7151*(r20*r20)))+((x7150*x7151))+(((2.0)*x7152*x7153))+(((-1.0)*x7150))+(((-1.0)*(r22*r22))));
j4eval[0]=x7154;
j4eval[1]=((IKabs(r22))+(IKabs((x7152+(((-1.0)*x7153))))));
j4eval[2]=IKsign(x7154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7155=r21*r21;
IkReal x7156=cj5*cj5;
IkReal x7157=(r21*sj5);
IkReal x7158=(cj5*r20);
CheckValue<IkReal> x7159=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7156*(r20*r20)))+(((2.0)*x7157*x7158))+(((-1.0)*x7155))+(((-1.0)*(r22*r22)))+((x7155*x7156)))),-1);
if(!x7159.valid){
continue;
}
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(r22),IkReal((x7157+(((-1.0)*x7158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7159.value)))+(x7160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7161=IKsin(j4);
IkReal x7162=IKcos(j4);
IkReal x7163=(r11*sj5);
IkReal x7164=(r21*sj5);
IkReal x7165=(cj5*r00);
IkReal x7166=(cj5*r20);
IkReal x7167=(r01*sj5);
IkReal x7168=(cj5*r10);
IkReal x7169=((1.0)*x7162);
IkReal x7170=((1.0)*x7161);
evalcond[0]=((((-1.0)*r22*x7169))+((x7161*x7164))+(((-1.0)*x7166*x7170)));
evalcond[1]=(((x7162*x7165))+(((-1.0)*r02*x7170))+(((-1.0)*x7167*x7169)));
evalcond[2]=(((x7162*x7168))+(((-1.0)*x7163*x7169))+(((-1.0)*r12*x7170)));
evalcond[3]=((((-1.0)*x7168*x7170))+cj0+((x7161*x7163))+(((-1.0)*r12*x7169)));
evalcond[4]=((-1.0)+((x7162*x7166))+(((-1.0)*x7164*x7169))+(((-1.0)*r22*x7170)));
evalcond[5]=((((-1.0)*r02*x7169))+(((-1.0)*sj0))+((x7161*x7167))+(((-1.0)*x7165*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7171=((1.0)*cj5);
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7171)))),-1);
if(!x7172.valid){
continue;
}
CheckValue<IkReal> x7173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7171))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7172.value)))+(x7173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7174=IKsin(j4);
IkReal x7175=IKcos(j4);
IkReal x7176=(r11*sj5);
IkReal x7177=(r21*sj5);
IkReal x7178=(cj5*r00);
IkReal x7179=(cj5*r20);
IkReal x7180=(r01*sj5);
IkReal x7181=(cj5*r10);
IkReal x7182=((1.0)*x7175);
IkReal x7183=((1.0)*x7174);
evalcond[0]=((((-1.0)*x7179*x7183))+(((-1.0)*r22*x7182))+((x7174*x7177)));
evalcond[1]=((((-1.0)*r02*x7183))+(((-1.0)*x7180*x7182))+((x7175*x7178)));
evalcond[2]=(((x7175*x7181))+(((-1.0)*r12*x7183))+(((-1.0)*x7176*x7182)));
evalcond[3]=(cj0+(((-1.0)*x7181*x7183))+(((-1.0)*r12*x7182))+((x7174*x7176)));
evalcond[4]=((-1.0)+(((-1.0)*x7177*x7182))+(((-1.0)*r22*x7183))+((x7175*x7179)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7178*x7183))+((x7174*x7180))+(((-1.0)*r02*x7182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7184=((1.0)*sj5);
CheckValue<IkReal> x7185=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7184)))),-1);
if(!x7185.valid){
continue;
}
CheckValue<IkReal> x7186 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7184))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7185.value)))+(x7186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7187=IKsin(j4);
IkReal x7188=IKcos(j4);
IkReal x7189=(r11*sj5);
IkReal x7190=(r21*sj5);
IkReal x7191=(cj5*r00);
IkReal x7192=(cj5*r20);
IkReal x7193=(r01*sj5);
IkReal x7194=(cj5*r10);
IkReal x7195=((1.0)*x7188);
IkReal x7196=((1.0)*x7187);
evalcond[0]=((((-1.0)*r22*x7195))+((x7187*x7190))+(((-1.0)*x7192*x7196)));
evalcond[1]=((((-1.0)*x7193*x7195))+((x7188*x7191))+(((-1.0)*r02*x7196)));
evalcond[2]=((((-1.0)*x7189*x7195))+(((-1.0)*r12*x7196))+((x7188*x7194)));
evalcond[3]=(cj0+(((-1.0)*x7194*x7196))+(((-1.0)*r12*x7195))+((x7187*x7189)));
evalcond[4]=((-1.0)+(((-1.0)*x7190*x7195))+(((-1.0)*r22*x7196))+((x7188*x7192)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7191*x7196))+((x7187*x7193))+(((-1.0)*r02*x7195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7197=IKsin(j0);
IkReal x7198=IKcos(j0);
evalcond[0]=((((0.39225)*x7198))+(((-1.0)*px))+(((-0.10915)*x7197)));
evalcond[1]=((((0.10915)*x7198))+(((0.39225)*x7197))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7199=((1.0)*cj5);
IkReal x7200=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7199)));
j4eval[0]=x7200;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7199)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7201=((1.0)*cj5);
IkReal x7202=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7201)));
j4eval[0]=x7202;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7201))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7203=cj5*cj5;
IkReal x7204=((1.0)*sj5);
IkReal x7205=(cj5*r20);
IkReal x7206=(r11*r21);
IkReal x7207=(x7206+((r10*r20*x7203))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7204))+(((-1.0)*r11*x7204*x7205))+(((-1.0)*x7203*x7206)));
j4eval[0]=x7207;
j4eval[1]=IKsign(x7207);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7204))+((cj0*x7205)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7208=cj5*cj5;
IkReal x7209=((1.0)*sj5);
IkReal x7210=(cj5*r20);
IkReal x7211=(r11*r21);
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7209))+((cj0*x7210)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(IKsign((x7211+(((-1.0)*r11*x7209*x7210))+((r10*r20*x7208))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7209))+(((-1.0)*x7208*x7211)))),-1);
if(!x7213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7212.value)+(((1.5707963267949)*(x7213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7214=IKsin(j4);
IkReal x7215=IKcos(j4);
IkReal x7216=((1.0)*sj0);
IkReal x7217=(cj5*r00);
IkReal x7218=(r11*sj5);
IkReal x7219=(cj5*r10);
IkReal x7220=(r21*sj5);
IkReal x7221=(cj5*r20);
IkReal x7222=(r01*sj5);
IkReal x7223=((1.0)*x7215);
IkReal x7224=((1.0)*x7214);
evalcond[0]=((((-1.0)*x7221*x7224))+((x7214*x7220))+(((-1.0)*r22*x7223)));
evalcond[1]=(((x7215*x7221))+(((-1.0)*x7220*x7223))+(((-1.0)*r22*x7224)));
evalcond[2]=(cj0+((x7214*x7218))+(((-1.0)*r12*x7223))+(((-1.0)*x7219*x7224)));
evalcond[3]=((((-1.0)*x7217*x7224))+(((-1.0)*r02*x7223))+(((-1.0)*x7216))+((x7214*x7222)));
evalcond[4]=((((-1.0)*r02*x7224))+(((-1.0)*x7222*x7223))+((x7215*x7217))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7216))+(((-1.0)*x7218*x7223))+(((-1.0)*r12*x7224))+((x7215*x7219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7225=((1.0)*cj5);
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
CheckValue<IkReal> x7227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7225)))),-1);
if(!x7227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7226.value)+(((1.5707963267949)*(x7227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7228=IKsin(j4);
IkReal x7229=IKcos(j4);
IkReal x7230=((1.0)*sj0);
IkReal x7231=(cj5*r00);
IkReal x7232=(r11*sj5);
IkReal x7233=(cj5*r10);
IkReal x7234=(r21*sj5);
IkReal x7235=(cj5*r20);
IkReal x7236=(r01*sj5);
IkReal x7237=((1.0)*x7229);
IkReal x7238=((1.0)*x7228);
evalcond[0]=(((x7228*x7234))+(((-1.0)*r22*x7237))+(((-1.0)*x7235*x7238)));
evalcond[1]=(((x7229*x7235))+(((-1.0)*x7234*x7237))+(((-1.0)*r22*x7238)));
evalcond[2]=(((x7228*x7232))+cj0+(((-1.0)*x7233*x7238))+(((-1.0)*r12*x7237)));
evalcond[3]=(((x7228*x7236))+(((-1.0)*x7231*x7238))+(((-1.0)*x7230))+(((-1.0)*r02*x7237)));
evalcond[4]=(((x7229*x7231))+(((-1.0)*x7236*x7237))+(((-1.0)*r02*x7238))+(((-1.0)*cj0)));
evalcond[5]=(((x7229*x7233))+(((-1.0)*x7232*x7237))+(((-1.0)*x7230))+(((-1.0)*r12*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7239=((1.0)*cj5);
CheckValue<IkReal> x7240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7239)))),-1);
if(!x7240.valid){
continue;
}
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7240.value)))+(x7241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7242=IKsin(j4);
IkReal x7243=IKcos(j4);
IkReal x7244=((1.0)*sj0);
IkReal x7245=(cj5*r00);
IkReal x7246=(r11*sj5);
IkReal x7247=(cj5*r10);
IkReal x7248=(r21*sj5);
IkReal x7249=(cj5*r20);
IkReal x7250=(r01*sj5);
IkReal x7251=((1.0)*x7243);
IkReal x7252=((1.0)*x7242);
evalcond[0]=(((x7242*x7248))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7251)));
evalcond[1]=(((x7243*x7249))+(((-1.0)*x7248*x7251))+(((-1.0)*r22*x7252)));
evalcond[2]=(cj0+((x7242*x7246))+(((-1.0)*x7247*x7252))+(((-1.0)*r12*x7251)));
evalcond[3]=(((x7242*x7250))+(((-1.0)*r02*x7251))+(((-1.0)*x7244))+(((-1.0)*x7245*x7252)));
evalcond[4]=(((x7243*x7245))+(((-1.0)*r02*x7252))+(((-1.0)*cj0))+(((-1.0)*x7250*x7251)));
evalcond[5]=((((-1.0)*x7246*x7251))+(((-1.0)*r12*x7252))+((x7243*x7247))+(((-1.0)*x7244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7253=IKcos(j0);
IkReal x7254=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7253))+(((-0.10915)*x7254)));
evalcond[1]=((((0.10915)*x7253))+(((-1.0)*py))+(((-0.81725)*x7254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7255=((1.0)*cj5);
IkReal x7256=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7255)));
j4eval[0]=x7256;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7255)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7257=cj5*cj5;
IkReal x7258=((1.0)*r21);
IkReal x7259=(cj5*sj5);
IkReal x7260=((1.0)*r20);
IkReal x7261=((((-1.0)*r01*x7259*x7260))+(((-1.0)*r00*x7258*x7259))+((r01*r21))+(((-1.0)*r01*x7257*x7258))+((r02*r22))+((r00*r20*x7257)));
j4eval[0]=x7261;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7260)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7262=cj5*cj5;
IkReal x7263=(r21*sj5);
IkReal x7264=(r11*r21);
IkReal x7265=((1.0)*cj5*r20);
IkReal x7266=((((-1.0)*r11*sj5*x7265))+(((-1.0)*cj5*r10*x7263))+x7264+(((-1.0)*x7262*x7264))+((r12*r22))+((r10*r20*x7262)));
j4eval[0]=x7266;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7263))+(((-1.0)*sj0*x7265))))));
j4eval[2]=IKsign(x7266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7267=cj5*cj5;
IkReal x7268=(r21*sj5);
IkReal x7269=(r11*r21);
IkReal x7270=((1.0)*cj5*r20);
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7268))+(((-1.0)*sj0*x7270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
CheckValue<IkReal> x7272=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7268))+x7269+(((-1.0)*r11*sj5*x7270))+(((-1.0)*x7267*x7269))+((r12*r22))+((r10*r20*x7267)))),-1);
if(!x7272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7271.value)+(((1.5707963267949)*(x7272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7273=IKsin(j4);
IkReal x7274=IKcos(j4);
IkReal x7275=(r11*sj5);
IkReal x7276=(cj5*r00);
IkReal x7277=(cj5*r10);
IkReal x7278=(r21*sj5);
IkReal x7279=(cj5*r20);
IkReal x7280=(r01*sj5);
IkReal x7281=((1.0)*x7274);
IkReal x7282=((1.0)*x7273);
evalcond[0]=(((x7273*x7278))+(((-1.0)*x7279*x7282))+(((-1.0)*r22*x7281)));
evalcond[1]=((((-1.0)*x7278*x7281))+((x7274*x7279))+(((-1.0)*r22*x7282)));
evalcond[2]=(cj0+(((-1.0)*x7277*x7282))+(((-1.0)*r12*x7281))+((x7273*x7275)));
evalcond[3]=(cj0+(((-1.0)*x7280*x7281))+((x7274*x7276))+(((-1.0)*r02*x7282)));
evalcond[4]=(sj0+(((-1.0)*r12*x7282))+(((-1.0)*x7275*x7281))+((x7274*x7277)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7276*x7282))+((x7273*x7280))+(((-1.0)*r02*x7281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7283=cj5*cj5;
IkReal x7284=((1.0)*r21);
IkReal x7285=(cj5*sj5);
IkReal x7286=((1.0)*r20);
CheckValue<IkReal> x7287=IKPowWithIntegerCheck(IKsign((((r00*r20*x7283))+(((-1.0)*r01*x7283*x7284))+(((-1.0)*r00*x7284*x7285))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7285*x7286)))),-1);
if(!x7287.valid){
continue;
}
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7287.value)))+(x7288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7289=IKsin(j4);
IkReal x7290=IKcos(j4);
IkReal x7291=(r11*sj5);
IkReal x7292=(cj5*r00);
IkReal x7293=(cj5*r10);
IkReal x7294=(r21*sj5);
IkReal x7295=(cj5*r20);
IkReal x7296=(r01*sj5);
IkReal x7297=((1.0)*x7290);
IkReal x7298=((1.0)*x7289);
evalcond[0]=((((-1.0)*r22*x7297))+(((-1.0)*x7295*x7298))+((x7289*x7294)));
evalcond[1]=((((-1.0)*r22*x7298))+(((-1.0)*x7294*x7297))+((x7290*x7295)));
evalcond[2]=(cj0+(((-1.0)*x7293*x7298))+(((-1.0)*r12*x7297))+((x7289*x7291)));
evalcond[3]=(cj0+(((-1.0)*x7296*x7297))+((x7290*x7292))+(((-1.0)*r02*x7298)));
evalcond[4]=((((-1.0)*x7291*x7297))+sj0+((x7290*x7293))+(((-1.0)*r12*x7298)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7297))+(((-1.0)*x7292*x7298))+((x7289*x7296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7299=((1.0)*cj5);
CheckValue<IkReal> x7300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7299))+(((-1.0)*r00*sj5)))),-1);
if(!x7300.valid){
continue;
}
CheckValue<IkReal> x7301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7300.value)))+(x7301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7302=IKsin(j4);
IkReal x7303=IKcos(j4);
IkReal x7304=(r11*sj5);
IkReal x7305=(cj5*r00);
IkReal x7306=(cj5*r10);
IkReal x7307=(r21*sj5);
IkReal x7308=(cj5*r20);
IkReal x7309=(r01*sj5);
IkReal x7310=((1.0)*x7303);
IkReal x7311=((1.0)*x7302);
evalcond[0]=(((x7302*x7307))+(((-1.0)*x7308*x7311))+(((-1.0)*r22*x7310)));
evalcond[1]=(((x7303*x7308))+(((-1.0)*r22*x7311))+(((-1.0)*x7307*x7310)));
evalcond[2]=(cj0+((x7302*x7304))+(((-1.0)*r12*x7310))+(((-1.0)*x7306*x7311)));
evalcond[3]=(cj0+(((-1.0)*x7309*x7310))+((x7303*x7305))+(((-1.0)*r02*x7311)));
evalcond[4]=(sj0+((x7303*x7306))+(((-1.0)*r12*x7311))+(((-1.0)*x7304*x7310)));
evalcond[5]=((((-1.0)*sj0))+((x7302*x7309))+(((-1.0)*x7305*x7311))+(((-1.0)*r02*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7312=IKcos(j0);
IkReal x7313=IKsin(j0);
evalcond[0]=((((-0.03275)*x7312))+(((-0.10915)*x7313))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7312))+(((-0.03275)*x7313))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7314=((1.0)*cj5);
IkReal x7315=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7314)));
j4eval[0]=x7315;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7314)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7316=((1.0)*cj5);
IkReal x7317=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7316)));
j4eval[0]=x7317;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7316))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7318=cj5*cj5;
IkReal x7319=((1.0)*sj5);
IkReal x7320=(cj5*r20);
IkReal x7321=(r11*r21);
IkReal x7322=(x7321+(((-1.0)*r11*x7319*x7320))+((r12*r22))+(((-1.0)*x7318*x7321))+((r10*r20*x7318))+(((-1.0)*cj5*r10*r21*x7319)));
j4eval[0]=x7322;
j4eval[1]=IKsign(x7322);
j4eval[2]=((IKabs((((cj0*x7320))+(((-1.0)*cj0*r21*x7319)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7323=cj5*cj5;
IkReal x7324=((1.0)*sj5);
IkReal x7325=(cj5*r20);
IkReal x7326=(r11*r21);
CheckValue<IkReal> x7327 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7324))+((cj0*x7325)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7327.valid){
continue;
}
CheckValue<IkReal> x7328=IKPowWithIntegerCheck(IKsign((x7326+(((-1.0)*cj5*r10*r21*x7324))+((r12*r22))+(((-1.0)*r11*x7324*x7325))+((r10*r20*x7323))+(((-1.0)*x7323*x7326)))),-1);
if(!x7328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7327.value)+(((1.5707963267949)*(x7328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7329=IKsin(j4);
IkReal x7330=IKcos(j4);
IkReal x7331=((1.0)*sj0);
IkReal x7332=(cj5*r00);
IkReal x7333=(r11*sj5);
IkReal x7334=(cj5*r10);
IkReal x7335=(r21*sj5);
IkReal x7336=(cj5*r20);
IkReal x7337=(r01*sj5);
IkReal x7338=((1.0)*x7330);
IkReal x7339=((1.0)*x7329);
evalcond[0]=(((x7329*x7335))+(((-1.0)*x7336*x7339))+(((-1.0)*r22*x7338)));
evalcond[1]=((((-1.0)*x7335*x7338))+((x7330*x7336))+(((-1.0)*r22*x7339)));
evalcond[2]=(((x7329*x7333))+cj0+(((-1.0)*r12*x7338))+(((-1.0)*x7334*x7339)));
evalcond[3]=((((-1.0)*r02*x7338))+((x7329*x7337))+(((-1.0)*x7332*x7339))+(((-1.0)*x7331)));
evalcond[4]=((((-1.0)*r02*x7339))+(((-1.0)*x7337*x7338))+((x7330*x7332))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7339))+((x7330*x7334))+(((-1.0)*x7331))+(((-1.0)*x7333*x7338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7340=((1.0)*cj5);
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7340)))),-1);
if(!x7342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7341.value)+(((1.5707963267949)*(x7342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7343=IKsin(j4);
IkReal x7344=IKcos(j4);
IkReal x7345=((1.0)*sj0);
IkReal x7346=(cj5*r00);
IkReal x7347=(r11*sj5);
IkReal x7348=(cj5*r10);
IkReal x7349=(r21*sj5);
IkReal x7350=(cj5*r20);
IkReal x7351=(r01*sj5);
IkReal x7352=((1.0)*x7344);
IkReal x7353=((1.0)*x7343);
evalcond[0]=((((-1.0)*r22*x7352))+((x7343*x7349))+(((-1.0)*x7350*x7353)));
evalcond[1]=((((-1.0)*r22*x7353))+((x7344*x7350))+(((-1.0)*x7349*x7352)));
evalcond[2]=(((x7343*x7347))+cj0+(((-1.0)*r12*x7352))+(((-1.0)*x7348*x7353)));
evalcond[3]=(((x7343*x7351))+(((-1.0)*x7345))+(((-1.0)*r02*x7352))+(((-1.0)*x7346*x7353)));
evalcond[4]=((((-1.0)*x7351*x7352))+((x7344*x7346))+(((-1.0)*r02*x7353))+(((-1.0)*cj0)));
evalcond[5]=(((x7344*x7348))+(((-1.0)*r12*x7353))+(((-1.0)*x7345))+(((-1.0)*x7347*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7354=((1.0)*cj5);
CheckValue<IkReal> x7355 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7355.valid){
continue;
}
CheckValue<IkReal> x7356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7354))+(((-1.0)*r00*sj5)))),-1);
if(!x7356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7355.value)+(((1.5707963267949)*(x7356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7357=IKsin(j4);
IkReal x7358=IKcos(j4);
IkReal x7359=((1.0)*sj0);
IkReal x7360=(cj5*r00);
IkReal x7361=(r11*sj5);
IkReal x7362=(cj5*r10);
IkReal x7363=(r21*sj5);
IkReal x7364=(cj5*r20);
IkReal x7365=(r01*sj5);
IkReal x7366=((1.0)*x7358);
IkReal x7367=((1.0)*x7357);
evalcond[0]=((((-1.0)*x7364*x7367))+(((-1.0)*r22*x7366))+((x7357*x7363)));
evalcond[1]=((((-1.0)*x7363*x7366))+((x7358*x7364))+(((-1.0)*r22*x7367)));
evalcond[2]=(cj0+(((-1.0)*r12*x7366))+((x7357*x7361))+(((-1.0)*x7362*x7367)));
evalcond[3]=((((-1.0)*x7359))+((x7357*x7365))+(((-1.0)*x7360*x7367))+(((-1.0)*r02*x7366)));
evalcond[4]=(((x7358*x7360))+(((-1.0)*x7365*x7366))+(((-1.0)*r02*x7367))+(((-1.0)*cj0)));
evalcond[5]=(((x7358*x7362))+(((-1.0)*x7359))+(((-1.0)*r12*x7367))+(((-1.0)*x7361*x7366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7368=IKsin(j0);
IkReal x7369=IKcos(j0);
IkReal x7370=((1.0)*cj5);
IkReal x7371=((1.0)*sj5);
IkReal x7372=((0.09465)*cj5);
IkReal x7373=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7370))+x7369+(((-1.0)*r00*x7371)));
evalcond[1]=(x7368+(((-1.0)*r11*x7370))+(((-1.0)*r10*x7371)));
evalcond[2]=((((-1.0)*r01*x7372))+(((-1.0)*px))+(((-0.10915)*x7368))+(((-1.0)*r00*x7373)));
evalcond[3]=((((-1.0)*r11*x7372))+(((-1.0)*py))+(((0.10915)*x7369))+(((-1.0)*r10*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7374=((1.0)*sj5);
IkReal x7375=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7374)));
j4eval[0]=x7375;
j4eval[1]=IKsign(x7375);
j4eval[2]=((IKabs(((((-1.0)*r01*x7374))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7376=((1.0)*cj5);
IkReal x7377=((((-1.0)*r01*x7376))+(((-1.0)*r00*sj5)));
j4eval[0]=x7377;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7376)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7378=r21*r21;
IkReal x7379=cj5*cj5;
IkReal x7380=(r21*sj5);
IkReal x7381=(cj5*r20);
IkReal x7382=((((-1.0)*(r22*r22)))+(((2.0)*x7380*x7381))+(((-1.0)*x7378))+((x7378*x7379))+(((-1.0)*x7379*(r20*r20))));
j4eval[0]=x7382;
j4eval[1]=((IKabs(r22))+(IKabs((x7380+(((-1.0)*x7381))))));
j4eval[2]=IKsign(x7382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7383=r21*r21;
IkReal x7384=cj5*cj5;
IkReal x7385=(r21*sj5);
IkReal x7386=(cj5*r20);
CheckValue<IkReal> x7387 = IKatan2WithCheck(IkReal(r22),IkReal((x7385+(((-1.0)*x7386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7387.valid){
continue;
}
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7384*(r20*r20)))+(((2.0)*x7385*x7386))+(((-1.0)*x7383))+(((-1.0)*(r22*r22)))+((x7383*x7384)))),-1);
if(!x7388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7387.value)+(((1.5707963267949)*(x7388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7389=IKsin(j4);
IkReal x7390=IKcos(j4);
IkReal x7391=(r11*sj5);
IkReal x7392=(r21*sj5);
IkReal x7393=(cj5*r00);
IkReal x7394=(cj5*r20);
IkReal x7395=(r01*sj5);
IkReal x7396=(cj5*r10);
IkReal x7397=((1.0)*x7390);
IkReal x7398=((1.0)*x7389);
evalcond[0]=(((x7389*x7392))+(((-1.0)*r22*x7397))+(((-1.0)*x7394*x7398)));
evalcond[1]=((((-1.0)*r02*x7398))+(((-1.0)*x7395*x7397))+((x7390*x7393)));
evalcond[2]=((((-1.0)*r12*x7398))+((x7390*x7396))+(((-1.0)*x7391*x7397)));
evalcond[3]=(((x7389*x7391))+(((-1.0)*r12*x7397))+cj0+(((-1.0)*x7396*x7398)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7398))+(((-1.0)*x7392*x7397))+((x7390*x7394)));
evalcond[5]=(((x7389*x7395))+(((-1.0)*sj0))+(((-1.0)*x7393*x7398))+(((-1.0)*r02*x7397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7399=((1.0)*cj5);
CheckValue<IkReal> x7400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7399)))),-1);
if(!x7400.valid){
continue;
}
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7400.value)))+(x7401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7402=IKsin(j4);
IkReal x7403=IKcos(j4);
IkReal x7404=(r11*sj5);
IkReal x7405=(r21*sj5);
IkReal x7406=(cj5*r00);
IkReal x7407=(cj5*r20);
IkReal x7408=(r01*sj5);
IkReal x7409=(cj5*r10);
IkReal x7410=((1.0)*x7403);
IkReal x7411=((1.0)*x7402);
evalcond[0]=(((x7402*x7405))+(((-1.0)*x7407*x7411))+(((-1.0)*r22*x7410)));
evalcond[1]=(((x7403*x7406))+(((-1.0)*x7408*x7410))+(((-1.0)*r02*x7411)));
evalcond[2]=((((-1.0)*r12*x7411))+((x7403*x7409))+(((-1.0)*x7404*x7410)));
evalcond[3]=((((-1.0)*r12*x7410))+cj0+((x7402*x7404))+(((-1.0)*x7409*x7411)));
evalcond[4]=((-1.0)+((x7403*x7407))+(((-1.0)*x7405*x7410))+(((-1.0)*r22*x7411)));
evalcond[5]=((((-1.0)*sj0))+((x7402*x7408))+(((-1.0)*x7406*x7411))+(((-1.0)*r02*x7410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7412=((1.0)*sj5);
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7412)))),-1);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7412))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7413.value)))+(x7414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7415=IKsin(j4);
IkReal x7416=IKcos(j4);
IkReal x7417=(r11*sj5);
IkReal x7418=(r21*sj5);
IkReal x7419=(cj5*r00);
IkReal x7420=(cj5*r20);
IkReal x7421=(r01*sj5);
IkReal x7422=(cj5*r10);
IkReal x7423=((1.0)*x7416);
IkReal x7424=((1.0)*x7415);
evalcond[0]=(((x7415*x7418))+(((-1.0)*r22*x7423))+(((-1.0)*x7420*x7424)));
evalcond[1]=((((-1.0)*x7421*x7423))+(((-1.0)*r02*x7424))+((x7416*x7419)));
evalcond[2]=((((-1.0)*r12*x7424))+(((-1.0)*x7417*x7423))+((x7416*x7422)));
evalcond[3]=((((-1.0)*x7422*x7424))+((x7415*x7417))+cj0+(((-1.0)*r12*x7423)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7424))+(((-1.0)*x7418*x7423))+((x7416*x7420)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7423))+(((-1.0)*x7419*x7424))+((x7415*x7421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7425=IKsin(j0);
IkReal x7426=IKcos(j0);
evalcond[0]=((((0.39225)*x7426))+(((-1.0)*px))+(((-0.10915)*x7425)));
evalcond[1]=((((0.39225)*x7425))+(((-1.0)*py))+(((0.10915)*x7426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7427=((1.0)*cj5);
IkReal x7428=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7427)));
j4eval[0]=x7428;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7429=((1.0)*cj5);
IkReal x7430=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7429)));
j4eval[0]=x7430;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7429))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7431=cj5*cj5;
IkReal x7432=((1.0)*sj5);
IkReal x7433=(cj5*r20);
IkReal x7434=(r11*r21);
IkReal x7435=((((-1.0)*r11*x7432*x7433))+(((-1.0)*cj5*r10*r21*x7432))+(((-1.0)*x7431*x7434))+((r12*r22))+((r10*r20*x7431))+x7434);
j4eval[0]=x7435;
j4eval[1]=IKsign(x7435);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7432))+((cj0*x7433))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7436=cj5*cj5;
IkReal x7437=((1.0)*sj5);
IkReal x7438=(cj5*r20);
IkReal x7439=(r11*r21);
CheckValue<IkReal> x7440=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7437))+((r12*r22))+(((-1.0)*r11*x7437*x7438))+((r10*r20*x7436))+(((-1.0)*x7436*x7439))+x7439)),-1);
if(!x7440.valid){
continue;
}
CheckValue<IkReal> x7441 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7437))+((cj0*x7438)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7440.value)))+(x7441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7442=IKsin(j4);
IkReal x7443=IKcos(j4);
IkReal x7444=((1.0)*sj0);
IkReal x7445=(cj5*r00);
IkReal x7446=(r11*sj5);
IkReal x7447=(cj5*r10);
IkReal x7448=(r21*sj5);
IkReal x7449=(cj5*r20);
IkReal x7450=(r01*sj5);
IkReal x7451=((1.0)*x7443);
IkReal x7452=((1.0)*x7442);
evalcond[0]=(((x7442*x7448))+(((-1.0)*x7449*x7452))+(((-1.0)*r22*x7451)));
evalcond[1]=(((x7443*x7449))+(((-1.0)*r22*x7452))+(((-1.0)*x7448*x7451)));
evalcond[2]=(cj0+((x7442*x7446))+(((-1.0)*x7447*x7452))+(((-1.0)*r12*x7451)));
evalcond[3]=((((-1.0)*x7444))+((x7442*x7450))+(((-1.0)*r02*x7451))+(((-1.0)*x7445*x7452)));
evalcond[4]=((((-1.0)*x7450*x7451))+((x7443*x7445))+(((-1.0)*r02*x7452))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7444))+((x7443*x7447))+(((-1.0)*x7446*x7451))+(((-1.0)*r12*x7452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7453=((1.0)*cj5);
CheckValue<IkReal> x7454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7453)))),-1);
if(!x7454.valid){
continue;
}
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7454.value)))+(x7455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7456=IKsin(j4);
IkReal x7457=IKcos(j4);
IkReal x7458=((1.0)*sj0);
IkReal x7459=(cj5*r00);
IkReal x7460=(r11*sj5);
IkReal x7461=(cj5*r10);
IkReal x7462=(r21*sj5);
IkReal x7463=(cj5*r20);
IkReal x7464=(r01*sj5);
IkReal x7465=((1.0)*x7457);
IkReal x7466=((1.0)*x7456);
evalcond[0]=(((x7456*x7462))+(((-1.0)*r22*x7465))+(((-1.0)*x7463*x7466)));
evalcond[1]=(((x7457*x7463))+(((-1.0)*r22*x7466))+(((-1.0)*x7462*x7465)));
evalcond[2]=(((x7456*x7460))+cj0+(((-1.0)*r12*x7465))+(((-1.0)*x7461*x7466)));
evalcond[3]=(((x7456*x7464))+(((-1.0)*x7458))+(((-1.0)*r02*x7465))+(((-1.0)*x7459*x7466)));
evalcond[4]=((((-1.0)*r02*x7466))+(((-1.0)*x7464*x7465))+((x7457*x7459))+(((-1.0)*cj0)));
evalcond[5]=(((x7457*x7461))+(((-1.0)*x7458))+(((-1.0)*r12*x7466))+(((-1.0)*x7460*x7465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7467=((1.0)*cj5);
CheckValue<IkReal> x7468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7467)))),-1);
if(!x7468.valid){
continue;
}
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7468.value)))+(x7469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7470=IKsin(j4);
IkReal x7471=IKcos(j4);
IkReal x7472=((1.0)*sj0);
IkReal x7473=(cj5*r00);
IkReal x7474=(r11*sj5);
IkReal x7475=(cj5*r10);
IkReal x7476=(r21*sj5);
IkReal x7477=(cj5*r20);
IkReal x7478=(r01*sj5);
IkReal x7479=((1.0)*x7471);
IkReal x7480=((1.0)*x7470);
evalcond[0]=(((x7470*x7476))+(((-1.0)*r22*x7479))+(((-1.0)*x7477*x7480)));
evalcond[1]=((((-1.0)*x7476*x7479))+((x7471*x7477))+(((-1.0)*r22*x7480)));
evalcond[2]=(cj0+(((-1.0)*x7475*x7480))+((x7470*x7474))+(((-1.0)*r12*x7479)));
evalcond[3]=((((-1.0)*r02*x7479))+(((-1.0)*x7473*x7480))+(((-1.0)*x7472))+((x7470*x7478)));
evalcond[4]=((((-1.0)*x7478*x7479))+((x7471*x7473))+(((-1.0)*r02*x7480))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7472))+((x7471*x7475))+(((-1.0)*x7474*x7479))+(((-1.0)*r12*x7480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7481=((1.0)*sj5);
IkReal x7482=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7481))+(((-1.0)*r11*x7482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7482))+(((-1.0)*r00*x7481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7481))+(((-1.0)*r11*x7482))))+IKsqr(((((-1.0)*r01*x7482))+(((-1.0)*r00*x7481))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7481))+(((-1.0)*r11*x7482))), ((((-1.0)*r01*x7482))+(((-1.0)*r00*x7481))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7483=IKsin(j0);
IkReal x7484=IKcos(j0);
IkReal x7485=((1.0)*cj5);
IkReal x7486=((1.0)*sj5);
IkReal x7487=((0.09465)*cj5);
IkReal x7488=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7484))+(((-1.0)*r01*x7485))+(((-1.0)*r00*x7486)));
evalcond[1]=((((-1.0)*x7483))+(((-1.0)*r10*x7486))+(((-1.0)*r11*x7485)));
evalcond[2]=((((-1.0)*r01*x7487))+(((-1.0)*px))+(((-1.0)*r00*x7488))+(((-0.10915)*x7483)));
evalcond[3]=((((0.10915)*x7484))+(((-1.0)*py))+(((-1.0)*r10*x7488))+(((-1.0)*r11*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7489=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7489;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7490=((1.0)*cj5);
IkReal x7491=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7490)));
j4eval[0]=x7491;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7490)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7492=cj5*cj5;
IkReal x7493=r21*r21;
IkReal x7494=(r21*sj5);
IkReal x7495=(cj5*r20);
IkReal x7496=((((-1.0)*x7492*x7493))+(r22*r22)+((x7492*(r20*r20)))+(((-2.0)*x7494*x7495))+x7493);
j4eval[0]=x7496;
j4eval[1]=IKsign(x7496);
j4eval[2]=((IKabs(((((-1.0)*x7495))+x7494)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7497=cj5*cj5;
IkReal x7498=r21*r21;
IkReal x7499=(r21*sj5);
IkReal x7500=(cj5*r20);
CheckValue<IkReal> x7501=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7499*x7500))+(r22*r22)+(((-1.0)*x7497*x7498))+x7498+((x7497*(r20*r20))))),-1);
if(!x7501.valid){
continue;
}
CheckValue<IkReal> x7502 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7500))+x7499)),IKFAST_ATAN2_MAGTHRESH);
if(!x7502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7501.value)))+(x7502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7503=IKsin(j4);
IkReal x7504=IKcos(j4);
IkReal x7505=(r11*sj5);
IkReal x7506=(r21*sj5);
IkReal x7507=(cj5*r00);
IkReal x7508=(cj5*r20);
IkReal x7509=(r01*sj5);
IkReal x7510=(cj5*r10);
IkReal x7511=((1.0)*x7504);
IkReal x7512=((1.0)*x7503);
evalcond[0]=(((x7503*x7506))+(((-1.0)*x7508*x7512))+(((-1.0)*r22*x7511)));
evalcond[1]=(((x7504*x7507))+(((-1.0)*x7509*x7511))+(((-1.0)*r02*x7512)));
evalcond[2]=(((x7504*x7510))+(((-1.0)*r12*x7512))+(((-1.0)*x7505*x7511)));
evalcond[3]=(((x7503*x7505))+cj0+(((-1.0)*x7510*x7512))+(((-1.0)*r12*x7511)));
evalcond[4]=((1.0)+((x7504*x7508))+(((-1.0)*x7506*x7511))+(((-1.0)*r22*x7512)));
evalcond[5]=(((x7503*x7509))+(((-1.0)*sj0))+(((-1.0)*x7507*x7512))+(((-1.0)*r02*x7511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7513=((1.0)*cj5);
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
CheckValue<IkReal> x7515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7513))+(((-1.0)*r00*sj5)))),-1);
if(!x7515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7514.value)+(((1.5707963267949)*(x7515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7516=IKsin(j4);
IkReal x7517=IKcos(j4);
IkReal x7518=(r11*sj5);
IkReal x7519=(r21*sj5);
IkReal x7520=(cj5*r00);
IkReal x7521=(cj5*r20);
IkReal x7522=(r01*sj5);
IkReal x7523=(cj5*r10);
IkReal x7524=((1.0)*x7517);
IkReal x7525=((1.0)*x7516);
evalcond[0]=((((-1.0)*x7521*x7525))+(((-1.0)*r22*x7524))+((x7516*x7519)));
evalcond[1]=((((-1.0)*x7522*x7524))+(((-1.0)*r02*x7525))+((x7517*x7520)));
evalcond[2]=(((x7517*x7523))+(((-1.0)*x7518*x7524))+(((-1.0)*r12*x7525)));
evalcond[3]=(cj0+(((-1.0)*x7523*x7525))+(((-1.0)*r12*x7524))+((x7516*x7518)));
evalcond[4]=((1.0)+((x7517*x7521))+(((-1.0)*x7519*x7524))+(((-1.0)*r22*x7525)));
evalcond[5]=(((x7516*x7522))+(((-1.0)*sj0))+(((-1.0)*r02*x7524))+(((-1.0)*x7520*x7525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7526.value)+(((1.5707963267949)*(x7527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=(r21*sj5);
IkReal x7532=(cj5*r00);
IkReal x7533=(cj5*r20);
IkReal x7534=(r01*sj5);
IkReal x7535=(cj5*r10);
IkReal x7536=((1.0)*x7529);
IkReal x7537=((1.0)*x7528);
evalcond[0]=(((x7528*x7531))+(((-1.0)*r22*x7536))+(((-1.0)*x7533*x7537)));
evalcond[1]=((((-1.0)*x7534*x7536))+((x7529*x7532))+(((-1.0)*r02*x7537)));
evalcond[2]=((((-1.0)*r12*x7537))+(((-1.0)*x7530*x7536))+((x7529*x7535)));
evalcond[3]=(cj0+(((-1.0)*r12*x7536))+((x7528*x7530))+(((-1.0)*x7535*x7537)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7537))+(((-1.0)*x7531*x7536))+((x7529*x7533)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7532*x7537))+((x7528*x7534))+(((-1.0)*r02*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7538=IKcos(j0);
IkReal x7539=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7538))+(((-0.10915)*x7539)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7539))+(((0.10915)*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7540=((1.0)*cj5);
IkReal x7541=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7540)));
j4eval[0]=x7541;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7540)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7542=cj5*cj5;
IkReal x7543=((1.0)*r21);
IkReal x7544=(cj5*sj5);
IkReal x7545=((1.0)*r20);
IkReal x7546=((((-1.0)*r01*x7544*x7545))+((r00*r20*x7542))+(((-1.0)*r00*x7543*x7544))+((r01*r21))+(((-1.0)*r01*x7542*x7543))+((r02*r22)));
j4eval[0]=x7546;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7545)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7547=cj5*cj5;
IkReal x7548=(r21*sj5);
IkReal x7549=(r11*r21);
IkReal x7550=((1.0)*cj5*r20);
IkReal x7551=((((-1.0)*r11*sj5*x7550))+((r10*r20*x7547))+((r12*r22))+x7549+(((-1.0)*cj5*r10*x7548))+(((-1.0)*x7547*x7549)));
j4eval[0]=x7551;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7548))+(((-1.0)*sj0*x7550))))));
j4eval[2]=IKsign(x7551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7552=cj5*cj5;
IkReal x7553=(r21*sj5);
IkReal x7554=(r11*r21);
IkReal x7555=((1.0)*cj5*r20);
CheckValue<IkReal> x7556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7555))+((r10*r20*x7552))+((r12*r22))+x7554+(((-1.0)*cj5*r10*x7553))+(((-1.0)*x7552*x7554)))),-1);
if(!x7556.valid){
continue;
}
CheckValue<IkReal> x7557 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7553))+(((-1.0)*sj0*x7555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7556.value)))+(x7557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7558=IKsin(j4);
IkReal x7559=IKcos(j4);
IkReal x7560=(r11*sj5);
IkReal x7561=(cj5*r00);
IkReal x7562=(cj5*r10);
IkReal x7563=(r21*sj5);
IkReal x7564=(cj5*r20);
IkReal x7565=(r01*sj5);
IkReal x7566=((1.0)*x7559);
IkReal x7567=((1.0)*x7558);
evalcond[0]=((((-1.0)*x7564*x7567))+(((-1.0)*r22*x7566))+((x7558*x7563)));
evalcond[1]=((((-1.0)*x7563*x7566))+(((-1.0)*r22*x7567))+((x7559*x7564)));
evalcond[2]=((((-1.0)*x7562*x7567))+cj0+(((-1.0)*r12*x7566))+((x7558*x7560)));
evalcond[3]=((((-1.0)*x7565*x7566))+(((-1.0)*r02*x7567))+cj0+((x7559*x7561)));
evalcond[4]=(sj0+((x7559*x7562))+(((-1.0)*r12*x7567))+(((-1.0)*x7560*x7566)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7566))+(((-1.0)*x7561*x7567))+((x7558*x7565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7568=cj5*cj5;
IkReal x7569=((1.0)*r21);
IkReal x7570=(cj5*sj5);
IkReal x7571=((1.0)*r20);
CheckValue<IkReal> x7572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7572.valid){
continue;
}
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign((((r00*r20*x7568))+(((-1.0)*r01*x7568*x7569))+(((-1.0)*r00*x7569*x7570))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7570*x7571)))),-1);
if(!x7573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7572.value)+(((1.5707963267949)*(x7573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7574=IKsin(j4);
IkReal x7575=IKcos(j4);
IkReal x7576=(r11*sj5);
IkReal x7577=(cj5*r00);
IkReal x7578=(cj5*r10);
IkReal x7579=(r21*sj5);
IkReal x7580=(cj5*r20);
IkReal x7581=(r01*sj5);
IkReal x7582=((1.0)*x7575);
IkReal x7583=((1.0)*x7574);
evalcond[0]=((((-1.0)*r22*x7582))+(((-1.0)*x7580*x7583))+((x7574*x7579)));
evalcond[1]=((((-1.0)*r22*x7583))+(((-1.0)*x7579*x7582))+((x7575*x7580)));
evalcond[2]=(cj0+((x7574*x7576))+(((-1.0)*r12*x7582))+(((-1.0)*x7578*x7583)));
evalcond[3]=(cj0+(((-1.0)*x7581*x7582))+(((-1.0)*r02*x7583))+((x7575*x7577)));
evalcond[4]=(sj0+(((-1.0)*x7576*x7582))+((x7575*x7578))+(((-1.0)*r12*x7583)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7582))+(((-1.0)*x7577*x7583))+((x7574*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7584=((1.0)*cj5);
CheckValue<IkReal> x7585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7584))+(((-1.0)*r00*sj5)))),-1);
if(!x7585.valid){
continue;
}
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7584))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7585.value)))+(x7586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7587=IKsin(j4);
IkReal x7588=IKcos(j4);
IkReal x7589=(r11*sj5);
IkReal x7590=(cj5*r00);
IkReal x7591=(cj5*r10);
IkReal x7592=(r21*sj5);
IkReal x7593=(cj5*r20);
IkReal x7594=(r01*sj5);
IkReal x7595=((1.0)*x7588);
IkReal x7596=((1.0)*x7587);
evalcond[0]=((((-1.0)*r22*x7595))+(((-1.0)*x7593*x7596))+((x7587*x7592)));
evalcond[1]=(((x7588*x7593))+(((-1.0)*x7592*x7595))+(((-1.0)*r22*x7596)));
evalcond[2]=((((-1.0)*x7591*x7596))+cj0+(((-1.0)*r12*x7595))+((x7587*x7589)));
evalcond[3]=(((x7588*x7590))+cj0+(((-1.0)*x7594*x7595))+(((-1.0)*r02*x7596)));
evalcond[4]=(((x7588*x7591))+sj0+(((-1.0)*x7589*x7595))+(((-1.0)*r12*x7596)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7590*x7596))+(((-1.0)*r02*x7595))+((x7587*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7597=cj1*cj1;
IkReal x7598=(cj1*sj1);
IkReal x7599=(cj1*sj2);
IkReal x7600=(r00*sj5);
IkReal x7601=(cj2*sj1);
IkReal x7602=(cj5*r01);
IkReal x7603=((20000.0)*py);
IkReal x7604=((1893.0)*r10*sj5);
IkReal x7605=((1893.0)*cj5*r11);
IkReal x7606=(sj2*x7597);
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7606))+(((-8500.0)*x7606))+(((-15690.0)*x7598*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x7598))+(((7845.0)*x7598))),-1);
if(!x7607.valid){
continue;
}
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(((((-1.0)*x7599))+(((-1.0)*x7601))),-1);
if(!x7608.valid){
continue;
}
if( IKabs(((x7607.value)*(((((-1.0)*x7601*x7605))+(((-1.0)*x7601*x7604))+(((-1.0)*x7601*x7603))+(((-1.0)*x7599*x7605))+(((-1.0)*x7599*x7604))+(((-1.0)*x7599*x7603))+(((-2183.0)*x7600))+(((-2183.0)*x7602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7608.value)*((x7602+x7600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7607.value)*(((((-1.0)*x7601*x7605))+(((-1.0)*x7601*x7604))+(((-1.0)*x7601*x7603))+(((-1.0)*x7599*x7605))+(((-1.0)*x7599*x7604))+(((-1.0)*x7599*x7603))+(((-2183.0)*x7600))+(((-2183.0)*x7602))))))+IKsqr(((x7608.value)*((x7602+x7600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7607.value)*(((((-1.0)*x7601*x7605))+(((-1.0)*x7601*x7604))+(((-1.0)*x7601*x7603))+(((-1.0)*x7599*x7605))+(((-1.0)*x7599*x7604))+(((-1.0)*x7599*x7603))+(((-2183.0)*x7600))+(((-2183.0)*x7602))))), ((x7608.value)*((x7602+x7600))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7609=IKcos(j0);
IkReal x7610=IKsin(j0);
IkReal x7611=((1.0)*cj1);
IkReal x7612=((0.39225)*sj1);
IkReal x7613=(cj5*r11);
IkReal x7614=((1.0)*sj5);
IkReal x7615=(cj5*r01);
IkReal x7616=((1.0)*sj1);
IkReal x7617=((0.09465)*sj5);
IkReal x7618=((0.39225)*cj1);
IkReal x7619=((0.425)*cj1);
IkReal x7620=(sj2*x7609);
IkReal x7621=(sj2*x7610);
IkReal x7622=(cj2*x7609);
IkReal x7623=(cj2*x7610);
evalcond[0]=((((-1.0)*x7616*x7622))+(((-1.0)*x7611*x7620))+(((-1.0)*r00*x7614))+(((-1.0)*x7615)));
evalcond[1]=((((-1.0)*x7616*x7623))+(((-1.0)*x7611*x7621))+(((-1.0)*x7613))+(((-1.0)*r10*x7614)));
evalcond[2]=((((-1.0)*x7612*x7620))+(((-0.10915)*x7610))+(((-0.09465)*x7615))+(((-1.0)*px))+(((-1.0)*r00*x7617))+((x7609*x7619))+((x7618*x7622)));
evalcond[3]=((((-1.0)*x7612*x7621))+(((-0.09465)*x7613))+(((-1.0)*py))+((x7610*x7619))+(((0.10915)*x7609))+(((-1.0)*r10*x7617))+((x7618*x7623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7624=((1.0)*cj5);
IkReal x7625=((((-1.0)*r01*x7624))+(((-1.0)*r00*sj5)));
j4eval[0]=x7625;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7624)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7626=((1.0)*cj5);
IkReal x7627=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7626)));
j4eval[0]=x7627;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7626))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7628=((1.0)*sj0);
IkReal x7629=((1.0)*cj0);
IkReal x7630=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7630;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x7628))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7629))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x7628))+(((-1.0)*r02*x7629))))));
j4eval[2]=IKsign(x7630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7631=((-1.0)*r20);
IkReal x7633 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7633)==0){
continue;
}
IkReal x7632=pow(x7633,-0.5);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7631),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7634.value));
IkReal gconst133=(r21*x7632);
IkReal gconst134=(x7631*x7632);
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7636=((-1.0)*r20);
IkReal x7637=x7632;
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7636),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
IkReal x7638=((-1.0)*(x7639.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7638;
IkReal gconst132=x7638;
IkReal gconst133=(r21*x7637);
IkReal gconst134=(x7636*x7637);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7640=((-1.0)*r20);
IkReal x7641=x7632;
CheckValue<IkReal> x7643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7640),IKFAST_ATAN2_MAGTHRESH);
if(!x7643.valid){
continue;
}
IkReal x7642=((-1.0)*(x7643.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7642;
IkReal gconst132=x7642;
IkReal gconst133=(r21*x7641);
IkReal gconst134=(x7640*x7641);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7644=((-1.0)*r20);
IkReal x7645=x7632;
CheckValue<IkReal> x7647 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7644),IKFAST_ATAN2_MAGTHRESH);
if(!x7647.valid){
continue;
}
IkReal x7646=((-1.0)*(x7647.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7646;
IkReal gconst132=x7646;
IkReal gconst133=(r21*x7645);
IkReal gconst134=(x7644*x7645);
IkReal x7648=r22*r22;
CheckValue<IkReal> x7651=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7648))),-1);
if(!x7651.valid){
continue;
}
IkReal x7649=x7651.value;
IkReal x7650=(((x7649*(r21*r21*r21*r21)))+(((2.0)*x7649*(r20*r20)*(r21*r21)))+((x7649*(r20*r20*r20*r20)))+x7648);
j4eval[0]=x7650;
j4eval[1]=IKsign(x7650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7652=(gconst133*r21);
IkReal x7653=(cj1*sj2);
IkReal x7654=(gconst134*r20);
IkReal x7655=(cj2*sj1);
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal((((r22*x7653))+((r22*x7655)))),IkReal(((((-1.0)*x7654*x7655))+(((-1.0)*x7653*x7654))+((x7652*x7655))+((x7652*x7653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
CheckValue<IkReal> x7657=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7652*x7652)+(((-2.0)*x7652*x7654))+(x7654*x7654))),-1);
if(!x7657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7656.value)+(((1.5707963267949)*(x7657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7658=IKsin(j4);
IkReal x7659=IKcos(j4);
IkReal x7660=(sj1*sj2);
IkReal x7661=(gconst133*r11);
IkReal x7662=(gconst133*r21);
IkReal x7663=(gconst133*r01);
IkReal x7664=((1.0)*x7659);
IkReal x7665=(gconst134*x7659);
IkReal x7666=((1.0)*x7658);
IkReal x7667=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7666))+(((-1.0)*r22*x7664))+((x7658*x7662)));
evalcond[1]=((((-1.0)*gconst134*r10*x7666))+(((-1.0)*r12*x7664))+cj0+((x7658*x7661)));
evalcond[2]=((((-1.0)*sj0))+((x7658*x7663))+(((-1.0)*r02*x7664))+(((-1.0)*gconst134*r00*x7666)));
evalcond[3]=(((cj2*sj1))+((r20*x7665))+((cj1*sj2))+(((-1.0)*r22*x7666))+(((-1.0)*x7662*x7664)));
evalcond[4]=((((-1.0)*cj0*x7667))+((r00*x7665))+(((-1.0)*r02*x7666))+((cj0*x7660))+(((-1.0)*x7663*x7664)));
evalcond[5]=((((-1.0)*r12*x7666))+((r10*x7665))+(((-1.0)*x7661*x7664))+((sj0*x7660))+(((-1.0)*sj0*x7667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7668=((1.0)*gconst134);
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7668)))),-1);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7668))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7669.value)))+(x7670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7671=IKsin(j4);
IkReal x7672=IKcos(j4);
IkReal x7673=(sj1*sj2);
IkReal x7674=(gconst133*r11);
IkReal x7675=(gconst133*r21);
IkReal x7676=(gconst133*r01);
IkReal x7677=((1.0)*x7672);
IkReal x7678=(gconst134*x7672);
IkReal x7679=((1.0)*x7671);
IkReal x7680=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7679))+((x7671*x7675))+(((-1.0)*r22*x7677)));
evalcond[1]=(cj0+((x7671*x7674))+(((-1.0)*gconst134*r10*x7679))+(((-1.0)*r12*x7677)));
evalcond[2]=((((-1.0)*sj0))+((x7671*x7676))+(((-1.0)*r02*x7677))+(((-1.0)*gconst134*r00*x7679)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7678))+(((-1.0)*x7675*x7677))+(((-1.0)*r22*x7679)));
evalcond[4]=((((-1.0)*cj0*x7680))+(((-1.0)*r02*x7679))+(((-1.0)*x7676*x7677))+((cj0*x7673))+((r00*x7678)));
evalcond[5]=(((sj0*x7673))+(((-1.0)*x7674*x7677))+(((-1.0)*r12*x7679))+(((-1.0)*sj0*x7680))+((r10*x7678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7681=((1.0)*gconst134);
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7681)))),-1);
if(!x7683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7682.value)+(((1.5707963267949)*(x7683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7684=IKsin(j4);
IkReal x7685=IKcos(j4);
IkReal x7686=(sj1*sj2);
IkReal x7687=(gconst133*r11);
IkReal x7688=(gconst133*r21);
IkReal x7689=(gconst133*r01);
IkReal x7690=((1.0)*x7685);
IkReal x7691=(gconst134*x7685);
IkReal x7692=((1.0)*x7684);
IkReal x7693=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7692))+(((-1.0)*r22*x7690))+((x7684*x7688)));
evalcond[1]=((((-1.0)*gconst134*r10*x7692))+cj0+((x7684*x7687))+(((-1.0)*r12*x7690)));
evalcond[2]=((((-1.0)*r02*x7690))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7692))+((x7684*x7689)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7692))+((r20*x7691))+(((-1.0)*x7688*x7690)));
evalcond[4]=((((-1.0)*r02*x7692))+(((-1.0)*cj0*x7693))+((cj0*x7686))+((r00*x7691))+(((-1.0)*x7689*x7690)));
evalcond[5]=((((-1.0)*x7687*x7690))+((sj0*x7686))+((r10*x7691))+(((-1.0)*r12*x7692))+(((-1.0)*sj0*x7693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7694=((-1.0)*r21);
IkReal x7696 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7696)==0){
continue;
}
IkReal x7695=pow(x7696,-0.5);
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(x7694),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7697.value))));
IkReal gconst136=(x7694*x7695);
IkReal gconst137=((1.0)*r20*x7695);
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7698.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7699=((-1.0)*r21);
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal(x7699),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
IkReal x7700=((1.0)*(x7702.value));
IkReal x7701=x7695;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7700)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7700)));
IkReal gconst136=(x7699*x7701);
IkReal gconst137=((1.0)*r20*x7701);
IkReal x7703=r22*r22;
IkReal x7704=((1.0)*x7703);
CheckValue<IkReal> x7708=IKPowWithIntegerCheck(((-1.0)+x7703),-1);
if(!x7708.valid){
continue;
}
IkReal x7705=x7708.value;
if((((1.0)+(((-1.0)*x7704)))) < -0.00001)
continue;
IkReal x7706=IKsqrt(((1.0)+(((-1.0)*x7704))));
IkReal x7707=(cj0*x7705*x7706);
j4eval[0]=((IKabs(((((-1.0)*x7704*x7707))+x7707)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7709=((-1.0)*r21);
CheckValue<IkReal> x7712 = IKatan2WithCheck(IkReal(x7709),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7712.valid){
continue;
}
IkReal x7710=((1.0)*(x7712.value));
IkReal x7711=x7695;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7710)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7710)));
IkReal gconst136=(x7709*x7711);
IkReal gconst137=((1.0)*r20*x7711);
IkReal x7713=r22*r22;
IkReal x7714=((1.0)*x7713);
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(((-1.0)+x7713),-1);
if(!x7718.valid){
continue;
}
IkReal x7715=x7718.value;
if((((1.0)+(((-1.0)*x7714)))) < -0.00001)
continue;
IkReal x7716=IKsqrt(((1.0)+(((-1.0)*x7714))));
IkReal x7717=(sj0*x7715*x7716);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7714*x7717))+x7717))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7719=((-1.0)*r21);
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(x7719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
IkReal x7720=((1.0)*(x7722.value));
IkReal x7721=x7695;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7720)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7720)));
IkReal gconst136=(x7719*x7721);
IkReal gconst137=((1.0)*r20*x7721);
IkReal x7723=r22*r22;
IkReal x7724=(r12*sj0);
IkReal x7725=(cj0*r02);
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(((-1.0)+x7723),-1);
if(!x7729.valid){
continue;
}
IkReal x7726=x7729.value;
if((((1.0)+(((-1.0)*x7723)))) < -0.00001)
continue;
IkReal x7727=IKsqrt(((1.0)+(((-1.0)*x7723))));
IkReal x7728=(r22*x7726*x7727);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7724))+(((-1.0)*x7725)))))+(IKabs((((x7724*x7728))+((x7725*x7728))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7730=((1.0)*sj0);
IkReal x7731=((1.0)*cj0);
CheckValue<IkReal> x7732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7732.valid){
continue;
}
CheckValue<IkReal> x7733 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7730))+(((-1.0)*r02*x7731)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7731))+(((-1.0)*gconst136*r11*x7730))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7732.value)))+(x7733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7734=IKsin(j4);
IkReal x7735=IKcos(j4);
IkReal x7736=(gconst136*r01);
IkReal x7737=(gconst137*r10);
IkReal x7738=(sj1*sj2);
IkReal x7739=(gconst137*r20);
IkReal x7740=(gconst136*r11);
IkReal x7741=(gconst136*r21);
IkReal x7742=(gconst137*r00);
IkReal x7743=((1.0)*x7735);
IkReal x7744=((1.0)*cj1*cj2);
IkReal x7745=((1.0)*x7734);
evalcond[0]=((((-1.0)*r22*x7743))+(((-1.0)*x7739*x7745))+((x7734*x7741)));
evalcond[1]=(cj0+(((-1.0)*x7737*x7745))+(((-1.0)*r12*x7743))+((x7734*x7740)));
evalcond[2]=((((-1.0)*x7742*x7745))+(((-1.0)*sj0))+(((-1.0)*r02*x7743))+((x7734*x7736)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7745))+(((-1.0)*x7741*x7743))+((cj1*sj2))+((x7735*x7739)));
evalcond[4]=((((-1.0)*r02*x7745))+((cj0*x7738))+(((-1.0)*cj0*x7744))+(((-1.0)*x7736*x7743))+((x7735*x7742)));
evalcond[5]=((((-1.0)*x7740*x7743))+(((-1.0)*r12*x7745))+((sj0*x7738))+((x7735*x7737))+(((-1.0)*sj0*x7744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7746=((1.0)*gconst137);
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7746))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7746)))),-1);
if(!x7748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7747.value)+(((1.5707963267949)*(x7748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7749=IKsin(j4);
IkReal x7750=IKcos(j4);
IkReal x7751=(gconst136*r01);
IkReal x7752=(gconst137*r10);
IkReal x7753=(sj1*sj2);
IkReal x7754=(gconst137*r20);
IkReal x7755=(gconst136*r11);
IkReal x7756=(gconst136*r21);
IkReal x7757=(gconst137*r00);
IkReal x7758=((1.0)*x7750);
IkReal x7759=((1.0)*cj1*cj2);
IkReal x7760=((1.0)*x7749);
evalcond[0]=((((-1.0)*r22*x7758))+(((-1.0)*x7754*x7760))+((x7749*x7756)));
evalcond[1]=(cj0+(((-1.0)*x7752*x7760))+(((-1.0)*r12*x7758))+((x7749*x7755)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7758))+(((-1.0)*x7757*x7760))+((x7749*x7751)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7760))+((cj1*sj2))+(((-1.0)*x7756*x7758))+((x7750*x7754)));
evalcond[4]=((((-1.0)*r02*x7760))+(((-1.0)*cj0*x7759))+((cj0*x7753))+((x7750*x7757))+(((-1.0)*x7751*x7758)));
evalcond[5]=((((-1.0)*x7755*x7758))+((sj0*x7753))+(((-1.0)*r12*x7760))+((x7750*x7752))+(((-1.0)*sj0*x7759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7761=((1.0)*gconst137);
CheckValue<IkReal> x7762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7761))+(((-1.0)*gconst136*r00)))),-1);
if(!x7762.valid){
continue;
}
CheckValue<IkReal> x7763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7762.value)))+(x7763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7764=IKsin(j4);
IkReal x7765=IKcos(j4);
IkReal x7766=(gconst136*r01);
IkReal x7767=(gconst137*r10);
IkReal x7768=(sj1*sj2);
IkReal x7769=(gconst137*r20);
IkReal x7770=(gconst136*r11);
IkReal x7771=(gconst136*r21);
IkReal x7772=(gconst137*r00);
IkReal x7773=((1.0)*x7765);
IkReal x7774=((1.0)*cj1*cj2);
IkReal x7775=((1.0)*x7764);
evalcond[0]=((((-1.0)*x7769*x7775))+(((-1.0)*r22*x7773))+((x7764*x7771)));
evalcond[1]=((((-1.0)*x7767*x7775))+cj0+((x7764*x7770))+(((-1.0)*r12*x7773)));
evalcond[2]=((((-1.0)*r02*x7773))+(((-1.0)*sj0))+(((-1.0)*x7772*x7775))+((x7764*x7766)));
evalcond[3]=((((-1.0)*x7771*x7773))+((cj2*sj1))+(((-1.0)*r22*x7775))+((cj1*sj2))+((x7765*x7769)));
evalcond[4]=(((x7765*x7772))+(((-1.0)*r02*x7775))+(((-1.0)*x7766*x7773))+(((-1.0)*cj0*x7774))+((cj0*x7768)));
evalcond[5]=(((sj0*x7768))+(((-1.0)*x7770*x7773))+(((-1.0)*sj0*x7774))+(((-1.0)*r12*x7775))+((x7765*x7767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7776=((-1.0)*r10);
IkReal x7778 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7778)==0){
continue;
}
IkReal x7777=pow(x7778,-0.5);
CheckValue<IkReal> x7779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7776),IKFAST_ATAN2_MAGTHRESH);
if(!x7779.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7779.value));
IkReal gconst139=(r11*x7777);
IkReal gconst140=(x7776*x7777);
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7780.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7781=((-1.0)*r10);
IkReal x7782=x7777;
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7781),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
IkReal x7783=((-1.0)*(x7784.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7783;
IkReal gconst138=x7783;
IkReal gconst139=(r11*x7782);
IkReal gconst140=(x7781*x7782);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7785=((1.0)*sj0);
IkReal x7786=((1.0)*gconst139);
CheckValue<IkReal> x7787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7786)))),-1);
if(!x7787.valid){
continue;
}
CheckValue<IkReal> x7788 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7785)))),IkReal(((((-1.0)*gconst139*r11*x7785))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7786))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7787.value)))+(x7788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7789=IKsin(j4);
IkReal x7790=IKcos(j4);
IkReal x7791=(gconst140*r00);
IkReal x7792=(sj1*sj2);
IkReal x7793=(gconst139*r11);
IkReal x7794=(gconst139*r01);
IkReal x7795=(gconst139*r21);
IkReal x7796=((1.0)*x7790);
IkReal x7797=((1.0)*x7789);
IkReal x7798=((1.0)*cj1*cj2);
IkReal x7799=(gconst140*x7790);
evalcond[0]=((((-1.0)*r22*x7796))+((x7789*x7795))+(((-1.0)*gconst140*r20*x7797)));
evalcond[1]=(cj0+((x7789*x7793))+(((-1.0)*r12*x7796))+(((-1.0)*gconst140*r10*x7797)));
evalcond[2]=((((-1.0)*sj0))+((x7789*x7794))+(((-1.0)*x7791*x7797))+(((-1.0)*r02*x7796)));
evalcond[3]=((((-1.0)*r22*x7797))+((cj2*sj1))+((cj1*sj2))+((r20*x7799))+(((-1.0)*x7795*x7796)));
evalcond[4]=((((-1.0)*cj0*x7798))+((cj0*x7792))+(((-1.0)*r02*x7797))+(((-1.0)*x7794*x7796))+((x7790*x7791)));
evalcond[5]=(((r10*x7799))+(((-1.0)*x7793*x7796))+(((-1.0)*r12*x7797))+(((-1.0)*sj0*x7798))+((sj0*x7792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7800=((1.0)*gconst140);
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7800)))),-1);
if(!x7801.valid){
continue;
}
CheckValue<IkReal> x7802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7800))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7801.value)))+(x7802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7803=IKsin(j4);
IkReal x7804=IKcos(j4);
IkReal x7805=(gconst140*r00);
IkReal x7806=(sj1*sj2);
IkReal x7807=(gconst139*r11);
IkReal x7808=(gconst139*r01);
IkReal x7809=(gconst139*r21);
IkReal x7810=((1.0)*x7804);
IkReal x7811=((1.0)*x7803);
IkReal x7812=((1.0)*cj1*cj2);
IkReal x7813=(gconst140*x7804);
evalcond[0]=(((x7803*x7809))+(((-1.0)*r22*x7810))+(((-1.0)*gconst140*r20*x7811)));
evalcond[1]=((((-1.0)*gconst140*r10*x7811))+cj0+((x7803*x7807))+(((-1.0)*r12*x7810)));
evalcond[2]=((((-1.0)*sj0))+((x7803*x7808))+(((-1.0)*x7805*x7811))+(((-1.0)*r02*x7810)));
evalcond[3]=(((cj2*sj1))+((r20*x7813))+((cj1*sj2))+(((-1.0)*r22*x7811))+(((-1.0)*x7809*x7810)));
evalcond[4]=(((cj0*x7806))+(((-1.0)*r02*x7811))+((x7804*x7805))+(((-1.0)*cj0*x7812))+(((-1.0)*x7808*x7810)));
evalcond[5]=(((r10*x7813))+((sj0*x7806))+(((-1.0)*r12*x7811))+(((-1.0)*x7807*x7810))+(((-1.0)*sj0*x7812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7814=((-1.0)*r11);
IkReal x7816 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7816)==0){
continue;
}
IkReal x7815=pow(x7816,-0.5);
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(x7814),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7817.value))));
IkReal gconst142=(x7814*x7815);
IkReal gconst143=((1.0)*r10*x7815);
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7818.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7819=((-1.0)*r11);
CheckValue<IkReal> x7822 = IKatan2WithCheck(IkReal(x7819),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7822.valid){
continue;
}
IkReal x7820=((1.0)*(x7822.value));
IkReal x7821=x7815;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7820)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7820)));
IkReal gconst142=(x7819*x7821);
IkReal gconst143=((1.0)*r10*x7821);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7823=((-1.0)*r11);
CheckValue<IkReal> x7826 = IKatan2WithCheck(IkReal(x7823),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7826.valid){
continue;
}
IkReal x7824=((1.0)*(x7826.value));
IkReal x7825=x7815;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7824)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7824)));
IkReal gconst142=(x7823*x7825);
IkReal gconst143=((1.0)*r10*x7825);
IkReal x7827=r12*r12;
IkReal x7828=((1.0)*sj0);
IkReal x7829=(cj0*r02);
IkReal x7830=x7815;
j4eval[0]=((IKabs(((((-1.0)*x7829))+(((-1.0)*r12*x7828)))))+(IKabs((((sj0*x7827*x7830))+(((-1.0)*x7828*x7830))+((r12*x7829*x7830))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7831=((-1.0)*r11);
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(x7831),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
IkReal x7832=((1.0)*(x7834.value));
IkReal x7833=x7815;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7832)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7832)));
IkReal gconst142=(x7831*x7833);
IkReal gconst143=((1.0)*r10*x7833);
IkReal x7835=r12*r12;
IkReal x7836=(cj1*r22*sj2);
IkReal x7837=(cj2*r22*sj1);
CheckValue<IkReal> x7841=IKPowWithIntegerCheck(((-1.0)+x7835),-1);
if(!x7841.valid){
continue;
}
IkReal x7838=x7841.value;
if((((1.0)+(((-1.0)*x7835)))) < -0.00001)
continue;
IkReal x7839=IKsqrt(((1.0)+(((-1.0)*x7835))));
IkReal x7840=((1.0)*r12*x7838*x7839);
j4eval[0]=((IKabs(((((-1.0)*x7837*x7840))+(((-1.0)*x7836*x7840)))))+(IKabs((x7836+x7837))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7842=(gconst142*r21);
IkReal x7843=(cj1*sj2);
IkReal x7844=(cj2*sj1);
IkReal x7845=(gconst143*r20);
CheckValue<IkReal> x7846 = IKatan2WithCheck(IkReal((((r22*x7844))+((r22*x7843)))),IkReal((((x7842*x7844))+((x7842*x7843))+(((-1.0)*x7844*x7845))+(((-1.0)*x7843*x7845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7846.valid){
continue;
}
CheckValue<IkReal> x7847=IKPowWithIntegerCheck(IKsign(((x7842*x7842)+(r22*r22)+(x7845*x7845)+(((-2.0)*x7842*x7845)))),-1);
if(!x7847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7846.value)+(((1.5707963267949)*(x7847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7848=IKsin(j4);
IkReal x7849=IKcos(j4);
IkReal x7850=(sj1*sj2);
IkReal x7851=(gconst143*r20);
IkReal x7852=((1.0)*x7849);
IkReal x7853=((1.0)*cj1*cj2);
IkReal x7854=((1.0)*x7848);
IkReal x7855=(gconst142*x7848);
IkReal x7856=(gconst143*x7849);
evalcond[0]=(((r21*x7855))+(((-1.0)*x7851*x7854))+(((-1.0)*r22*x7852)));
evalcond[1]=(((r11*x7855))+cj0+(((-1.0)*gconst143*r10*x7854))+(((-1.0)*r12*x7852)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7855))+(((-1.0)*r02*x7852))+(((-1.0)*gconst143*r00*x7854)));
evalcond[3]=(((cj2*sj1))+((x7849*x7851))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7852))+(((-1.0)*r22*x7854)));
evalcond[4]=((((-1.0)*cj0*x7853))+((cj0*x7850))+((r00*x7856))+(((-1.0)*r02*x7854))+(((-1.0)*gconst142*r01*x7852)));
evalcond[5]=((((-1.0)*sj0*x7853))+((sj0*x7850))+(((-1.0)*gconst142*r11*x7852))+((r10*x7856))+(((-1.0)*r12*x7854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7857=((1.0)*sj0);
IkReal x7858=((1.0)*gconst142);
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7857)))),IkReal(((((-1.0)*gconst142*r11*x7857))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7858))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7858)))),-1);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7859.value)+(((1.5707963267949)*(x7860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=(sj1*sj2);
IkReal x7864=(gconst143*r20);
IkReal x7865=((1.0)*x7862);
IkReal x7866=((1.0)*cj1*cj2);
IkReal x7867=((1.0)*x7861);
IkReal x7868=(gconst142*x7861);
IkReal x7869=(gconst143*x7862);
evalcond[0]=((((-1.0)*x7864*x7867))+((r21*x7868))+(((-1.0)*r22*x7865)));
evalcond[1]=(cj0+((r11*x7868))+(((-1.0)*r12*x7865))+(((-1.0)*gconst143*r10*x7867)));
evalcond[2]=((((-1.0)*gconst143*r00*x7867))+(((-1.0)*sj0))+((r01*x7868))+(((-1.0)*r02*x7865)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7865))+((x7862*x7864))+(((-1.0)*r22*x7867)));
evalcond[4]=(((cj0*x7863))+(((-1.0)*gconst142*r01*x7865))+((r00*x7869))+(((-1.0)*r02*x7867))+(((-1.0)*cj0*x7866)));
evalcond[5]=(((sj0*x7863))+(((-1.0)*r12*x7867))+(((-1.0)*sj0*x7866))+((r10*x7869))+(((-1.0)*gconst142*r11*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7870=((1.0)*gconst143);
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7870))+(((-1.0)*gconst142*r00)))),-1);
if(!x7871.valid){
continue;
}
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7870))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7871.value)))+(x7872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7873=IKsin(j4);
IkReal x7874=IKcos(j4);
IkReal x7875=(sj1*sj2);
IkReal x7876=(gconst143*r20);
IkReal x7877=((1.0)*x7874);
IkReal x7878=((1.0)*cj1*cj2);
IkReal x7879=((1.0)*x7873);
IkReal x7880=(gconst142*x7873);
IkReal x7881=(gconst143*x7874);
evalcond[0]=((((-1.0)*r22*x7877))+(((-1.0)*x7876*x7879))+((r21*x7880)));
evalcond[1]=(cj0+(((-1.0)*r12*x7877))+((r11*x7880))+(((-1.0)*gconst143*r10*x7879)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7880))+(((-1.0)*r02*x7877))+(((-1.0)*gconst143*r00*x7879)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7879))+((x7874*x7876))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7877)));
evalcond[4]=(((cj0*x7875))+((r00*x7881))+(((-1.0)*gconst142*r01*x7877))+(((-1.0)*r02*x7879))+(((-1.0)*cj0*x7878)));
evalcond[5]=((((-1.0)*gconst142*r11*x7877))+((r10*x7881))+(((-1.0)*r12*x7879))+((sj0*x7875))+(((-1.0)*sj0*x7878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7882=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7882;
j4eval[1]=IKsign(x7882);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7883=((1.0)*cj5);
IkReal x7884=((((-1.0)*r01*x7883))+(((-1.0)*r00*sj5)));
j4eval[0]=x7884;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7883))))));
j4eval[2]=IKsign(x7884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7885=cj5*cj5;
IkReal x7886=r11*r11;
IkReal x7887=(r11*sj5);
IkReal x7888=(cj5*r10);
IkReal x7889=((((-1.0)*x7885*x7886))+(r12*r12)+((x7885*(r10*r10)))+x7886+(((-2.0)*x7887*x7888)));
j4eval[0]=x7889;
j4eval[1]=IKsign(x7889);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7887))+x7888))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7890=cj5*cj5;
IkReal x7891=r11*r11;
IkReal x7892=(cj5*r10);
IkReal x7893=(r11*sj5);
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7890*x7891))+x7891+(((-2.0)*x7892*x7893))+((x7890*(r10*r10))))),-1);
if(!x7894.valid){
continue;
}
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal((x7892+(((-1.0)*x7893)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7894.value)))+(x7895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7896=IKsin(j4);
IkReal x7897=IKcos(j4);
IkReal x7898=(cj5*r10);
IkReal x7899=(r01*sj5);
IkReal x7900=(cj5*r00);
IkReal x7901=(cj5*r20);
IkReal x7902=((1.0)*x7897);
IkReal x7903=((1.0)*x7896);
IkReal x7904=(sj5*x7896);
evalcond[0]=(((r21*x7904))+(((-1.0)*r22*x7902))+(((-1.0)*x7901*x7903)));
evalcond[1]=(((x7896*x7899))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7902)));
evalcond[2]=((((-1.0)*r12*x7903))+(((-1.0)*r11*sj5*x7902))+((x7897*x7898)));
evalcond[3]=((1.0)+(((-1.0)*x7898*x7903))+(((-1.0)*r12*x7902))+((r11*x7904)));
evalcond[4]=(((x7897*x7901))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7903))+(((-1.0)*r21*sj5*x7902)));
evalcond[5]=(((x7897*x7900))+(((-1.0)*x7899*x7902))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7905=((1.0)*cj5);
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7905))+(((-1.0)*r00*sj5)))),-1);
if(!x7906.valid){
continue;
}
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7906.value)))+(x7907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7908=IKsin(j4);
IkReal x7909=IKcos(j4);
IkReal x7910=(cj5*r10);
IkReal x7911=(r01*sj5);
IkReal x7912=(cj5*r00);
IkReal x7913=(cj5*r20);
IkReal x7914=((1.0)*x7909);
IkReal x7915=((1.0)*x7908);
IkReal x7916=(sj5*x7908);
evalcond[0]=(((r21*x7916))+(((-1.0)*x7913*x7915))+(((-1.0)*r22*x7914)));
evalcond[1]=((((-1.0)*r02*x7914))+(((-1.0)*x7912*x7915))+((x7908*x7911)));
evalcond[2]=((((-1.0)*r11*sj5*x7914))+(((-1.0)*r12*x7915))+((x7909*x7910)));
evalcond[3]=((1.0)+(((-1.0)*x7910*x7915))+((r11*x7916))+(((-1.0)*r12*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7915))+(((-1.0)*r21*sj5*x7914))+((x7909*x7913)));
evalcond[5]=((((-1.0)*r02*x7915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7911*x7914))+((x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7917=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7917.value)))+(x7918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7919=IKsin(j4);
IkReal x7920=IKcos(j4);
IkReal x7921=(cj5*r10);
IkReal x7922=(r01*sj5);
IkReal x7923=(cj5*r00);
IkReal x7924=(cj5*r20);
IkReal x7925=((1.0)*x7920);
IkReal x7926=((1.0)*x7919);
IkReal x7927=(sj5*x7919);
evalcond[0]=((((-1.0)*x7924*x7926))+(((-1.0)*r22*x7925))+((r21*x7927)));
evalcond[1]=((((-1.0)*r02*x7925))+((x7919*x7922))+(((-1.0)*x7923*x7926)));
evalcond[2]=((((-1.0)*r11*sj5*x7925))+((x7920*x7921))+(((-1.0)*r12*x7926)));
evalcond[3]=((1.0)+(((-1.0)*x7921*x7926))+(((-1.0)*r12*x7925))+((r11*x7927)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7926))+((x7920*x7924))+(((-1.0)*r21*sj5*x7925)));
evalcond[5]=((((-1.0)*r02*x7926))+(((-1.0)*x7922*x7925))+((x7920*x7923))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7928=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7928;
j4eval[1]=IKsign(x7928);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7929=((1.0)*cj5);
IkReal x7930=((((-1.0)*r21*x7929))+(((-1.0)*r20*sj5)));
j4eval[0]=x7930;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7929))))));
j4eval[2]=IKsign(x7930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7931=cj5*cj5;
IkReal x7932=r11*r11;
IkReal x7933=(cj5*r10);
IkReal x7934=(r11*sj5);
IkReal x7935=((((-1.0)*x7931*(r10*r10)))+(((-1.0)*x7932))+(((2.0)*x7933*x7934))+(((-1.0)*(r12*r12)))+((x7931*x7932)));
j4eval[0]=x7935;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7934))+x7933))));
j4eval[2]=IKsign(x7935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7936=cj5*cj5;
IkReal x7937=r11*r11;
IkReal x7938=(cj5*r10);
IkReal x7939=(r11*sj5);
CheckValue<IkReal> x7940=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7937))+(((-1.0)*x7936*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7938*x7939))+((x7936*x7937)))),-1);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(((((-1.0)*x7939))+x7938)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7940.value)))+(x7941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKsin(j4);
IkReal x7943=IKcos(j4);
IkReal x7944=(cj5*r10);
IkReal x7945=(r01*sj5);
IkReal x7946=(cj5*r00);
IkReal x7947=(cj5*r20);
IkReal x7948=((1.0)*x7943);
IkReal x7949=((1.0)*x7942);
IkReal x7950=(sj5*x7942);
evalcond[0]=((((-1.0)*r22*x7948))+(((-1.0)*x7947*x7949))+((r21*x7950)));
evalcond[1]=((((-1.0)*r02*x7948))+((x7942*x7945))+(((-1.0)*x7946*x7949)));
evalcond[2]=((((-1.0)*r11*sj5*x7948))+(((-1.0)*r12*x7949))+((x7943*x7944)));
evalcond[3]=((-1.0)+((r11*x7950))+(((-1.0)*r12*x7948))+(((-1.0)*x7944*x7949)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7949))+(((-1.0)*r21*sj5*x7948))+((cj1*sj2))+((x7943*x7947)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7949))+((x7943*x7946))+((cj1*cj2))+(((-1.0)*x7945*x7948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7951=((1.0)*cj5);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7951))+(((-1.0)*r20*sj5)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(cj5*r10);
IkReal x7957=(r01*sj5);
IkReal x7958=(cj5*r00);
IkReal x7959=(cj5*r20);
IkReal x7960=((1.0)*x7955);
IkReal x7961=((1.0)*x7954);
IkReal x7962=(sj5*x7954);
evalcond[0]=(((r21*x7962))+(((-1.0)*r22*x7960))+(((-1.0)*x7959*x7961)));
evalcond[1]=((((-1.0)*x7958*x7961))+((x7954*x7957))+(((-1.0)*r02*x7960)));
evalcond[2]=(((x7955*x7956))+(((-1.0)*r11*sj5*x7960))+(((-1.0)*r12*x7961)));
evalcond[3]=((-1.0)+(((-1.0)*x7956*x7961))+((r11*x7962))+(((-1.0)*r12*x7960)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7961))+((x7955*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7960)));
evalcond[5]=((((-1.0)*x7957*x7960))+((x7955*x7958))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7961))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7963.value)+(((1.5707963267949)*(x7964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7965=IKsin(j4);
IkReal x7966=IKcos(j4);
IkReal x7967=(cj5*r10);
IkReal x7968=(r01*sj5);
IkReal x7969=(cj5*r00);
IkReal x7970=(cj5*r20);
IkReal x7971=((1.0)*x7966);
IkReal x7972=((1.0)*x7965);
IkReal x7973=(sj5*x7965);
evalcond[0]=((((-1.0)*r22*x7971))+(((-1.0)*x7970*x7972))+((r21*x7973)));
evalcond[1]=(((x7965*x7968))+(((-1.0)*r02*x7971))+(((-1.0)*x7969*x7972)));
evalcond[2]=((((-1.0)*r11*sj5*x7971))+(((-1.0)*r12*x7972))+((x7966*x7967)));
evalcond[3]=((-1.0)+((r11*x7973))+(((-1.0)*x7967*x7972))+(((-1.0)*r12*x7971)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7972))+((cj1*sj2))+(((-1.0)*r21*sj5*x7971))+((x7966*x7970)));
evalcond[5]=((((-1.0)*x7968*x7971))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7972))+((cj1*cj2))+((x7966*x7969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7974=((-1.0)*r00);
IkReal x7976 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7976)==0){
continue;
}
IkReal x7975=pow(x7976,-0.5);
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7974),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7977.value));
IkReal gconst145=(r01*x7975);
IkReal gconst146=(x7974*x7975);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7979=((-1.0)*r00);
IkReal x7980=x7975;
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7979),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
IkReal x7981=((-1.0)*(x7982.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7981;
IkReal gconst144=x7981;
IkReal gconst145=(r01*x7980);
IkReal gconst146=(x7979*x7980);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7983=((1.0)*sj0);
IkReal x7984=((1.0)*gconst145);
CheckValue<IkReal> x7985 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7983))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7983))+(((-1.0)*cj0*r01*x7984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7985.valid){
continue;
}
CheckValue<IkReal> x7986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7984))+(((-1.0)*gconst146*r21)))),-1);
if(!x7986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7985.value)+(((1.5707963267949)*(x7986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7987=IKsin(j4);
IkReal x7988=IKcos(j4);
IkReal x7989=(gconst146*r10);
IkReal x7990=(sj1*sj2);
IkReal x7991=(gconst146*r20);
IkReal x7992=(gconst146*r00);
IkReal x7993=((1.0)*x7988);
IkReal x7994=((1.0)*x7987);
IkReal x7995=(gconst145*x7987);
IkReal x7996=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7991*x7994))+((r21*x7995))+(((-1.0)*r22*x7993)));
evalcond[1]=(((r11*x7995))+(((-1.0)*r12*x7993))+cj0+(((-1.0)*x7989*x7994)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7995))+(((-1.0)*x7992*x7994))+(((-1.0)*r02*x7993)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7993))+((cj1*sj2))+((x7988*x7991))+(((-1.0)*r22*x7994)));
evalcond[4]=((((-1.0)*gconst145*r01*x7993))+((x7988*x7992))+((cj0*x7990))+(((-1.0)*cj0*x7996))+(((-1.0)*r02*x7994)));
evalcond[5]=((((-1.0)*r12*x7994))+((x7988*x7989))+(((-1.0)*gconst145*r11*x7993))+((sj0*x7990))+(((-1.0)*sj0*x7996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7997=((1.0)*gconst146);
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7997))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
CheckValue<IkReal> x7999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7997))+(((-1.0)*gconst145*r10)))),-1);
if(!x7999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7998.value)+(((1.5707963267949)*(x7999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8000=IKsin(j4);
IkReal x8001=IKcos(j4);
IkReal x8002=(gconst146*r10);
IkReal x8003=(sj1*sj2);
IkReal x8004=(gconst146*r20);
IkReal x8005=(gconst146*r00);
IkReal x8006=((1.0)*x8001);
IkReal x8007=((1.0)*x8000);
IkReal x8008=(gconst145*x8000);
IkReal x8009=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8008))+(((-1.0)*x8004*x8007))+(((-1.0)*r22*x8006)));
evalcond[1]=(cj0+((r11*x8008))+(((-1.0)*r12*x8006))+(((-1.0)*x8002*x8007)));
evalcond[2]=(((r01*x8008))+(((-1.0)*sj0))+(((-1.0)*x8005*x8007))+(((-1.0)*r02*x8006)));
evalcond[3]=(((cj2*sj1))+((x8001*x8004))+(((-1.0)*gconst145*r21*x8006))+((cj1*sj2))+(((-1.0)*r22*x8007)));
evalcond[4]=(((x8001*x8005))+(((-1.0)*cj0*x8009))+((cj0*x8003))+(((-1.0)*gconst145*r01*x8006))+(((-1.0)*r02*x8007)));
evalcond[5]=(((sj0*x8003))+((x8001*x8002))+(((-1.0)*gconst145*r11*x8006))+(((-1.0)*r12*x8007))+(((-1.0)*sj0*x8009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8010=((-1.0)*r01);
IkReal x8012 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8012)==0){
continue;
}
IkReal x8011=pow(x8012,-0.5);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(x8010),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8013.value))));
IkReal gconst148=(x8010*x8011);
IkReal gconst149=((1.0)*r00*x8011);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8014.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8015=((-1.0)*r01);
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal(x8015),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
IkReal x8016=((1.0)*(x8018.value));
IkReal x8017=x8011;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8016)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8016)));
IkReal gconst148=(x8015*x8017);
IkReal gconst149=((1.0)*r00*x8017);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8019=((-1.0)*r01);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal(x8019),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
IkReal x8020=((1.0)*(x8022.value));
IkReal x8021=x8011;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8020)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8020)));
IkReal gconst148=(x8019*x8021);
IkReal gconst149=((1.0)*r00*x8021);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8023=((-1.0)*r01);
CheckValue<IkReal> x8026 = IKatan2WithCheck(IkReal(x8023),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8026.valid){
continue;
}
IkReal x8024=((1.0)*(x8026.value));
IkReal x8025=x8011;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8024)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8024)));
IkReal gconst148=(x8023*x8025);
IkReal gconst149=((1.0)*r00*x8025);
IkReal x8027=r02*r02;
IkReal x8028=(r12*sj0);
IkReal x8029=((1.0)*cj0);
IkReal x8030=x8011;
j4eval[0]=((IKabs(((((-1.0)*x8028))+(((-1.0)*r02*x8029)))))+(IKabs((((r02*x8028*x8030))+((cj0*x8027*x8030))+(((-1.0)*x8029*x8030))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8031=((1.0)*sj0);
IkReal x8032=((1.0)*gconst148);
CheckValue<IkReal> x8033 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8031))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8032))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8033.valid){
continue;
}
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8032))+(((-1.0)*gconst149*r21)))),-1);
if(!x8034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8033.value)+(((1.5707963267949)*(x8034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8035=IKsin(j4);
IkReal x8036=IKcos(j4);
IkReal x8037=(gconst148*r11);
IkReal x8038=(sj1*sj2);
IkReal x8039=((1.0)*x8036);
IkReal x8040=(gconst149*x8036);
IkReal x8041=(gconst148*x8035);
IkReal x8042=((1.0)*cj1*cj2);
IkReal x8043=((1.0)*x8035);
evalcond[0]=((((-1.0)*gconst149*r20*x8043))+((r21*x8041))+(((-1.0)*r22*x8039)));
evalcond[1]=(cj0+(((-1.0)*r12*x8039))+(((-1.0)*gconst149*r10*x8043))+((x8035*x8037)));
evalcond[2]=(((r01*x8041))+(((-1.0)*sj0))+(((-1.0)*r02*x8039))+(((-1.0)*gconst149*r00*x8043)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8039))+((cj1*sj2))+((r20*x8040))+(((-1.0)*r22*x8043)));
evalcond[4]=((((-1.0)*cj0*x8042))+(((-1.0)*gconst148*r01*x8039))+((cj0*x8038))+(((-1.0)*r02*x8043))+((r00*x8040)));
evalcond[5]=(((r10*x8040))+((sj0*x8038))+(((-1.0)*sj0*x8042))+(((-1.0)*x8037*x8039))+(((-1.0)*r12*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8044=((1.0)*gconst149);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8044))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8044))+(((-1.0)*gconst148*r10)))),-1);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8045.value)+(((1.5707963267949)*(x8046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKsin(j4);
IkReal x8048=IKcos(j4);
IkReal x8049=(gconst148*r11);
IkReal x8050=(sj1*sj2);
IkReal x8051=((1.0)*x8048);
IkReal x8052=(gconst149*x8048);
IkReal x8053=(gconst148*x8047);
IkReal x8054=((1.0)*cj1*cj2);
IkReal x8055=((1.0)*x8047);
evalcond[0]=((((-1.0)*gconst149*r20*x8055))+(((-1.0)*r22*x8051))+((r21*x8053)));
evalcond[1]=(((x8047*x8049))+(((-1.0)*r12*x8051))+cj0+(((-1.0)*gconst149*r10*x8055)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8051))+(((-1.0)*gconst149*r00*x8055))+((r01*x8053)));
evalcond[3]=(((cj2*sj1))+((r20*x8052))+(((-1.0)*gconst148*r21*x8051))+((cj1*sj2))+(((-1.0)*r22*x8055)));
evalcond[4]=(((r00*x8052))+(((-1.0)*gconst148*r01*x8051))+((cj0*x8050))+(((-1.0)*r02*x8055))+(((-1.0)*cj0*x8054)));
evalcond[5]=((((-1.0)*r12*x8055))+(((-1.0)*sj0*x8054))+((r10*x8052))+((sj0*x8050))+(((-1.0)*x8049*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*gconst149);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8056)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(gconst148*r11);
IkReal x8062=(sj1*sj2);
IkReal x8063=((1.0)*x8060);
IkReal x8064=(gconst149*x8060);
IkReal x8065=(gconst148*x8059);
IkReal x8066=((1.0)*cj1*cj2);
IkReal x8067=((1.0)*x8059);
evalcond[0]=(((r21*x8065))+(((-1.0)*gconst149*r20*x8067))+(((-1.0)*r22*x8063)));
evalcond[1]=(cj0+(((-1.0)*r12*x8063))+((x8059*x8061))+(((-1.0)*gconst149*r10*x8067)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8065))+(((-1.0)*gconst149*r00*x8067))+(((-1.0)*r02*x8063)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8063))+((r20*x8064))+(((-1.0)*r22*x8067)));
evalcond[4]=((((-1.0)*cj0*x8066))+((r00*x8064))+((cj0*x8062))+(((-1.0)*gconst148*r01*x8063))+(((-1.0)*r02*x8067)));
evalcond[5]=(((r10*x8064))+(((-1.0)*sj0*x8066))+(((-1.0)*r12*x8067))+(((-1.0)*x8061*x8063))+((sj0*x8062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8068=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8068;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8069=((1.0)*cj5);
IkReal x8070=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8069)));
j4eval[0]=x8070;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8069))))));
j4eval[2]=IKsign(x8070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8071=cj5*cj5;
IkReal x8072=r01*r01;
IkReal x8073=(r01*sj5);
IkReal x8074=(cj5*r00);
IkReal x8075=((((-1.0)*x8072))+(((-1.0)*(r02*r02)))+(((2.0)*x8073*x8074))+((x8071*x8072))+(((-1.0)*x8071*(r00*r00))));
j4eval[0]=x8075;
j4eval[1]=IKsign(x8075);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8073))+x8074))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8076=cj5*cj5;
IkReal x8077=r01*r01;
IkReal x8078=(r01*sj5);
IkReal x8079=(cj5*r00);
CheckValue<IkReal> x8080=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8077))+(((-1.0)*x8076*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8076*x8077))+(((2.0)*x8078*x8079)))),-1);
if(!x8080.valid){
continue;
}
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(((((-1.0)*x8078))+x8079)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8080.value)))+(x8081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8082=IKsin(j4);
IkReal x8083=IKcos(j4);
IkReal x8084=(cj5*r10);
IkReal x8085=(r01*sj5);
IkReal x8086=(cj5*r00);
IkReal x8087=(cj5*r20);
IkReal x8088=((1.0)*x8083);
IkReal x8089=((1.0)*x8082);
IkReal x8090=(sj5*x8082);
evalcond[0]=((((-1.0)*x8087*x8089))+(((-1.0)*r22*x8088))+((r21*x8090)));
evalcond[1]=(((r11*x8090))+(((-1.0)*r12*x8088))+(((-1.0)*x8084*x8089)));
evalcond[2]=((((-1.0)*r02*x8089))+((x8083*x8086))+(((-1.0)*x8085*x8088)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8088))+(((-1.0)*x8086*x8089))+((x8082*x8085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8088))+((cj1*sj2))+(((-1.0)*r22*x8089))+((x8083*x8087)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8088))+((x8083*x8084))+(((-1.0)*r12*x8089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8091=((1.0)*cj5);
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8091)))),-1);
if(!x8092.valid){
continue;
}
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8092.value)))+(x8093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8094=IKsin(j4);
IkReal x8095=IKcos(j4);
IkReal x8096=(cj5*r10);
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
IkReal x8099=(cj5*r20);
IkReal x8100=((1.0)*x8095);
IkReal x8101=((1.0)*x8094);
IkReal x8102=(sj5*x8094);
evalcond[0]=((((-1.0)*x8099*x8101))+(((-1.0)*r22*x8100))+((r21*x8102)));
evalcond[1]=((((-1.0)*x8096*x8101))+((r11*x8102))+(((-1.0)*r12*x8100)));
evalcond[2]=(((x8095*x8098))+(((-1.0)*r02*x8101))+(((-1.0)*x8097*x8100)));
evalcond[3]=((-1.0)+(((-1.0)*x8098*x8101))+(((-1.0)*r02*x8100))+((x8094*x8097)));
evalcond[4]=((((-1.0)*r21*sj5*x8100))+((cj2*sj1))+((x8095*x8099))+((cj1*sj2))+(((-1.0)*r22*x8101)));
evalcond[5]=(((x8095*x8096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8100))+(((-1.0)*r12*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8103.valid){
continue;
}
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8103.value)))+(x8104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8105=IKsin(j4);
IkReal x8106=IKcos(j4);
IkReal x8107=(cj5*r10);
IkReal x8108=(r01*sj5);
IkReal x8109=(cj5*r00);
IkReal x8110=(cj5*r20);
IkReal x8111=((1.0)*x8106);
IkReal x8112=((1.0)*x8105);
IkReal x8113=(sj5*x8105);
evalcond[0]=((((-1.0)*x8110*x8112))+((r21*x8113))+(((-1.0)*r22*x8111)));
evalcond[1]=((((-1.0)*r12*x8111))+((r11*x8113))+(((-1.0)*x8107*x8112)));
evalcond[2]=(((x8106*x8109))+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8112)));
evalcond[3]=((-1.0)+(((-1.0)*x8109*x8112))+(((-1.0)*r02*x8111))+((x8105*x8108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8111))+((x8106*x8110))+((cj1*sj2))+(((-1.0)*r22*x8112)));
evalcond[5]=(((x8106*x8107))+(((-1.0)*r11*sj5*x8111))+(((-1.0)*r12*x8112))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8114=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8114;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8115=((1.0)*cj5);
IkReal x8116=((((-1.0)*r21*x8115))+(((-1.0)*r20*sj5)));
j4eval[0]=x8116;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8115)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8117=cj5*cj5;
IkReal x8118=r01*r01;
IkReal x8119=(cj5*r00);
IkReal x8120=(r01*sj5);
IkReal x8121=(((x8117*(r00*r00)))+(((-2.0)*x8119*x8120))+(r02*r02)+x8118+(((-1.0)*x8117*x8118)));
j4eval[0]=x8121;
j4eval[1]=((IKabs((x8119+(((-1.0)*x8120)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8122=cj5*cj5;
IkReal x8123=r01*r01;
IkReal x8124=(r01*sj5);
IkReal x8125=(cj5*r00);
CheckValue<IkReal> x8126=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8122*x8123))+((x8122*(r00*r00)))+(r02*r02)+x8123+(((-2.0)*x8124*x8125)))),-1);
if(!x8126.valid){
continue;
}
CheckValue<IkReal> x8127 = IKatan2WithCheck(IkReal((x8125+(((-1.0)*x8124)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8126.value)))+(x8127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8128=IKsin(j4);
IkReal x8129=IKcos(j4);
IkReal x8130=(cj5*r10);
IkReal x8131=(r01*sj5);
IkReal x8132=(cj5*r00);
IkReal x8133=(cj5*r20);
IkReal x8134=((1.0)*x8129);
IkReal x8135=((1.0)*x8128);
IkReal x8136=(sj5*x8128);
evalcond[0]=((((-1.0)*r22*x8134))+((r21*x8136))+(((-1.0)*x8133*x8135)));
evalcond[1]=(((r11*x8136))+(((-1.0)*x8130*x8135))+(((-1.0)*r12*x8134)));
evalcond[2]=((((-1.0)*r02*x8135))+(((-1.0)*x8131*x8134))+((x8129*x8132)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8134))+(((-1.0)*x8132*x8135))+((x8128*x8131)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8135))+(((-1.0)*r21*sj5*x8134))+((cj1*sj2))+((x8129*x8133)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8135))+((x8129*x8130))+(((-1.0)*r11*sj5*x8134))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8137=((1.0)*cj5);
CheckValue<IkReal> x8138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8137))+(((-1.0)*r20*sj5)))),-1);
if(!x8138.valid){
continue;
}
CheckValue<IkReal> x8139 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8138.value)))+(x8139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(cj5*r10);
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
IkReal x8145=(cj5*r20);
IkReal x8146=((1.0)*x8141);
IkReal x8147=((1.0)*x8140);
IkReal x8148=(sj5*x8140);
evalcond[0]=((((-1.0)*x8145*x8147))+(((-1.0)*r22*x8146))+((r21*x8148)));
evalcond[1]=(((r11*x8148))+(((-1.0)*r12*x8146))+(((-1.0)*x8142*x8147)));
evalcond[2]=(((x8141*x8144))+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8147)));
evalcond[3]=((1.0)+((x8140*x8143))+(((-1.0)*x8144*x8147))+(((-1.0)*r02*x8146)));
evalcond[4]=(((cj2*sj1))+((x8141*x8145))+((cj1*sj2))+(((-1.0)*r22*x8147))+(((-1.0)*r21*sj5*x8146)));
evalcond[5]=((((-1.0)*r11*sj5*x8146))+((x8141*x8142))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8147))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8149 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8149.valid){
continue;
}
CheckValue<IkReal> x8150=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8149.value)+(((1.5707963267949)*(x8150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8151=IKsin(j4);
IkReal x8152=IKcos(j4);
IkReal x8153=(cj5*r10);
IkReal x8154=(r01*sj5);
IkReal x8155=(cj5*r00);
IkReal x8156=(cj5*r20);
IkReal x8157=((1.0)*x8152);
IkReal x8158=((1.0)*x8151);
IkReal x8159=(sj5*x8151);
evalcond[0]=((((-1.0)*x8156*x8158))+(((-1.0)*r22*x8157))+((r21*x8159)));
evalcond[1]=((((-1.0)*x8153*x8158))+((r11*x8159))+(((-1.0)*r12*x8157)));
evalcond[2]=(((x8152*x8155))+(((-1.0)*r02*x8158))+(((-1.0)*x8154*x8157)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8157))+((x8151*x8154))+(((-1.0)*x8155*x8158)));
evalcond[4]=(((cj2*sj1))+((x8152*x8156))+((cj1*sj2))+(((-1.0)*r21*sj5*x8157))+(((-1.0)*r22*x8158)));
evalcond[5]=(((x8152*x8153))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8157))+((cj1*cj2))+(((-1.0)*r12*x8158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8160=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8160);
rxp1_1=(px*r21);
rxp1_2=(r11*x8160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8161=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8161);
rxp1_1=(px*r21);
rxp1_2=(r11*x8161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8162=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8162);
rxp1_1=(px*r21);
rxp1_2=(r11*x8162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8165=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8165.valid){
continue;
}
IkReal x8163=x8165.value;
IkReal x8164=(sj0*x8163);
cj4array[0]=((((-1.0)*sj1*sj2*x8164))+((cj1*cj2*x8164)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8166=IKsin(j4);
IkReal x8167=IKcos(j4);
IkReal x8168=(r21*sj5);
IkReal x8169=(cj5*r20);
IkReal x8170=((1.0)*x8166);
IkReal x8171=((1.0)*x8167);
evalcond[0]=((-1.0)*r02*x8166);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8171)));
evalcond[2]=((((-1.0)*x8169*x8170))+((x8166*x8168)));
evalcond[3]=(((r11*sj5*x8166))+(((-1.0)*cj5*r10*x8170)));
evalcond[4]=(((x8167*x8169))+((cj2*sj1))+(((-1.0)*x8168*x8171))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8174=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8174.valid){
continue;
}
IkReal x8172=x8174.value;
IkReal x8173=((1.0)*x8172);
cj4array[0]=((((-1.0)*cj2*sj1*x8173))+(((-1.0)*cj1*sj2*x8173)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8175=IKsin(j4);
IkReal x8176=IKcos(j4);
IkReal x8177=(r11*sj5);
IkReal x8178=((1.0)*sj0);
IkReal x8179=((1.0)*x8176);
IkReal x8180=((1.0)*cj5*x8175);
evalcond[0]=((-1.0)*r02*x8175);
evalcond[1]=((((-1.0)*x8178))+(((-1.0)*r02*x8179)));
evalcond[2]=((((-1.0)*r20*x8180))+((r21*sj5*x8175)));
evalcond[3]=((((-1.0)*r10*x8180))+((x8175*x8177)));
evalcond[4]=(((cj5*r10*x8176))+(((-1.0)*x8177*x8179))+(((-1.0)*cj1*cj2*x8178))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8181=IKPowWithIntegerCheck(r02,-1);
if(!x8181.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8181.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8182=IKsin(j4);
IkReal x8183=IKcos(j4);
IkReal x8184=(cj5*x8183);
IkReal x8185=(sj5*x8182);
IkReal x8186=((1.0)*sj5*x8183);
IkReal x8187=((1.0)*cj5*x8182);
evalcond[0]=((-1.0)*r02*x8182);
evalcond[1]=(((r21*x8185))+(((-1.0)*r20*x8187)));
evalcond[2]=(((r11*x8185))+(((-1.0)*r10*x8187)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8186))+((r20*x8184)));
evalcond[4]=(((r10*x8184))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8186))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8188=((1.0)*sj0);
IkReal x8189=((1.0)*cj0);
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8189))+(((-1.0)*r12*x8188)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8189))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8190.value)+(((1.5707963267949)*(x8191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8192=IKsin(j4);
IkReal x8193=IKcos(j4);
IkReal x8194=(cj5*r10);
IkReal x8195=(sj1*sj2);
IkReal x8196=(r01*sj5);
IkReal x8197=(cj5*r00);
IkReal x8198=(cj5*r20);
IkReal x8199=((1.0)*x8193);
IkReal x8200=((1.0)*cj1*cj2);
IkReal x8201=((1.0)*x8192);
IkReal x8202=(sj5*x8192);
evalcond[0]=((((-1.0)*x8198*x8201))+(((-1.0)*r22*x8199))+((r21*x8202)));
evalcond[1]=(((r11*x8202))+cj0+(((-1.0)*x8194*x8201))+(((-1.0)*r12*x8199)));
evalcond[2]=((((-1.0)*r02*x8199))+(((-1.0)*sj0))+((x8192*x8196))+(((-1.0)*x8197*x8201)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8199))+(((-1.0)*r22*x8201))+((x8193*x8198)));
evalcond[4]=((((-1.0)*x8196*x8199))+(((-1.0)*cj0*x8200))+(((-1.0)*r02*x8201))+((x8193*x8197))+((cj0*x8195)));
evalcond[5]=(((sj0*x8195))+(((-1.0)*r12*x8201))+(((-1.0)*r11*sj5*x8199))+((x8193*x8194))+(((-1.0)*sj0*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8203=((1.0)*cj5);
CheckValue<IkReal> x8204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8203)))),-1);
if(!x8204.valid){
continue;
}
CheckValue<IkReal> x8205 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8204.value)))+(x8205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8206=IKsin(j4);
IkReal x8207=IKcos(j4);
IkReal x8208=(cj5*r10);
IkReal x8209=(sj1*sj2);
IkReal x8210=(r01*sj5);
IkReal x8211=(cj5*r00);
IkReal x8212=(cj5*r20);
IkReal x8213=((1.0)*x8207);
IkReal x8214=((1.0)*cj1*cj2);
IkReal x8215=((1.0)*x8206);
IkReal x8216=(sj5*x8206);
evalcond[0]=((((-1.0)*r22*x8213))+(((-1.0)*x8212*x8215))+((r21*x8216)));
evalcond[1]=(((r11*x8216))+cj0+(((-1.0)*x8208*x8215))+(((-1.0)*r12*x8213)));
evalcond[2]=(((x8206*x8210))+(((-1.0)*sj0))+(((-1.0)*r02*x8213))+(((-1.0)*x8211*x8215)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8213))+(((-1.0)*r22*x8215))+((x8207*x8212)));
evalcond[4]=((((-1.0)*cj0*x8214))+((cj0*x8209))+(((-1.0)*r02*x8215))+(((-1.0)*x8210*x8213))+((x8207*x8211)));
evalcond[5]=(((sj0*x8209))+(((-1.0)*r12*x8215))+(((-1.0)*sj0*x8214))+((x8207*x8208))+(((-1.0)*r11*sj5*x8213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8217=((1.0)*cj5);
CheckValue<IkReal> x8218 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8218.valid){
continue;
}
CheckValue<IkReal> x8219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8217))+(((-1.0)*r00*sj5)))),-1);
if(!x8219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8218.value)+(((1.5707963267949)*(x8219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8220=IKsin(j4);
IkReal x8221=IKcos(j4);
IkReal x8222=(cj5*r10);
IkReal x8223=(sj1*sj2);
IkReal x8224=(r01*sj5);
IkReal x8225=(cj5*r00);
IkReal x8226=(cj5*r20);
IkReal x8227=((1.0)*x8221);
IkReal x8228=((1.0)*cj1*cj2);
IkReal x8229=((1.0)*x8220);
IkReal x8230=(sj5*x8220);
evalcond[0]=(((r21*x8230))+(((-1.0)*r22*x8227))+(((-1.0)*x8226*x8229)));
evalcond[1]=(cj0+((r11*x8230))+(((-1.0)*r12*x8227))+(((-1.0)*x8222*x8229)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8227))+((x8220*x8224))+(((-1.0)*x8225*x8229)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8221*x8226))+(((-1.0)*r21*sj5*x8227))+(((-1.0)*r22*x8229)));
evalcond[4]=(((cj0*x8223))+(((-1.0)*r02*x8229))+(((-1.0)*x8224*x8227))+((x8221*x8225))+(((-1.0)*cj0*x8228)));
evalcond[5]=((((-1.0)*r11*sj5*x8227))+(((-1.0)*r12*x8229))+((x8221*x8222))+(((-1.0)*sj0*x8228))+((sj0*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8231=cj5*cj5;
IkReal x8232=r21*r21;
IkReal x8233=(cj2*sj1);
IkReal x8234=(cj1*sj2);
IkReal x8235=(r21*sj5);
IkReal x8236=((1.0)*cj5*r20);
CheckValue<IkReal> x8237=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x8231*x8232))+((x8231*(r20*r20)))+x8232+(((-2.0)*cj5*r20*x8235)))),-1);
if(!x8237.valid){
continue;
}
CheckValue<IkReal> x8238 = IKatan2WithCheck(IkReal((((r22*x8233))+((r22*x8234)))),IkReal(((((-1.0)*x8233*x8236))+(((-1.0)*x8234*x8236))+((x8234*x8235))+((x8233*x8235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8237.value)))+(x8238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8239=IKsin(j4);
IkReal x8240=IKcos(j4);
IkReal x8241=(r21*sj5);
IkReal x8242=(cj5*r20);
IkReal x8243=((1.0)*x8240);
IkReal x8244=((1.0)*x8239);
evalcond[0]=((((-1.0)*x8242*x8244))+(((-1.0)*r22*x8243))+((x8239*x8241)));
evalcond[1]=(((cj2*sj1))+((x8240*x8242))+(((-1.0)*x8241*x8243))+((cj1*sj2))+(((-1.0)*r22*x8244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8245=(cj5*sj4);
IkReal x8246=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8246))+(((-1.0)*r00*x8245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8245))+(((-1.0)*r11*x8246))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8246))+(((-1.0)*r00*x8245))))+IKsqr((((r10*x8245))+(((-1.0)*r11*x8246))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8246))+(((-1.0)*r00*x8245))), (((r10*x8245))+(((-1.0)*r11*x8246))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8247=IKcos(j0);
IkReal x8248=IKsin(j0);
IkReal x8249=(cj4*cj5);
IkReal x8250=((1.0)*cj1);
IkReal x8251=((0.39225)*sj1);
IkReal x8252=(r11*sj5);
IkReal x8253=(cj5*r11);
IkReal x8254=((1.0)*sj5);
IkReal x8255=((1.0)*sj4);
IkReal x8256=((1.0)*sj1);
IkReal x8257=((0.09465)*sj5);
IkReal x8258=(cj5*r01);
IkReal x8259=((0.425)*cj1);
IkReal x8260=((1.0)*cj4);
IkReal x8261=(sj2*x8247);
IkReal x8262=(sj2*x8248);
IkReal x8263=((0.39225)*cj1*cj2);
IkReal x8264=(cj2*x8247);
IkReal x8265=(cj2*x8248);
evalcond[0]=((((-1.0)*r12*x8260))+((sj4*x8252))+(((-1.0)*cj5*r10*x8255))+x8247);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*r02*x8260))+(((-1.0)*cj5*r00*x8255))+(((-1.0)*x8248)));
evalcond[2]=((((-1.0)*x8258))+(((-1.0)*x8250*x8261))+(((-1.0)*r00*x8254))+(((-1.0)*x8256*x8264)));
evalcond[3]=((((-1.0)*x8253))+(((-1.0)*r10*x8254))+(((-1.0)*x8250*x8262))+(((-1.0)*x8256*x8265)));
evalcond[4]=((((-1.0)*x8250*x8264))+(((-1.0)*cj4*r01*x8254))+((sj1*x8261))+(((-1.0)*r02*x8255))+((r00*x8249)));
evalcond[5]=(((r10*x8249))+(((-1.0)*x8252*x8260))+(((-1.0)*r12*x8255))+(((-1.0)*x8250*x8265))+((sj1*x8262)));
evalcond[6]=(((x8247*x8259))+(((-0.09465)*x8258))+(((-0.10915)*x8248))+(((-1.0)*r00*x8257))+(((-1.0)*px))+(((-1.0)*x8251*x8261))+((x8247*x8263)));
evalcond[7]=((((-0.09465)*x8253))+(((-1.0)*r10*x8257))+(((-1.0)*py))+(((0.10915)*x8247))+(((-1.0)*x8251*x8262))+((x8248*x8263))+((x8248*x8259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8266 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8266.valid){
continue;
}
CheckValue<IkReal> x8267=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8267.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8266.value)+(((1.5707963267949)*(x8267.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8268=IKcos(j0);
IkReal x8269=IKsin(j0);
IkReal x8270=((1.0)*cj1);
IkReal x8271=((0.39225)*sj1);
IkReal x8272=(cj5*r11);
IkReal x8273=((1.0)*sj5);
IkReal x8274=(cj5*r01);
IkReal x8275=((1.0)*sj1);
IkReal x8276=((0.09465)*sj5);
IkReal x8277=((0.39225)*cj1);
IkReal x8278=((0.425)*cj1);
IkReal x8279=(sj2*x8268);
IkReal x8280=(sj2*x8269);
IkReal x8281=(cj2*x8268);
IkReal x8282=(cj2*x8269);
evalcond[0]=((((-1.0)*x8275*x8281))+(((-1.0)*x8270*x8279))+(((-1.0)*r00*x8273))+(((-1.0)*x8274)));
evalcond[1]=((((-1.0)*x8275*x8282))+(((-1.0)*x8270*x8280))+(((-1.0)*r10*x8273))+(((-1.0)*x8272)));
evalcond[2]=((((-1.0)*x8271*x8279))+((x8268*x8278))+((x8277*x8281))+(((-1.0)*px))+(((-0.10915)*x8269))+(((-1.0)*r00*x8276))+(((-0.09465)*x8274)));
evalcond[3]=(((x8269*x8278))+(((-1.0)*x8271*x8280))+((x8277*x8282))+(((-1.0)*py))+(((0.10915)*x8268))+(((-1.0)*r10*x8276))+(((-0.09465)*x8272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8283=((1.0)*cj5);
IkReal x8284=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8283)));
j4eval[0]=x8284;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8283))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8285=((1.0)*cj5);
IkReal x8286=((((-1.0)*r11*x8285))+(((-1.0)*r10*sj5)));
j4eval[0]=x8286;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8285))))));
j4eval[2]=IKsign(x8286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8287=((1.0)*sj0);
IkReal x8288=((1.0)*cj0);
IkReal x8289=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8289;
j4eval[1]=((IKabs(((((-1.0)*r02*x8288))+(((-1.0)*r12*x8287)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8287))+(((-1.0)*r01*sj5*x8288))))));
j4eval[2]=IKsign(x8289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8290=((-1.0)*r20);
IkReal x8292 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8292)==0){
continue;
}
IkReal x8291=pow(x8292,-0.5);
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8290),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8293.value));
IkReal gconst133=(r21*x8291);
IkReal gconst134=(x8290*x8291);
CheckValue<IkReal> x8294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*r20);
IkReal x8296=x8291;
CheckValue<IkReal> x8298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8295),IKFAST_ATAN2_MAGTHRESH);
if(!x8298.valid){
continue;
}
IkReal x8297=((-1.0)*(x8298.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8297;
IkReal gconst132=x8297;
IkReal gconst133=(r21*x8296);
IkReal gconst134=(x8295*x8296);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8299=((-1.0)*r20);
IkReal x8300=x8291;
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8299),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
IkReal x8301=((-1.0)*(x8302.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8301;
IkReal gconst132=x8301;
IkReal gconst133=(r21*x8300);
IkReal gconst134=(x8299*x8300);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8303=((-1.0)*r20);
IkReal x8304=x8291;
CheckValue<IkReal> x8306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8303),IKFAST_ATAN2_MAGTHRESH);
if(!x8306.valid){
continue;
}
IkReal x8305=((-1.0)*(x8306.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8305;
IkReal gconst132=x8305;
IkReal gconst133=(r21*x8304);
IkReal gconst134=(x8303*x8304);
IkReal x8307=r22*r22;
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8307))),-1);
if(!x8310.valid){
continue;
}
IkReal x8308=x8310.value;
IkReal x8309=(((x8308*(r21*r21*r21*r21)))+x8307+(((2.0)*x8308*(r20*r20)*(r21*r21)))+((x8308*(r20*r20*r20*r20))));
j4eval[0]=x8309;
j4eval[1]=IKsign(x8309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8311=(gconst133*r21);
IkReal x8312=(cj1*sj2);
IkReal x8313=(gconst134*r20);
IkReal x8314=(cj2*sj1);
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal((((r22*x8314))+((r22*x8312)))),IkReal((((x8311*x8314))+((x8311*x8312))+(((-1.0)*x8313*x8314))+(((-1.0)*x8312*x8313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
CheckValue<IkReal> x8316=IKPowWithIntegerCheck(IKsign(((x8313*x8313)+(((-2.0)*x8311*x8313))+(r22*r22)+(x8311*x8311))),-1);
if(!x8316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8315.value)+(((1.5707963267949)*(x8316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8317=IKsin(j4);
IkReal x8318=IKcos(j4);
IkReal x8319=(sj1*sj2);
IkReal x8320=(gconst133*r11);
IkReal x8321=(gconst133*r21);
IkReal x8322=(gconst133*r01);
IkReal x8323=((1.0)*x8318);
IkReal x8324=(gconst134*x8318);
IkReal x8325=((1.0)*x8317);
IkReal x8326=((1.0)*cj1*cj2);
evalcond[0]=(((x8317*x8321))+(((-1.0)*gconst134*r20*x8325))+(((-1.0)*r22*x8323)));
evalcond[1]=(cj0+((x8317*x8320))+(((-1.0)*gconst134*r10*x8325))+(((-1.0)*r12*x8323)));
evalcond[2]=((((-1.0)*sj0))+((x8317*x8322))+(((-1.0)*gconst134*r00*x8325))+(((-1.0)*r02*x8323)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8325))+((cj1*sj2))+((r20*x8324))+(((-1.0)*x8321*x8323)));
evalcond[4]=((((-1.0)*x8322*x8323))+((cj0*x8319))+((r00*x8324))+(((-1.0)*r02*x8325))+(((-1.0)*cj0*x8326)));
evalcond[5]=(((r10*x8324))+((sj0*x8319))+(((-1.0)*sj0*x8326))+(((-1.0)*r12*x8325))+(((-1.0)*x8320*x8323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8327=((1.0)*gconst134);
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8327)))),-1);
if(!x8328.valid){
continue;
}
CheckValue<IkReal> x8329 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8327))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8328.value)))+(x8329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8330=IKsin(j4);
IkReal x8331=IKcos(j4);
IkReal x8332=(sj1*sj2);
IkReal x8333=(gconst133*r11);
IkReal x8334=(gconst133*r21);
IkReal x8335=(gconst133*r01);
IkReal x8336=((1.0)*x8331);
IkReal x8337=(gconst134*x8331);
IkReal x8338=((1.0)*x8330);
IkReal x8339=((1.0)*cj1*cj2);
evalcond[0]=(((x8330*x8334))+(((-1.0)*r22*x8336))+(((-1.0)*gconst134*r20*x8338)));
evalcond[1]=(((x8330*x8333))+cj0+(((-1.0)*r12*x8336))+(((-1.0)*gconst134*r10*x8338)));
evalcond[2]=((((-1.0)*gconst134*r00*x8338))+((x8330*x8335))+(((-1.0)*sj0))+(((-1.0)*r02*x8336)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8338))+((cj1*sj2))+((r20*x8337))+(((-1.0)*x8334*x8336)));
evalcond[4]=(((r00*x8337))+(((-1.0)*r02*x8338))+((cj0*x8332))+(((-1.0)*cj0*x8339))+(((-1.0)*x8335*x8336)));
evalcond[5]=((((-1.0)*r12*x8338))+((r10*x8337))+(((-1.0)*x8333*x8336))+(((-1.0)*sj0*x8339))+((sj0*x8332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8340=((1.0)*gconst134);
CheckValue<IkReal> x8341=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8340)))),-1);
if(!x8341.valid){
continue;
}
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8341.value)))+(x8342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8343=IKsin(j4);
IkReal x8344=IKcos(j4);
IkReal x8345=(sj1*sj2);
IkReal x8346=(gconst133*r11);
IkReal x8347=(gconst133*r21);
IkReal x8348=(gconst133*r01);
IkReal x8349=((1.0)*x8344);
IkReal x8350=(gconst134*x8344);
IkReal x8351=((1.0)*x8343);
IkReal x8352=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8351))+((x8343*x8347))+(((-1.0)*r22*x8349)));
evalcond[1]=(cj0+((x8343*x8346))+(((-1.0)*gconst134*r10*x8351))+(((-1.0)*r12*x8349)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8349))+((x8343*x8348))+(((-1.0)*gconst134*r00*x8351)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8351))+((cj1*sj2))+((r20*x8350))+(((-1.0)*x8347*x8349)));
evalcond[4]=((((-1.0)*r02*x8351))+(((-1.0)*cj0*x8352))+((cj0*x8345))+(((-1.0)*x8348*x8349))+((r00*x8350)));
evalcond[5]=(((r10*x8350))+((sj0*x8345))+(((-1.0)*r12*x8351))+(((-1.0)*sj0*x8352))+(((-1.0)*x8346*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8353=((-1.0)*r21);
IkReal x8355 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8355)==0){
continue;
}
IkReal x8354=pow(x8355,-0.5);
CheckValue<IkReal> x8356 = IKatan2WithCheck(IkReal(x8353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8356.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8356.value))));
IkReal gconst136=(x8353*x8354);
IkReal gconst137=((1.0)*r20*x8354);
CheckValue<IkReal> x8357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8357.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8357.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8358=((-1.0)*r21);
CheckValue<IkReal> x8361 = IKatan2WithCheck(IkReal(x8358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8361.valid){
continue;
}
IkReal x8359=((1.0)*(x8361.value));
IkReal x8360=x8354;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8359)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8359)));
IkReal gconst136=(x8358*x8360);
IkReal gconst137=((1.0)*r20*x8360);
IkReal x8362=r22*r22;
IkReal x8363=((1.0)*x8362);
CheckValue<IkReal> x8367=IKPowWithIntegerCheck(((-1.0)+x8362),-1);
if(!x8367.valid){
continue;
}
IkReal x8364=x8367.value;
if((((1.0)+(((-1.0)*x8363)))) < -0.00001)
continue;
IkReal x8365=IKsqrt(((1.0)+(((-1.0)*x8363))));
IkReal x8366=(cj0*x8364*x8365);
j4eval[0]=((IKabs((x8366+(((-1.0)*x8363*x8366)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8368=((-1.0)*r21);
CheckValue<IkReal> x8371 = IKatan2WithCheck(IkReal(x8368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8371.valid){
continue;
}
IkReal x8369=((1.0)*(x8371.value));
IkReal x8370=x8354;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8369)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8369)));
IkReal gconst136=(x8368*x8370);
IkReal gconst137=((1.0)*r20*x8370);
IkReal x8372=r22*r22;
IkReal x8373=((1.0)*x8372);
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(((-1.0)+x8372),-1);
if(!x8377.valid){
continue;
}
IkReal x8374=x8377.value;
if((((1.0)+(((-1.0)*x8373)))) < -0.00001)
continue;
IkReal x8375=IKsqrt(((1.0)+(((-1.0)*x8373))));
IkReal x8376=(sj0*x8374*x8375);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8376+(((-1.0)*x8373*x8376))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8378=((-1.0)*r21);
CheckValue<IkReal> x8381 = IKatan2WithCheck(IkReal(x8378),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8381.valid){
continue;
}
IkReal x8379=((1.0)*(x8381.value));
IkReal x8380=x8354;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8379)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8379)));
IkReal gconst136=(x8378*x8380);
IkReal gconst137=((1.0)*r20*x8380);
IkReal x8382=r22*r22;
IkReal x8383=(r12*sj0);
IkReal x8384=(cj0*r02);
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(((-1.0)+x8382),-1);
if(!x8388.valid){
continue;
}
IkReal x8385=x8388.value;
if((((1.0)+(((-1.0)*x8382)))) < -0.00001)
continue;
IkReal x8386=IKsqrt(((1.0)+(((-1.0)*x8382))));
IkReal x8387=(r22*x8385*x8386);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8384))+(((-1.0)*x8383)))))+(IKabs((((x8384*x8387))+((x8383*x8387))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8389=((1.0)*sj0);
IkReal x8390=((1.0)*cj0);
CheckValue<IkReal> x8391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8391.valid){
continue;
}
CheckValue<IkReal> x8392 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8390))+(((-1.0)*r12*x8389)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8389))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8391.value)))+(x8392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8393=IKsin(j4);
IkReal x8394=IKcos(j4);
IkReal x8395=(gconst136*r01);
IkReal x8396=(gconst137*r10);
IkReal x8397=(sj1*sj2);
IkReal x8398=(gconst137*r20);
IkReal x8399=(gconst136*r11);
IkReal x8400=(gconst136*r21);
IkReal x8401=(gconst137*r00);
IkReal x8402=((1.0)*x8394);
IkReal x8403=((1.0)*cj1*cj2);
IkReal x8404=((1.0)*x8393);
evalcond[0]=((((-1.0)*x8398*x8404))+(((-1.0)*r22*x8402))+((x8393*x8400)));
evalcond[1]=(cj0+((x8393*x8399))+(((-1.0)*r12*x8402))+(((-1.0)*x8396*x8404)));
evalcond[2]=((((-1.0)*sj0))+((x8393*x8395))+(((-1.0)*r02*x8402))+(((-1.0)*x8401*x8404)));
evalcond[3]=(((x8394*x8398))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8400*x8402))+(((-1.0)*r22*x8404)));
evalcond[4]=((((-1.0)*cj0*x8403))+(((-1.0)*x8395*x8402))+(((-1.0)*r02*x8404))+((x8394*x8401))+((cj0*x8397)));
evalcond[5]=(((x8394*x8396))+(((-1.0)*sj0*x8403))+((sj0*x8397))+(((-1.0)*x8399*x8402))+(((-1.0)*r12*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8405=((1.0)*gconst137);
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8405)))),-1);
if(!x8406.valid){
continue;
}
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8405))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8406.value)))+(x8407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8408=IKsin(j4);
IkReal x8409=IKcos(j4);
IkReal x8410=(gconst136*r01);
IkReal x8411=(gconst137*r10);
IkReal x8412=(sj1*sj2);
IkReal x8413=(gconst137*r20);
IkReal x8414=(gconst136*r11);
IkReal x8415=(gconst136*r21);
IkReal x8416=(gconst137*r00);
IkReal x8417=((1.0)*x8409);
IkReal x8418=((1.0)*cj1*cj2);
IkReal x8419=((1.0)*x8408);
evalcond[0]=(((x8408*x8415))+(((-1.0)*x8413*x8419))+(((-1.0)*r22*x8417)));
evalcond[1]=((((-1.0)*r12*x8417))+cj0+((x8408*x8414))+(((-1.0)*x8411*x8419)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8416*x8419))+(((-1.0)*r02*x8417))+((x8408*x8410)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8415*x8417))+((x8409*x8413))+(((-1.0)*r22*x8419)));
evalcond[4]=((((-1.0)*x8410*x8417))+(((-1.0)*cj0*x8418))+(((-1.0)*r02*x8419))+((cj0*x8412))+((x8409*x8416)));
evalcond[5]=((((-1.0)*r12*x8419))+(((-1.0)*x8414*x8417))+((x8409*x8411))+(((-1.0)*sj0*x8418))+((sj0*x8412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8420=((1.0)*gconst137);
CheckValue<IkReal> x8421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8420)))),-1);
if(!x8421.valid){
continue;
}
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8420))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8421.value)))+(x8422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8423=IKsin(j4);
IkReal x8424=IKcos(j4);
IkReal x8425=(gconst136*r01);
IkReal x8426=(gconst137*r10);
IkReal x8427=(sj1*sj2);
IkReal x8428=(gconst137*r20);
IkReal x8429=(gconst136*r11);
IkReal x8430=(gconst136*r21);
IkReal x8431=(gconst137*r00);
IkReal x8432=((1.0)*x8424);
IkReal x8433=((1.0)*cj1*cj2);
IkReal x8434=((1.0)*x8423);
evalcond[0]=((((-1.0)*r22*x8432))+(((-1.0)*x8428*x8434))+((x8423*x8430)));
evalcond[1]=(cj0+(((-1.0)*r12*x8432))+(((-1.0)*x8426*x8434))+((x8423*x8429)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8431*x8434))+((x8423*x8425))+(((-1.0)*r02*x8432)));
evalcond[3]=(((cj2*sj1))+((x8424*x8428))+((cj1*sj2))+(((-1.0)*x8430*x8432))+(((-1.0)*r22*x8434)));
evalcond[4]=(((cj0*x8427))+((x8424*x8431))+(((-1.0)*x8425*x8432))+(((-1.0)*r02*x8434))+(((-1.0)*cj0*x8433)));
evalcond[5]=((((-1.0)*sj0*x8433))+(((-1.0)*x8429*x8432))+((x8424*x8426))+(((-1.0)*r12*x8434))+((sj0*x8427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8435=((-1.0)*r10);
IkReal x8437 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8437)==0){
continue;
}
IkReal x8436=pow(x8437,-0.5);
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8435),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8438.value));
IkReal gconst139=(r11*x8436);
IkReal gconst140=(x8435*x8436);
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8439.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8440=((-1.0)*r10);
IkReal x8441=x8436;
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8440),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
IkReal x8442=((-1.0)*(x8443.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8442;
IkReal gconst138=x8442;
IkReal gconst139=(r11*x8441);
IkReal gconst140=(x8440*x8441);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8444=((1.0)*sj0);
IkReal x8445=((1.0)*gconst139);
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8444))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8445))+(((-1.0)*gconst139*r11*x8444))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
CheckValue<IkReal> x8447=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8445)))),-1);
if(!x8447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8446.value)+(((1.5707963267949)*(x8447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8448=IKsin(j4);
IkReal x8449=IKcos(j4);
IkReal x8450=(gconst140*r00);
IkReal x8451=(sj1*sj2);
IkReal x8452=(gconst139*r11);
IkReal x8453=(gconst139*r01);
IkReal x8454=(gconst139*r21);
IkReal x8455=((1.0)*x8449);
IkReal x8456=((1.0)*x8448);
IkReal x8457=((1.0)*cj1*cj2);
IkReal x8458=(gconst140*x8449);
evalcond[0]=(((x8448*x8454))+(((-1.0)*r22*x8455))+(((-1.0)*gconst140*r20*x8456)));
evalcond[1]=(((x8448*x8452))+cj0+(((-1.0)*gconst140*r10*x8456))+(((-1.0)*r12*x8455)));
evalcond[2]=((((-1.0)*sj0))+((x8448*x8453))+(((-1.0)*x8450*x8456))+(((-1.0)*r02*x8455)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8454*x8455))+((r20*x8458))+(((-1.0)*r22*x8456)));
evalcond[4]=((((-1.0)*x8453*x8455))+((x8449*x8450))+(((-1.0)*cj0*x8457))+(((-1.0)*r02*x8456))+((cj0*x8451)));
evalcond[5]=((((-1.0)*x8452*x8455))+(((-1.0)*sj0*x8457))+(((-1.0)*r12*x8456))+((sj0*x8451))+((r10*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8459=((1.0)*gconst140);
CheckValue<IkReal> x8460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8460.valid){
continue;
}
CheckValue<IkReal> x8461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8459))+(((-1.0)*gconst139*r00)))),-1);
if(!x8461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8460.value)+(((1.5707963267949)*(x8461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8462=IKsin(j4);
IkReal x8463=IKcos(j4);
IkReal x8464=(gconst140*r00);
IkReal x8465=(sj1*sj2);
IkReal x8466=(gconst139*r11);
IkReal x8467=(gconst139*r01);
IkReal x8468=(gconst139*r21);
IkReal x8469=((1.0)*x8463);
IkReal x8470=((1.0)*x8462);
IkReal x8471=((1.0)*cj1*cj2);
IkReal x8472=(gconst140*x8463);
evalcond[0]=((((-1.0)*gconst140*r20*x8470))+(((-1.0)*r22*x8469))+((x8462*x8468)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8470))+((x8462*x8466))+(((-1.0)*r12*x8469)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8469))+((x8462*x8467))+(((-1.0)*x8464*x8470)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8470))+(((-1.0)*x8468*x8469))+((r20*x8472)));
evalcond[4]=((((-1.0)*x8467*x8469))+(((-1.0)*r02*x8470))+((cj0*x8465))+((x8463*x8464))+(((-1.0)*cj0*x8471)));
evalcond[5]=((((-1.0)*sj0*x8471))+((r10*x8472))+(((-1.0)*x8466*x8469))+(((-1.0)*r12*x8470))+((sj0*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8473=((-1.0)*r11);
IkReal x8475 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8475)==0){
continue;
}
IkReal x8474=pow(x8475,-0.5);
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(x8473),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8476.value))));
IkReal gconst142=(x8473*x8474);
IkReal gconst143=((1.0)*r10*x8474);
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8478=((-1.0)*r11);
CheckValue<IkReal> x8481 = IKatan2WithCheck(IkReal(x8478),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8481.valid){
continue;
}
IkReal x8479=((1.0)*(x8481.value));
IkReal x8480=x8474;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8479)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8479)));
IkReal gconst142=(x8478*x8480);
IkReal gconst143=((1.0)*r10*x8480);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8482=((-1.0)*r11);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(x8482),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
IkReal x8483=((1.0)*(x8485.value));
IkReal x8484=x8474;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8483)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8483)));
IkReal gconst142=(x8482*x8484);
IkReal gconst143=((1.0)*r10*x8484);
IkReal x8486=r12*r12;
IkReal x8487=((1.0)*sj0);
IkReal x8488=(cj0*r02);
IkReal x8489=x8474;
j4eval[0]=((IKabs(((((-1.0)*x8487*x8489))+((sj0*x8486*x8489))+((r12*x8488*x8489)))))+(IKabs(((((-1.0)*x8488))+(((-1.0)*r12*x8487))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8490=((-1.0)*r11);
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(x8490),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
IkReal x8491=((1.0)*(x8493.value));
IkReal x8492=x8474;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8491)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8491)));
IkReal gconst142=(x8490*x8492);
IkReal gconst143=((1.0)*r10*x8492);
IkReal x8494=r12*r12;
IkReal x8495=(cj1*r22*sj2);
IkReal x8496=(cj2*r22*sj1);
CheckValue<IkReal> x8500=IKPowWithIntegerCheck(((-1.0)+x8494),-1);
if(!x8500.valid){
continue;
}
IkReal x8497=x8500.value;
if((((1.0)+(((-1.0)*x8494)))) < -0.00001)
continue;
IkReal x8498=IKsqrt(((1.0)+(((-1.0)*x8494))));
IkReal x8499=((1.0)*r12*x8497*x8498);
j4eval[0]=((IKabs(((((-1.0)*x8495*x8499))+(((-1.0)*x8496*x8499)))))+(IKabs((x8496+x8495))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8501=(gconst142*r21);
IkReal x8502=(cj1*sj2);
IkReal x8503=(cj2*sj1);
IkReal x8504=(gconst143*r20);
CheckValue<IkReal> x8505=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8504*x8504)+(x8501*x8501)+(((-2.0)*x8501*x8504)))),-1);
if(!x8505.valid){
continue;
}
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal((((r22*x8503))+((r22*x8502)))),IkReal(((((-1.0)*x8503*x8504))+(((-1.0)*x8502*x8504))+((x8501*x8502))+((x8501*x8503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8505.value)))+(x8506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8507=IKsin(j4);
IkReal x8508=IKcos(j4);
IkReal x8509=(sj1*sj2);
IkReal x8510=(gconst143*r20);
IkReal x8511=((1.0)*x8508);
IkReal x8512=((1.0)*cj1*cj2);
IkReal x8513=((1.0)*x8507);
IkReal x8514=(gconst142*x8507);
IkReal x8515=(gconst143*x8508);
evalcond[0]=(((r21*x8514))+(((-1.0)*r22*x8511))+(((-1.0)*x8510*x8513)));
evalcond[1]=((((-1.0)*gconst143*r10*x8513))+cj0+((r11*x8514))+(((-1.0)*r12*x8511)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8513))+(((-1.0)*r02*x8511))+((r01*x8514)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8511))+((cj1*sj2))+(((-1.0)*r22*x8513))+((x8508*x8510)));
evalcond[4]=(((cj0*x8509))+(((-1.0)*r02*x8513))+(((-1.0)*cj0*x8512))+(((-1.0)*gconst142*r01*x8511))+((r00*x8515)));
evalcond[5]=(((sj0*x8509))+(((-1.0)*r12*x8513))+(((-1.0)*sj0*x8512))+(((-1.0)*gconst142*r11*x8511))+((r10*x8515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8516=((1.0)*sj0);
IkReal x8517=((1.0)*gconst142);
CheckValue<IkReal> x8518 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8516)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8517))+(((-1.0)*gconst142*r11*x8516))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8518.valid){
continue;
}
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8517))+(((-1.0)*gconst143*r21)))),-1);
if(!x8519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8518.value)+(((1.5707963267949)*(x8519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8520=IKsin(j4);
IkReal x8521=IKcos(j4);
IkReal x8522=(sj1*sj2);
IkReal x8523=(gconst143*r20);
IkReal x8524=((1.0)*x8521);
IkReal x8525=((1.0)*cj1*cj2);
IkReal x8526=((1.0)*x8520);
IkReal x8527=(gconst142*x8520);
IkReal x8528=(gconst143*x8521);
evalcond[0]=((((-1.0)*x8523*x8526))+((r21*x8527))+(((-1.0)*r22*x8524)));
evalcond[1]=((((-1.0)*gconst143*r10*x8526))+cj0+((r11*x8527))+(((-1.0)*r12*x8524)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8524))+((r01*x8527))+(((-1.0)*gconst143*r00*x8526)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8524))+((cj1*sj2))+((x8521*x8523))+(((-1.0)*r22*x8526)));
evalcond[4]=((((-1.0)*r02*x8526))+(((-1.0)*cj0*x8525))+((r00*x8528))+((cj0*x8522))+(((-1.0)*gconst142*r01*x8524)));
evalcond[5]=(((sj0*x8522))+(((-1.0)*gconst142*r11*x8524))+(((-1.0)*sj0*x8525))+(((-1.0)*r12*x8526))+((r10*x8528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8529=((1.0)*gconst143);
CheckValue<IkReal> x8530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8529))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8530.valid){
continue;
}
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8529)))),-1);
if(!x8531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8530.value)+(((1.5707963267949)*(x8531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8532=IKsin(j4);
IkReal x8533=IKcos(j4);
IkReal x8534=(sj1*sj2);
IkReal x8535=(gconst143*r20);
IkReal x8536=((1.0)*x8533);
IkReal x8537=((1.0)*cj1*cj2);
IkReal x8538=((1.0)*x8532);
IkReal x8539=(gconst142*x8532);
IkReal x8540=(gconst143*x8533);
evalcond[0]=((((-1.0)*r22*x8536))+((r21*x8539))+(((-1.0)*x8535*x8538)));
evalcond[1]=(cj0+(((-1.0)*r12*x8536))+(((-1.0)*gconst143*r10*x8538))+((r11*x8539)));
evalcond[2]=((((-1.0)*r02*x8536))+(((-1.0)*sj0))+((r01*x8539))+(((-1.0)*gconst143*r00*x8538)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8538))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8536))+((x8533*x8535)));
evalcond[4]=((((-1.0)*r02*x8538))+(((-1.0)*cj0*x8537))+((r00*x8540))+(((-1.0)*gconst142*r01*x8536))+((cj0*x8534)));
evalcond[5]=((((-1.0)*sj0*x8537))+(((-1.0)*gconst142*r11*x8536))+((r10*x8540))+(((-1.0)*r12*x8538))+((sj0*x8534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8541=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8541;
j4eval[1]=IKsign(x8541);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8542=((1.0)*cj5);
IkReal x8543=((((-1.0)*r01*x8542))+(((-1.0)*r00*sj5)));
j4eval[0]=x8543;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8542))))));
j4eval[2]=IKsign(x8543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8544=cj5*cj5;
IkReal x8545=r11*r11;
IkReal x8546=(r11*sj5);
IkReal x8547=(cj5*r10);
IkReal x8548=((r12*r12)+((x8544*(r10*r10)))+x8545+(((-1.0)*x8544*x8545))+(((-2.0)*x8546*x8547)));
j4eval[0]=x8548;
j4eval[1]=IKsign(x8548);
j4eval[2]=((IKabs(r12))+(IKabs((x8547+(((-1.0)*x8546))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8549=cj5*cj5;
IkReal x8550=r11*r11;
IkReal x8551=(cj5*r10);
IkReal x8552=(r11*sj5);
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal((x8551+(((-1.0)*x8552)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
CheckValue<IkReal> x8554=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8551*x8552))+(((-1.0)*x8549*x8550))+x8550+((x8549*(r10*r10))))),-1);
if(!x8554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8553.value)+(((1.5707963267949)*(x8554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8555=IKsin(j4);
IkReal x8556=IKcos(j4);
IkReal x8557=(cj5*r10);
IkReal x8558=(r01*sj5);
IkReal x8559=(cj5*r00);
IkReal x8560=(cj5*r20);
IkReal x8561=((1.0)*x8556);
IkReal x8562=((1.0)*x8555);
IkReal x8563=(sj5*x8555);
evalcond[0]=((((-1.0)*r22*x8561))+(((-1.0)*x8560*x8562))+((r21*x8563)));
evalcond[1]=(((x8555*x8558))+(((-1.0)*x8559*x8562))+(((-1.0)*r02*x8561)));
evalcond[2]=((((-1.0)*r12*x8562))+(((-1.0)*r11*sj5*x8561))+((x8556*x8557)));
evalcond[3]=((1.0)+((r11*x8563))+(((-1.0)*r12*x8561))+(((-1.0)*x8557*x8562)));
evalcond[4]=(((cj2*sj1))+((x8556*x8560))+((cj1*sj2))+(((-1.0)*r22*x8562))+(((-1.0)*r21*sj5*x8561)));
evalcond[5]=((((-1.0)*x8558*x8561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8562))+((x8556*x8559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8564=((1.0)*cj5);
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8564))+(((-1.0)*r00*sj5)))),-1);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8565.value)+(((1.5707963267949)*(x8566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(cj5*r10);
IkReal x8570=(r01*sj5);
IkReal x8571=(cj5*r00);
IkReal x8572=(cj5*r20);
IkReal x8573=((1.0)*x8568);
IkReal x8574=((1.0)*x8567);
IkReal x8575=(sj5*x8567);
evalcond[0]=(((r21*x8575))+(((-1.0)*x8572*x8574))+(((-1.0)*r22*x8573)));
evalcond[1]=((((-1.0)*x8571*x8574))+(((-1.0)*r02*x8573))+((x8567*x8570)));
evalcond[2]=((((-1.0)*r11*sj5*x8573))+((x8568*x8569))+(((-1.0)*r12*x8574)));
evalcond[3]=((1.0)+(((-1.0)*x8569*x8574))+((r11*x8575))+(((-1.0)*r12*x8573)));
evalcond[4]=((((-1.0)*r21*sj5*x8573))+((cj2*sj1))+((cj1*sj2))+((x8568*x8572))+(((-1.0)*r22*x8574)));
evalcond[5]=((((-1.0)*r02*x8574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8570*x8573))+((x8568*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8576=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8576.valid){
continue;
}
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8576.value)))+(x8577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8578=IKsin(j4);
IkReal x8579=IKcos(j4);
IkReal x8580=(cj5*r10);
IkReal x8581=(r01*sj5);
IkReal x8582=(cj5*r00);
IkReal x8583=(cj5*r20);
IkReal x8584=((1.0)*x8579);
IkReal x8585=((1.0)*x8578);
IkReal x8586=(sj5*x8578);
evalcond[0]=((((-1.0)*r22*x8584))+(((-1.0)*x8583*x8585))+((r21*x8586)));
evalcond[1]=((((-1.0)*x8582*x8585))+((x8578*x8581))+(((-1.0)*r02*x8584)));
evalcond[2]=((((-1.0)*r12*x8585))+((x8579*x8580))+(((-1.0)*r11*sj5*x8584)));
evalcond[3]=((1.0)+(((-1.0)*x8580*x8585))+((r11*x8586))+(((-1.0)*r12*x8584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8585))+(((-1.0)*r21*sj5*x8584))+((cj1*sj2))+((x8579*x8583)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8585))+(((-1.0)*x8581*x8584))+((x8579*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8587=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8587;
j4eval[1]=IKsign(x8587);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8588=((1.0)*cj5);
IkReal x8589=((((-1.0)*r21*x8588))+(((-1.0)*r20*sj5)));
j4eval[0]=x8589;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8588))))));
j4eval[2]=IKsign(x8589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8590=cj5*cj5;
IkReal x8591=r11*r11;
IkReal x8592=(cj5*r10);
IkReal x8593=(r11*sj5);
IkReal x8594=((((-1.0)*x8591))+(((-1.0)*x8590*(r10*r10)))+(((2.0)*x8592*x8593))+((x8590*x8591))+(((-1.0)*(r12*r12))));
j4eval[0]=x8594;
j4eval[1]=((IKabs(r12))+(IKabs((x8592+(((-1.0)*x8593))))));
j4eval[2]=IKsign(x8594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8595=cj5*cj5;
IkReal x8596=r11*r11;
IkReal x8597=(cj5*r10);
IkReal x8598=(r11*sj5);
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal((x8597+(((-1.0)*x8598)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
CheckValue<IkReal> x8600=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8595*(r10*r10)))+(((-1.0)*x8596))+((x8595*x8596))+(((2.0)*x8597*x8598))+(((-1.0)*(r12*r12))))),-1);
if(!x8600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8599.value)+(((1.5707963267949)*(x8600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8601=IKsin(j4);
IkReal x8602=IKcos(j4);
IkReal x8603=(cj5*r10);
IkReal x8604=(r01*sj5);
IkReal x8605=(cj5*r00);
IkReal x8606=(cj5*r20);
IkReal x8607=((1.0)*x8602);
IkReal x8608=((1.0)*x8601);
IkReal x8609=(sj5*x8601);
evalcond[0]=((((-1.0)*r22*x8607))+((r21*x8609))+(((-1.0)*x8606*x8608)));
evalcond[1]=((((-1.0)*r02*x8607))+((x8601*x8604))+(((-1.0)*x8605*x8608)));
evalcond[2]=(((x8602*x8603))+(((-1.0)*r12*x8608))+(((-1.0)*r11*sj5*x8607)));
evalcond[3]=((-1.0)+((r11*x8609))+(((-1.0)*r12*x8607))+(((-1.0)*x8603*x8608)));
evalcond[4]=(((cj2*sj1))+((x8602*x8606))+((cj1*sj2))+(((-1.0)*r22*x8608))+(((-1.0)*r21*sj5*x8607)));
evalcond[5]=((((-1.0)*r02*x8608))+((x8602*x8605))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8604*x8607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8610=((1.0)*cj5);
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8610))+(((-1.0)*r20*sj5)))),-1);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8610))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8611.value)))+(x8612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(cj5*r10);
IkReal x8616=(r01*sj5);
IkReal x8617=(cj5*r00);
IkReal x8618=(cj5*r20);
IkReal x8619=((1.0)*x8614);
IkReal x8620=((1.0)*x8613);
IkReal x8621=(sj5*x8613);
evalcond[0]=((((-1.0)*x8618*x8620))+((r21*x8621))+(((-1.0)*r22*x8619)));
evalcond[1]=((((-1.0)*r02*x8619))+((x8613*x8616))+(((-1.0)*x8617*x8620)));
evalcond[2]=((((-1.0)*r12*x8620))+((x8614*x8615))+(((-1.0)*r11*sj5*x8619)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8619))+(((-1.0)*x8615*x8620))+((r11*x8621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8614*x8618))+(((-1.0)*r21*sj5*x8619))+(((-1.0)*r22*x8620)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8614*x8617))+((cj1*cj2))+(((-1.0)*x8616*x8619))+(((-1.0)*r02*x8620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
CheckValue<IkReal> x8623=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8622.value)+(((1.5707963267949)*(x8623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8624=IKsin(j4);
IkReal x8625=IKcos(j4);
IkReal x8626=(cj5*r10);
IkReal x8627=(r01*sj5);
IkReal x8628=(cj5*r00);
IkReal x8629=(cj5*r20);
IkReal x8630=((1.0)*x8625);
IkReal x8631=((1.0)*x8624);
IkReal x8632=(sj5*x8624);
evalcond[0]=((((-1.0)*x8629*x8631))+((r21*x8632))+(((-1.0)*r22*x8630)));
evalcond[1]=((((-1.0)*x8628*x8631))+((x8624*x8627))+(((-1.0)*r02*x8630)));
evalcond[2]=((((-1.0)*r12*x8631))+(((-1.0)*r11*sj5*x8630))+((x8625*x8626)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8630))+(((-1.0)*x8626*x8631))+((r11*x8632)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8630))+(((-1.0)*r22*x8631))+((x8625*x8629)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8627*x8630))+((cj1*cj2))+(((-1.0)*r02*x8631))+((x8625*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8633=((-1.0)*r00);
IkReal x8635 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8635)==0){
continue;
}
IkReal x8634=pow(x8635,-0.5);
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8633),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8636.value));
IkReal gconst145=(r01*x8634);
IkReal gconst146=(x8633*x8634);
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8638=((-1.0)*r00);
IkReal x8639=x8634;
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8640;
IkReal gconst144=x8640;
IkReal gconst145=(r01*x8639);
IkReal gconst146=(x8638*x8639);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8642=((1.0)*sj0);
IkReal x8643=((1.0)*gconst145);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8642)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8643))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
CheckValue<IkReal> x8645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8643)))),-1);
if(!x8645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8644.value)+(((1.5707963267949)*(x8645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8646=IKsin(j4);
IkReal x8647=IKcos(j4);
IkReal x8648=(gconst146*r10);
IkReal x8649=(sj1*sj2);
IkReal x8650=(gconst146*r20);
IkReal x8651=(gconst146*r00);
IkReal x8652=((1.0)*x8647);
IkReal x8653=((1.0)*x8646);
IkReal x8654=(gconst145*x8646);
IkReal x8655=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8654))+(((-1.0)*r22*x8652))+(((-1.0)*x8650*x8653)));
evalcond[1]=((((-1.0)*r12*x8652))+cj0+((r11*x8654))+(((-1.0)*x8648*x8653)));
evalcond[2]=(((r01*x8654))+(((-1.0)*sj0))+(((-1.0)*x8651*x8653))+(((-1.0)*r02*x8652)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8652))+((x8647*x8650))+(((-1.0)*r22*x8653)));
evalcond[4]=(((cj0*x8649))+(((-1.0)*gconst145*r01*x8652))+((x8647*x8651))+(((-1.0)*cj0*x8655))+(((-1.0)*r02*x8653)));
evalcond[5]=(((x8647*x8648))+(((-1.0)*gconst145*r11*x8652))+(((-1.0)*r12*x8653))+(((-1.0)*sj0*x8655))+((sj0*x8649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8656=((1.0)*gconst146);
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8656))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
CheckValue<IkReal> x8658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8656))+(((-1.0)*gconst145*r10)))),-1);
if(!x8658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8657.value)+(((1.5707963267949)*(x8658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8659=IKsin(j4);
IkReal x8660=IKcos(j4);
IkReal x8661=(gconst146*r10);
IkReal x8662=(sj1*sj2);
IkReal x8663=(gconst146*r20);
IkReal x8664=(gconst146*r00);
IkReal x8665=((1.0)*x8660);
IkReal x8666=((1.0)*x8659);
IkReal x8667=(gconst145*x8659);
IkReal x8668=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8665))+((r21*x8667))+(((-1.0)*x8663*x8666)));
evalcond[1]=((((-1.0)*x8661*x8666))+cj0+(((-1.0)*r12*x8665))+((r11*x8667)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8665))+((r01*x8667))+(((-1.0)*x8664*x8666)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8666))+((x8660*x8663))+(((-1.0)*gconst145*r21*x8665)));
evalcond[4]=(((cj0*x8662))+(((-1.0)*cj0*x8668))+(((-1.0)*r02*x8666))+((x8660*x8664))+(((-1.0)*gconst145*r01*x8665)));
evalcond[5]=((((-1.0)*sj0*x8668))+((sj0*x8662))+(((-1.0)*gconst145*r11*x8665))+(((-1.0)*r12*x8666))+((x8660*x8661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8669=((-1.0)*r01);
IkReal x8671 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8671)==0){
continue;
}
IkReal x8670=pow(x8671,-0.5);
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal(x8669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8672.value))));
IkReal gconst148=(x8669*x8670);
IkReal gconst149=((1.0)*r00*x8670);
CheckValue<IkReal> x8673 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8673.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8674=((-1.0)*r01);
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal(x8674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
IkReal x8675=((1.0)*(x8677.value));
IkReal x8676=x8670;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8675)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8675)));
IkReal gconst148=(x8674*x8676);
IkReal gconst149=((1.0)*r00*x8676);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8678=((-1.0)*r01);
CheckValue<IkReal> x8681 = IKatan2WithCheck(IkReal(x8678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8681.valid){
continue;
}
IkReal x8679=((1.0)*(x8681.value));
IkReal x8680=x8670;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8679)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8679)));
IkReal gconst148=(x8678*x8680);
IkReal gconst149=((1.0)*r00*x8680);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8682=((-1.0)*r01);
CheckValue<IkReal> x8685 = IKatan2WithCheck(IkReal(x8682),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8685.valid){
continue;
}
IkReal x8683=((1.0)*(x8685.value));
IkReal x8684=x8670;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8683)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8683)));
IkReal gconst148=(x8682*x8684);
IkReal gconst149=((1.0)*r00*x8684);
IkReal x8686=r02*r02;
IkReal x8687=(r12*sj0);
IkReal x8688=((1.0)*cj0);
IkReal x8689=x8670;
j4eval[0]=((IKabs((((r02*x8687*x8689))+((cj0*x8686*x8689))+(((-1.0)*x8688*x8689)))))+(IKabs(((((-1.0)*r02*x8688))+(((-1.0)*x8687))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8690=((1.0)*sj0);
IkReal x8691=((1.0)*gconst148);
CheckValue<IkReal> x8692 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8690)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8690))+(((-1.0)*cj0*r01*x8691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8692.valid){
continue;
}
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8691)))),-1);
if(!x8693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8692.value)+(((1.5707963267949)*(x8693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8694=IKsin(j4);
IkReal x8695=IKcos(j4);
IkReal x8696=(gconst148*r11);
IkReal x8697=(sj1*sj2);
IkReal x8698=((1.0)*x8695);
IkReal x8699=(gconst149*x8695);
IkReal x8700=(gconst148*x8694);
IkReal x8701=((1.0)*cj1*cj2);
IkReal x8702=((1.0)*x8694);
evalcond[0]=(((r21*x8700))+(((-1.0)*gconst149*r20*x8702))+(((-1.0)*r22*x8698)));
evalcond[1]=((((-1.0)*gconst149*r10*x8702))+cj0+((x8694*x8696))+(((-1.0)*r12*x8698)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8702))+(((-1.0)*r02*x8698))+((r01*x8700)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8698))+((r20*x8699))+(((-1.0)*r22*x8702)));
evalcond[4]=((((-1.0)*cj0*x8701))+((cj0*x8697))+((r00*x8699))+(((-1.0)*r02*x8702))+(((-1.0)*gconst148*r01*x8698)));
evalcond[5]=((((-1.0)*x8696*x8698))+((sj0*x8697))+((r10*x8699))+(((-1.0)*sj0*x8701))+(((-1.0)*r12*x8702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8703=((1.0)*gconst149);
CheckValue<IkReal> x8704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8703)))),-1);
if(!x8704.valid){
continue;
}
CheckValue<IkReal> x8705 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8703))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8704.value)))+(x8705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8706=IKsin(j4);
IkReal x8707=IKcos(j4);
IkReal x8708=(gconst148*r11);
IkReal x8709=(sj1*sj2);
IkReal x8710=((1.0)*x8707);
IkReal x8711=(gconst149*x8707);
IkReal x8712=(gconst148*x8706);
IkReal x8713=((1.0)*cj1*cj2);
IkReal x8714=((1.0)*x8706);
evalcond[0]=((((-1.0)*r22*x8710))+(((-1.0)*gconst149*r20*x8714))+((r21*x8712)));
evalcond[1]=(cj0+(((-1.0)*r12*x8710))+((x8706*x8708))+(((-1.0)*gconst149*r10*x8714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8710))+(((-1.0)*gconst149*r00*x8714))+((r01*x8712)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8710))+((cj1*sj2))+(((-1.0)*r22*x8714))+((r20*x8711)));
evalcond[4]=((((-1.0)*gconst148*r01*x8710))+(((-1.0)*r02*x8714))+((cj0*x8709))+((r00*x8711))+(((-1.0)*cj0*x8713)));
evalcond[5]=((((-1.0)*sj0*x8713))+(((-1.0)*x8708*x8710))+(((-1.0)*r12*x8714))+((r10*x8711))+((sj0*x8709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8715=((1.0)*gconst149);
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8715))+(((-1.0)*gconst148*r00)))),-1);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8716.value)))+(x8717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKsin(j4);
IkReal x8719=IKcos(j4);
IkReal x8720=(gconst148*r11);
IkReal x8721=(sj1*sj2);
IkReal x8722=((1.0)*x8719);
IkReal x8723=(gconst149*x8719);
IkReal x8724=(gconst148*x8718);
IkReal x8725=((1.0)*cj1*cj2);
IkReal x8726=((1.0)*x8718);
evalcond[0]=(((r21*x8724))+(((-1.0)*gconst149*r20*x8726))+(((-1.0)*r22*x8722)));
evalcond[1]=((((-1.0)*gconst149*r10*x8726))+cj0+((x8718*x8720))+(((-1.0)*r12*x8722)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8726))+(((-1.0)*r02*x8722))+((r01*x8724)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8722))+((cj1*sj2))+((r20*x8723))+(((-1.0)*r22*x8726)));
evalcond[4]=((((-1.0)*cj0*x8725))+((cj0*x8721))+(((-1.0)*gconst148*r01*x8722))+(((-1.0)*r02*x8726))+((r00*x8723)));
evalcond[5]=((((-1.0)*x8720*x8722))+((r10*x8723))+(((-1.0)*sj0*x8725))+((sj0*x8721))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8727=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8727;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8728=((1.0)*cj5);
IkReal x8729=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8728)));
j4eval[0]=x8729;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8728))))));
j4eval[2]=IKsign(x8729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8730=cj5*cj5;
IkReal x8731=r01*r01;
IkReal x8732=(r01*sj5);
IkReal x8733=(cj5*r00);
IkReal x8734=((((-1.0)*(r02*r02)))+(((-1.0)*x8731))+(((2.0)*x8732*x8733))+((x8730*x8731))+(((-1.0)*x8730*(r00*r00))));
j4eval[0]=x8734;
j4eval[1]=IKsign(x8734);
j4eval[2]=((IKabs(r02))+(IKabs((x8733+(((-1.0)*x8732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8735=cj5*cj5;
IkReal x8736=r01*r01;
IkReal x8737=(r01*sj5);
IkReal x8738=(cj5*r00);
CheckValue<IkReal> x8739=IKPowWithIntegerCheck(IKsign((((x8735*x8736))+(((-1.0)*(r02*r02)))+(((-1.0)*x8736))+(((2.0)*x8737*x8738))+(((-1.0)*x8735*(r00*r00))))),-1);
if(!x8739.valid){
continue;
}
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal((x8738+(((-1.0)*x8737)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8739.value)))+(x8740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8741=IKsin(j4);
IkReal x8742=IKcos(j4);
IkReal x8743=(cj5*r10);
IkReal x8744=(r01*sj5);
IkReal x8745=(cj5*r00);
IkReal x8746=(cj5*r20);
IkReal x8747=((1.0)*x8742);
IkReal x8748=((1.0)*x8741);
IkReal x8749=(sj5*x8741);
evalcond[0]=((((-1.0)*r22*x8747))+(((-1.0)*x8746*x8748))+((r21*x8749)));
evalcond[1]=((((-1.0)*r12*x8747))+(((-1.0)*x8743*x8748))+((r11*x8749)));
evalcond[2]=(((x8742*x8745))+(((-1.0)*x8744*x8747))+(((-1.0)*r02*x8748)));
evalcond[3]=((-1.0)+((x8741*x8744))+(((-1.0)*x8745*x8748))+(((-1.0)*r02*x8747)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8747))+((cj1*sj2))+(((-1.0)*r22*x8748))+((x8742*x8746)));
evalcond[5]=((((-1.0)*r12*x8748))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8742*x8743))+(((-1.0)*r11*sj5*x8747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8750=((1.0)*cj5);
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8750)))),-1);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8751.value)+(((1.5707963267949)*(x8752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*r10);
IkReal x8756=(r01*sj5);
IkReal x8757=(cj5*r00);
IkReal x8758=(cj5*r20);
IkReal x8759=((1.0)*x8754);
IkReal x8760=((1.0)*x8753);
IkReal x8761=(sj5*x8753);
evalcond[0]=((((-1.0)*r22*x8759))+((r21*x8761))+(((-1.0)*x8758*x8760)));
evalcond[1]=((((-1.0)*x8755*x8760))+(((-1.0)*r12*x8759))+((r11*x8761)));
evalcond[2]=((((-1.0)*r02*x8760))+(((-1.0)*x8756*x8759))+((x8754*x8757)));
evalcond[3]=((-1.0)+(((-1.0)*x8757*x8760))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8760))+(((-1.0)*r21*sj5*x8759))+((x8754*x8758)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8759))+(((-1.0)*r12*x8760))+((x8754*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8762=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8762.valid){
continue;
}
CheckValue<IkReal> x8763 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8762.value)))+(x8763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8764=IKsin(j4);
IkReal x8765=IKcos(j4);
IkReal x8766=(cj5*r10);
IkReal x8767=(r01*sj5);
IkReal x8768=(cj5*r00);
IkReal x8769=(cj5*r20);
IkReal x8770=((1.0)*x8765);
IkReal x8771=((1.0)*x8764);
IkReal x8772=(sj5*x8764);
evalcond[0]=((((-1.0)*r22*x8770))+(((-1.0)*x8769*x8771))+((r21*x8772)));
evalcond[1]=((((-1.0)*x8766*x8771))+(((-1.0)*r12*x8770))+((r11*x8772)));
evalcond[2]=((((-1.0)*r02*x8771))+((x8765*x8768))+(((-1.0)*x8767*x8770)));
evalcond[3]=((-1.0)+((x8764*x8767))+(((-1.0)*r02*x8770))+(((-1.0)*x8768*x8771)));
evalcond[4]=(((cj2*sj1))+((x8765*x8769))+((cj1*sj2))+(((-1.0)*r22*x8771))+(((-1.0)*r21*sj5*x8770)));
evalcond[5]=((((-1.0)*r11*sj5*x8770))+((x8765*x8766))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8773=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8773;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8774=((1.0)*cj5);
IkReal x8775=((((-1.0)*r21*x8774))+(((-1.0)*r20*sj5)));
j4eval[0]=x8775;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8774))+((r11*sj5))))));
j4eval[2]=IKsign(x8775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8776=cj5*cj5;
IkReal x8777=r01*r01;
IkReal x8778=(cj5*r00);
IkReal x8779=(r01*sj5);
IkReal x8780=((((-1.0)*x8776*x8777))+x8777+(((-2.0)*x8778*x8779))+((x8776*(r00*r00)))+(r02*r02));
j4eval[0]=x8780;
j4eval[1]=((IKabs(r02))+(IKabs((x8778+(((-1.0)*x8779))))));
j4eval[2]=IKsign(x8780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8781=cj5*cj5;
IkReal x8782=r01*r01;
IkReal x8783=(r01*sj5);
IkReal x8784=(cj5*r00);
CheckValue<IkReal> x8785=IKPowWithIntegerCheck(IKsign((x8782+(((-2.0)*x8783*x8784))+((x8781*(r00*r00)))+(((-1.0)*x8781*x8782))+(r02*r02))),-1);
if(!x8785.valid){
continue;
}
CheckValue<IkReal> x8786 = IKatan2WithCheck(IkReal((x8784+(((-1.0)*x8783)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8785.value)))+(x8786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8787=IKsin(j4);
IkReal x8788=IKcos(j4);
IkReal x8789=(cj5*r10);
IkReal x8790=(r01*sj5);
IkReal x8791=(cj5*r00);
IkReal x8792=(cj5*r20);
IkReal x8793=((1.0)*x8788);
IkReal x8794=((1.0)*x8787);
IkReal x8795=(sj5*x8787);
evalcond[0]=((((-1.0)*x8792*x8794))+((r21*x8795))+(((-1.0)*r22*x8793)));
evalcond[1]=((((-1.0)*r12*x8793))+(((-1.0)*x8789*x8794))+((r11*x8795)));
evalcond[2]=(((x8788*x8791))+(((-1.0)*r02*x8794))+(((-1.0)*x8790*x8793)));
evalcond[3]=((1.0)+((x8787*x8790))+(((-1.0)*r02*x8793))+(((-1.0)*x8791*x8794)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8788*x8792))+(((-1.0)*r22*x8794))+(((-1.0)*r21*sj5*x8793)));
evalcond[5]=((((-1.0)*r12*x8794))+((x8788*x8789))+(((-1.0)*r11*sj5*x8793))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8796=((1.0)*cj5);
CheckValue<IkReal> x8797 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8797.valid){
continue;
}
CheckValue<IkReal> x8798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8796))+(((-1.0)*r20*sj5)))),-1);
if(!x8798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8797.value)+(((1.5707963267949)*(x8798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8799=IKsin(j4);
IkReal x8800=IKcos(j4);
IkReal x8801=(cj5*r10);
IkReal x8802=(r01*sj5);
IkReal x8803=(cj5*r00);
IkReal x8804=(cj5*r20);
IkReal x8805=((1.0)*x8800);
IkReal x8806=((1.0)*x8799);
IkReal x8807=(sj5*x8799);
evalcond[0]=(((r21*x8807))+(((-1.0)*r22*x8805))+(((-1.0)*x8804*x8806)));
evalcond[1]=((((-1.0)*r12*x8805))+((r11*x8807))+(((-1.0)*x8801*x8806)));
evalcond[2]=(((x8800*x8803))+(((-1.0)*r02*x8806))+(((-1.0)*x8802*x8805)));
evalcond[3]=((1.0)+(((-1.0)*x8803*x8806))+(((-1.0)*r02*x8805))+((x8799*x8802)));
evalcond[4]=(((cj2*sj1))+((x8800*x8804))+(((-1.0)*r22*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8805)));
evalcond[5]=((((-1.0)*r12*x8806))+((x8800*x8801))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8808 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8808.valid){
continue;
}
CheckValue<IkReal> x8809=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8808.value)+(((1.5707963267949)*(x8809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8810=IKsin(j4);
IkReal x8811=IKcos(j4);
IkReal x8812=(cj5*r10);
IkReal x8813=(r01*sj5);
IkReal x8814=(cj5*r00);
IkReal x8815=(cj5*r20);
IkReal x8816=((1.0)*x8811);
IkReal x8817=((1.0)*x8810);
IkReal x8818=(sj5*x8810);
evalcond[0]=(((r21*x8818))+(((-1.0)*r22*x8816))+(((-1.0)*x8815*x8817)));
evalcond[1]=((((-1.0)*r12*x8816))+((r11*x8818))+(((-1.0)*x8812*x8817)));
evalcond[2]=((((-1.0)*r02*x8817))+((x8811*x8814))+(((-1.0)*x8813*x8816)));
evalcond[3]=((1.0)+((x8810*x8813))+(((-1.0)*r02*x8816))+(((-1.0)*x8814*x8817)));
evalcond[4]=((((-1.0)*r22*x8817))+((cj2*sj1))+((x8811*x8815))+((cj1*sj2))+(((-1.0)*r21*sj5*x8816)));
evalcond[5]=((((-1.0)*r12*x8817))+((x8811*x8812))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8819=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8819);
rxp1_1=(px*r21);
rxp1_2=(r11*x8819);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8820=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8820);
rxp1_1=(px*r21);
rxp1_2=(r11*x8820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8821=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8821);
rxp1_1=(px*r21);
rxp1_2=(r11*x8821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8824=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8824.valid){
continue;
}
IkReal x8822=x8824.value;
IkReal x8823=(sj0*x8822);
cj4array[0]=((((-1.0)*sj1*sj2*x8823))+((cj1*cj2*x8823)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8825=IKsin(j4);
IkReal x8826=IKcos(j4);
IkReal x8827=(r21*sj5);
IkReal x8828=(cj5*r20);
IkReal x8829=((1.0)*x8825);
IkReal x8830=((1.0)*x8826);
evalcond[0]=((-1.0)*r02*x8825);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8830)));
evalcond[2]=(((x8825*x8827))+(((-1.0)*x8828*x8829)));
evalcond[3]=((((-1.0)*cj5*r10*x8829))+((r11*sj5*x8825)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8827*x8830))+((cj1*sj2))+((x8826*x8828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8833=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8833.valid){
continue;
}
IkReal x8831=x8833.value;
IkReal x8832=((1.0)*x8831);
cj4array[0]=((((-1.0)*cj1*sj2*x8832))+(((-1.0)*cj2*sj1*x8832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8834=IKsin(j4);
IkReal x8835=IKcos(j4);
IkReal x8836=(r11*sj5);
IkReal x8837=((1.0)*sj0);
IkReal x8838=((1.0)*x8835);
IkReal x8839=((1.0)*cj5*x8834);
evalcond[0]=((-1.0)*r02*x8834);
evalcond[1]=((((-1.0)*r02*x8838))+(((-1.0)*x8837)));
evalcond[2]=((((-1.0)*r20*x8839))+((r21*sj5*x8834)));
evalcond[3]=((((-1.0)*r10*x8839))+((x8834*x8836)));
evalcond[4]=((((-1.0)*cj1*cj2*x8837))+((cj5*r10*x8835))+((sj0*sj1*sj2))+(((-1.0)*x8836*x8838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8840=IKPowWithIntegerCheck(r02,-1);
if(!x8840.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8840.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8841=IKsin(j4);
IkReal x8842=IKcos(j4);
IkReal x8843=(cj5*x8842);
IkReal x8844=(sj5*x8841);
IkReal x8845=((1.0)*sj5*x8842);
IkReal x8846=((1.0)*cj5*x8841);
evalcond[0]=((-1.0)*r02*x8841);
evalcond[1]=(((r21*x8844))+(((-1.0)*r20*x8846)));
evalcond[2]=((((-1.0)*r10*x8846))+((r11*x8844)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8843))+(((-1.0)*r21*x8845)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8843))+((sj0*sj1*sj2))+(((-1.0)*r11*x8845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8847=((1.0)*sj0);
IkReal x8848=((1.0)*cj0);
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8848))+(((-1.0)*r12*x8847)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8848))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
CheckValue<IkReal> x8850=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8849.value)+(((1.5707963267949)*(x8850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8851=IKsin(j4);
IkReal x8852=IKcos(j4);
IkReal x8853=(cj5*r10);
IkReal x8854=(sj1*sj2);
IkReal x8855=(r01*sj5);
IkReal x8856=(cj5*r00);
IkReal x8857=(cj5*r20);
IkReal x8858=((1.0)*x8852);
IkReal x8859=((1.0)*cj1*cj2);
IkReal x8860=((1.0)*x8851);
IkReal x8861=(sj5*x8851);
evalcond[0]=((((-1.0)*x8857*x8860))+(((-1.0)*r22*x8858))+((r21*x8861)));
evalcond[1]=((((-1.0)*x8853*x8860))+cj0+(((-1.0)*r12*x8858))+((r11*x8861)));
evalcond[2]=((((-1.0)*sj0))+((x8851*x8855))+(((-1.0)*r02*x8858))+(((-1.0)*x8856*x8860)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8860))+(((-1.0)*r21*sj5*x8858))+((x8852*x8857)));
evalcond[4]=((((-1.0)*cj0*x8859))+((cj0*x8854))+((x8852*x8856))+(((-1.0)*x8855*x8858))+(((-1.0)*r02*x8860)));
evalcond[5]=(((sj0*x8854))+(((-1.0)*r11*sj5*x8858))+((x8852*x8853))+(((-1.0)*r12*x8860))+(((-1.0)*sj0*x8859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8862=((1.0)*cj5);
CheckValue<IkReal> x8863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8862)))),-1);
if(!x8863.valid){
continue;
}
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8863.value)))+(x8864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8865=IKsin(j4);
IkReal x8866=IKcos(j4);
IkReal x8867=(cj5*r10);
IkReal x8868=(sj1*sj2);
IkReal x8869=(r01*sj5);
IkReal x8870=(cj5*r00);
IkReal x8871=(cj5*r20);
IkReal x8872=((1.0)*x8866);
IkReal x8873=((1.0)*cj1*cj2);
IkReal x8874=((1.0)*x8865);
IkReal x8875=(sj5*x8865);
evalcond[0]=((((-1.0)*x8871*x8874))+(((-1.0)*r22*x8872))+((r21*x8875)));
evalcond[1]=(cj0+(((-1.0)*x8867*x8874))+((r11*x8875))+(((-1.0)*r12*x8872)));
evalcond[2]=((((-1.0)*x8870*x8874))+(((-1.0)*sj0))+(((-1.0)*r02*x8872))+((x8865*x8869)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8872))+(((-1.0)*r22*x8874))+((cj1*sj2))+((x8866*x8871)));
evalcond[4]=((((-1.0)*r02*x8874))+(((-1.0)*x8869*x8872))+((x8866*x8870))+((cj0*x8868))+(((-1.0)*cj0*x8873)));
evalcond[5]=((((-1.0)*r11*sj5*x8872))+((x8866*x8867))+(((-1.0)*r12*x8874))+((sj0*x8868))+(((-1.0)*sj0*x8873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8876=((1.0)*cj5);
CheckValue<IkReal> x8877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8876))+(((-1.0)*r00*sj5)))),-1);
if(!x8877.valid){
continue;
}
CheckValue<IkReal> x8878 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8877.value)))+(x8878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8879=IKsin(j4);
IkReal x8880=IKcos(j4);
IkReal x8881=(cj5*r10);
IkReal x8882=(sj1*sj2);
IkReal x8883=(r01*sj5);
IkReal x8884=(cj5*r00);
IkReal x8885=(cj5*r20);
IkReal x8886=((1.0)*x8880);
IkReal x8887=((1.0)*cj1*cj2);
IkReal x8888=((1.0)*x8879);
IkReal x8889=(sj5*x8879);
evalcond[0]=((((-1.0)*r22*x8886))+((r21*x8889))+(((-1.0)*x8885*x8888)));
evalcond[1]=((((-1.0)*x8881*x8888))+cj0+(((-1.0)*r12*x8886))+((r11*x8889)));
evalcond[2]=((((-1.0)*sj0))+((x8879*x8883))+(((-1.0)*r02*x8886))+(((-1.0)*x8884*x8888)));
evalcond[3]=((((-1.0)*r22*x8888))+((cj2*sj1))+((cj1*sj2))+((x8880*x8885))+(((-1.0)*r21*sj5*x8886)));
evalcond[4]=((((-1.0)*x8883*x8886))+(((-1.0)*cj0*x8887))+(((-1.0)*r02*x8888))+((x8880*x8884))+((cj0*x8882)));
evalcond[5]=((((-1.0)*r12*x8888))+((sj0*x8882))+((x8880*x8881))+(((-1.0)*r11*sj5*x8886))+(((-1.0)*sj0*x8887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8890=cj1*cj1;
IkReal x8891=cj2*cj2;
IkReal x8892=(sj1*sj2);
IkReal x8893=((156900000.0)*py);
IkReal x8894=(cj1*cj5);
IkReal x8895=((14850585.0)*cj2);
IkReal x8896=(r00*sj5);
IkReal x8897=((16090500.0)*cj1);
IkReal x8898=((4132419.0)*cj5);
IkReal x8899=(r10*sj5);
IkReal x8900=((170000000.0)*cj1);
IkReal x8901=((156900000.0)*px);
IkReal x8902=(cj1*cj2);
IkReal x8903=((14850585.0)*cj5);
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((cj1*x8895*x8899))+(((-1.0)*r01*x8898))+(((-4132419.0)*x8896))+(((-1.0)*r11*x8892*x8903))+((x8897*x8899))+((py*x8900))+(((-1.0)*x8892*x8893))+(((16090500.0)*r11*x8894))+(((-14850585.0)*x8892*x8899))+((r11*x8894*x8895))+((x8893*x8902)))),IkReal((((cj1*x8895*x8896))+(((16090500.0)*r01*x8894))+(((43660000.0)*py))+(((-1.0)*r01*x8892*x8903))+((x8901*x8902))+((x8896*x8897))+(((-1.0)*x8892*x8901))+((r01*x8894*x8895))+((px*x8900))+((r11*x8898))+(((4132419.0)*x8899))+(((-14850585.0)*x8892*x8896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
CheckValue<IkReal> x8905=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-61544025.0)*x8891))+(((10705975.0)*x8890))+(((-123088050.0)*x8892*x8902))+(((123088050.0)*x8890*x8891))+(((-133365000.0)*cj1*x8892))+(((133365000.0)*cj2*x8890)))),-1);
if(!x8905.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8904.value)+(((1.5707963267949)*(x8905.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8906=IKcos(j0);
IkReal x8907=IKsin(j0);
IkReal x8908=((0.425)*cj1);
IkReal x8909=(cj1*cj2);
IkReal x8910=(sj1*sj2);
IkReal x8911=((0.09465)*cj5);
IkReal x8912=((0.09465)*sj5);
IkReal x8913=((0.39225)*x8907);
IkReal x8914=((0.39225)*x8906);
evalcond[0]=((((-1.0)*r01*x8911))+((x8906*x8908))+(((-1.0)*px))+(((-1.0)*x8910*x8914))+((x8909*x8914))+(((-0.10915)*x8907))+(((-1.0)*r00*x8912)));
evalcond[1]=((((0.10915)*x8906))+((x8907*x8908))+(((-1.0)*r11*x8911))+(((-1.0)*py))+(((-1.0)*x8910*x8913))+((x8909*x8913))+(((-1.0)*r10*x8912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8915=((1.0)*cj5);
IkReal x8916=((((-1.0)*r01*x8915))+(((-1.0)*r00*sj5)));
j4eval[0]=x8916;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8915))))));
j4eval[2]=IKsign(x8916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8917=((1.0)*cj5);
IkReal x8918=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8917)));
j4eval[0]=x8918;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8917))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8919=((1.0)*sj0);
IkReal x8920=((1.0)*cj0);
IkReal x8921=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8921;
j4eval[1]=((IKabs(((((-1.0)*r02*x8920))+(((-1.0)*r12*x8919)))))+(IKabs(((((-1.0)*r11*sj5*x8919))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8920))))));
j4eval[2]=IKsign(x8921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8922=((-1.0)*r20);
IkReal x8924 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8924)==0){
continue;
}
IkReal x8923=pow(x8924,-0.5);
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8922),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8925.value));
IkReal gconst1=(r21*x8923);
IkReal gconst2=(x8922*x8923);
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8926.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8927=((-1.0)*r20);
IkReal x8928=x8923;
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8927),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
IkReal x8929=((-1.0)*(x8930.value));
sj5=gconst1;
cj5=gconst2;
j5=x8929;
IkReal gconst0=x8929;
IkReal gconst1=(r21*x8928);
IkReal gconst2=(x8927*x8928);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8931=((-1.0)*r20);
IkReal x8932=x8923;
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8931),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
IkReal x8933=((-1.0)*(x8934.value));
sj5=gconst1;
cj5=gconst2;
j5=x8933;
IkReal gconst0=x8933;
IkReal gconst1=(r21*x8932);
IkReal gconst2=(x8931*x8932);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8935=((-1.0)*r20);
IkReal x8936=x8923;
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8935),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
IkReal x8937=((-1.0)*(x8938.value));
sj5=gconst1;
cj5=gconst2;
j5=x8937;
IkReal gconst0=x8937;
IkReal gconst1=(r21*x8936);
IkReal gconst2=(x8935*x8936);
IkReal x8939=r22*r22;
CheckValue<IkReal> x8943=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8939))),-1);
if(!x8943.valid){
continue;
}
IkReal x8940=x8943.value;
IkReal x8941=(sj3*x8940);
IkReal x8942=(((x8941*(r21*r21*r21*r21)))+((x8941*(r20*r20*r20*r20)))+((sj3*x8939))+(((2.0)*x8941*(r20*r20)*(r21*r21))));
j4eval[0]=x8942;
j4eval[1]=IKsign(x8942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8944=((-1.0)*r20);
IkReal x8945=x8923;
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8944),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
IkReal x8946=((-1.0)*(x8947.value));
sj5=gconst1;
cj5=gconst2;
j5=x8946;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8946;
IkReal gconst1=(r21*x8945);
IkReal gconst2=(x8944*x8945);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8948=((-1.0)*r20);
IkReal x8949=x8923;
CheckValue<IkReal> x8951 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8948),IKFAST_ATAN2_MAGTHRESH);
if(!x8951.valid){
continue;
}
IkReal x8950=((-1.0)*(x8951.value));
sj5=gconst1;
cj5=gconst2;
j5=x8950;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8950;
IkReal gconst1=(r21*x8949);
IkReal gconst2=(x8948*x8949);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8952=((-1.0)*r20);
IkReal x8953=x8923;
CheckValue<IkReal> x8955 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8952),IKFAST_ATAN2_MAGTHRESH);
if(!x8955.valid){
continue;
}
IkReal x8954=((-1.0)*(x8955.value));
sj5=gconst1;
cj5=gconst2;
j5=x8954;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8954;
IkReal gconst1=(r21*x8953);
IkReal gconst2=(x8952*x8953);
IkReal x8956=((1.0)*(r22*r22));
CheckValue<IkReal> x8960=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8956))),-1);
if(!x8960.valid){
continue;
}
IkReal x8957=x8960.value;
IkReal x8958=((1.0)*x8957);
IkReal x8959=((((-1.0)*x8958*(r20*r20*r20*r20)))+(((-2.0)*x8957*(r20*r20)*(r21*r21)))+(((-1.0)*x8956))+(((-1.0)*x8958*(r21*r21*r21*r21))));
j4eval[0]=x8959;
j4eval[1]=IKsign(x8959);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8961=((-1.0)*r20);
IkReal x8962=x8923;
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8961),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
IkReal x8963=((-1.0)*(x8964.value));
sj5=gconst1;
cj5=gconst2;
j5=x8963;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8963;
IkReal gconst1=(r21*x8962);
IkReal gconst2=(x8961*x8962);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8965=((-1.0)*r20);
IkReal x8966=x8923;
CheckValue<IkReal> x8968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8965),IKFAST_ATAN2_MAGTHRESH);
if(!x8968.valid){
continue;
}
IkReal x8967=((-1.0)*(x8968.value));
sj5=gconst1;
cj5=gconst2;
j5=x8967;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8967;
IkReal gconst1=(r21*x8966);
IkReal gconst2=(x8965*x8966);
IkReal x8969=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(x8969,-1);
if(!x8973.valid){
continue;
}
IkReal x8970=x8973.value;
IkReal x8971=((1.0)*x8970);
IkReal x8972=((((-2.0)*r10*r11*r20*r21*x8970))+(((-1.0)*x8971*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8971*(r11*r11)*(r21*r21))));
j4eval[0]=x8972;
j4eval[1]=r12;
j4eval[2]=x8969;
j4eval[3]=IKsign(x8972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8974=((-1.0)*r20);
IkReal x8975=x8923;
CheckValue<IkReal> x8977 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8974),IKFAST_ATAN2_MAGTHRESH);
if(!x8977.valid){
continue;
}
IkReal x8976=((-1.0)*(x8977.value));
sj5=gconst1;
cj5=gconst2;
j5=x8976;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8976;
IkReal gconst1=(r21*x8975);
IkReal gconst2=(x8974*x8975);
IkReal x8978=r22*r22;
IkReal x8979=(cj1*r12*sj2);
IkReal x8980=(cj2*r12*sj1);
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(((-1.0)+x8978),-1);
if(!x8984.valid){
continue;
}
IkReal x8981=x8984.value;
if((((1.0)+(((-1.0)*x8978)))) < -0.00001)
continue;
IkReal x8982=IKsqrt(((1.0)+(((-1.0)*x8978))));
IkReal x8983=(r22*x8981*x8982);
j4eval[0]=((IKabs(((((-1.0)*x8980))+(((-1.0)*x8979)))))+(IKabs((((x8979*x8983))+((x8980*x8983))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8985=(cj1*sj2);
IkReal x8986=(cj2*sj1);
IkReal x8987=((1.0)*r12);
IkReal x8988=(gconst1*r11);
IkReal x8989=((1.0)*gconst2*r10);
CheckValue<IkReal> x8990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8990.valid){
continue;
}
CheckValue<IkReal> x8991 = IKatan2WithCheck(IkReal(((((-1.0)*x8985*x8989))+(((-1.0)*x8986*x8989))+((x8985*x8988))+((x8986*x8988)))),IkReal(((((-1.0)*x8985*x8987))+(((-1.0)*x8986*x8987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8990.value)))+(x8991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8992=IKcos(j4);
IkReal x8993=IKsin(j4);
IkReal x8994=((1.0)*x8992);
IkReal x8995=(gconst1*x8992);
IkReal x8996=(gconst1*x8993);
IkReal x8997=((1.0)*gconst2*x8993);
evalcond[0]=(((r11*x8995))+((r12*x8993))+(((-1.0)*gconst2*r10*x8994)));
evalcond[1]=(((r21*x8996))+(((-1.0)*r22*x8994))+(((-1.0)*r20*x8997)));
evalcond[2]=(((r01*x8996))+(((-1.0)*r02*x8994))+(((-1.0)*r00*x8997)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8994))+((r11*x8996))+(((-1.0)*r10*x8997)));
evalcond[4]=(((cj2*sj1))+((r21*x8995))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8994))+((r22*x8993)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8995))+(((-1.0)*gconst2*r00*x8994))+((r02*x8993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8998=(gconst2*r10);
IkReal x8999=(gconst1*r11);
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal((x8999+(((-1.0)*x8998)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
CheckValue<IkReal> x9001=IKPowWithIntegerCheck(IKsign(((((2.0)*x8998*x8999))+(((-1.0)*(x8999*x8999)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8998*x8998))))),-1);
if(!x9001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9000.value)+(((1.5707963267949)*(x9001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9002=IKcos(j4);
IkReal x9003=IKsin(j4);
IkReal x9004=((1.0)*x9002);
IkReal x9005=(gconst1*x9002);
IkReal x9006=(gconst1*x9003);
IkReal x9007=((1.0)*gconst2*x9003);
evalcond[0]=((((-1.0)*gconst2*r10*x9004))+((r11*x9005))+((r12*x9003)));
evalcond[1]=((((-1.0)*r22*x9004))+((r21*x9006))+(((-1.0)*r20*x9007)));
evalcond[2]=((((-1.0)*r02*x9004))+(((-1.0)*r00*x9007))+((r01*x9006)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9004))+(((-1.0)*r10*x9007))+((r11*x9006)));
evalcond[4]=(((cj2*sj1))+((r21*x9005))+((r22*x9003))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9004)));
evalcond[5]=(((r02*x9003))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9004))+((r01*x9005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9008=((1.0)*gconst2);
CheckValue<IkReal> x9009 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9009.valid){
continue;
}
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9008)))),-1);
if(!x9010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9009.value)+(((1.5707963267949)*(x9010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9011=IKcos(j4);
IkReal x9012=IKsin(j4);
IkReal x9013=((1.0)*x9011);
IkReal x9014=(gconst1*x9011);
IkReal x9015=(gconst1*x9012);
IkReal x9016=((1.0)*gconst2*x9012);
evalcond[0]=(((r12*x9012))+(((-1.0)*gconst2*r10*x9013))+((r11*x9014)));
evalcond[1]=((((-1.0)*r22*x9013))+(((-1.0)*r20*x9016))+((r21*x9015)));
evalcond[2]=((((-1.0)*r00*x9016))+(((-1.0)*r02*x9013))+((r01*x9015)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9016))+(((-1.0)*r12*x9013))+((r11*x9015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9013))+((cj1*sj2))+((r22*x9012))+((r21*x9014)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9012))+((r01*x9014))+(((-1.0)*gconst2*r00*x9013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9017=((-1.0)*r20);
IkReal x9018=x8923;
CheckValue<IkReal> x9020 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9017),IKFAST_ATAN2_MAGTHRESH);
if(!x9020.valid){
continue;
}
IkReal x9019=((-1.0)*(x9020.value));
sj5=gconst1;
cj5=gconst2;
j5=x9019;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9019;
IkReal gconst1=(r21*x9018);
IkReal gconst2=(x9017*x9018);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9021=((-1.0)*r20);
IkReal x9022=x8923;
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9021),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
IkReal x9023=((-1.0)*(x9024.value));
sj5=gconst1;
cj5=gconst2;
j5=x9023;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9023;
IkReal gconst1=(r21*x9022);
IkReal gconst2=(x9021*x9022);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9025=((-1.0)*r20);
IkReal x9026=x8923;
CheckValue<IkReal> x9028 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9025),IKFAST_ATAN2_MAGTHRESH);
if(!x9028.valid){
continue;
}
IkReal x9027=((-1.0)*(x9028.value));
sj5=gconst1;
cj5=gconst2;
j5=x9027;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9027;
IkReal gconst1=(r21*x9026);
IkReal gconst2=(x9025*x9026);
IkReal x9029=r22*r22;
IkReal x9030=(cj1*r12*sj2);
IkReal x9031=(cj2*r12*sj1);
CheckValue<IkReal> x9035=IKPowWithIntegerCheck(((-1.0)+x9029),-1);
if(!x9035.valid){
continue;
}
IkReal x9032=x9035.value;
if((((1.0)+(((-1.0)*x9029)))) < -0.00001)
continue;
IkReal x9033=IKsqrt(((1.0)+(((-1.0)*x9029))));
IkReal x9034=(r22*x9032*x9033);
j4eval[0]=((IKabs(((((-1.0)*x9030))+(((-1.0)*x9031)))))+(IKabs((((x9031*x9034))+((x9030*x9034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9036=(cj1*sj2);
IkReal x9037=(cj2*sj1);
IkReal x9038=((1.0)*r12);
IkReal x9039=(gconst1*r11);
IkReal x9040=((1.0)*gconst2*r10);
CheckValue<IkReal> x9041=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9041.valid){
continue;
}
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(((((-1.0)*x9037*x9040))+((x9036*x9039))+(((-1.0)*x9036*x9040))+((x9037*x9039)))),IkReal(((((-1.0)*x9036*x9038))+(((-1.0)*x9037*x9038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9041.value)))+(x9042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9043=IKcos(j4);
IkReal x9044=IKsin(j4);
IkReal x9045=((1.0)*x9043);
IkReal x9046=(gconst1*x9043);
IkReal x9047=(gconst1*x9044);
IkReal x9048=((1.0)*gconst2*x9044);
evalcond[0]=(((r12*x9044))+((r11*x9046))+(((-1.0)*gconst2*r10*x9045)));
evalcond[1]=((((-1.0)*r22*x9045))+(((-1.0)*r20*x9048))+((r21*x9047)));
evalcond[2]=(((r01*x9047))+(((-1.0)*r00*x9048))+(((-1.0)*r02*x9045)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9048))+(((-1.0)*r12*x9045))+((r11*x9047)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9044))+((r21*x9046))+(((-1.0)*gconst2*r20*x9045)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9046))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9045))+((r02*x9044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9049=(gconst1*r11);
IkReal x9050=(gconst2*r10);
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal((x9049+(((-1.0)*x9050)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
CheckValue<IkReal> x9052=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9050*x9050)+(x9049*x9049)+(((-2.0)*x9049*x9050)))),-1);
if(!x9052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9051.value)+(((1.5707963267949)*(x9052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9053=IKcos(j4);
IkReal x9054=IKsin(j4);
IkReal x9055=((1.0)*x9053);
IkReal x9056=(gconst1*x9053);
IkReal x9057=(gconst1*x9054);
IkReal x9058=((1.0)*gconst2*x9054);
evalcond[0]=((((-1.0)*gconst2*r10*x9055))+((r12*x9054))+((r11*x9056)));
evalcond[1]=((((-1.0)*r22*x9055))+(((-1.0)*r20*x9058))+((r21*x9057)));
evalcond[2]=((((-1.0)*r02*x9055))+(((-1.0)*r00*x9058))+((r01*x9057)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9055))+(((-1.0)*r10*x9058))+((r11*x9057)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9054))+(((-1.0)*gconst2*r20*x9055))+((r21*x9056)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9056))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9055))+((r02*x9054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
CheckValue<IkReal> x9060=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9059.value)+(((1.5707963267949)*(x9060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9061=IKcos(j4);
IkReal x9062=IKsin(j4);
IkReal x9063=((1.0)*x9061);
IkReal x9064=(gconst1*x9061);
IkReal x9065=(gconst1*x9062);
IkReal x9066=((1.0)*gconst2*x9062);
evalcond[0]=(((r11*x9064))+((r12*x9062))+(((-1.0)*gconst2*r10*x9063)));
evalcond[1]=((((-1.0)*r20*x9066))+((r21*x9065))+(((-1.0)*r22*x9063)));
evalcond[2]=(((r01*x9065))+(((-1.0)*r02*x9063))+(((-1.0)*r00*x9066)));
evalcond[3]=((-1.0)+((r11*x9065))+(((-1.0)*r10*x9066))+(((-1.0)*r12*x9063)));
evalcond[4]=(((cj2*sj1))+((r22*x9062))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9063))+((r21*x9064)));
evalcond[5]=(((r01*x9064))+(((-1.0)*gconst2*r00*x9063))+(((-1.0)*sj1*sj2))+((r02*x9062))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9067=((-1.0)*r20);
IkReal x9068=x8923;
CheckValue<IkReal> x9070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9067),IKFAST_ATAN2_MAGTHRESH);
if(!x9070.valid){
continue;
}
IkReal x9069=((-1.0)*(x9070.value));
sj5=gconst1;
cj5=gconst2;
j5=x9069;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9069;
IkReal gconst1=(r21*x9068);
IkReal gconst2=(x9067*x9068);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9071=((-1.0)*r20);
IkReal x9072=x8923;
CheckValue<IkReal> x9074 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9071),IKFAST_ATAN2_MAGTHRESH);
if(!x9074.valid){
continue;
}
IkReal x9073=((-1.0)*(x9074.value));
sj5=gconst1;
cj5=gconst2;
j5=x9073;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9073;
IkReal gconst1=(r21*x9072);
IkReal gconst2=(x9071*x9072);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9075=((-1.0)*r20);
IkReal x9076=x8923;
CheckValue<IkReal> x9078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9075),IKFAST_ATAN2_MAGTHRESH);
if(!x9078.valid){
continue;
}
IkReal x9077=((-1.0)*(x9078.value));
sj5=gconst1;
cj5=gconst2;
j5=x9077;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9077;
IkReal gconst1=(r21*x9076);
IkReal gconst2=(x9075*x9076);
IkReal x9079=r22*r22;
IkReal x9080=((1.0)*r02);
IkReal x9081=(cj1*sj2);
IkReal x9082=(cj2*sj1);
CheckValue<IkReal> x9086=IKPowWithIntegerCheck(((-1.0)+x9079),-1);
if(!x9086.valid){
continue;
}
IkReal x9083=x9086.value;
if((((1.0)+(((-1.0)*x9079)))) < -0.00001)
continue;
IkReal x9084=IKsqrt(((1.0)+(((-1.0)*x9079))));
IkReal x9085=(r02*r22*x9083*x9084);
j4eval[0]=((IKabs(((((-1.0)*x9080*x9082))+(((-1.0)*x9080*x9081)))))+(IKabs((((x9081*x9085))+((x9082*x9085))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9087=(cj1*sj2);
IkReal x9088=(gconst1*r01);
IkReal x9089=((1.0)*r02);
IkReal x9090=(cj2*sj1);
IkReal x9091=((1.0)*gconst2*r00);
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal((((x9087*x9088))+(((-1.0)*x9087*x9091))+((x9088*x9090))+(((-1.0)*x9090*x9091)))),IkReal(((((-1.0)*x9087*x9089))+(((-1.0)*x9089*x9090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
CheckValue<IkReal> x9093=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9092.value)+(((1.5707963267949)*(x9093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9094=IKcos(j4);
IkReal x9095=IKsin(j4);
IkReal x9096=((1.0)*x9094);
IkReal x9097=(gconst1*x9094);
IkReal x9098=(gconst1*x9095);
IkReal x9099=((1.0)*gconst2*x9095);
evalcond[0]=((((-1.0)*gconst2*r00*x9096))+((r01*x9097))+((r02*x9095)));
evalcond[1]=((((-1.0)*r20*x9099))+((r21*x9098))+(((-1.0)*r22*x9096)));
evalcond[2]=(((r11*x9098))+(((-1.0)*r10*x9099))+(((-1.0)*r12*x9096)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9099))+((r01*x9098))+(((-1.0)*r02*x9096)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9096))+((cj1*sj2))+((r21*x9097))+((r22*x9095)));
evalcond[5]=(((r11*x9097))+((r12*x9095))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9100=(gconst1*r01);
IkReal x9101=(gconst2*r00);
CheckValue<IkReal> x9102 = IKatan2WithCheck(IkReal(((((-1.0)*x9101))+x9100)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9102.valid){
continue;
}
CheckValue<IkReal> x9103=IKPowWithIntegerCheck(IKsign(((x9101*x9101)+(x9100*x9100)+(((-2.0)*x9100*x9101))+(r02*r02))),-1);
if(!x9103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9102.value)+(((1.5707963267949)*(x9103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9104=IKcos(j4);
IkReal x9105=IKsin(j4);
IkReal x9106=((1.0)*x9104);
IkReal x9107=(gconst1*x9104);
IkReal x9108=(gconst1*x9105);
IkReal x9109=((1.0)*gconst2*x9105);
evalcond[0]=(((r02*x9105))+(((-1.0)*gconst2*r00*x9106))+((r01*x9107)));
evalcond[1]=((((-1.0)*r22*x9106))+((r21*x9108))+(((-1.0)*r20*x9109)));
evalcond[2]=((((-1.0)*r10*x9109))+(((-1.0)*r12*x9106))+((r11*x9108)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9106))+(((-1.0)*r00*x9109))+((r01*x9108)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9105))+((r21*x9107))+(((-1.0)*gconst2*r20*x9106)));
evalcond[5]=((((-1.0)*gconst2*r10*x9106))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9105))+((r11*x9107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9110=((1.0)*gconst2);
CheckValue<IkReal> x9111=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9110)))),-1);
if(!x9111.valid){
continue;
}
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9111.value)))+(x9112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9113=IKcos(j4);
IkReal x9114=IKsin(j4);
IkReal x9115=((1.0)*x9113);
IkReal x9116=(gconst1*x9113);
IkReal x9117=(gconst1*x9114);
IkReal x9118=((1.0)*gconst2*x9114);
evalcond[0]=((((-1.0)*gconst2*r00*x9115))+((r01*x9116))+((r02*x9114)));
evalcond[1]=(((r21*x9117))+(((-1.0)*r22*x9115))+(((-1.0)*r20*x9118)));
evalcond[2]=((((-1.0)*r10*x9118))+((r11*x9117))+(((-1.0)*r12*x9115)));
evalcond[3]=((-1.0)+((r01*x9117))+(((-1.0)*r02*x9115))+(((-1.0)*r00*x9118)));
evalcond[4]=(((r21*x9116))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9115))+((r22*x9114)));
evalcond[5]=(((r12*x9114))+((r11*x9116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9119=((-1.0)*r20);
IkReal x9120=x8923;
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9119),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
IkReal x9121=((-1.0)*(x9122.value));
sj5=gconst1;
cj5=gconst2;
j5=x9121;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9121;
IkReal gconst1=(r21*x9120);
IkReal gconst2=(x9119*x9120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9123=((-1.0)*r20);
IkReal x9124=x8923;
CheckValue<IkReal> x9126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9123),IKFAST_ATAN2_MAGTHRESH);
if(!x9126.valid){
continue;
}
IkReal x9125=((-1.0)*(x9126.value));
sj5=gconst1;
cj5=gconst2;
j5=x9125;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9125;
IkReal gconst1=(r21*x9124);
IkReal gconst2=(x9123*x9124);
IkReal x9127=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9131=IKPowWithIntegerCheck(x9127,-1);
if(!x9131.valid){
continue;
}
IkReal x9128=x9131.value;
IkReal x9129=((1.0)*x9128);
IkReal x9130=((((-2.0)*r00*r01*r20*r21*x9128))+(((-1.0)*(r02*r02)))+(((-1.0)*x9129*(r01*r01)*(r21*r21)))+(((-1.0)*x9129*(r00*r00)*(r20*r20))));
j4eval[0]=x9130;
j4eval[1]=IKsign(x9130);
j4eval[2]=r02;
j4eval[3]=x9127;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9132=((-1.0)*r20);
IkReal x9133=x8923;
CheckValue<IkReal> x9135 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9132),IKFAST_ATAN2_MAGTHRESH);
if(!x9135.valid){
continue;
}
IkReal x9134=((-1.0)*(x9135.value));
sj5=gconst1;
cj5=gconst2;
j5=x9134;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9134;
IkReal gconst1=(r21*x9133);
IkReal gconst2=(x9132*x9133);
IkReal x9136=r22*r22;
IkReal x9137=((1.0)*r02);
IkReal x9138=(cj1*sj2);
IkReal x9139=(cj2*sj1);
CheckValue<IkReal> x9143=IKPowWithIntegerCheck(((-1.0)+x9136),-1);
if(!x9143.valid){
continue;
}
IkReal x9140=x9143.value;
if((((1.0)+(((-1.0)*x9136)))) < -0.00001)
continue;
IkReal x9141=IKsqrt(((1.0)+(((-1.0)*x9136))));
IkReal x9142=(r02*r22*x9140*x9141);
j4eval[0]=((IKabs(((((-1.0)*x9137*x9138))+(((-1.0)*x9137*x9139)))))+(IKabs((((x9138*x9142))+((x9139*x9142))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9144=(cj1*sj2);
IkReal x9145=(gconst1*r01);
IkReal x9146=((1.0)*r02);
IkReal x9147=(cj2*sj1);
IkReal x9148=((1.0)*gconst2*r00);
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9149.valid){
continue;
}
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal((((x9145*x9147))+((x9144*x9145))+(((-1.0)*x9144*x9148))+(((-1.0)*x9147*x9148)))),IkReal(((((-1.0)*x9146*x9147))+(((-1.0)*x9144*x9146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9149.value)))+(x9150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9151=IKcos(j4);
IkReal x9152=IKsin(j4);
IkReal x9153=((1.0)*x9151);
IkReal x9154=(gconst1*x9151);
IkReal x9155=(gconst1*x9152);
IkReal x9156=((1.0)*gconst2*x9152);
evalcond[0]=(((r02*x9152))+(((-1.0)*gconst2*r00*x9153))+((r01*x9154)));
evalcond[1]=((((-1.0)*r20*x9156))+(((-1.0)*r22*x9153))+((r21*x9155)));
evalcond[2]=(((r11*x9155))+(((-1.0)*r12*x9153))+(((-1.0)*r10*x9156)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9153))+((r01*x9155))+(((-1.0)*r00*x9156)));
evalcond[4]=(((cj2*sj1))+((r22*x9152))+(((-1.0)*gconst2*r20*x9153))+((cj1*sj2))+((r21*x9154)));
evalcond[5]=(((r11*x9154))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9153))+((cj1*cj2))+((r12*x9152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9157=(gconst1*r01);
IkReal x9158=(gconst2*r00);
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9157*x9157)))+(((2.0)*x9157*x9158))+(((-1.0)*(x9158*x9158)))+(((-1.0)*(r02*r02))))),-1);
if(!x9159.valid){
continue;
}
CheckValue<IkReal> x9160 = IKatan2WithCheck(IkReal((x9157+(((-1.0)*x9158)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9159.value)))+(x9160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9161=IKcos(j4);
IkReal x9162=IKsin(j4);
IkReal x9163=((1.0)*x9161);
IkReal x9164=(gconst1*x9161);
IkReal x9165=(gconst1*x9162);
IkReal x9166=((1.0)*gconst2*x9162);
evalcond[0]=(((r01*x9164))+((r02*x9162))+(((-1.0)*gconst2*r00*x9163)));
evalcond[1]=((((-1.0)*r22*x9163))+((r21*x9165))+(((-1.0)*r20*x9166)));
evalcond[2]=((((-1.0)*r12*x9163))+(((-1.0)*r10*x9166))+((r11*x9165)));
evalcond[3]=((1.0)+((r01*x9165))+(((-1.0)*r02*x9163))+(((-1.0)*r00*x9166)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9162))+((r21*x9164))+(((-1.0)*gconst2*r20*x9163)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9163))+((r11*x9164))+((r12*x9162))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9167 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9167.valid){
continue;
}
CheckValue<IkReal> x9168=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9167.value)+(((1.5707963267949)*(x9168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9169=IKcos(j4);
IkReal x9170=IKsin(j4);
IkReal x9171=((1.0)*x9169);
IkReal x9172=(gconst1*x9169);
IkReal x9173=(gconst1*x9170);
IkReal x9174=((1.0)*gconst2*x9170);
evalcond[0]=((((-1.0)*gconst2*r00*x9171))+((r02*x9170))+((r01*x9172)));
evalcond[1]=(((r21*x9173))+(((-1.0)*r22*x9171))+(((-1.0)*r20*x9174)));
evalcond[2]=((((-1.0)*r10*x9174))+(((-1.0)*r12*x9171))+((r11*x9173)));
evalcond[3]=((1.0)+((r01*x9173))+(((-1.0)*r02*x9171))+(((-1.0)*r00*x9174)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9171))+((cj1*sj2))+((r21*x9172))+((r22*x9170)));
evalcond[5]=((((-1.0)*gconst2*r10*x9171))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9170))+((r11*x9172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9175=((-1.0)*r20);
IkReal x9176=((-1.0)*px);
CheckValue<IkReal> x9178 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9175),IKFAST_ATAN2_MAGTHRESH);
if(!x9178.valid){
continue;
}
IkReal x9177=((-1.0)*(x9178.value));
sj5=gconst1;
cj5=gconst2;
j5=x9177;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9176);
rxp1_1=(px*r21);
rxp1_2=(r11*x9176);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9177;
IkReal gconst1=r21;
IkReal gconst2=x9175;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9179=((-1.0)*r20);
IkReal x9180=((-1.0)*px);
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9179),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
IkReal x9181=((-1.0)*(x9182.value));
sj5=gconst1;
cj5=gconst2;
j5=x9181;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9180);
rxp1_1=(px*r21);
rxp1_2=(r11*x9180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9181;
IkReal gconst1=r21;
IkReal gconst2=x9179;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9183=((-1.0)*r20);
IkReal x9184=((-1.0)*px);
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9183),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
IkReal x9185=((-1.0)*(x9186.value));
sj5=gconst1;
cj5=gconst2;
j5=x9185;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9184);
rxp1_1=(px*r21);
rxp1_2=(r11*x9184);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9185;
IkReal gconst1=r21;
IkReal gconst2=x9183;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9189=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9189.valid){
continue;
}
IkReal x9187=x9189.value;
IkReal x9188=(sj0*x9187);
cj4array[0]=(((cj1*cj2*x9188))+(((-1.0)*sj1*sj2*x9188)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9190=IKsin(j4);
IkReal x9191=IKcos(j4);
IkReal x9192=((1.0)*gconst2);
IkReal x9193=(gconst1*r21);
evalcond[0]=(r02*x9190);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9191)));
evalcond[2]=((((-1.0)*r20*x9190*x9192))+((x9190*x9193)));
evalcond[3]=((((-1.0)*r10*x9190*x9192))+((gconst1*r11*x9190)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9191*x9192))+((x9191*x9193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9196=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9196.valid){
continue;
}
IkReal x9194=x9196.value;
IkReal x9195=((1.0)*x9194);
cj4array[0]=((((-1.0)*cj2*sj1*x9195))+(((-1.0)*cj1*sj2*x9195)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9197=IKsin(j4);
IkReal x9198=IKcos(j4);
IkReal x9199=((1.0)*sj0);
IkReal x9200=(gconst1*x9197);
IkReal x9201=((1.0)*x9198);
IkReal x9202=((1.0)*gconst2*x9197);
evalcond[0]=(r02*x9197);
evalcond[1]=((((-1.0)*r02*x9201))+(((-1.0)*x9199)));
evalcond[2]=(((r21*x9200))+(((-1.0)*r20*x9202)));
evalcond[3]=(((r11*x9200))+(((-1.0)*r10*x9202)));
evalcond[4]=((((-1.0)*gconst2*r10*x9201))+((gconst1*r11*x9198))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(r02,-1);
if(!x9203.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9203.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9204=IKsin(j4);
IkReal x9205=IKcos(j4);
IkReal x9206=(gconst1*r21);
IkReal x9207=(gconst1*r11);
IkReal x9208=((1.0)*gconst2*r10);
IkReal x9209=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9204);
evalcond[1]=(((x9204*x9206))+(((-1.0)*x9204*x9209)));
evalcond[2]=(((x9204*x9207))+(((-1.0)*x9204*x9208)));
evalcond[3]=(((cj2*sj1))+((x9205*x9206))+(((-1.0)*x9205*x9209))+((cj1*sj2)));
evalcond[4]=(((x9205*x9207))+(((-1.0)*x9205*x9208))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9210=(cj2*sj1);
IkReal x9211=(cj1*sj2);
IkReal x9212=(gconst1*r21);
IkReal x9213=((1.0)*gconst2*r20);
CheckValue<IkReal> x9214=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9212))+(((-1.0)*gconst2*r20*x9213))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9212*x9212))))),-1);
if(!x9214.valid){
continue;
}
CheckValue<IkReal> x9215 = IKatan2WithCheck(IkReal((((r22*x9210))+((r22*x9211)))),IkReal(((((-1.0)*x9211*x9213))+(((-1.0)*x9210*x9213))+((x9210*x9212))+((x9211*x9212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9214.value)))+(x9215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9216=IKsin(j4);
IkReal x9217=IKcos(j4);
IkReal x9218=(sj1*sj2);
IkReal x9219=(gconst2*r10);
IkReal x9220=(gconst2*r00);
IkReal x9221=(gconst2*r20);
IkReal x9222=((1.0)*x9217);
IkReal x9223=(gconst1*x9217);
IkReal x9224=((1.0)*cj1*cj2);
IkReal x9225=(gconst1*x9216);
IkReal x9226=((1.0)*x9216);
evalcond[0]=((((-1.0)*x9221*x9226))+((r21*x9225))+(((-1.0)*r22*x9222)));
evalcond[1]=(cj0+(((-1.0)*x9219*x9226))+((r11*x9225))+(((-1.0)*r12*x9222)));
evalcond[2]=(((r01*x9225))+(((-1.0)*sj0))+(((-1.0)*r02*x9222))+(((-1.0)*x9220*x9226)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9221*x9222))+((cj1*sj2))+((r21*x9223))+((r22*x9216)));
evalcond[4]=(((r01*x9223))+(((-1.0)*cj0*x9224))+(((-1.0)*x9220*x9222))+((r02*x9216))+((cj0*x9218)));
evalcond[5]=((((-1.0)*x9219*x9222))+((r12*x9216))+((r11*x9223))+((sj0*x9218))+(((-1.0)*sj0*x9224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9227=((1.0)*gconst2);
CheckValue<IkReal> x9228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9227))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9227)))),-1);
if(!x9229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9228.value)+(((1.5707963267949)*(x9229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9230=IKsin(j4);
IkReal x9231=IKcos(j4);
IkReal x9232=(sj1*sj2);
IkReal x9233=(gconst2*r10);
IkReal x9234=(gconst2*r00);
IkReal x9235=(gconst2*r20);
IkReal x9236=((1.0)*x9231);
IkReal x9237=(gconst1*x9231);
IkReal x9238=((1.0)*cj1*cj2);
IkReal x9239=(gconst1*x9230);
IkReal x9240=((1.0)*x9230);
evalcond[0]=((((-1.0)*x9235*x9240))+((r21*x9239))+(((-1.0)*r22*x9236)));
evalcond[1]=(cj0+(((-1.0)*r12*x9236))+(((-1.0)*x9233*x9240))+((r11*x9239)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9239))+(((-1.0)*r02*x9236))+(((-1.0)*x9234*x9240)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9235*x9236))+((cj1*sj2))+((r22*x9230))+((r21*x9237)));
evalcond[4]=((((-1.0)*cj0*x9238))+((r02*x9230))+((cj0*x9232))+((r01*x9237))+(((-1.0)*x9234*x9236)));
evalcond[5]=((((-1.0)*sj0*x9238))+(((-1.0)*x9233*x9236))+((r11*x9237))+((sj0*x9232))+((r12*x9230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9241=((1.0)*gconst2);
CheckValue<IkReal> x9242=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9241)))),-1);
if(!x9242.valid){
continue;
}
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9241))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9242.value)))+(x9243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9244=IKsin(j4);
IkReal x9245=IKcos(j4);
IkReal x9246=(sj1*sj2);
IkReal x9247=(gconst2*r10);
IkReal x9248=(gconst2*r00);
IkReal x9249=(gconst2*r20);
IkReal x9250=((1.0)*x9245);
IkReal x9251=(gconst1*x9245);
IkReal x9252=((1.0)*cj1*cj2);
IkReal x9253=(gconst1*x9244);
IkReal x9254=((1.0)*x9244);
evalcond[0]=((((-1.0)*r22*x9250))+((r21*x9253))+(((-1.0)*x9249*x9254)));
evalcond[1]=((((-1.0)*x9247*x9254))+cj0+(((-1.0)*r12*x9250))+((r11*x9253)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9253))+(((-1.0)*x9248*x9254))+(((-1.0)*r02*x9250)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9251))+((r22*x9244))+(((-1.0)*x9249*x9250)));
evalcond[4]=((((-1.0)*cj0*x9252))+((cj0*x9246))+((r02*x9244))+((r01*x9251))+(((-1.0)*x9248*x9250)));
evalcond[5]=((((-1.0)*x9247*x9250))+((r12*x9244))+((sj0*x9246))+((r11*x9251))+(((-1.0)*sj0*x9252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9255=((-1.0)*r20);
IkReal x9256=x8923;
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
IkReal x9257=((-1.0)*(x9258.value));
sj5=gconst1;
cj5=gconst2;
j5=x9257;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9257;
IkReal gconst1=(r21*x9256);
IkReal gconst2=(x9255*x9256);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9259=((-1.0)*r20);
IkReal x9260=x8923;
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9259),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
IkReal x9261=((-1.0)*(x9262.value));
sj5=gconst1;
cj5=gconst2;
j5=x9261;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9261;
IkReal gconst1=(r21*x9260);
IkReal gconst2=(x9259*x9260);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9263=((-1.0)*r20);
IkReal x9264=x8923;
CheckValue<IkReal> x9266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9263),IKFAST_ATAN2_MAGTHRESH);
if(!x9266.valid){
continue;
}
IkReal x9265=((-1.0)*(x9266.value));
sj5=gconst1;
cj5=gconst2;
j5=x9265;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9265;
IkReal gconst1=(r21*x9264);
IkReal gconst2=(x9263*x9264);
IkReal x9267=r22*r22;
CheckValue<IkReal> x9270=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9267))),-1);
if(!x9270.valid){
continue;
}
IkReal x9268=x9270.value;
IkReal x9269=(((x9268*(r21*r21*r21*r21)))+x9267+(((2.0)*x9268*(r20*r20)*(r21*r21)))+((x9268*(r20*r20*r20*r20))));
j4eval[0]=x9269;
j4eval[1]=IKsign(x9269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9271=((-1.0)*r20);
IkReal x9272=x8923;
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9271),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal x9273=((-1.0)*(x9274.value));
sj5=gconst1;
cj5=gconst2;
j5=x9273;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9273;
IkReal gconst1=(r21*x9272);
IkReal gconst2=(x9271*x9272);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9275=((-1.0)*r20);
IkReal x9276=x8923;
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9275),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9277=((-1.0)*(x9278.value));
sj5=gconst1;
cj5=gconst2;
j5=x9277;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9277;
IkReal gconst1=(r21*x9276);
IkReal gconst2=(x9275*x9276);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9279=((-1.0)*r20);
IkReal x9280=x8923;
CheckValue<IkReal> x9282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9279),IKFAST_ATAN2_MAGTHRESH);
if(!x9282.valid){
continue;
}
IkReal x9281=((-1.0)*(x9282.value));
sj5=gconst1;
cj5=gconst2;
j5=x9281;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9281;
IkReal gconst1=(r21*x9280);
IkReal gconst2=(x9279*x9280);
IkReal x9283=r22*r22;
IkReal x9284=(cj1*r12*sj2);
IkReal x9285=(cj2*r12*sj1);
CheckValue<IkReal> x9289=IKPowWithIntegerCheck(((-1.0)+x9283),-1);
if(!x9289.valid){
continue;
}
IkReal x9286=x9289.value;
if((((1.0)+(((-1.0)*x9283)))) < -0.00001)
continue;
IkReal x9287=IKsqrt(((1.0)+(((-1.0)*x9283))));
IkReal x9288=((1.0)*r22*x9286*x9287);
j4eval[0]=((IKabs((x9285+x9284)))+(IKabs(((((-1.0)*x9285*x9288))+(((-1.0)*x9284*x9288))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9290=((1.0)*gconst1);
IkReal x9291=(cj2*sj1);
IkReal x9292=(gconst2*r10);
IkReal x9293=(cj1*sj2);
CheckValue<IkReal> x9294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9290)))),-1);
if(!x9294.valid){
continue;
}
CheckValue<IkReal> x9295 = IKatan2WithCheck(IkReal((((x9291*x9292))+((x9292*x9293))+(((-1.0)*r11*x9290*x9291))+(((-1.0)*r11*x9290*x9293)))),IkReal((((r12*x9293))+((r12*x9291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9294.value)))+(x9295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9296=IKsin(j4);
IkReal x9297=IKcos(j4);
IkReal x9298=((1.0)*x9297);
IkReal x9299=(gconst2*x9297);
IkReal x9300=(gconst1*x9296);
IkReal x9301=((1.0)*x9296);
evalcond[0]=(((r21*x9300))+(((-1.0)*r22*x9298))+(((-1.0)*gconst2*r20*x9301)));
evalcond[1]=((((-1.0)*gconst2*r00*x9301))+((r01*x9300))+(((-1.0)*r02*x9298)));
evalcond[2]=((((-1.0)*gconst1*r11*x9298))+((r10*x9299))+(((-1.0)*r12*x9301)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9301))+((r11*x9300))+(((-1.0)*r12*x9298)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9298))+((cj1*sj2))+((r20*x9299))+(((-1.0)*r22*x9301)));
evalcond[5]=(((r00*x9299))+(((-1.0)*gconst1*r01*x9298))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9302=(gconst1*r11);
IkReal x9303=(gconst2*r10);
CheckValue<IkReal> x9304 = IKatan2WithCheck(IkReal((x9303+(((-1.0)*x9302)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9304.valid){
continue;
}
CheckValue<IkReal> x9305=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9302*x9303))+(x9303*x9303)+(x9302*x9302))),-1);
if(!x9305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9304.value)+(((1.5707963267949)*(x9305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9306=IKsin(j4);
IkReal x9307=IKcos(j4);
IkReal x9308=((1.0)*x9307);
IkReal x9309=(gconst2*x9307);
IkReal x9310=(gconst1*x9306);
IkReal x9311=((1.0)*x9306);
evalcond[0]=(((r21*x9310))+(((-1.0)*r22*x9308))+(((-1.0)*gconst2*r20*x9311)));
evalcond[1]=((((-1.0)*gconst2*r00*x9311))+((r01*x9310))+(((-1.0)*r02*x9308)));
evalcond[2]=((((-1.0)*gconst1*r11*x9308))+((r10*x9309))+(((-1.0)*r12*x9311)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9311))+((r11*x9310))+(((-1.0)*r12*x9308)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9308))+((cj1*sj2))+((r20*x9309))+(((-1.0)*r22*x9311)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9308))+(((-1.0)*r02*x9311))+((r00*x9309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9312=((1.0)*gconst2);
CheckValue<IkReal> x9313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9312)))),-1);
if(!x9313.valid){
continue;
}
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9312))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9313.value)))+(x9314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9315=IKsin(j4);
IkReal x9316=IKcos(j4);
IkReal x9317=((1.0)*x9316);
IkReal x9318=(gconst2*x9316);
IkReal x9319=(gconst1*x9315);
IkReal x9320=((1.0)*x9315);
evalcond[0]=(((r21*x9319))+(((-1.0)*gconst2*r20*x9320))+(((-1.0)*r22*x9317)));
evalcond[1]=(((r01*x9319))+(((-1.0)*r02*x9317))+(((-1.0)*gconst2*r00*x9320)));
evalcond[2]=((((-1.0)*r12*x9320))+(((-1.0)*gconst1*r11*x9317))+((r10*x9318)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9320))+((r11*x9319))+(((-1.0)*r12*x9317)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9317))+(((-1.0)*r22*x9320))+((cj1*sj2))+((r20*x9318)));
evalcond[5]=((((-1.0)*r02*x9320))+(((-1.0)*gconst1*r01*x9317))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9321=((-1.0)*r20);
IkReal x9322=x8923;
CheckValue<IkReal> x9324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9321),IKFAST_ATAN2_MAGTHRESH);
if(!x9324.valid){
continue;
}
IkReal x9323=((-1.0)*(x9324.value));
sj5=gconst1;
cj5=gconst2;
j5=x9323;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9323;
IkReal gconst1=(r21*x9322);
IkReal gconst2=(x9321*x9322);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9325=((-1.0)*r20);
IkReal x9326=x8923;
CheckValue<IkReal> x9328 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9325),IKFAST_ATAN2_MAGTHRESH);
if(!x9328.valid){
continue;
}
IkReal x9327=((-1.0)*(x9328.value));
sj5=gconst1;
cj5=gconst2;
j5=x9327;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9327;
IkReal gconst1=(r21*x9326);
IkReal gconst2=(x9325*x9326);
IkReal x9329=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(x9329,-1);
if(!x9333.valid){
continue;
}
IkReal x9330=x9333.value;
IkReal x9331=((1.0)*x9330);
IkReal x9332=((((-1.0)*x9331*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9330))+(((-1.0)*(r12*r12)))+(((-1.0)*x9331*(r11*r11)*(r21*r21))));
j4eval[0]=x9332;
j4eval[1]=r12;
j4eval[2]=x9329;
j4eval[3]=IKsign(x9332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9334=((-1.0)*r20);
IkReal x9335=x8923;
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9334),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
IkReal x9336=((-1.0)*(x9337.value));
sj5=gconst1;
cj5=gconst2;
j5=x9336;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9336;
IkReal gconst1=(r21*x9335);
IkReal gconst2=(x9334*x9335);
IkReal x9338=r22*r22;
IkReal x9339=(cj1*r12*sj2);
IkReal x9340=(cj2*r12*sj1);
CheckValue<IkReal> x9344=IKPowWithIntegerCheck(((-1.0)+x9338),-1);
if(!x9344.valid){
continue;
}
IkReal x9341=x9344.value;
if((((1.0)+(((-1.0)*x9338)))) < -0.00001)
continue;
IkReal x9342=IKsqrt(((1.0)+(((-1.0)*x9338))));
IkReal x9343=((1.0)*r22*x9341*x9342);
j4eval[0]=((IKabs((x9339+x9340)))+(IKabs(((((-1.0)*x9340*x9343))+(((-1.0)*x9339*x9343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9345=((1.0)*gconst1);
IkReal x9346=(cj2*sj1);
IkReal x9347=(gconst2*r10);
IkReal x9348=(cj1*sj2);
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9345)))),-1);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9345*x9348))+(((-1.0)*r11*x9345*x9346))+((x9346*x9347))+((x9347*x9348)))),IkReal((((r12*x9346))+((r12*x9348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9349.value)))+(x9350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9351=IKsin(j4);
IkReal x9352=IKcos(j4);
IkReal x9353=((1.0)*x9352);
IkReal x9354=(gconst2*x9352);
IkReal x9355=(gconst1*x9351);
IkReal x9356=((1.0)*x9351);
evalcond[0]=((((-1.0)*r22*x9353))+(((-1.0)*gconst2*r20*x9356))+((r21*x9355)));
evalcond[1]=((((-1.0)*r02*x9353))+((r01*x9355))+(((-1.0)*gconst2*r00*x9356)));
evalcond[2]=((((-1.0)*r12*x9356))+((r10*x9354))+(((-1.0)*gconst1*r11*x9353)));
evalcond[3]=((-1.0)+((r11*x9355))+(((-1.0)*r12*x9353))+(((-1.0)*gconst2*r10*x9356)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9356))+((cj1*sj2))+((r20*x9354))+(((-1.0)*gconst1*r21*x9353)));
evalcond[5]=((((-1.0)*gconst1*r01*x9353))+(((-1.0)*r02*x9356))+(((-1.0)*sj1*sj2))+((r00*x9354))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9357=(gconst1*r11);
IkReal x9358=(gconst2*r10);
CheckValue<IkReal> x9359=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9358*x9358)))+(((-1.0)*(x9357*x9357)))+(((-1.0)*(r12*r12)))+(((2.0)*x9357*x9358)))),-1);
if(!x9359.valid){
continue;
}
CheckValue<IkReal> x9360 = IKatan2WithCheck(IkReal((x9358+(((-1.0)*x9357)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9359.value)))+(x9360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9361=IKsin(j4);
IkReal x9362=IKcos(j4);
IkReal x9363=((1.0)*x9362);
IkReal x9364=(gconst2*x9362);
IkReal x9365=(gconst1*x9361);
IkReal x9366=((1.0)*x9361);
evalcond[0]=(((r21*x9365))+(((-1.0)*r22*x9363))+(((-1.0)*gconst2*r20*x9366)));
evalcond[1]=((((-1.0)*r02*x9363))+((r01*x9365))+(((-1.0)*gconst2*r00*x9366)));
evalcond[2]=((((-1.0)*gconst1*r11*x9363))+(((-1.0)*r12*x9366))+((r10*x9364)));
evalcond[3]=((-1.0)+((r11*x9365))+(((-1.0)*gconst2*r10*x9366))+(((-1.0)*r12*x9363)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9363))+((cj1*sj2))+(((-1.0)*r22*x9366))+((r20*x9364)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9366))+(((-1.0)*gconst1*r01*x9363))+((cj1*cj2))+((r00*x9364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
CheckValue<IkReal> x9368=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9367.value)+(((1.5707963267949)*(x9368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9369=IKsin(j4);
IkReal x9370=IKcos(j4);
IkReal x9371=((1.0)*x9370);
IkReal x9372=(gconst2*x9370);
IkReal x9373=(gconst1*x9369);
IkReal x9374=((1.0)*x9369);
evalcond[0]=(((r21*x9373))+(((-1.0)*r22*x9371))+(((-1.0)*gconst2*r20*x9374)));
evalcond[1]=((((-1.0)*r02*x9371))+(((-1.0)*gconst2*r00*x9374))+((r01*x9373)));
evalcond[2]=((((-1.0)*r12*x9374))+((r10*x9372))+(((-1.0)*gconst1*r11*x9371)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9374))+((r11*x9373))+(((-1.0)*r12*x9371)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9371))+((cj1*sj2))+(((-1.0)*r22*x9374))+((r20*x9372)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9374))+((cj1*cj2))+((r00*x9372))+(((-1.0)*gconst1*r01*x9371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9375=((-1.0)*r20);
IkReal x9376=x8923;
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9375),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9377=((-1.0)*(x9378.value));
sj5=gconst1;
cj5=gconst2;
j5=x9377;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9377;
IkReal gconst1=(r21*x9376);
IkReal gconst2=(x9375*x9376);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9379=((-1.0)*r20);
IkReal x9380=x8923;
CheckValue<IkReal> x9382 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9379),IKFAST_ATAN2_MAGTHRESH);
if(!x9382.valid){
continue;
}
IkReal x9381=((-1.0)*(x9382.value));
sj5=gconst1;
cj5=gconst2;
j5=x9381;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9381;
IkReal gconst1=(r21*x9380);
IkReal gconst2=(x9379*x9380);
IkReal x9383=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(x9383,-1);
if(!x9387.valid){
continue;
}
IkReal x9384=x9387.value;
IkReal x9385=((1.0)*x9384);
IkReal x9386=((((-1.0)*x9385*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9385*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9384)));
j4eval[0]=x9386;
j4eval[1]=IKsign(x9386);
j4eval[2]=r02;
j4eval[3]=x9383;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9388=((-1.0)*r20);
IkReal x9389=x8923;
CheckValue<IkReal> x9391 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9388),IKFAST_ATAN2_MAGTHRESH);
if(!x9391.valid){
continue;
}
IkReal x9390=((-1.0)*(x9391.value));
sj5=gconst1;
cj5=gconst2;
j5=x9390;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9390;
IkReal gconst1=(r21*x9389);
IkReal gconst2=(x9388*x9389);
IkReal x9392=r22*r22;
IkReal x9393=(cj1*r02*sj2);
IkReal x9394=(cj2*r02*sj1);
CheckValue<IkReal> x9398=IKPowWithIntegerCheck(((-1.0)+x9392),-1);
if(!x9398.valid){
continue;
}
IkReal x9395=x9398.value;
if((((1.0)+(((-1.0)*x9392)))) < -0.00001)
continue;
IkReal x9396=IKsqrt(((1.0)+(((-1.0)*x9392))));
IkReal x9397=((1.0)*r22*x9395*x9396);
j4eval[0]=((IKabs((x9394+x9393)))+(IKabs(((((-1.0)*x9394*x9397))+(((-1.0)*x9393*x9397))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9399=(cj2*sj1);
IkReal x9400=(cj1*sj2);
IkReal x9401=(gconst2*r00);
IkReal x9402=((1.0)*gconst1*r01);
CheckValue<IkReal> x9403 = IKatan2WithCheck(IkReal((((x9400*x9401))+(((-1.0)*x9400*x9402))+((x9399*x9401))+(((-1.0)*x9399*x9402)))),IkReal((((r02*x9399))+((r02*x9400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9403.valid){
continue;
}
CheckValue<IkReal> x9404=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9403.value)+(((1.5707963267949)*(x9404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9405=IKsin(j4);
IkReal x9406=IKcos(j4);
IkReal x9407=(gconst1*r11);
IkReal x9408=(gconst1*r21);
IkReal x9409=(gconst1*r01);
IkReal x9410=((1.0)*x9406);
IkReal x9411=(gconst2*x9406);
IkReal x9412=((1.0)*x9405);
evalcond[0]=(((x9405*x9408))+(((-1.0)*gconst2*r20*x9412))+(((-1.0)*r22*x9410)));
evalcond[1]=(((x9405*x9407))+(((-1.0)*r12*x9410))+(((-1.0)*gconst2*r10*x9412)));
evalcond[2]=((((-1.0)*r02*x9412))+((r00*x9411))+(((-1.0)*x9409*x9410)));
evalcond[3]=((-1.0)+((x9405*x9409))+(((-1.0)*r02*x9410))+(((-1.0)*gconst2*r00*x9412)));
evalcond[4]=(((r20*x9411))+((cj2*sj1))+(((-1.0)*x9408*x9410))+((cj1*sj2))+(((-1.0)*r22*x9412)));
evalcond[5]=((((-1.0)*r12*x9412))+((r10*x9411))+(((-1.0)*x9407*x9410))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9413=(gconst2*r00);
IkReal x9414=(gconst1*r01);
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal((x9413+(((-1.0)*x9414)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9413*x9413)))+(((2.0)*x9413*x9414))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9414*x9414))))),-1);
if(!x9416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9415.value)+(((1.5707963267949)*(x9416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9417=IKsin(j4);
IkReal x9418=IKcos(j4);
IkReal x9419=(gconst1*r11);
IkReal x9420=(gconst1*r21);
IkReal x9421=(gconst1*r01);
IkReal x9422=((1.0)*x9418);
IkReal x9423=(gconst2*x9418);
IkReal x9424=((1.0)*x9417);
evalcond[0]=(((x9417*x9420))+(((-1.0)*gconst2*r20*x9424))+(((-1.0)*r22*x9422)));
evalcond[1]=((((-1.0)*gconst2*r10*x9424))+(((-1.0)*r12*x9422))+((x9417*x9419)));
evalcond[2]=(((r00*x9423))+(((-1.0)*x9421*x9422))+(((-1.0)*r02*x9424)));
evalcond[3]=((-1.0)+((x9417*x9421))+(((-1.0)*r02*x9422))+(((-1.0)*gconst2*r00*x9424)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9420*x9422))+((cj1*sj2))+((r20*x9423))+(((-1.0)*r22*x9424)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9424))+((r10*x9423))+(((-1.0)*x9419*x9422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9425=((1.0)*gconst2);
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9425))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
CheckValue<IkReal> x9427=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9425)))),-1);
if(!x9427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9426.value)+(((1.5707963267949)*(x9427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9428=IKsin(j4);
IkReal x9429=IKcos(j4);
IkReal x9430=(gconst1*r11);
IkReal x9431=(gconst1*r21);
IkReal x9432=(gconst1*r01);
IkReal x9433=((1.0)*x9429);
IkReal x9434=(gconst2*x9429);
IkReal x9435=((1.0)*x9428);
evalcond[0]=(((x9428*x9431))+(((-1.0)*gconst2*r20*x9435))+(((-1.0)*r22*x9433)));
evalcond[1]=((((-1.0)*gconst2*r10*x9435))+((x9428*x9430))+(((-1.0)*r12*x9433)));
evalcond[2]=((((-1.0)*x9432*x9433))+(((-1.0)*r02*x9435))+((r00*x9434)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9435))+((x9428*x9432))+(((-1.0)*r02*x9433)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9431*x9433))+((cj1*sj2))+((r20*x9434))+(((-1.0)*r22*x9435)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9435))+((r10*x9434))+(((-1.0)*x9430*x9433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9436=((-1.0)*r20);
IkReal x9437=x8923;
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9436),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
IkReal x9438=((-1.0)*(x9439.value));
sj5=gconst1;
cj5=gconst2;
j5=x9438;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9438;
IkReal gconst1=(r21*x9437);
IkReal gconst2=(x9436*x9437);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9440=((-1.0)*r20);
IkReal x9441=x8923;
CheckValue<IkReal> x9443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9440),IKFAST_ATAN2_MAGTHRESH);
if(!x9443.valid){
continue;
}
IkReal x9442=((-1.0)*(x9443.value));
sj5=gconst1;
cj5=gconst2;
j5=x9442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9442;
IkReal gconst1=(r21*x9441);
IkReal gconst2=(x9440*x9441);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9444=((-1.0)*r20);
IkReal x9445=x8923;
CheckValue<IkReal> x9447 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9444),IKFAST_ATAN2_MAGTHRESH);
if(!x9447.valid){
continue;
}
IkReal x9446=((-1.0)*(x9447.value));
sj5=gconst1;
cj5=gconst2;
j5=x9446;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9446;
IkReal gconst1=(r21*x9445);
IkReal gconst2=(x9444*x9445);
IkReal x9448=r22*r22;
IkReal x9449=(cj1*r02*sj2);
IkReal x9450=(cj2*r02*sj1);
CheckValue<IkReal> x9454=IKPowWithIntegerCheck(((-1.0)+x9448),-1);
if(!x9454.valid){
continue;
}
IkReal x9451=x9454.value;
if((((1.0)+(((-1.0)*x9448)))) < -0.00001)
continue;
IkReal x9452=IKsqrt(((1.0)+(((-1.0)*x9448))));
IkReal x9453=((1.0)*r22*x9451*x9452);
j4eval[0]=((IKabs(((((-1.0)*x9450*x9453))+(((-1.0)*x9449*x9453)))))+(IKabs((x9450+x9449))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9455=(cj2*sj1);
IkReal x9456=(cj1*sj2);
IkReal x9457=(gconst2*r00);
IkReal x9458=((1.0)*gconst1*r01);
CheckValue<IkReal> x9459 = IKatan2WithCheck(IkReal(((((-1.0)*x9456*x9458))+((x9455*x9457))+(((-1.0)*x9455*x9458))+((x9456*x9457)))),IkReal((((r02*x9456))+((r02*x9455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9459.valid){
continue;
}
CheckValue<IkReal> x9460=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9459.value)+(((1.5707963267949)*(x9460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9461=IKsin(j4);
IkReal x9462=IKcos(j4);
IkReal x9463=(gconst1*r11);
IkReal x9464=(gconst1*r21);
IkReal x9465=(gconst1*r01);
IkReal x9466=((1.0)*x9462);
IkReal x9467=(gconst2*x9462);
IkReal x9468=((1.0)*x9461);
evalcond[0]=((((-1.0)*gconst2*r20*x9468))+(((-1.0)*r22*x9466))+((x9461*x9464)));
evalcond[1]=(((x9461*x9463))+(((-1.0)*r12*x9466))+(((-1.0)*gconst2*r10*x9468)));
evalcond[2]=(((r00*x9467))+(((-1.0)*x9465*x9466))+(((-1.0)*r02*x9468)));
evalcond[3]=((1.0)+((x9461*x9465))+(((-1.0)*gconst2*r00*x9468))+(((-1.0)*r02*x9466)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9468))+((r20*x9467))+(((-1.0)*x9464*x9466)));
evalcond[5]=(((r10*x9467))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9468))+((cj1*cj2))+(((-1.0)*x9463*x9466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9469=(gconst1*r01);
IkReal x9470=(gconst2*r00);
CheckValue<IkReal> x9471 = IKatan2WithCheck(IkReal((x9470+(((-1.0)*x9469)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472=IKPowWithIntegerCheck(IKsign(((x9470*x9470)+(((-2.0)*x9469*x9470))+(x9469*x9469)+(r02*r02))),-1);
if(!x9472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9471.value)+(((1.5707963267949)*(x9472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9473=IKsin(j4);
IkReal x9474=IKcos(j4);
IkReal x9475=(gconst1*r11);
IkReal x9476=(gconst1*r21);
IkReal x9477=(gconst1*r01);
IkReal x9478=((1.0)*x9474);
IkReal x9479=(gconst2*x9474);
IkReal x9480=((1.0)*x9473);
evalcond[0]=((((-1.0)*r22*x9478))+(((-1.0)*gconst2*r20*x9480))+((x9473*x9476)));
evalcond[1]=((((-1.0)*r12*x9478))+((x9473*x9475))+(((-1.0)*gconst2*r10*x9480)));
evalcond[2]=((((-1.0)*x9477*x9478))+(((-1.0)*r02*x9480))+((r00*x9479)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9478))+(((-1.0)*gconst2*r00*x9480))+((x9473*x9477)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9476*x9478))+((cj1*sj2))+(((-1.0)*r22*x9480))+((r20*x9479)));
evalcond[5]=(((r10*x9479))+(((-1.0)*sj1*sj2))+(((-1.0)*x9475*x9478))+((cj1*cj2))+(((-1.0)*r12*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9481 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9481.valid){
continue;
}
CheckValue<IkReal> x9482=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9481.value)+(((1.5707963267949)*(x9482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9483=IKsin(j4);
IkReal x9484=IKcos(j4);
IkReal x9485=(gconst1*r11);
IkReal x9486=(gconst1*r21);
IkReal x9487=(gconst1*r01);
IkReal x9488=((1.0)*x9484);
IkReal x9489=(gconst2*x9484);
IkReal x9490=((1.0)*x9483);
evalcond[0]=((((-1.0)*gconst2*r20*x9490))+((x9483*x9486))+(((-1.0)*r22*x9488)));
evalcond[1]=(((x9483*x9485))+(((-1.0)*gconst2*r10*x9490))+(((-1.0)*r12*x9488)));
evalcond[2]=((((-1.0)*r02*x9490))+(((-1.0)*x9487*x9488))+((r00*x9489)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9488))+((x9483*x9487))+(((-1.0)*gconst2*r00*x9490)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9490))+((cj1*sj2))+((r20*x9489))+(((-1.0)*x9486*x9488)));
evalcond[5]=((((-1.0)*x9485*x9488))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9490))+((cj1*cj2))+((r10*x9489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9491=((-1.0)*r20);
IkReal x9492=((-1.0)*px);
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9491),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
IkReal x9493=((-1.0)*(x9494.value));
sj5=gconst1;
cj5=gconst2;
j5=x9493;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9492);
rxp1_1=(px*r21);
rxp1_2=(r11*x9492);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9493;
IkReal gconst1=r21;
IkReal gconst2=x9491;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9495=((-1.0)*r20);
IkReal x9496=((-1.0)*px);
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9495),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
IkReal x9497=((-1.0)*(x9498.value));
sj5=gconst1;
cj5=gconst2;
j5=x9497;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9496);
rxp1_1=(px*r21);
rxp1_2=(r11*x9496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9497;
IkReal gconst1=r21;
IkReal gconst2=x9495;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9499=((-1.0)*r20);
IkReal x9500=((-1.0)*px);
CheckValue<IkReal> x9502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9499),IKFAST_ATAN2_MAGTHRESH);
if(!x9502.valid){
continue;
}
IkReal x9501=((-1.0)*(x9502.value));
sj5=gconst1;
cj5=gconst2;
j5=x9501;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9500);
rxp1_1=(px*r21);
rxp1_2=(r11*x9500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9501;
IkReal gconst1=r21;
IkReal gconst2=x9499;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9505=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9505.valid){
continue;
}
IkReal x9503=x9505.value;
IkReal x9504=(sj0*x9503);
cj4array[0]=((((-1.0)*sj1*sj2*x9504))+((cj1*cj2*x9504)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9506=IKsin(j4);
IkReal x9507=IKcos(j4);
IkReal x9508=(gconst1*x9506);
IkReal x9509=((1.0)*x9507);
IkReal x9510=((1.0)*gconst2*x9506);
evalcond[0]=((-1.0)*r02*x9506);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9509)));
evalcond[2]=((((-1.0)*r20*x9510))+((r21*x9508)));
evalcond[3]=(((r11*x9508))+(((-1.0)*r10*x9510)));
evalcond[4]=((((-1.0)*gconst1*r21*x9509))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9513=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9513.valid){
continue;
}
IkReal x9511=x9513.value;
IkReal x9512=((1.0)*x9511);
cj4array[0]=((((-1.0)*cj2*sj1*x9512))+(((-1.0)*cj1*sj2*x9512)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9514=IKsin(j4);
IkReal x9515=IKcos(j4);
IkReal x9516=(gconst2*r10);
IkReal x9517=((1.0)*sj0);
IkReal x9518=(gconst1*r11);
IkReal x9519=((1.0)*x9514);
IkReal x9520=((1.0)*x9515);
evalcond[0]=((-1.0)*r02*x9514);
evalcond[1]=((((-1.0)*r02*x9520))+(((-1.0)*x9517)));
evalcond[2]=((((-1.0)*gconst2*r20*x9519))+((gconst1*r21*x9514)));
evalcond[3]=(((x9514*x9518))+(((-1.0)*x9516*x9519)));
evalcond[4]=((((-1.0)*cj1*cj2*x9517))+(((-1.0)*x9518*x9520))+((x9515*x9516))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9521=IKPowWithIntegerCheck(r02,-1);
if(!x9521.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9521.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9522=IKsin(j4);
IkReal x9523=IKcos(j4);
IkReal x9524=(gconst2*r10);
IkReal x9525=(gconst1*r11);
IkReal x9526=(gconst1*r21);
IkReal x9527=(gconst2*r20);
IkReal x9528=((1.0)*x9522);
IkReal x9529=((1.0)*x9523);
evalcond[0]=((-1.0)*r02*x9522);
evalcond[1]=((((-1.0)*x9527*x9528))+((x9522*x9526)));
evalcond[2]=((((-1.0)*x9524*x9528))+((x9522*x9525)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9523*x9527))+(((-1.0)*x9526*x9529)));
evalcond[4]=((((-1.0)*x9525*x9529))+(((-1.0)*cj1*cj2*sj0))+((x9523*x9524))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9530=(cj2*sj1);
IkReal x9531=(cj1*sj2);
IkReal x9532=(gconst1*r21);
IkReal x9533=((1.0)*gconst2*r20);
CheckValue<IkReal> x9534=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9532*x9532)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9532)))),-1);
if(!x9534.valid){
continue;
}
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal((((r22*x9531))+((r22*x9530)))),IkReal(((((-1.0)*x9531*x9533))+(((-1.0)*x9530*x9533))+((x9531*x9532))+((x9530*x9532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9534.value)))+(x9535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9536=IKsin(j4);
IkReal x9537=IKcos(j4);
IkReal x9538=(gconst1*r11);
IkReal x9539=(sj1*sj2);
IkReal x9540=(gconst1*r21);
IkReal x9541=(gconst1*r01);
IkReal x9542=((1.0)*x9537);
IkReal x9543=(gconst2*x9537);
IkReal x9544=((1.0)*cj1*cj2);
IkReal x9545=((1.0)*x9536);
evalcond[0]=(((x9536*x9540))+(((-1.0)*r22*x9542))+(((-1.0)*gconst2*r20*x9545)));
evalcond[1]=((((-1.0)*r12*x9542))+cj0+(((-1.0)*gconst2*r10*x9545))+((x9536*x9538)));
evalcond[2]=((((-1.0)*sj0))+((x9536*x9541))+(((-1.0)*r02*x9542))+(((-1.0)*gconst2*r00*x9545)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9540*x9542))+((cj1*sj2))+(((-1.0)*r22*x9545))+((r20*x9543)));
evalcond[4]=((((-1.0)*cj0*x9544))+(((-1.0)*x9541*x9542))+(((-1.0)*r02*x9545))+((cj0*x9539))+((r00*x9543)));
evalcond[5]=((((-1.0)*r12*x9545))+(((-1.0)*sj0*x9544))+((sj0*x9539))+((r10*x9543))+(((-1.0)*x9538*x9542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9546=((1.0)*gconst2);
CheckValue<IkReal> x9547=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9546)))),-1);
if(!x9547.valid){
continue;
}
CheckValue<IkReal> x9548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9546))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9547.value)))+(x9548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9549=IKsin(j4);
IkReal x9550=IKcos(j4);
IkReal x9551=(gconst1*r11);
IkReal x9552=(sj1*sj2);
IkReal x9553=(gconst1*r21);
IkReal x9554=(gconst1*r01);
IkReal x9555=((1.0)*x9550);
IkReal x9556=(gconst2*x9550);
IkReal x9557=((1.0)*cj1*cj2);
IkReal x9558=((1.0)*x9549);
evalcond[0]=((((-1.0)*r22*x9555))+((x9549*x9553))+(((-1.0)*gconst2*r20*x9558)));
evalcond[1]=(cj0+((x9549*x9551))+(((-1.0)*gconst2*r10*x9558))+(((-1.0)*r12*x9555)));
evalcond[2]=((((-1.0)*sj0))+((x9549*x9554))+(((-1.0)*r02*x9555))+(((-1.0)*gconst2*r00*x9558)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9558))+((cj1*sj2))+((r20*x9556))+(((-1.0)*x9553*x9555)));
evalcond[4]=((((-1.0)*x9554*x9555))+(((-1.0)*cj0*x9557))+(((-1.0)*r02*x9558))+((r00*x9556))+((cj0*x9552)));
evalcond[5]=((((-1.0)*x9551*x9555))+((sj0*x9552))+(((-1.0)*sj0*x9557))+((r10*x9556))+(((-1.0)*r12*x9558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9559=((1.0)*gconst2);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
CheckValue<IkReal> x9561=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9559)))),-1);
if(!x9561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9560.value)+(((1.5707963267949)*(x9561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9562=IKsin(j4);
IkReal x9563=IKcos(j4);
IkReal x9564=(gconst1*r11);
IkReal x9565=(sj1*sj2);
IkReal x9566=(gconst1*r21);
IkReal x9567=(gconst1*r01);
IkReal x9568=((1.0)*x9563);
IkReal x9569=(gconst2*x9563);
IkReal x9570=((1.0)*cj1*cj2);
IkReal x9571=((1.0)*x9562);
evalcond[0]=((((-1.0)*gconst2*r20*x9571))+((x9562*x9566))+(((-1.0)*r22*x9568)));
evalcond[1]=(cj0+((x9562*x9564))+(((-1.0)*gconst2*r10*x9571))+(((-1.0)*r12*x9568)));
evalcond[2]=((((-1.0)*sj0))+((x9562*x9567))+(((-1.0)*gconst2*r00*x9571))+(((-1.0)*r02*x9568)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9566*x9568))+((cj1*sj2))+(((-1.0)*r22*x9571))+((r20*x9569)));
evalcond[4]=((((-1.0)*cj0*x9570))+((cj0*x9565))+((r00*x9569))+(((-1.0)*r02*x9571))+(((-1.0)*x9567*x9568)));
evalcond[5]=((((-1.0)*sj0*x9570))+((sj0*x9565))+(((-1.0)*r12*x9571))+(((-1.0)*x9564*x9568))+((r10*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9572=((-1.0)*r20);
IkReal x9573=x8923;
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9572),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
IkReal x9574=((-1.0)*(x9575.value));
sj5=gconst1;
cj5=gconst2;
j5=x9574;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9574;
IkReal gconst1=(r21*x9573);
IkReal gconst2=(x9572*x9573);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9576=((-1.0)*r20);
IkReal x9577=x8923;
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9576),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
IkReal x9578=((-1.0)*(x9579.value));
sj5=gconst1;
cj5=gconst2;
j5=x9578;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9578;
IkReal gconst1=(r21*x9577);
IkReal gconst2=(x9576*x9577);
CheckValue<IkReal> x9587=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9587.valid){
continue;
}
IkReal x9580=x9587.value;
IkReal x9581=(sj3*x9580);
IkReal x9582=(r11*x9581);
IkReal x9583=(r00*x9581);
IkReal x9584=(r01*x9581);
IkReal x9585=(r10*x9581);
IkReal x9586=(r20*r21*x9581);
j4eval[0]=IKsign((((r00*r20*r21*x9582))+((r02*r12*sj3))+((r10*x9583*(r20*r20)))+((r10*r20*r21*x9584))+((r01*x9582*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9588=gconst2*gconst2;
IkReal x9589=gconst1*gconst1;
IkReal x9590=((1.0)*cj3);
IkReal x9591=((1.0)*sj3);
IkReal x9592=(r11*sj3);
IkReal x9593=(r10*sj3);
IkReal x9594=(gconst1*gconst2*r00);
IkReal x9595=(gconst1*gconst2*r01);
IkReal x9596=(r00*x9588);
IkReal x9597=(r01*x9589);
CheckValue<IkReal> x9598=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9594))+((cj3*r10*x9595))+(((-1.0)*r11*x9590*x9597))+(((-1.0)*r10*x9590*x9596))+(((-1.0)*r02*r12*x9590)))),-1);
if(!x9598.valid){
continue;
}
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal((((gconst2*r02*x9592))+((gconst1*r02*x9593)))),IkReal(((((-1.0)*r11*x9591*x9596))+((x9593*x9597))+(((-1.0)*r10*x9591*x9594))+((x9592*x9595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9598.value)))+(x9599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9600=IKsin(j4);
IkReal x9601=IKcos(j4);
IkReal x9602=(sj1*sj2);
IkReal x9603=(gconst1*sj3);
IkReal x9604=(cj3*gconst1);
IkReal x9605=(cj3*gconst2);
IkReal x9606=((1.0)*cj2);
IkReal x9607=(cj1*sj2);
IkReal x9608=(gconst2*sj3);
IkReal x9609=(cj1*x9606);
IkReal x9610=((1.0)*x9601);
IkReal x9611=((1.0)*x9600);
IkReal x9612=(gconst1*x9600);
IkReal x9613=(cj3*x9600);
IkReal x9614=(x9601*x9608);
evalcond[0]=((((-1.0)*r22*x9610))+(((-1.0)*gconst2*r20*x9611))+((r21*x9612)));
evalcond[1]=(((r01*x9612))+(((-1.0)*r02*x9610))+(((-1.0)*gconst2*r00*x9611)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9611))+(((-1.0)*r12*x9610))+((r11*x9612)));
evalcond[3]=((((-1.0)*r10*x9605*x9610))+((r11*x9601*x9604))+((r10*x9603))+((r11*x9608))+((r12*x9613)));
evalcond[4]=((((-1.0)*r11*x9603*x9610))+((r10*x9614))+((r10*x9604))+((r11*x9605))+(((-1.0)*r12*sj3*x9611)));
evalcond[5]=(((cj2*sj1))+((r21*x9608))+((r22*x9613))+((r21*x9601*x9604))+(((-1.0)*r20*x9605*x9610))+((r20*x9603))+x9607);
evalcond[6]=(((r01*x9601*x9604))+(((-1.0)*x9609))+((r00*x9603))+((r01*x9608))+((r02*x9613))+x9602+(((-1.0)*r00*x9605*x9610)));
evalcond[7]=(((r20*x9614))+((r21*x9605))+(((-1.0)*r21*x9603*x9610))+(((-1.0)*x9609))+((r20*x9604))+(((-1.0)*r22*sj3*x9611))+x9602);
evalcond[8]=((((-1.0)*r01*x9603*x9610))+(((-1.0)*sj1*x9606))+((r00*x9614))+((r00*x9604))+((r01*x9605))+(((-1.0)*x9607))+(((-1.0)*r02*sj3*x9611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9615=gconst2*gconst2;
IkReal x9616=gconst1*gconst1;
IkReal x9617=(gconst2*r11);
IkReal x9618=(cj3*r02);
IkReal x9619=(gconst1*r01);
IkReal x9620=(cj3*r10);
IkReal x9621=(r10*sj3);
IkReal x9622=((1.0)*gconst1*r00);
IkReal x9623=(r01*x9616);
IkReal x9624=(r00*x9615);
CheckValue<IkReal> x9625=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9617*x9622))+((x9621*x9624))+(((-1.0)*gconst2*x9619*x9621))+((r11*sj3*x9623)))),-1);
if(!x9625.valid){
continue;
}
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal((((x9617*x9618))+((gconst1*r10*x9618)))),IkReal((((x9620*x9623))+((cj3*x9617*x9619))+(((-1.0)*gconst2*x9620*x9622))+(((-1.0)*cj3*r11*x9624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9625.value)))+(x9626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9627=IKsin(j4);
IkReal x9628=IKcos(j4);
IkReal x9629=(sj1*sj2);
IkReal x9630=(gconst1*sj3);
IkReal x9631=(cj3*gconst1);
IkReal x9632=(cj3*gconst2);
IkReal x9633=((1.0)*cj2);
IkReal x9634=(cj1*sj2);
IkReal x9635=(gconst2*sj3);
IkReal x9636=(cj1*x9633);
IkReal x9637=((1.0)*x9628);
IkReal x9638=((1.0)*x9627);
IkReal x9639=(gconst1*x9627);
IkReal x9640=(cj3*x9627);
IkReal x9641=(x9628*x9635);
evalcond[0]=((((-1.0)*r22*x9637))+((r21*x9639))+(((-1.0)*gconst2*r20*x9638)));
evalcond[1]=(((r01*x9639))+(((-1.0)*gconst2*r00*x9638))+(((-1.0)*r02*x9637)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9638))+(((-1.0)*r12*x9637))+((r11*x9639)));
evalcond[3]=(((r10*x9630))+(((-1.0)*r10*x9632*x9637))+((r11*x9628*x9631))+((r11*x9635))+((r12*x9640)));
evalcond[4]=(((r10*x9631))+(((-1.0)*r12*sj3*x9638))+(((-1.0)*r11*x9630*x9637))+((r10*x9641))+((r11*x9632)));
evalcond[5]=(((r22*x9640))+((cj2*sj1))+((r20*x9630))+((r21*x9635))+((r21*x9628*x9631))+(((-1.0)*r20*x9632*x9637))+x9634);
evalcond[6]=(((r00*x9630))+((r01*x9635))+((r02*x9640))+((r01*x9628*x9631))+(((-1.0)*r00*x9632*x9637))+x9629+(((-1.0)*x9636)));
evalcond[7]=(((r20*x9631))+((r21*x9632))+(((-1.0)*r22*sj3*x9638))+x9629+((r20*x9641))+(((-1.0)*r21*x9630*x9637))+(((-1.0)*x9636)));
evalcond[8]=(((r00*x9631))+((r01*x9632))+(((-1.0)*x9634))+(((-1.0)*r02*sj3*x9638))+((r00*x9641))+(((-1.0)*r01*x9630*x9637))+(((-1.0)*sj1*x9633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9642=((1.0)*gconst2);
CheckValue<IkReal> x9643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9642)))),-1);
if(!x9643.valid){
continue;
}
CheckValue<IkReal> x9644 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9642))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9643.value)))+(x9644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9645=IKsin(j4);
IkReal x9646=IKcos(j4);
IkReal x9647=(sj1*sj2);
IkReal x9648=(gconst1*sj3);
IkReal x9649=(cj3*gconst1);
IkReal x9650=(cj3*gconst2);
IkReal x9651=((1.0)*cj2);
IkReal x9652=(cj1*sj2);
IkReal x9653=(gconst2*sj3);
IkReal x9654=(cj1*x9651);
IkReal x9655=((1.0)*x9646);
IkReal x9656=((1.0)*x9645);
IkReal x9657=(gconst1*x9645);
IkReal x9658=(cj3*x9645);
IkReal x9659=(x9646*x9653);
evalcond[0]=((((-1.0)*gconst2*r20*x9656))+((r21*x9657))+(((-1.0)*r22*x9655)));
evalcond[1]=(((r01*x9657))+(((-1.0)*gconst2*r00*x9656))+(((-1.0)*r02*x9655)));
evalcond[2]=((1.0)+((r11*x9657))+(((-1.0)*r12*x9655))+(((-1.0)*gconst2*r10*x9656)));
evalcond[3]=((((-1.0)*r10*x9650*x9655))+((r11*x9653))+((r12*x9658))+((r10*x9648))+((r11*x9646*x9649)));
evalcond[4]=((((-1.0)*r11*x9648*x9655))+((r11*x9650))+((r10*x9649))+((r10*x9659))+(((-1.0)*r12*sj3*x9656)));
evalcond[5]=(((cj2*sj1))+((r21*x9653))+((r21*x9646*x9649))+(((-1.0)*r20*x9650*x9655))+x9652+((r20*x9648))+((r22*x9658)));
evalcond[6]=(((r01*x9646*x9649))+((r01*x9653))+((r00*x9648))+x9647+((r02*x9658))+(((-1.0)*r00*x9650*x9655))+(((-1.0)*x9654)));
evalcond[7]=(((r21*x9650))+(((-1.0)*r21*x9648*x9655))+((r20*x9659))+x9647+((r20*x9649))+(((-1.0)*r22*sj3*x9656))+(((-1.0)*x9654)));
evalcond[8]=((((-1.0)*r02*sj3*x9656))+((r01*x9650))+((r00*x9659))+((r00*x9649))+(((-1.0)*x9652))+(((-1.0)*r01*x9648*x9655))+(((-1.0)*sj1*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9660=((-1.0)*r20);
IkReal x9661=x8923;
CheckValue<IkReal> x9663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9660),IKFAST_ATAN2_MAGTHRESH);
if(!x9663.valid){
continue;
}
IkReal x9662=((-1.0)*(x9663.value));
sj5=gconst1;
cj5=gconst2;
j5=x9662;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9662;
IkReal gconst1=(r21*x9661);
IkReal gconst2=(x9660*x9661);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9664=((-1.0)*r20);
IkReal x9665=x8923;
CheckValue<IkReal> x9667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9664),IKFAST_ATAN2_MAGTHRESH);
if(!x9667.valid){
continue;
}
IkReal x9666=((-1.0)*(x9667.value));
sj5=gconst1;
cj5=gconst2;
j5=x9666;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9666;
IkReal gconst1=(r21*x9665);
IkReal gconst2=(x9664*x9665);
CheckValue<IkReal> x9675=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9675.valid){
continue;
}
IkReal x9668=x9675.value;
IkReal x9669=(sj3*x9668);
IkReal x9670=(r11*x9669);
IkReal x9671=(r00*x9669);
IkReal x9672=(r01*x9669);
IkReal x9673=(r10*x9669);
IkReal x9674=(r20*r21*x9669);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9670*(r21*r21)))+((r10*r20*r21*x9672))+((r10*x9671*(r20*r20)))+((r00*r20*r21*x9670))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9676=gconst2*gconst2;
IkReal x9677=gconst1*gconst1;
IkReal x9678=((1.0)*cj3);
IkReal x9679=((1.0)*sj3);
IkReal x9680=(r11*sj3);
IkReal x9681=(r10*sj3);
IkReal x9682=(gconst1*gconst2*r00);
IkReal x9683=(gconst1*gconst2*r01);
IkReal x9684=(r00*x9676);
IkReal x9685=(r01*x9677);
CheckValue<IkReal> x9686 = IKatan2WithCheck(IkReal((((gconst1*r02*x9681))+((gconst2*r02*x9680)))),IkReal(((((-1.0)*r10*x9679*x9682))+((x9680*x9683))+((x9681*x9685))+(((-1.0)*r11*x9679*x9684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9686.valid){
continue;
}
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9678))+(((-1.0)*r10*x9678*x9684))+((cj3*r11*x9682))+((cj3*r10*x9683))+(((-1.0)*r11*x9678*x9685)))),-1);
if(!x9687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9686.value)+(((1.5707963267949)*(x9687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9688=IKsin(j4);
IkReal x9689=IKcos(j4);
IkReal x9690=(cj2*sj1);
IkReal x9691=(cj1*sj2);
IkReal x9692=(gconst1*sj3);
IkReal x9693=(cj3*gconst1);
IkReal x9694=(sj1*sj2);
IkReal x9695=(cj3*gconst2);
IkReal x9696=(cj1*cj2);
IkReal x9697=(gconst2*sj3);
IkReal x9698=((1.0)*x9689);
IkReal x9699=((1.0)*x9688);
IkReal x9700=(gconst1*x9688);
IkReal x9701=(cj3*x9688);
IkReal x9702=(x9690+x9691);
IkReal x9703=(x9689*x9697);
evalcond[0]=(((r21*x9700))+(((-1.0)*r22*x9698))+(((-1.0)*gconst2*r20*x9699)));
evalcond[1]=((((-1.0)*gconst2*r00*x9699))+(((-1.0)*r02*x9698))+((r01*x9700)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9699))+(((-1.0)*r12*x9698))+((r11*x9700)));
evalcond[3]=(((r12*x9701))+(((-1.0)*r10*x9695*x9698))+((r11*x9689*x9693))+((r11*x9697))+((r10*x9692)));
evalcond[4]=(((r10*x9703))+(((-1.0)*r11*x9692*x9698))+((r11*x9695))+((r10*x9693))+(((-1.0)*r12*sj3*x9699)));
evalcond[5]=(((r21*x9689*x9693))+x9702+((r21*x9697))+(((-1.0)*r20*x9695*x9698))+((r20*x9692))+((r22*x9701)));
evalcond[6]=((((-1.0)*x9694))+((r02*x9701))+((r01*x9689*x9693))+x9696+(((-1.0)*r00*x9695*x9698))+((r00*x9692))+((r01*x9697)));
evalcond[7]=((((-1.0)*r02*sj3*x9699))+(((-1.0)*r01*x9692*x9698))+((r00*x9703))+x9702+((r00*x9693))+((r01*x9695)));
evalcond[8]=((((-1.0)*x9696))+(((-1.0)*r22*sj3*x9699))+((r20*x9703))+(((-1.0)*r21*x9692*x9698))+((r21*x9695))+x9694+((r20*x9693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9704=gconst2*gconst2;
IkReal x9705=gconst1*gconst1;
IkReal x9706=(gconst2*r11);
IkReal x9707=(cj3*r02);
IkReal x9708=(gconst1*r01);
IkReal x9709=(cj3*r10);
IkReal x9710=(r10*sj3);
IkReal x9711=((1.0)*gconst1*r00);
IkReal x9712=(r01*x9705);
IkReal x9713=(r00*x9704);
CheckValue<IkReal> x9714=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9706*x9711))+(((-1.0)*gconst2*x9708*x9710))+((x9710*x9713))+((r11*sj3*x9712)))),-1);
if(!x9714.valid){
continue;
}
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal((((x9706*x9707))+((gconst1*r10*x9707)))),IkReal((((cj3*x9706*x9708))+(((-1.0)*gconst2*x9709*x9711))+((x9709*x9712))+(((-1.0)*cj3*r11*x9713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9714.value)))+(x9715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9716=IKsin(j4);
IkReal x9717=IKcos(j4);
IkReal x9718=(cj2*sj1);
IkReal x9719=(cj1*sj2);
IkReal x9720=(gconst1*sj3);
IkReal x9721=(cj3*gconst1);
IkReal x9722=(sj1*sj2);
IkReal x9723=(cj3*gconst2);
IkReal x9724=(cj1*cj2);
IkReal x9725=(gconst2*sj3);
IkReal x9726=((1.0)*x9717);
IkReal x9727=((1.0)*x9716);
IkReal x9728=(gconst1*x9716);
IkReal x9729=(cj3*x9716);
IkReal x9730=(x9719+x9718);
IkReal x9731=(x9717*x9725);
evalcond[0]=((((-1.0)*gconst2*r20*x9727))+(((-1.0)*r22*x9726))+((r21*x9728)));
evalcond[1]=(((r01*x9728))+(((-1.0)*r02*x9726))+(((-1.0)*gconst2*r00*x9727)));
evalcond[2]=((-1.0)+((r11*x9728))+(((-1.0)*r12*x9726))+(((-1.0)*gconst2*r10*x9727)));
evalcond[3]=(((r11*x9725))+((r12*x9729))+(((-1.0)*r10*x9723*x9726))+((r10*x9720))+((r11*x9717*x9721)));
evalcond[4]=(((r11*x9723))+(((-1.0)*r12*sj3*x9727))+(((-1.0)*r11*x9720*x9726))+((r10*x9721))+((r10*x9731)));
evalcond[5]=((((-1.0)*r20*x9723*x9726))+x9730+((r20*x9720))+((r21*x9717*x9721))+((r21*x9725))+((r22*x9729)));
evalcond[6]=(((r01*x9725))+((r02*x9729))+(((-1.0)*r00*x9723*x9726))+x9724+((r01*x9717*x9721))+(((-1.0)*x9722))+((r00*x9720)));
evalcond[7]=(((r01*x9723))+(((-1.0)*r02*sj3*x9727))+x9730+(((-1.0)*r01*x9720*x9726))+((r00*x9721))+((r00*x9731)));
evalcond[8]=(((r20*x9731))+(((-1.0)*r21*x9720*x9726))+x9722+((r20*x9721))+(((-1.0)*r22*sj3*x9727))+((r21*x9723))+(((-1.0)*x9724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9732 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9732.valid){
continue;
}
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9732.value)+(((1.5707963267949)*(x9733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9734=IKsin(j4);
IkReal x9735=IKcos(j4);
IkReal x9736=(cj2*sj1);
IkReal x9737=(cj1*sj2);
IkReal x9738=(gconst1*sj3);
IkReal x9739=(cj3*gconst1);
IkReal x9740=(sj1*sj2);
IkReal x9741=(cj3*gconst2);
IkReal x9742=(cj1*cj2);
IkReal x9743=(gconst2*sj3);
IkReal x9744=((1.0)*x9735);
IkReal x9745=((1.0)*x9734);
IkReal x9746=(gconst1*x9734);
IkReal x9747=(cj3*x9734);
IkReal x9748=(x9737+x9736);
IkReal x9749=(x9735*x9743);
evalcond[0]=(((r21*x9746))+(((-1.0)*gconst2*r20*x9745))+(((-1.0)*r22*x9744)));
evalcond[1]=((((-1.0)*gconst2*r00*x9745))+(((-1.0)*r02*x9744))+((r01*x9746)));
evalcond[2]=((-1.0)+((r11*x9746))+(((-1.0)*gconst2*r10*x9745))+(((-1.0)*r12*x9744)));
evalcond[3]=(((r11*x9743))+((r11*x9735*x9739))+(((-1.0)*r10*x9741*x9744))+((r12*x9747))+((r10*x9738)));
evalcond[4]=(((r11*x9741))+((r10*x9749))+(((-1.0)*r12*sj3*x9745))+(((-1.0)*r11*x9738*x9744))+((r10*x9739)));
evalcond[5]=(((r21*x9743))+((r22*x9747))+((r20*x9738))+x9748+((r21*x9735*x9739))+(((-1.0)*r20*x9741*x9744)));
evalcond[6]=(((r02*x9747))+(((-1.0)*x9740))+x9742+(((-1.0)*r00*x9741*x9744))+((r01*x9743))+((r01*x9735*x9739))+((r00*x9738)));
evalcond[7]=((((-1.0)*r01*x9738*x9744))+(((-1.0)*r02*sj3*x9745))+x9748+((r01*x9741))+((r00*x9749))+((r00*x9739)));
evalcond[8]=((((-1.0)*r21*x9738*x9744))+((r21*x9741))+((r20*x9739))+(((-1.0)*x9742))+x9740+((r20*x9749))+(((-1.0)*r22*sj3*x9745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9750=((-1.0)*r20);
IkReal x9751=x8923;
CheckValue<IkReal> x9753 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9750),IKFAST_ATAN2_MAGTHRESH);
if(!x9753.valid){
continue;
}
IkReal x9752=((-1.0)*(x9753.value));
sj5=gconst1;
cj5=gconst2;
j5=x9752;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9752;
IkReal gconst1=(r21*x9751);
IkReal gconst2=(x9750*x9751);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9754=((-1.0)*r20);
IkReal x9755=x8923;
CheckValue<IkReal> x9757 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9754),IKFAST_ATAN2_MAGTHRESH);
if(!x9757.valid){
continue;
}
IkReal x9756=((-1.0)*(x9757.value));
sj5=gconst1;
cj5=gconst2;
j5=x9756;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9756;
IkReal gconst1=(r21*x9755);
IkReal gconst2=(x9754*x9755);
CheckValue<IkReal> x9765=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9765.valid){
continue;
}
IkReal x9758=x9765.value;
IkReal x9759=(sj3*x9758);
IkReal x9760=(r11*x9759);
IkReal x9761=(r00*x9759);
IkReal x9762=(r01*x9759);
IkReal x9763=(r10*x9759);
IkReal x9764=(r20*r21*x9759);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9761*(r20*r20)))+((r00*r20*r21*x9760))+((r10*r20*r21*x9762))+((r01*x9760*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9766=gconst1*gconst1;
IkReal x9767=gconst2*gconst2;
IkReal x9768=((1.0)*cj3);
IkReal x9769=(gconst2*r10);
IkReal x9770=(r01*sj3);
IkReal x9771=(gconst1*r00*sj3);
IkReal x9772=(gconst1*gconst2*r11);
IkReal x9773=(r10*x9767);
IkReal x9774=(r11*x9766);
CheckValue<IkReal> x9775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9768*x9774))+(((-1.0)*r02*r12*x9768))+((cj3*gconst1*r01*x9769))+(((-1.0)*r00*x9768*x9773))+((cj3*r00*x9772)))),-1);
if(!x9775.valid){
continue;
}
CheckValue<IkReal> x9776 = IKatan2WithCheck(IkReal((((r12*x9771))+((gconst2*r12*x9770)))),IkReal((((r00*sj3*x9774))+((x9770*x9772))+(((-1.0)*x9769*x9771))+(((-1.0)*x9770*x9773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9775.value)))+(x9776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9777=IKsin(j4);
IkReal x9778=IKcos(j4);
IkReal x9779=(sj1*sj2);
IkReal x9780=(gconst1*sj3);
IkReal x9781=(cj3*gconst1);
IkReal x9782=(cj3*gconst2);
IkReal x9783=((1.0)*cj2);
IkReal x9784=(cj1*sj2);
IkReal x9785=(gconst2*sj3);
IkReal x9786=(cj1*x9783);
IkReal x9787=((1.0)*x9778);
IkReal x9788=((1.0)*x9777);
IkReal x9789=(gconst1*x9777);
IkReal x9790=(cj3*x9777);
IkReal x9791=(x9778*x9785);
evalcond[0]=(((r21*x9789))+(((-1.0)*gconst2*r20*x9788))+(((-1.0)*r22*x9787)));
evalcond[1]=((((-1.0)*r12*x9787))+((r11*x9789))+(((-1.0)*gconst2*r10*x9788)));
evalcond[2]=((-1.0)+((r01*x9789))+(((-1.0)*gconst2*r00*x9788))+(((-1.0)*r02*x9787)));
evalcond[3]=(((r00*x9780))+((r02*x9790))+((r01*x9778*x9781))+((r01*x9785))+(((-1.0)*r00*x9782*x9787)));
evalcond[4]=(((r00*x9781))+(((-1.0)*r02*sj3*x9788))+((r01*x9782))+((r00*x9791))+(((-1.0)*r01*x9780*x9787)));
evalcond[5]=(((cj2*sj1))+((r21*x9785))+(((-1.0)*r20*x9782*x9787))+x9784+((r20*x9780))+((r21*x9778*x9781))+((r22*x9790)));
evalcond[6]=(((r12*x9790))+((r11*x9778*x9781))+x9779+((r10*x9780))+((r11*x9785))+(((-1.0)*x9786))+(((-1.0)*r10*x9782*x9787)));
evalcond[7]=(((r21*x9782))+((r20*x9791))+(((-1.0)*r22*sj3*x9788))+x9779+(((-1.0)*r21*x9780*x9787))+((r20*x9781))+(((-1.0)*x9786)));
evalcond[8]=(((r10*x9791))+(((-1.0)*r11*x9780*x9787))+(((-1.0)*sj1*x9783))+(((-1.0)*r12*sj3*x9788))+((r10*x9781))+((r11*x9782))+(((-1.0)*x9784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9792=gconst2*gconst2;
IkReal x9793=gconst1*gconst1;
IkReal x9794=(gconst1*r00);
IkReal x9795=(r11*sj3);
IkReal x9796=((1.0)*gconst2);
IkReal x9797=(cj3*r12);
IkReal x9798=(cj3*r11);
IkReal x9799=(gconst2*r01);
IkReal x9800=(cj3*r10);
IkReal x9801=(r10*sj3);
CheckValue<IkReal> x9802 = IKatan2WithCheck(IkReal((((x9794*x9797))+((x9797*x9799)))),IkReal((((gconst1*x9798*x9799))+(((-1.0)*x9794*x9796*x9800))+(((-1.0)*r01*x9792*x9800))+((r00*x9793*x9798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9802.valid){
continue;
}
CheckValue<IkReal> x9803=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9794*x9795*x9796))+((r01*x9793*x9795))+(((-1.0)*gconst1*r01*x9796*x9801))+((r00*x9792*x9801)))),-1);
if(!x9803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9802.value)+(((1.5707963267949)*(x9803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9804=IKsin(j4);
IkReal x9805=IKcos(j4);
IkReal x9806=(sj1*sj2);
IkReal x9807=(gconst1*sj3);
IkReal x9808=(cj3*gconst1);
IkReal x9809=(cj3*gconst2);
IkReal x9810=((1.0)*cj2);
IkReal x9811=(cj1*sj2);
IkReal x9812=(gconst2*sj3);
IkReal x9813=(cj1*x9810);
IkReal x9814=((1.0)*x9805);
IkReal x9815=((1.0)*x9804);
IkReal x9816=(gconst1*x9804);
IkReal x9817=(cj3*x9804);
IkReal x9818=(x9805*x9812);
evalcond[0]=(((r21*x9816))+(((-1.0)*r22*x9814))+(((-1.0)*gconst2*r20*x9815)));
evalcond[1]=((((-1.0)*gconst2*r10*x9815))+((r11*x9816))+(((-1.0)*r12*x9814)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9815))+(((-1.0)*r02*x9814))+((r01*x9816)));
evalcond[3]=(((r00*x9807))+(((-1.0)*r00*x9809*x9814))+((r01*x9805*x9808))+((r02*x9817))+((r01*x9812)));
evalcond[4]=(((r00*x9808))+(((-1.0)*r01*x9807*x9814))+(((-1.0)*r02*sj3*x9815))+((r01*x9809))+((r00*x9818)));
evalcond[5]=((((-1.0)*r20*x9809*x9814))+((cj2*sj1))+((r21*x9812))+((r22*x9817))+((r20*x9807))+x9811+((r21*x9805*x9808)));
evalcond[6]=(((r10*x9807))+(((-1.0)*x9813))+((r12*x9817))+((r11*x9812))+((r11*x9805*x9808))+x9806+(((-1.0)*r10*x9809*x9814)));
evalcond[7]=(((r21*x9809))+(((-1.0)*x9813))+(((-1.0)*r21*x9807*x9814))+(((-1.0)*r22*sj3*x9815))+((r20*x9808))+x9806+((r20*x9818)));
evalcond[8]=(((r10*x9808))+(((-1.0)*x9811))+((r11*x9809))+(((-1.0)*r12*sj3*x9815))+(((-1.0)*r11*x9807*x9814))+(((-1.0)*sj1*x9810))+((r10*x9818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9819=((1.0)*gconst2);
CheckValue<IkReal> x9820 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9820.valid){
continue;
}
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9819)))),-1);
if(!x9821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9820.value)+(((1.5707963267949)*(x9821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9822=IKsin(j4);
IkReal x9823=IKcos(j4);
IkReal x9824=(sj1*sj2);
IkReal x9825=(gconst1*sj3);
IkReal x9826=(cj3*gconst1);
IkReal x9827=(cj3*gconst2);
IkReal x9828=((1.0)*cj2);
IkReal x9829=(cj1*sj2);
IkReal x9830=(gconst2*sj3);
IkReal x9831=(cj1*x9828);
IkReal x9832=((1.0)*x9823);
IkReal x9833=((1.0)*x9822);
IkReal x9834=(gconst1*x9822);
IkReal x9835=(cj3*x9822);
IkReal x9836=(x9823*x9830);
evalcond[0]=(((r21*x9834))+(((-1.0)*r22*x9832))+(((-1.0)*gconst2*r20*x9833)));
evalcond[1]=(((r11*x9834))+(((-1.0)*gconst2*r10*x9833))+(((-1.0)*r12*x9832)));
evalcond[2]=((-1.0)+((r01*x9834))+(((-1.0)*r02*x9832))+(((-1.0)*gconst2*r00*x9833)));
evalcond[3]=(((r01*x9830))+((r00*x9825))+((r01*x9823*x9826))+((r02*x9835))+(((-1.0)*r00*x9827*x9832)));
evalcond[4]=((((-1.0)*r02*sj3*x9833))+((r00*x9836))+((r00*x9826))+((r01*x9827))+(((-1.0)*r01*x9825*x9832)));
evalcond[5]=(((r20*x9825))+((cj2*sj1))+(((-1.0)*r20*x9827*x9832))+((r21*x9830))+((r22*x9835))+((r21*x9823*x9826))+x9829);
evalcond[6]=((((-1.0)*x9831))+((r11*x9830))+((r12*x9835))+(((-1.0)*r10*x9827*x9832))+((r11*x9823*x9826))+x9824+((r10*x9825)));
evalcond[7]=((((-1.0)*x9831))+((r20*x9826))+(((-1.0)*r22*sj3*x9833))+((r21*x9827))+((r20*x9836))+x9824+(((-1.0)*r21*x9825*x9832)));
evalcond[8]=(((r10*x9836))+((r11*x9827))+(((-1.0)*r11*x9825*x9832))+(((-1.0)*r12*sj3*x9833))+(((-1.0)*x9829))+((r10*x9826))+(((-1.0)*sj1*x9828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9837=((-1.0)*r20);
IkReal x9838=x8923;
CheckValue<IkReal> x9840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9837),IKFAST_ATAN2_MAGTHRESH);
if(!x9840.valid){
continue;
}
IkReal x9839=((-1.0)*(x9840.value));
sj5=gconst1;
cj5=gconst2;
j5=x9839;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9839;
IkReal gconst1=(r21*x9838);
IkReal gconst2=(x9837*x9838);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9841=((-1.0)*r20);
IkReal x9842=x8923;
CheckValue<IkReal> x9844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9841),IKFAST_ATAN2_MAGTHRESH);
if(!x9844.valid){
continue;
}
IkReal x9843=((-1.0)*(x9844.value));
sj5=gconst1;
cj5=gconst2;
j5=x9843;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9843;
IkReal gconst1=(r21*x9842);
IkReal gconst2=(x9841*x9842);
CheckValue<IkReal> x9852=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9852.valid){
continue;
}
IkReal x9845=x9852.value;
IkReal x9846=(sj3*x9845);
IkReal x9847=(r11*x9846);
IkReal x9848=(r00*x9846);
IkReal x9849=(r01*x9846);
IkReal x9850=(r10*x9846);
IkReal x9851=(r20*r21*x9846);
j4eval[0]=IKsign((((r00*r20*r21*x9847))+((r02*r12*sj3))+((r10*r20*r21*x9849))+((r01*x9847*(r21*r21)))+((r10*x9848*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9853=gconst1*gconst1;
IkReal x9854=gconst2*gconst2;
IkReal x9855=((1.0)*cj3);
IkReal x9856=(gconst2*r10);
IkReal x9857=(r01*sj3);
IkReal x9858=(gconst1*r00*sj3);
IkReal x9859=(gconst1*gconst2*r11);
IkReal x9860=(r10*x9854);
IkReal x9861=(r11*x9853);
CheckValue<IkReal> x9862 = IKatan2WithCheck(IkReal((((gconst2*r12*x9857))+((r12*x9858)))),IkReal(((((-1.0)*x9856*x9858))+((x9857*x9859))+((r00*sj3*x9861))+(((-1.0)*x9857*x9860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9862.valid){
continue;
}
CheckValue<IkReal> x9863=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9859))+(((-1.0)*r00*x9855*x9860))+(((-1.0)*r02*r12*x9855))+(((-1.0)*r01*x9855*x9861))+((cj3*gconst1*r01*x9856)))),-1);
if(!x9863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9862.value)+(((1.5707963267949)*(x9863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9864=IKsin(j4);
IkReal x9865=IKcos(j4);
IkReal x9866=(cj2*sj1);
IkReal x9867=(cj1*sj2);
IkReal x9868=(gconst1*sj3);
IkReal x9869=(cj3*gconst1);
IkReal x9870=(sj1*sj2);
IkReal x9871=(cj3*gconst2);
IkReal x9872=(cj1*cj2);
IkReal x9873=(gconst2*sj3);
IkReal x9874=((1.0)*x9865);
IkReal x9875=((1.0)*x9864);
IkReal x9876=(gconst1*x9864);
IkReal x9877=(cj3*x9864);
IkReal x9878=(x9867+x9866);
IkReal x9879=(x9865*x9873);
evalcond[0]=((((-1.0)*gconst2*r20*x9875))+((r21*x9876))+(((-1.0)*r22*x9874)));
evalcond[1]=((((-1.0)*gconst2*r10*x9875))+((r11*x9876))+(((-1.0)*r12*x9874)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9874))+(((-1.0)*gconst2*r00*x9875))+((r01*x9876)));
evalcond[3]=(((r02*x9877))+((r01*x9865*x9869))+((r00*x9868))+(((-1.0)*r00*x9871*x9874))+((r01*x9873)));
evalcond[4]=(((r00*x9869))+(((-1.0)*r02*sj3*x9875))+((r00*x9879))+(((-1.0)*r01*x9868*x9874))+((r01*x9871)));
evalcond[5]=(((r21*x9873))+((r22*x9877))+(((-1.0)*r20*x9871*x9874))+((r20*x9868))+((r21*x9865*x9869))+x9878);
evalcond[6]=(((r11*x9865*x9869))+((r12*x9877))+(((-1.0)*x9870))+((r10*x9868))+((r11*x9873))+x9872+(((-1.0)*r10*x9871*x9874)));
evalcond[7]=((((-1.0)*r12*sj3*x9875))+((r10*x9879))+((r10*x9869))+(((-1.0)*r11*x9868*x9874))+((r11*x9871))+x9878);
evalcond[8]=((((-1.0)*x9872))+((r21*x9871))+((r20*x9879))+(((-1.0)*r22*sj3*x9875))+((r20*x9869))+x9870+(((-1.0)*r21*x9868*x9874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9880=gconst2*gconst2;
IkReal x9881=gconst1*gconst1;
IkReal x9882=(gconst1*r00);
IkReal x9883=(r11*sj3);
IkReal x9884=((1.0)*gconst2);
IkReal x9885=(cj3*r12);
IkReal x9886=(cj3*r11);
IkReal x9887=(gconst2*r01);
IkReal x9888=(cj3*r10);
IkReal x9889=(r10*sj3);
CheckValue<IkReal> x9890 = IKatan2WithCheck(IkReal((((x9885*x9887))+((x9882*x9885)))),IkReal(((((-1.0)*r01*x9880*x9888))+((gconst1*x9886*x9887))+((r00*x9881*x9886))+(((-1.0)*x9882*x9884*x9888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9890.valid){
continue;
}
CheckValue<IkReal> x9891=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9882*x9883*x9884))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9884*x9889))+((r00*x9880*x9889))+((r01*x9881*x9883)))),-1);
if(!x9891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9890.value)+(((1.5707963267949)*(x9891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9892=IKsin(j4);
IkReal x9893=IKcos(j4);
IkReal x9894=(cj2*sj1);
IkReal x9895=(cj1*sj2);
IkReal x9896=(gconst1*sj3);
IkReal x9897=(cj3*gconst1);
IkReal x9898=(sj1*sj2);
IkReal x9899=(cj3*gconst2);
IkReal x9900=(cj1*cj2);
IkReal x9901=(gconst2*sj3);
IkReal x9902=((1.0)*x9893);
IkReal x9903=((1.0)*x9892);
IkReal x9904=(gconst1*x9892);
IkReal x9905=(cj3*x9892);
IkReal x9906=(x9894+x9895);
IkReal x9907=(x9893*x9901);
evalcond[0]=((((-1.0)*gconst2*r20*x9903))+(((-1.0)*r22*x9902))+((r21*x9904)));
evalcond[1]=((((-1.0)*r12*x9902))+((r11*x9904))+(((-1.0)*gconst2*r10*x9903)));
evalcond[2]=((1.0)+((r01*x9904))+(((-1.0)*r02*x9902))+(((-1.0)*gconst2*r00*x9903)));
evalcond[3]=((((-1.0)*r00*x9899*x9902))+((r02*x9905))+((r00*x9896))+((r01*x9901))+((r01*x9893*x9897)));
evalcond[4]=(((r01*x9899))+((r00*x9897))+((r00*x9907))+(((-1.0)*r01*x9896*x9902))+(((-1.0)*r02*sj3*x9903)));
evalcond[5]=(((r21*x9893*x9897))+((r22*x9905))+((r21*x9901))+((r20*x9896))+x9906+(((-1.0)*r20*x9899*x9902)));
evalcond[6]=(((r12*x9905))+((r11*x9893*x9897))+((r11*x9901))+(((-1.0)*r10*x9899*x9902))+(((-1.0)*x9898))+x9900+((r10*x9896)));
evalcond[7]=(((r11*x9899))+(((-1.0)*r11*x9896*x9902))+x9906+((r10*x9897))+((r10*x9907))+(((-1.0)*r12*sj3*x9903)));
evalcond[8]=((((-1.0)*r22*sj3*x9903))+((r20*x9907))+(((-1.0)*x9900))+((r21*x9899))+(((-1.0)*r21*x9896*x9902))+((r20*x9897))+x9898);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
CheckValue<IkReal> x9909=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9908.value)+(((1.5707963267949)*(x9909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9910=IKsin(j4);
IkReal x9911=IKcos(j4);
IkReal x9912=(cj2*sj1);
IkReal x9913=(cj1*sj2);
IkReal x9914=(gconst1*sj3);
IkReal x9915=(cj3*gconst1);
IkReal x9916=(sj1*sj2);
IkReal x9917=(cj3*gconst2);
IkReal x9918=(cj1*cj2);
IkReal x9919=(gconst2*sj3);
IkReal x9920=((1.0)*x9911);
IkReal x9921=((1.0)*x9910);
IkReal x9922=(gconst1*x9910);
IkReal x9923=(cj3*x9910);
IkReal x9924=(x9913+x9912);
IkReal x9925=(x9911*x9919);
evalcond[0]=((((-1.0)*gconst2*r20*x9921))+(((-1.0)*r22*x9920))+((r21*x9922)));
evalcond[1]=((((-1.0)*gconst2*r10*x9921))+(((-1.0)*r12*x9920))+((r11*x9922)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9920))+(((-1.0)*gconst2*r00*x9921))+((r01*x9922)));
evalcond[3]=(((r02*x9923))+((r01*x9919))+((r00*x9914))+(((-1.0)*r00*x9917*x9920))+((r01*x9911*x9915)));
evalcond[4]=((((-1.0)*r01*x9914*x9920))+((r01*x9917))+((r00*x9915))+(((-1.0)*r02*sj3*x9921))+((r00*x9925)));
evalcond[5]=((((-1.0)*r20*x9917*x9920))+((r20*x9914))+((r21*x9911*x9915))+((r21*x9919))+x9924+((r22*x9923)));
evalcond[6]=((((-1.0)*x9916))+((r11*x9919))+((r12*x9923))+x9918+(((-1.0)*r10*x9917*x9920))+((r11*x9911*x9915))+((r10*x9914)));
evalcond[7]=(((r10*x9925))+((r11*x9917))+(((-1.0)*r11*x9914*x9920))+(((-1.0)*r12*sj3*x9921))+x9924+((r10*x9915)));
evalcond[8]=(((r20*x9915))+(((-1.0)*x9918))+((r20*x9925))+(((-1.0)*r21*x9914*x9920))+((r21*x9917))+x9916+(((-1.0)*r22*sj3*x9921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9926=((-1.0)*r20);
IkReal x9927=((-1.0)*px);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9926),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9928=((-1.0)*(x9929.value));
sj5=gconst1;
cj5=gconst2;
j5=x9928;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9927);
rxp1_1=(px*r21);
rxp1_2=(r11*x9927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9928;
IkReal gconst1=r21;
IkReal gconst2=x9926;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9930=((-1.0)*r20);
IkReal x9931=((-1.0)*px);
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9930),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
IkReal x9932=((-1.0)*(x9933.value));
sj5=gconst1;
cj5=gconst2;
j5=x9932;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9931);
rxp1_1=(px*r21);
rxp1_2=(r11*x9931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9932;
IkReal gconst1=r21;
IkReal gconst2=x9930;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9934=((-1.0)*r20);
IkReal x9935=((-1.0)*px);
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9934),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
IkReal x9936=((-1.0)*(x9937.value));
sj5=gconst1;
cj5=gconst2;
j5=x9936;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9935);
rxp1_1=(px*r21);
rxp1_2=(r11*x9935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9936;
IkReal gconst1=r21;
IkReal gconst2=x9934;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9938=((-1.0)*r20);
IkReal x9939=((-1.0)*px);
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9938),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
IkReal x9940=((-1.0)*(x9941.value));
sj5=gconst1;
cj5=gconst2;
j5=x9940;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9939);
rxp1_1=(px*r21);
rxp1_2=(r11*x9939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9940;
IkReal gconst1=r21;
IkReal gconst2=x9938;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9942=((-1.0)*r20);
IkReal x9943=((-1.0)*px);
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9942),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9944=((-1.0)*(x9945.value));
sj5=gconst1;
cj5=gconst2;
j5=x9944;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9943);
rxp1_1=(px*r21);
rxp1_2=(r11*x9943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9944;
IkReal gconst1=r21;
IkReal gconst2=x9942;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9946=((-1.0)*r20);
IkReal x9947=((-1.0)*px);
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9946),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9948=((-1.0)*(x9949.value));
sj5=gconst1;
cj5=gconst2;
j5=x9948;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9947);
rxp1_1=(px*r21);
rxp1_2=(r11*x9947);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9948;
IkReal gconst1=r21;
IkReal gconst2=x9946;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9952=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9952.valid){
continue;
}
IkReal x9950=x9952.value;
IkReal x9951=(sj0*x9950);
cj4array[0]=(((cj1*sj2*x9951))+((cj2*sj1*x9951)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9953=IKsin(j4);
IkReal x9954=IKcos(j4);
IkReal x9955=(gconst1*x9953);
IkReal x9956=((1.0)*x9954);
IkReal x9957=((1.0)*gconst2*x9953);
evalcond[0]=((-1.0)*r02*x9953);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9956)));
evalcond[2]=((((-1.0)*r20*x9957))+((r21*x9955)));
evalcond[3]=(((r11*x9955))+(((-1.0)*r10*x9957)));
evalcond[4]=((((-1.0)*gconst1*r21*x9956))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9959=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9959.valid){
continue;
}
IkReal x9958=x9959.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9958))+((cj1*cj2*x9958)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9960=IKsin(j4);
IkReal x9961=IKcos(j4);
IkReal x9962=(gconst2*r10);
IkReal x9963=((1.0)*sj0);
IkReal x9964=((1.0)*x9960);
IkReal x9965=(gconst1*x9960);
IkReal x9966=((1.0)*x9961);
evalcond[0]=((-1.0)*r02*x9960);
evalcond[1]=((((-1.0)*x9963))+(((-1.0)*r02*x9966)));
evalcond[2]=(((r21*x9965))+(((-1.0)*gconst2*r20*x9964)));
evalcond[3]=((((-1.0)*x9962*x9964))+((r11*x9965)));
evalcond[4]=((((-1.0)*cj2*sj1*x9963))+(((-1.0)*cj1*sj2*x9963))+(((-1.0)*gconst1*r11*x9966))+((x9961*x9962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9967=IKPowWithIntegerCheck(r02,-1);
if(!x9967.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9967.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9968=IKsin(j4);
IkReal x9969=IKcos(j4);
IkReal x9970=(gconst2*r10);
IkReal x9971=((1.0)*sj0);
IkReal x9972=(gconst1*r11);
IkReal x9973=(gconst1*r21);
IkReal x9974=(gconst2*r20);
IkReal x9975=((1.0)*x9968);
IkReal x9976=((1.0)*x9969);
evalcond[0]=((-1.0)*r02*x9968);
evalcond[1]=((((-1.0)*x9974*x9975))+((x9968*x9973)));
evalcond[2]=((((-1.0)*x9970*x9975))+((x9968*x9972)));
evalcond[3]=(((x9969*x9974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9973*x9976)));
evalcond[4]=(((x9969*x9970))+(((-1.0)*cj2*sj1*x9971))+(((-1.0)*cj1*sj2*x9971))+(((-1.0)*x9972*x9976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9977=((-1.0)*r20);
IkReal x9978=((-1.0)*px);
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9977),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
IkReal x9979=((-1.0)*(x9980.value));
sj5=gconst1;
cj5=gconst2;
j5=x9979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9978);
rxp1_1=(px*r21);
rxp1_2=(r11*x9978);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9979;
IkReal gconst1=r21;
IkReal gconst2=x9977;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9981=((-1.0)*r20);
IkReal x9982=((-1.0)*px);
CheckValue<IkReal> x9984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9981),IKFAST_ATAN2_MAGTHRESH);
if(!x9984.valid){
continue;
}
IkReal x9983=((-1.0)*(x9984.value));
sj5=gconst1;
cj5=gconst2;
j5=x9983;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9982);
rxp1_1=(px*r21);
rxp1_2=(r11*x9982);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9983;
IkReal gconst1=r21;
IkReal gconst2=x9981;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9985=((-1.0)*r20);
IkReal x9986=((-1.0)*px);
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9985),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
IkReal x9987=((-1.0)*(x9988.value));
sj5=gconst1;
cj5=gconst2;
j5=x9987;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9986);
rxp1_1=(px*r21);
rxp1_2=(r11*x9986);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9987;
IkReal gconst1=r21;
IkReal gconst2=x9985;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9991=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9991.valid){
continue;
}
IkReal x9989=x9991.value;
IkReal x9990=(sj0*x9989);
cj4array[0]=(((cj1*sj2*x9990))+((cj2*sj1*x9990)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9992=IKsin(j4);
IkReal x9993=IKcos(j4);
IkReal x9994=((1.0)*gconst2);
IkReal x9995=(gconst1*r21);
evalcond[0]=(r02*x9992);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9993)));
evalcond[2]=((((-1.0)*r20*x9992*x9994))+((x9992*x9995)));
evalcond[3]=(((gconst1*r11*x9992))+(((-1.0)*r10*x9992*x9994)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9993*x9994))+((x9993*x9995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9997.valid){
continue;
}
IkReal x9996=x9997.value;
cj4array[0]=(((cj1*cj2*x9996))+(((-1.0)*sj1*sj2*x9996)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9998=IKsin(j4);
IkReal x9999=IKcos(j4);
IkReal x10000=((1.0)*sj0);
IkReal x10001=(gconst1*x9998);
IkReal x10002=((1.0)*x9999);
IkReal x10003=((1.0)*gconst2*x9998);
evalcond[0]=(r02*x9998);
evalcond[1]=((((-1.0)*r02*x10002))+(((-1.0)*x10000)));
evalcond[2]=((((-1.0)*r20*x10003))+((r21*x10001)));
evalcond[3]=(((r11*x10001))+(((-1.0)*r10*x10003)));
evalcond[4]=(((gconst1*r11*x9999))+(((-1.0)*cj2*sj1*x10000))+(((-1.0)*cj1*sj2*x10000))+(((-1.0)*gconst2*r10*x10002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10004=IKPowWithIntegerCheck(r02,-1);
if(!x10004.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10004.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10005=IKsin(j4);
IkReal x10006=IKcos(j4);
IkReal x10007=(gconst1*r21);
IkReal x10008=((1.0)*sj0);
IkReal x10009=(gconst1*r11);
IkReal x10010=((1.0)*gconst2*r10);
IkReal x10011=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10005);
evalcond[1]=((((-1.0)*x10005*x10011))+((x10005*x10007)));
evalcond[2]=((((-1.0)*x10005*x10010))+((x10005*x10009)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10006*x10007))+(((-1.0)*x10006*x10011)));
evalcond[4]=((((-1.0)*cj2*sj1*x10008))+((x10006*x10009))+(((-1.0)*cj1*sj2*x10008))+(((-1.0)*x10006*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10013=IKPowWithIntegerCheck(r02,-1);
if(!x10013.valid){
continue;
}
IkReal x10012=x10013.value;
CheckValue<IkReal> x10014=IKPowWithIntegerCheck(cj3,-1);
if(!x10014.valid){
continue;
}
if( IKabs((x10012*(x10014.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10012)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10012*(x10014.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10012))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10012*(x10014.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10012));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10015=IKsin(j4);
IkReal x10016=IKcos(j4);
IkReal x10017=(gconst2*r10);
IkReal x10018=(gconst1*r11);
IkReal x10019=(sj1*sj2);
IkReal x10020=(gconst2*r20);
IkReal x10021=(cj2*sj1);
IkReal x10022=((1.0)*sj0);
IkReal x10023=(gconst1*r20);
IkReal x10024=(gconst2*r11);
IkReal x10025=(gconst1*r21);
IkReal x10026=((1.0)*cj0);
IkReal x10027=(gconst1*r10);
IkReal x10028=(cj1*sj2);
IkReal x10029=(gconst2*r21);
IkReal x10030=(sj3*x10016);
IkReal x10031=((1.0)*cj1*cj2);
IkReal x10032=(cj3*x10016);
IkReal x10033=(r02*x10015);
IkReal x10034=((1.0)*x10015);
evalcond[0]=((((-1.0)*x10022))+(((-1.0)*r02*x10016)));
evalcond[1]=((((-1.0)*x10020*x10034))+((x10015*x10025)));
evalcond[2]=(((x10015*x10018))+cj0+(((-1.0)*x10017*x10034)));
evalcond[3]=(((cj0*x10019))+((cj3*x10033))+(((-1.0)*cj1*cj2*x10026)));
evalcond[4]=((((-1.0)*sj3*x10033))+(((-1.0)*x10021*x10026))+(((-1.0)*x10026*x10028)));
evalcond[5]=((((-1.0)*x10020*x10032))+((sj3*x10029))+((sj3*x10023))+x10028+x10021+((x10025*x10032)));
evalcond[6]=(((x10020*x10030))+x10019+(((-1.0)*x10031))+((cj3*x10023))+((cj3*x10029))+(((-1.0)*x10025*x10030)));
evalcond[7]=(((x10018*x10032))+((sj3*x10024))+((sj3*x10027))+(((-1.0)*cj1*cj2*x10022))+((sj0*x10019))+(((-1.0)*x10017*x10032)));
evalcond[8]=(((x10017*x10030))+(((-1.0)*x10021*x10022))+(((-1.0)*x10022*x10028))+(((-1.0)*x10018*x10030))+((cj3*x10024))+((cj3*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10035=((1.0)*sj3);
IkReal x10036=((1.0)*gconst2);
CheckValue<IkReal> x10037=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10036))),-1);
if(!x10037.valid){
continue;
}
CheckValue<IkReal> x10038=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10036))),-1);
if(!x10038.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10037.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10035))+(((-1.0)*gconst2*r21*x10035)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10037.value)))+IKsqr(((x10038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10035))+(((-1.0)*gconst2*r21*x10035))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10037.value)), ((x10038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10035))+(((-1.0)*gconst2*r21*x10035))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10039=IKsin(j4);
IkReal x10040=IKcos(j4);
IkReal x10041=(gconst2*r10);
IkReal x10042=(gconst1*r11);
IkReal x10043=(sj1*sj2);
IkReal x10044=(gconst2*r20);
IkReal x10045=(cj2*sj1);
IkReal x10046=((1.0)*sj0);
IkReal x10047=(gconst1*r20);
IkReal x10048=(gconst2*r11);
IkReal x10049=(gconst1*r21);
IkReal x10050=((1.0)*cj0);
IkReal x10051=(gconst1*r10);
IkReal x10052=(cj1*sj2);
IkReal x10053=(gconst2*r21);
IkReal x10054=(sj3*x10040);
IkReal x10055=((1.0)*cj1*cj2);
IkReal x10056=(cj3*x10040);
IkReal x10057=(r02*x10039);
IkReal x10058=((1.0)*x10039);
evalcond[0]=((((-1.0)*r02*x10040))+(((-1.0)*x10046)));
evalcond[1]=(((x10039*x10049))+(((-1.0)*x10044*x10058)));
evalcond[2]=(cj0+(((-1.0)*x10041*x10058))+((x10039*x10042)));
evalcond[3]=((((-1.0)*cj1*cj2*x10050))+((cj0*x10043))+((cj3*x10057)));
evalcond[4]=((((-1.0)*sj3*x10057))+(((-1.0)*x10050*x10052))+(((-1.0)*x10045*x10050)));
evalcond[5]=(((sj3*x10053))+((sj3*x10047))+x10052+x10045+((x10049*x10056))+(((-1.0)*x10044*x10056)));
evalcond[6]=((((-1.0)*x10055))+((x10044*x10054))+(((-1.0)*x10049*x10054))+x10043+((cj3*x10047))+((cj3*x10053)));
evalcond[7]=(((sj3*x10051))+((sj0*x10043))+((sj3*x10048))+(((-1.0)*cj1*cj2*x10046))+(((-1.0)*x10041*x10056))+((x10042*x10056)));
evalcond[8]=(((x10041*x10054))+(((-1.0)*x10045*x10046))+(((-1.0)*x10046*x10052))+(((-1.0)*x10042*x10054))+((cj3*x10048))+((cj3*x10051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10059=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10059.valid){
continue;
}
CheckValue<IkReal> x10060=IKPowWithIntegerCheck(r02,-1);
if(!x10060.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10059.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10060.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10059.value)))+IKsqr(((-1.0)*sj0*(x10060.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10059.value)), ((-1.0)*sj0*(x10060.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10061=IKsin(j4);
IkReal x10062=IKcos(j4);
IkReal x10063=(gconst2*r10);
IkReal x10064=(gconst1*r11);
IkReal x10065=(sj1*sj2);
IkReal x10066=(gconst2*r20);
IkReal x10067=(cj2*sj1);
IkReal x10068=((1.0)*sj0);
IkReal x10069=(gconst1*r20);
IkReal x10070=(gconst2*r11);
IkReal x10071=(gconst1*r21);
IkReal x10072=((1.0)*cj0);
IkReal x10073=(gconst1*r10);
IkReal x10074=(cj1*sj2);
IkReal x10075=(gconst2*r21);
IkReal x10076=(sj3*x10062);
IkReal x10077=((1.0)*cj1*cj2);
IkReal x10078=(cj3*x10062);
IkReal x10079=(r02*x10061);
IkReal x10080=((1.0)*x10061);
evalcond[0]=((((-1.0)*x10068))+(((-1.0)*r02*x10062)));
evalcond[1]=((((-1.0)*x10066*x10080))+((x10061*x10071)));
evalcond[2]=(cj0+((x10061*x10064))+(((-1.0)*x10063*x10080)));
evalcond[3]=((((-1.0)*cj1*cj2*x10072))+((cj0*x10065))+((cj3*x10079)));
evalcond[4]=((((-1.0)*x10072*x10074))+(((-1.0)*x10067*x10072))+(((-1.0)*sj3*x10079)));
evalcond[5]=(((sj3*x10069))+((sj3*x10075))+((x10071*x10078))+x10074+x10067+(((-1.0)*x10066*x10078)));
evalcond[6]=((((-1.0)*x10077))+((x10066*x10076))+x10065+(((-1.0)*x10071*x10076))+((cj3*x10069))+((cj3*x10075)));
evalcond[7]=(((sj3*x10070))+((sj3*x10073))+((x10064*x10078))+(((-1.0)*cj1*cj2*x10068))+((sj0*x10065))+(((-1.0)*x10063*x10078)));
evalcond[8]=((((-1.0)*x10068*x10074))+(((-1.0)*x10064*x10076))+(((-1.0)*x10067*x10068))+((x10063*x10076))+((cj3*x10073))+((cj3*x10070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10081=gconst1*gconst1;
IkReal x10082=r21*r21;
IkReal x10083=gconst2*gconst2;
IkReal x10084=r20*r20;
IkReal x10085=(gconst2*r20);
IkReal x10086=(cj1*cj2);
IkReal x10087=(sj1*sj2);
IkReal x10088=(gconst1*r21);
IkReal x10089=(cj3*gconst2);
IkReal x10090=(cj3*r20);
CheckValue<IkReal> x10091 = IKatan2WithCheck(IkReal((((r21*r22*x10089))+(((-1.0)*r22*x10086))+((r22*x10087))+((gconst1*r22*x10090)))),IkReal((((x10087*x10088))+(((-1.0)*x10085*x10087))+((x10085*x10086))+(((-1.0)*r21*x10083*x10090))+(((-1.0)*x10086*x10088))+((r21*x10081*x10090))+(((-1.0)*gconst1*x10084*x10089))+((gconst1*x10082*x10089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10091.valid){
continue;
}
CheckValue<IkReal> x10092=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10085*x10088))+((sj3*x10083*x10084))+((sj3*x10081*x10082)))),-1);
if(!x10092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10091.value)+(((1.5707963267949)*(x10092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10093=IKsin(j4);
IkReal x10094=IKcos(j4);
IkReal x10095=(cj3*gconst1);
IkReal x10096=(gconst1*r01);
IkReal x10097=(gconst1*r11);
IkReal x10098=(sj1*sj2);
IkReal x10099=(cj3*gconst2);
IkReal x10100=(gconst1*sj3);
IkReal x10101=(gconst2*sj3);
IkReal x10102=((1.0)*sj0);
IkReal x10103=(cj1*sj2);
IkReal x10104=((1.0)*x10094);
IkReal x10105=((1.0)*x10093);
IkReal x10106=((1.0)*cj1*cj2);
IkReal x10107=(cj3*x10093);
IkReal x10108=((1.0)*cj2*sj1);
IkReal x10109=(x10094*x10101);
evalcond[0]=((((-1.0)*gconst2*r20*x10105))+(((-1.0)*r22*x10104))+((gconst1*r21*x10093)));
evalcond[1]=((((-1.0)*r12*x10104))+((x10093*x10097))+cj0+(((-1.0)*gconst2*r10*x10105)));
evalcond[2]=(((x10093*x10096))+(((-1.0)*r02*x10104))+(((-1.0)*gconst2*r00*x10105))+(((-1.0)*x10102)));
evalcond[3]=(((r21*x10101))+((cj2*sj1))+((r20*x10100))+x10103+(((-1.0)*r20*x10099*x10104))+((r22*x10107))+((r21*x10094*x10095)));
evalcond[4]=(((r20*x10109))+(((-1.0)*r21*x10100*x10104))+x10098+((r21*x10099))+(((-1.0)*r22*sj3*x10105))+((r20*x10095))+(((-1.0)*x10106)));
evalcond[5]=(((r01*x10101))+((r00*x10100))+((r01*x10094*x10095))+(((-1.0)*cj0*x10106))+(((-1.0)*r00*x10099*x10104))+((cj0*x10098))+((r02*x10107)));
evalcond[6]=(((r11*x10094*x10095))+(((-1.0)*r10*x10099*x10104))+(((-1.0)*cj1*cj2*x10102))+((sj0*x10098))+((r11*x10101))+((r10*x10100))+((r12*x10107)));
evalcond[7]=(((r00*x10109))+(((-1.0)*sj3*x10096*x10104))+(((-1.0)*cj0*x10108))+(((-1.0)*cj0*x10103))+(((-1.0)*r02*sj3*x10105))+((r01*x10099))+((r00*x10095)));
evalcond[8]=((((-1.0)*sj3*x10097*x10104))+(((-1.0)*r12*sj3*x10105))+((r11*x10099))+(((-1.0)*x10102*x10103))+(((-1.0)*cj2*sj1*x10102))+((r10*x10109))+((r10*x10095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10110=((1.0)*gconst2);
CheckValue<IkReal> x10111 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10110))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10111.valid){
continue;
}
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10110)))),-1);
if(!x10112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10111.value)+(((1.5707963267949)*(x10112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10113=IKsin(j4);
IkReal x10114=IKcos(j4);
IkReal x10115=(cj3*gconst1);
IkReal x10116=(gconst1*r01);
IkReal x10117=(gconst1*r11);
IkReal x10118=(sj1*sj2);
IkReal x10119=(cj3*gconst2);
IkReal x10120=(gconst1*sj3);
IkReal x10121=(gconst2*sj3);
IkReal x10122=((1.0)*sj0);
IkReal x10123=(cj1*sj2);
IkReal x10124=((1.0)*x10114);
IkReal x10125=((1.0)*x10113);
IkReal x10126=((1.0)*cj1*cj2);
IkReal x10127=(cj3*x10113);
IkReal x10128=((1.0)*cj2*sj1);
IkReal x10129=(x10114*x10121);
evalcond[0]=(((gconst1*r21*x10113))+(((-1.0)*gconst2*r20*x10125))+(((-1.0)*r22*x10124)));
evalcond[1]=(cj0+((x10113*x10117))+(((-1.0)*gconst2*r10*x10125))+(((-1.0)*r12*x10124)));
evalcond[2]=((((-1.0)*gconst2*r00*x10125))+((x10113*x10116))+(((-1.0)*r02*x10124))+(((-1.0)*x10122)));
evalcond[3]=(((cj2*sj1))+((r20*x10120))+((r21*x10121))+(((-1.0)*r20*x10119*x10124))+x10123+((r22*x10127))+((r21*x10114*x10115)));
evalcond[4]=(((r21*x10119))+((r20*x10129))+((r20*x10115))+(((-1.0)*r22*sj3*x10125))+x10118+(((-1.0)*r21*x10120*x10124))+(((-1.0)*x10126)));
evalcond[5]=(((cj0*x10118))+(((-1.0)*r00*x10119*x10124))+((r02*x10127))+((r00*x10120))+((r01*x10121))+(((-1.0)*cj0*x10126))+((r01*x10114*x10115)));
evalcond[6]=(((r10*x10120))+((r11*x10114*x10115))+((sj0*x10118))+(((-1.0)*r10*x10119*x10124))+((r12*x10127))+(((-1.0)*cj1*cj2*x10122))+((r11*x10121)));
evalcond[7]=(((r01*x10119))+((r00*x10115))+(((-1.0)*cj0*x10123))+((r00*x10129))+(((-1.0)*cj0*x10128))+(((-1.0)*r02*sj3*x10125))+(((-1.0)*sj3*x10116*x10124)));
evalcond[8]=((((-1.0)*sj3*x10117*x10124))+((r10*x10129))+(((-1.0)*cj2*sj1*x10122))+((r11*x10119))+(((-1.0)*r12*sj3*x10125))+(((-1.0)*x10122*x10123))+((r10*x10115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10130=((1.0)*gconst2);
CheckValue<IkReal> x10131=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10130)))),-1);
if(!x10131.valid){
continue;
}
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10130))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10131.value)))+(x10132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10133=IKsin(j4);
IkReal x10134=IKcos(j4);
IkReal x10135=(cj3*gconst1);
IkReal x10136=(gconst1*r01);
IkReal x10137=(gconst1*r11);
IkReal x10138=(sj1*sj2);
IkReal x10139=(cj3*gconst2);
IkReal x10140=(gconst1*sj3);
IkReal x10141=(gconst2*sj3);
IkReal x10142=((1.0)*sj0);
IkReal x10143=(cj1*sj2);
IkReal x10144=((1.0)*x10134);
IkReal x10145=((1.0)*x10133);
IkReal x10146=((1.0)*cj1*cj2);
IkReal x10147=(cj3*x10133);
IkReal x10148=((1.0)*cj2*sj1);
IkReal x10149=(x10134*x10141);
evalcond[0]=(((gconst1*r21*x10133))+(((-1.0)*gconst2*r20*x10145))+(((-1.0)*r22*x10144)));
evalcond[1]=(cj0+((x10133*x10137))+(((-1.0)*r12*x10144))+(((-1.0)*gconst2*r10*x10145)));
evalcond[2]=((((-1.0)*r02*x10144))+((x10133*x10136))+(((-1.0)*x10142))+(((-1.0)*gconst2*r00*x10145)));
evalcond[3]=((((-1.0)*r20*x10139*x10144))+((cj2*sj1))+((r21*x10141))+x10143+((r22*x10147))+((r21*x10134*x10135))+((r20*x10140)));
evalcond[4]=(((r20*x10135))+((r21*x10139))+x10138+(((-1.0)*r22*sj3*x10145))+(((-1.0)*x10146))+(((-1.0)*r21*x10140*x10144))+((r20*x10149)));
evalcond[5]=((((-1.0)*r00*x10139*x10144))+((r02*x10147))+((cj0*x10138))+((r00*x10140))+((r01*x10141))+((r01*x10134*x10135))+(((-1.0)*cj0*x10146)));
evalcond[6]=(((r12*x10147))+(((-1.0)*cj1*cj2*x10142))+((r10*x10140))+(((-1.0)*r10*x10139*x10144))+((sj0*x10138))+((r11*x10141))+((r11*x10134*x10135)));
evalcond[7]=((((-1.0)*r02*sj3*x10145))+(((-1.0)*cj0*x10143))+(((-1.0)*sj3*x10136*x10144))+((r01*x10139))+((r00*x10135))+((r00*x10149))+(((-1.0)*cj0*x10148)));
evalcond[8]=(((r11*x10139))+((r10*x10135))+((r10*x10149))+(((-1.0)*sj3*x10137*x10144))+(((-1.0)*x10142*x10143))+(((-1.0)*cj2*sj1*x10142))+(((-1.0)*r12*sj3*x10145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10150=((-1.0)*r21);
IkReal x10152 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10152)==0){
continue;
}
IkReal x10151=pow(x10152,-0.5);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10153.value))));
IkReal gconst4=(x10150*x10151);
IkReal gconst5=((1.0)*r20*x10151);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10154.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10155=((-1.0)*r21);
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal(x10155),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
IkReal x10156=((1.0)*(x10158.value));
IkReal x10157=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10156)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10156)));
IkReal gconst4=(x10155*x10157);
IkReal gconst5=((1.0)*r20*x10157);
IkReal x10159=r22*r22;
IkReal x10160=((1.0)*x10159);
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(((-1.0)+x10159),-1);
if(!x10164.valid){
continue;
}
IkReal x10161=x10164.value;
if((((1.0)+(((-1.0)*x10160)))) < -0.00001)
continue;
IkReal x10162=IKsqrt(((1.0)+(((-1.0)*x10160))));
IkReal x10163=(cj0*x10161*x10162);
j4eval[0]=((IKabs(((((-1.0)*x10160*x10163))+x10163)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10165=((-1.0)*r21);
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(x10165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
IkReal x10166=((1.0)*(x10168.value));
IkReal x10167=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10166)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10166)));
IkReal gconst4=(x10165*x10167);
IkReal gconst5=((1.0)*r20*x10167);
IkReal x10169=r22*r22;
IkReal x10170=((1.0)*x10169);
CheckValue<IkReal> x10174=IKPowWithIntegerCheck(((-1.0)+x10169),-1);
if(!x10174.valid){
continue;
}
IkReal x10171=x10174.value;
if((((1.0)+(((-1.0)*x10170)))) < -0.00001)
continue;
IkReal x10172=IKsqrt(((1.0)+(((-1.0)*x10170))));
IkReal x10173=(sj0*x10171*x10172);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10173+(((-1.0)*x10170*x10173))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10175=((-1.0)*r21);
CheckValue<IkReal> x10178 = IKatan2WithCheck(IkReal(x10175),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10178.valid){
continue;
}
IkReal x10176=((1.0)*(x10178.value));
IkReal x10177=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10176)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10176)));
IkReal gconst4=(x10175*x10177);
IkReal gconst5=((1.0)*r20*x10177);
IkReal x10179=r22*r22;
IkReal x10180=(r12*sj0);
IkReal x10181=(cj0*r02);
CheckValue<IkReal> x10185=IKPowWithIntegerCheck(((-1.0)+x10179),-1);
if(!x10185.valid){
continue;
}
IkReal x10182=x10185.value;
if((((1.0)+(((-1.0)*x10179)))) < -0.00001)
continue;
IkReal x10183=IKsqrt(((1.0)+(((-1.0)*x10179))));
IkReal x10184=(r22*x10182*x10183);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10181*x10184))+((x10180*x10184)))))+(IKabs(((((-1.0)*x10181))+(((-1.0)*x10180))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10186=((-1.0)*r21);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal(x10186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
IkReal x10187=((1.0)*(x10189.value));
IkReal x10188=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10187)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10187)));
IkReal gconst4=(x10186*x10188);
IkReal gconst5=((1.0)*r20*x10188);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10190=((-1.0)*r21);
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(x10190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
IkReal x10191=((1.0)*(x10193.value));
IkReal x10192=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(x10190*x10192);
IkReal gconst5=((1.0)*r20*x10192);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10194=((-1.0)*r21);
CheckValue<IkReal> x10197 = IKatan2WithCheck(IkReal(x10194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10197.valid){
continue;
}
IkReal x10195=((1.0)*(x10197.value));
IkReal x10196=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10195)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10195)));
IkReal gconst4=(x10194*x10196);
IkReal gconst5=((1.0)*r20*x10196);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10198=((-1.0)*r21);
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(x10198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
IkReal x10199=((1.0)*(x10201.value));
IkReal x10200=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10199)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10199)));
IkReal gconst4=(x10198*x10200);
IkReal gconst5=((1.0)*r20*x10200);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10202=((-1.0)*r21);
CheckValue<IkReal> x10205 = IKatan2WithCheck(IkReal(x10202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10205.valid){
continue;
}
IkReal x10203=((1.0)*(x10205.value));
IkReal x10204=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10203)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10203)));
IkReal gconst4=(x10202*x10204);
IkReal gconst5=((1.0)*r20*x10204);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10206=((-1.0)*r21);
CheckValue<IkReal> x10209 = IKatan2WithCheck(IkReal(x10206),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10209.valid){
continue;
}
IkReal x10207=((1.0)*(x10209.value));
IkReal x10208=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10207)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10207)));
IkReal gconst4=(x10206*x10208);
IkReal gconst5=((1.0)*r20*x10208);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10210=(gconst5*r10);
IkReal x10211=(gconst4*r11);
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10210*x10210)+(((-2.0)*x10210*x10211))+(x10211*x10211))),-1);
if(!x10212.valid){
continue;
}
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal((x10210+(((-1.0)*x10211)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10212.value)))+(x10213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10214=IKsin(j4);
IkReal x10215=IKcos(j4);
IkReal x10216=(gconst4*r11);
IkReal x10217=((1.0)*cj1);
IkReal x10218=(gconst5*r10);
IkReal x10219=(gconst4*r01);
IkReal x10220=(gconst5*r00);
IkReal x10221=(gconst4*r21);
IkReal x10222=(gconst5*r20);
IkReal x10223=((1.0)*x10215);
IkReal x10224=((1.0)*x10214);
evalcond[0]=((((-1.0)*x10222*x10224))+((x10214*x10221))+(((-1.0)*r22*x10223)));
evalcond[1]=((((-1.0)*x10220*x10224))+(((-1.0)*r02*x10223))+((x10214*x10219)));
evalcond[2]=((((-1.0)*x10216*x10223))+((x10215*x10218))+(((-1.0)*r12*x10224)));
evalcond[3]=((1.0)+((x10214*x10216))+(((-1.0)*r12*x10223))+(((-1.0)*x10218*x10224)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10217))+(((-1.0)*x10221*x10223))+(((-1.0)*r22*x10224))+((x10215*x10222)));
evalcond[5]=((((-1.0)*r02*x10224))+(((-1.0)*sj2*x10217))+(((-1.0)*cj2*sj1))+(((-1.0)*x10219*x10223))+((x10215*x10220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10225=((1.0)*gconst5);
CheckValue<IkReal> x10226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10225)))),-1);
if(!x10226.valid){
continue;
}
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10225))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10226.value)))+(x10227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10228=IKsin(j4);
IkReal x10229=IKcos(j4);
IkReal x10230=(gconst4*r11);
IkReal x10231=((1.0)*cj1);
IkReal x10232=(gconst5*r10);
IkReal x10233=(gconst4*r01);
IkReal x10234=(gconst5*r00);
IkReal x10235=(gconst4*r21);
IkReal x10236=(gconst5*r20);
IkReal x10237=((1.0)*x10229);
IkReal x10238=((1.0)*x10228);
evalcond[0]=((((-1.0)*x10236*x10238))+((x10228*x10235))+(((-1.0)*r22*x10237)));
evalcond[1]=((((-1.0)*x10234*x10238))+((x10228*x10233))+(((-1.0)*r02*x10237)));
evalcond[2]=((((-1.0)*x10230*x10237))+((x10229*x10232))+(((-1.0)*r12*x10238)));
evalcond[3]=((1.0)+(((-1.0)*x10232*x10238))+((x10228*x10230))+(((-1.0)*r12*x10237)));
evalcond[4]=((((-1.0)*x10235*x10237))+((sj1*sj2))+(((-1.0)*cj2*x10231))+((x10229*x10236))+(((-1.0)*r22*x10238)));
evalcond[5]=((((-1.0)*x10233*x10237))+(((-1.0)*cj2*sj1))+((x10229*x10234))+(((-1.0)*sj2*x10231))+(((-1.0)*r02*x10238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10239 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10239.value)+(((1.5707963267949)*(x10240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10241=IKsin(j4);
IkReal x10242=IKcos(j4);
IkReal x10243=(gconst4*r11);
IkReal x10244=((1.0)*cj1);
IkReal x10245=(gconst5*r10);
IkReal x10246=(gconst4*r01);
IkReal x10247=(gconst5*r00);
IkReal x10248=(gconst4*r21);
IkReal x10249=(gconst5*r20);
IkReal x10250=((1.0)*x10242);
IkReal x10251=((1.0)*x10241);
evalcond[0]=(((x10241*x10248))+(((-1.0)*r22*x10250))+(((-1.0)*x10249*x10251)));
evalcond[1]=((((-1.0)*r02*x10250))+(((-1.0)*x10247*x10251))+((x10241*x10246)));
evalcond[2]=((((-1.0)*x10243*x10250))+((x10242*x10245))+(((-1.0)*r12*x10251)));
evalcond[3]=((1.0)+((x10241*x10243))+(((-1.0)*x10245*x10251))+(((-1.0)*r12*x10250)));
evalcond[4]=(((x10242*x10249))+(((-1.0)*x10248*x10250))+(((-1.0)*cj2*x10244))+((sj1*sj2))+(((-1.0)*r22*x10251)));
evalcond[5]=((((-1.0)*r02*x10251))+((x10242*x10247))+(((-1.0)*cj2*sj1))+(((-1.0)*x10246*x10250))+(((-1.0)*sj2*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10252=((-1.0)*r21);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal(x10252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
IkReal x10253=((1.0)*(x10255.value));
IkReal x10254=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10253)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10253)));
IkReal gconst4=(x10252*x10254);
IkReal gconst5=((1.0)*r20*x10254);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10256=((-1.0)*r21);
CheckValue<IkReal> x10259 = IKatan2WithCheck(IkReal(x10256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10259.valid){
continue;
}
IkReal x10257=((1.0)*(x10259.value));
IkReal x10258=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10257)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10257)));
IkReal gconst4=(x10256*x10258);
IkReal gconst5=((1.0)*r20*x10258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10260=((-1.0)*r21);
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(x10260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
IkReal x10261=((1.0)*(x10263.value));
IkReal x10262=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10261)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10261)));
IkReal gconst4=(x10260*x10262);
IkReal gconst5=((1.0)*r20*x10262);
IkReal x10264=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10268=IKPowWithIntegerCheck(x10264,-1);
if(!x10268.valid){
continue;
}
IkReal x10265=x10268.value;
IkReal x10266=((1.0)*x10265);
IkReal x10267=((((-1.0)*x10266*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10265))+(((-1.0)*x10266*(r10*r10)*(r20*r20))));
j4eval[0]=x10267;
j4eval[1]=r12;
j4eval[2]=x10264;
j4eval[3]=IKsign(x10267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10269=(gconst5*r10);
IkReal x10270=(gconst4*r11);
CheckValue<IkReal> x10271 = IKatan2WithCheck(IkReal(((((-1.0)*x10269))+x10270)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10271.valid){
continue;
}
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10269*x10269)))+(((2.0)*x10269*x10270))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10270*x10270))))),-1);
if(!x10272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10271.value)+(((1.5707963267949)*(x10272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10273=IKcos(j4);
IkReal x10274=IKsin(j4);
IkReal x10275=(gconst4*r11);
IkReal x10276=(gconst5*r10);
IkReal x10277=((1.0)*cj1);
IkReal x10278=(gconst5*r00);
IkReal x10279=(gconst5*r20);
IkReal x10280=((1.0)*x10273);
IkReal x10281=(gconst4*x10273);
IkReal x10282=((1.0)*x10274);
IkReal x10283=(gconst4*x10274);
evalcond[0]=(((r12*x10274))+(((-1.0)*x10276*x10280))+((x10273*x10275)));
evalcond[1]=((((-1.0)*x10279*x10282))+(((-1.0)*r22*x10280))+((r21*x10283)));
evalcond[2]=(((r01*x10283))+(((-1.0)*x10278*x10282))+(((-1.0)*r02*x10280)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10280))+(((-1.0)*x10276*x10282))+((x10274*x10275)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10279*x10280))+(((-1.0)*cj2*x10277))+((r21*x10281))+((r22*x10274)));
evalcond[5]=(((r01*x10281))+(((-1.0)*x10278*x10280))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10277))+((r02*x10274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10284=((1.0)*gconst5);
CheckValue<IkReal> x10285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10284)))),-1);
if(!x10285.valid){
continue;
}
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10285.value)))+(x10286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10287=IKcos(j4);
IkReal x10288=IKsin(j4);
IkReal x10289=(gconst4*r11);
IkReal x10290=(gconst5*r10);
IkReal x10291=((1.0)*cj1);
IkReal x10292=(gconst5*r00);
IkReal x10293=(gconst5*r20);
IkReal x10294=((1.0)*x10287);
IkReal x10295=(gconst4*x10287);
IkReal x10296=((1.0)*x10288);
IkReal x10297=(gconst4*x10288);
evalcond[0]=(((r12*x10288))+(((-1.0)*x10290*x10294))+((x10287*x10289)));
evalcond[1]=((((-1.0)*x10293*x10296))+((r21*x10297))+(((-1.0)*r22*x10294)));
evalcond[2]=((((-1.0)*x10292*x10296))+(((-1.0)*r02*x10294))+((r01*x10297)));
evalcond[3]=((1.0)+(((-1.0)*x10290*x10296))+(((-1.0)*r12*x10294))+((x10288*x10289)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10293*x10294))+((r22*x10288))+((r21*x10295))+(((-1.0)*cj2*x10291)));
evalcond[5]=((((-1.0)*x10292*x10294))+(((-1.0)*sj2*x10291))+(((-1.0)*cj2*sj1))+((r02*x10288))+((r01*x10295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
CheckValue<IkReal> x10299=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10298.value)+(((1.5707963267949)*(x10299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10300=IKcos(j4);
IkReal x10301=IKsin(j4);
IkReal x10302=(gconst4*r11);
IkReal x10303=(gconst5*r10);
IkReal x10304=((1.0)*cj1);
IkReal x10305=(gconst5*r00);
IkReal x10306=(gconst5*r20);
IkReal x10307=((1.0)*x10300);
IkReal x10308=(gconst4*x10300);
IkReal x10309=((1.0)*x10301);
IkReal x10310=(gconst4*x10301);
evalcond[0]=(((x10300*x10302))+((r12*x10301))+(((-1.0)*x10303*x10307)));
evalcond[1]=((((-1.0)*r22*x10307))+((r21*x10310))+(((-1.0)*x10306*x10309)));
evalcond[2]=((((-1.0)*x10305*x10309))+((r01*x10310))+(((-1.0)*r02*x10307)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10307))+(((-1.0)*x10303*x10309))+((x10301*x10302)));
evalcond[4]=((((-1.0)*cj2*x10304))+((sj1*sj2))+((r21*x10308))+(((-1.0)*x10306*x10307))+((r22*x10301)));
evalcond[5]=(((r02*x10301))+(((-1.0)*x10305*x10307))+(((-1.0)*sj2*x10304))+(((-1.0)*cj2*sj1))+((r01*x10308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10311=((-1.0)*r21);
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(x10311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
IkReal x10312=((1.0)*(x10314.value));
IkReal x10313=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10312)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10312)));
IkReal gconst4=(x10311*x10313);
IkReal gconst5=((1.0)*r20*x10313);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10315=((-1.0)*r21);
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(x10315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
IkReal x10316=((1.0)*(x10318.value));
IkReal x10317=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10316)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10316)));
IkReal gconst4=(x10315*x10317);
IkReal gconst5=((1.0)*r20*x10317);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10319=((-1.0)*r21);
CheckValue<IkReal> x10322 = IKatan2WithCheck(IkReal(x10319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10322.valid){
continue;
}
IkReal x10320=((1.0)*(x10322.value));
IkReal x10321=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10320)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10320)));
IkReal gconst4=(x10319*x10321);
IkReal gconst5=((1.0)*r20*x10321);
IkReal x10323=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(x10323,-1);
if(!x10327.valid){
continue;
}
IkReal x10324=x10327.value;
IkReal x10325=((1.0)*x10324);
IkReal x10326=((((-1.0)*x10325*(r10*r10)*(r20*r20)))+(((-1.0)*x10325*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10324)));
j4eval[0]=x10326;
j4eval[1]=r12;
j4eval[2]=x10323;
j4eval[3]=IKsign(x10326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10328=(gconst5*r10);
IkReal x10329=(gconst4*r11);
CheckValue<IkReal> x10330 = IKatan2WithCheck(IkReal(((((-1.0)*x10328))+x10329)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10330.valid){
continue;
}
CheckValue<IkReal> x10331=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10328*x10328)))+(((-1.0)*(r12*r12)))+(((2.0)*x10328*x10329))+(((-1.0)*(x10329*x10329))))),-1);
if(!x10331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10330.value)+(((1.5707963267949)*(x10331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10332=IKcos(j4);
IkReal x10333=IKsin(j4);
IkReal x10334=(gconst4*r11);
IkReal x10335=(gconst5*r10);
IkReal x10336=(gconst5*r00);
IkReal x10337=(gconst5*r20);
IkReal x10338=((1.0)*x10332);
IkReal x10339=(gconst4*x10332);
IkReal x10340=((1.0)*x10333);
IkReal x10341=(gconst4*x10333);
evalcond[0]=(((r12*x10333))+(((-1.0)*x10335*x10338))+((x10332*x10334)));
evalcond[1]=((((-1.0)*x10337*x10340))+(((-1.0)*r22*x10338))+((r21*x10341)));
evalcond[2]=(((r01*x10341))+(((-1.0)*x10336*x10340))+(((-1.0)*r02*x10338)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10338))+(((-1.0)*x10335*x10340))+((x10333*x10334)));
evalcond[4]=(((cj2*sj1))+((r22*x10333))+((cj1*sj2))+((r21*x10339))+(((-1.0)*x10337*x10338)));
evalcond[5]=((((-1.0)*x10336*x10338))+((r02*x10333))+((r01*x10339))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10342=((1.0)*gconst5);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10342)))),-1);
if(!x10344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10343.value)+(((1.5707963267949)*(x10344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10345=IKcos(j4);
IkReal x10346=IKsin(j4);
IkReal x10347=(gconst4*r11);
IkReal x10348=(gconst5*r10);
IkReal x10349=(gconst5*r00);
IkReal x10350=(gconst5*r20);
IkReal x10351=((1.0)*x10345);
IkReal x10352=(gconst4*x10345);
IkReal x10353=((1.0)*x10346);
IkReal x10354=(gconst4*x10346);
evalcond[0]=(((x10345*x10347))+((r12*x10346))+(((-1.0)*x10348*x10351)));
evalcond[1]=(((r21*x10354))+(((-1.0)*r22*x10351))+(((-1.0)*x10350*x10353)));
evalcond[2]=(((r01*x10354))+(((-1.0)*x10349*x10353))+(((-1.0)*r02*x10351)));
evalcond[3]=((1.0)+((x10346*x10347))+(((-1.0)*x10348*x10353))+(((-1.0)*r12*x10351)));
evalcond[4]=(((r21*x10352))+((cj2*sj1))+((cj1*sj2))+((r22*x10346))+(((-1.0)*x10350*x10351)));
evalcond[5]=(((r01*x10352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10346))+(((-1.0)*x10349*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10355.value)+(((1.5707963267949)*(x10356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10357=IKcos(j4);
IkReal x10358=IKsin(j4);
IkReal x10359=(gconst4*r11);
IkReal x10360=(gconst5*r10);
IkReal x10361=(gconst5*r00);
IkReal x10362=(gconst5*r20);
IkReal x10363=((1.0)*x10357);
IkReal x10364=(gconst4*x10357);
IkReal x10365=((1.0)*x10358);
IkReal x10366=(gconst4*x10358);
evalcond[0]=((((-1.0)*x10360*x10363))+((x10357*x10359))+((r12*x10358)));
evalcond[1]=(((r21*x10366))+(((-1.0)*x10362*x10365))+(((-1.0)*r22*x10363)));
evalcond[2]=(((r01*x10366))+(((-1.0)*x10361*x10365))+(((-1.0)*r02*x10363)));
evalcond[3]=((1.0)+(((-1.0)*x10360*x10365))+((x10358*x10359))+(((-1.0)*r12*x10363)));
evalcond[4]=(((cj2*sj1))+((r21*x10364))+((cj1*sj2))+((r22*x10358))+(((-1.0)*x10362*x10363)));
evalcond[5]=(((r01*x10364))+(((-1.0)*x10361*x10363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10367=((-1.0)*r21);
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(x10367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
IkReal x10368=((1.0)*(x10370.value));
IkReal x10369=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10368)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10368)));
IkReal gconst4=(x10367*x10369);
IkReal gconst5=((1.0)*r20*x10369);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10371=((-1.0)*r21);
CheckValue<IkReal> x10374 = IKatan2WithCheck(IkReal(x10371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10374.valid){
continue;
}
IkReal x10372=((1.0)*(x10374.value));
IkReal x10373=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10372)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10372)));
IkReal gconst4=(x10371*x10373);
IkReal gconst5=((1.0)*r20*x10373);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10375=((-1.0)*r21);
CheckValue<IkReal> x10378 = IKatan2WithCheck(IkReal(x10375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10378.valid){
continue;
}
IkReal x10376=((1.0)*(x10378.value));
IkReal x10377=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10376)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10376)));
IkReal gconst4=(x10375*x10377);
IkReal gconst5=((1.0)*r20*x10377);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10379=(gconst5*r10);
IkReal x10380=(gconst4*r11);
CheckValue<IkReal> x10381 = IKatan2WithCheck(IkReal(((((-1.0)*x10380))+x10379)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10381.valid){
continue;
}
CheckValue<IkReal> x10382=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10379*x10380))+(x10379*x10379)+(x10380*x10380))),-1);
if(!x10382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10381.value)+(((1.5707963267949)*(x10382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10383=IKsin(j4);
IkReal x10384=IKcos(j4);
IkReal x10385=(gconst4*r11);
IkReal x10386=(gconst5*r10);
IkReal x10387=(gconst4*r01);
IkReal x10388=(gconst5*r00);
IkReal x10389=(gconst4*r21);
IkReal x10390=(gconst5*r20);
IkReal x10391=((1.0)*x10384);
IkReal x10392=((1.0)*x10383);
evalcond[0]=(((x10383*x10389))+(((-1.0)*r22*x10391))+(((-1.0)*x10390*x10392)));
evalcond[1]=(((x10383*x10387))+(((-1.0)*r02*x10391))+(((-1.0)*x10388*x10392)));
evalcond[2]=((((-1.0)*x10385*x10391))+((x10384*x10386))+(((-1.0)*r12*x10392)));
evalcond[3]=((1.0)+((x10383*x10385))+(((-1.0)*x10386*x10392))+(((-1.0)*r12*x10391)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10389*x10391))+((x10384*x10390))+(((-1.0)*r22*x10392)));
evalcond[5]=(((x10384*x10388))+(((-1.0)*x10387*x10391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10393=((1.0)*gconst5);
CheckValue<IkReal> x10394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10393)))),-1);
if(!x10394.valid){
continue;
}
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10393))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10394.value)))+(x10395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10396=IKsin(j4);
IkReal x10397=IKcos(j4);
IkReal x10398=(gconst4*r11);
IkReal x10399=(gconst5*r10);
IkReal x10400=(gconst4*r01);
IkReal x10401=(gconst5*r00);
IkReal x10402=(gconst4*r21);
IkReal x10403=(gconst5*r20);
IkReal x10404=((1.0)*x10397);
IkReal x10405=((1.0)*x10396);
evalcond[0]=(((x10396*x10402))+(((-1.0)*r22*x10404))+(((-1.0)*x10403*x10405)));
evalcond[1]=(((x10396*x10400))+(((-1.0)*x10401*x10405))+(((-1.0)*r02*x10404)));
evalcond[2]=(((x10397*x10399))+(((-1.0)*x10398*x10404))+(((-1.0)*r12*x10405)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10404))+(((-1.0)*x10399*x10405))+((x10396*x10398)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10402*x10404))+((cj1*sj2))+(((-1.0)*r22*x10405))+((x10397*x10403)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10397*x10401))+(((-1.0)*x10400*x10404))+(((-1.0)*r02*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10406 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10406.valid){
continue;
}
CheckValue<IkReal> x10407=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10406.value)+(((1.5707963267949)*(x10407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10408=IKsin(j4);
IkReal x10409=IKcos(j4);
IkReal x10410=(gconst4*r11);
IkReal x10411=(gconst5*r10);
IkReal x10412=(gconst4*r01);
IkReal x10413=(gconst5*r00);
IkReal x10414=(gconst4*r21);
IkReal x10415=(gconst5*r20);
IkReal x10416=((1.0)*x10409);
IkReal x10417=((1.0)*x10408);
evalcond[0]=(((x10408*x10414))+(((-1.0)*r22*x10416))+(((-1.0)*x10415*x10417)));
evalcond[1]=((((-1.0)*r02*x10416))+(((-1.0)*x10413*x10417))+((x10408*x10412)));
evalcond[2]=((((-1.0)*r12*x10417))+((x10409*x10411))+(((-1.0)*x10410*x10416)));
evalcond[3]=((1.0)+((x10408*x10410))+(((-1.0)*r12*x10416))+(((-1.0)*x10411*x10417)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10414*x10416))+((cj1*sj2))+(((-1.0)*r22*x10417))+((x10409*x10415)));
evalcond[5]=((((-1.0)*r02*x10417))+(((-1.0)*x10412*x10416))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10409*x10413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10418=gconst4*gconst4;
IkReal x10419=gconst5*gconst5;
IkReal x10420=(r10*r21);
IkReal x10421=((1.0)*cj3);
IkReal x10422=(r11*r21);
IkReal x10423=(r11*r20);
IkReal x10424=(r22*sj3);
IkReal x10425=(gconst4*r10);
IkReal x10426=((1.0)*sj3);
IkReal x10427=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10428=IKPowWithIntegerCheck(IKsign((((x10420*x10427))+((x10423*x10427))+(((-1.0)*r10*r20*x10419*x10421))+(((-1.0)*r12*r22*x10421))+(((-1.0)*x10418*x10421*x10422)))),-1);
if(!x10428.valid){
continue;
}
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal((((gconst5*r11*x10424))+((x10424*x10425)))),IkReal((((sj3*x10418*x10420))+(((-1.0)*x10419*x10423*x10426))+((gconst4*gconst5*sj3*x10422))+(((-1.0)*gconst5*r20*x10425*x10426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10428.value)))+(x10429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10430=IKsin(j4);
IkReal x10431=IKcos(j4);
IkReal x10432=(sj1*sj2);
IkReal x10433=(gconst5*sj3);
IkReal x10434=(cj3*gconst5);
IkReal x10435=(gconst4*r11);
IkReal x10436=((1.0)*cj1);
IkReal x10437=(gconst4*r01);
IkReal x10438=(cj2*sj1);
IkReal x10439=(gconst4*r21);
IkReal x10440=(gconst4*sj3);
IkReal x10441=(cj3*gconst4);
IkReal x10442=(cj2*x10436);
IkReal x10443=((1.0)*x10431);
IkReal x10444=((1.0)*x10430);
IkReal x10445=(cj3*x10430);
IkReal x10446=(cj3*x10431);
evalcond[0]=(((x10430*x10439))+(((-1.0)*gconst5*r20*x10444))+(((-1.0)*r22*x10443)));
evalcond[1]=(((x10430*x10437))+(((-1.0)*r02*x10443))+(((-1.0)*gconst5*r00*x10444)));
evalcond[2]=((1.0)+((x10430*x10435))+(((-1.0)*r12*x10443))+(((-1.0)*gconst5*r10*x10444)));
evalcond[3]=((((-1.0)*r10*x10434*x10443))+((r12*x10445))+((r11*x10433))+((r10*x10440))+((x10435*x10446)));
evalcond[4]=((((-1.0)*sj3*x10435*x10443))+(((-1.0)*r12*sj3*x10444))+((r10*x10431*x10433))+((r11*x10434))+((r10*x10441)));
evalcond[5]=(((r22*x10445))+((cj1*sj2))+((r20*x10440))+x10438+((x10439*x10446))+(((-1.0)*r20*x10434*x10443))+((r21*x10433)));
evalcond[6]=(((r01*x10433))+((x10437*x10446))+(((-1.0)*x10442))+((r02*x10445))+(((-1.0)*r00*x10434*x10443))+((r00*x10440))+x10432);
evalcond[7]=((((-1.0)*r22*sj3*x10444))+(((-1.0)*x10442))+((r20*x10441))+(((-1.0)*sj3*x10439*x10443))+x10432+((r20*x10431*x10433))+((r21*x10434)));
evalcond[8]=(((r01*x10434))+(((-1.0)*sj3*x10437*x10443))+(((-1.0)*r02*sj3*x10444))+(((-1.0)*sj2*x10436))+((r00*x10441))+(((-1.0)*x10438))+((r00*x10431*x10433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10447=((1.0)*gconst5);
CheckValue<IkReal> x10448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10447)))),-1);
if(!x10448.valid){
continue;
}
CheckValue<IkReal> x10449 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10447))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10448.value)))+(x10449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10450=IKsin(j4);
IkReal x10451=IKcos(j4);
IkReal x10452=(sj1*sj2);
IkReal x10453=(gconst5*sj3);
IkReal x10454=(cj3*gconst5);
IkReal x10455=(gconst4*r11);
IkReal x10456=((1.0)*cj1);
IkReal x10457=(gconst4*r01);
IkReal x10458=(cj2*sj1);
IkReal x10459=(gconst4*r21);
IkReal x10460=(gconst4*sj3);
IkReal x10461=(cj3*gconst4);
IkReal x10462=(cj2*x10456);
IkReal x10463=((1.0)*x10451);
IkReal x10464=((1.0)*x10450);
IkReal x10465=(cj3*x10450);
IkReal x10466=(cj3*x10451);
evalcond[0]=((((-1.0)*gconst5*r20*x10464))+(((-1.0)*r22*x10463))+((x10450*x10459)));
evalcond[1]=((((-1.0)*r02*x10463))+(((-1.0)*gconst5*r00*x10464))+((x10450*x10457)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10464))+((x10450*x10455))+(((-1.0)*r12*x10463)));
evalcond[3]=(((r12*x10465))+((r11*x10453))+(((-1.0)*r10*x10454*x10463))+((x10455*x10466))+((r10*x10460)));
evalcond[4]=((((-1.0)*sj3*x10455*x10463))+((r11*x10454))+((r10*x10451*x10453))+(((-1.0)*r12*sj3*x10464))+((r10*x10461)));
evalcond[5]=(((r20*x10460))+((x10459*x10466))+((cj1*sj2))+(((-1.0)*r20*x10454*x10463))+((r22*x10465))+x10458+((r21*x10453)));
evalcond[6]=((((-1.0)*r00*x10454*x10463))+((r00*x10460))+((r01*x10453))+((x10457*x10466))+x10452+((r02*x10465))+(((-1.0)*x10462)));
evalcond[7]=(((r20*x10461))+(((-1.0)*sj3*x10459*x10463))+(((-1.0)*r22*sj3*x10464))+x10452+((r21*x10454))+((r20*x10451*x10453))+(((-1.0)*x10462)));
evalcond[8]=((((-1.0)*x10458))+(((-1.0)*sj3*x10457*x10463))+((r00*x10461))+((r01*x10454))+(((-1.0)*r02*sj3*x10464))+(((-1.0)*sj2*x10456))+((r00*x10451*x10453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10467 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10467.valid){
continue;
}
CheckValue<IkReal> x10468=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10467.value)+(((1.5707963267949)*(x10468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10469=IKsin(j4);
IkReal x10470=IKcos(j4);
IkReal x10471=(sj1*sj2);
IkReal x10472=(gconst5*sj3);
IkReal x10473=(cj3*gconst5);
IkReal x10474=(gconst4*r11);
IkReal x10475=((1.0)*cj1);
IkReal x10476=(gconst4*r01);
IkReal x10477=(cj2*sj1);
IkReal x10478=(gconst4*r21);
IkReal x10479=(gconst4*sj3);
IkReal x10480=(cj3*gconst4);
IkReal x10481=(cj2*x10475);
IkReal x10482=((1.0)*x10470);
IkReal x10483=((1.0)*x10469);
IkReal x10484=(cj3*x10469);
IkReal x10485=(cj3*x10470);
evalcond[0]=((((-1.0)*r22*x10482))+(((-1.0)*gconst5*r20*x10483))+((x10469*x10478)));
evalcond[1]=((((-1.0)*r02*x10482))+(((-1.0)*gconst5*r00*x10483))+((x10469*x10476)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10483))+(((-1.0)*r12*x10482))+((x10469*x10474)));
evalcond[3]=(((x10474*x10485))+((r12*x10484))+((r11*x10472))+(((-1.0)*r10*x10473*x10482))+((r10*x10479)));
evalcond[4]=(((r10*x10480))+((r10*x10470*x10472))+(((-1.0)*sj3*x10474*x10482))+((r11*x10473))+(((-1.0)*r12*sj3*x10483)));
evalcond[5]=(((x10478*x10485))+((r20*x10479))+(((-1.0)*r20*x10473*x10482))+((cj1*sj2))+((r22*x10484))+((r21*x10472))+x10477);
evalcond[6]=(((r01*x10472))+((r00*x10479))+(((-1.0)*x10481))+((r02*x10484))+x10471+(((-1.0)*r00*x10473*x10482))+((x10476*x10485)));
evalcond[7]=((((-1.0)*r22*sj3*x10483))+((r20*x10470*x10472))+(((-1.0)*x10481))+((r21*x10473))+(((-1.0)*sj3*x10478*x10482))+x10471+((r20*x10480)));
evalcond[8]=((((-1.0)*x10477))+((r00*x10480))+(((-1.0)*sj3*x10476*x10482))+((r00*x10470*x10472))+((r01*x10473))+(((-1.0)*sj2*x10475))+(((-1.0)*r02*sj3*x10483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10486=((-1.0)*r21);
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(x10486),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
IkReal x10487=((1.0)*(x10489.value));
IkReal x10488=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10487)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10487)));
IkReal gconst4=(x10486*x10488);
IkReal gconst5=((1.0)*r20*x10488);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10490=((-1.0)*r21);
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(x10490),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
IkReal x10491=((1.0)*(x10493.value));
IkReal x10492=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10491)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10491)));
IkReal gconst4=(x10490*x10492);
IkReal gconst5=((1.0)*r20*x10492);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10494=((-1.0)*r21);
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(x10494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
IkReal x10495=((1.0)*(x10497.value));
IkReal x10496=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10495)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10495)));
IkReal gconst4=(x10494*x10496);
IkReal gconst5=((1.0)*r20*x10496);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10498=((-1.0)*r21);
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal(x10498),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
IkReal x10499=((1.0)*(x10501.value));
IkReal x10500=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10499)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10499)));
IkReal gconst4=(x10498*x10500);
IkReal gconst5=((1.0)*r20*x10500);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10502=((-1.0)*r21);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(x10502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
IkReal x10503=((1.0)*(x10505.value));
IkReal x10504=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10503)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10503)));
IkReal gconst4=(x10502*x10504);
IkReal gconst5=((1.0)*r20*x10504);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10506=((-1.0)*r21);
CheckValue<IkReal> x10509 = IKatan2WithCheck(IkReal(x10506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10509.valid){
continue;
}
IkReal x10507=((1.0)*(x10509.value));
IkReal x10508=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10507)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10507)));
IkReal gconst4=(x10506*x10508);
IkReal gconst5=((1.0)*r20*x10508);
IkReal x10510=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10514=IKPowWithIntegerCheck(x10510,-1);
if(!x10514.valid){
continue;
}
IkReal x10511=x10514.value;
IkReal x10512=((1.0)*x10511);
IkReal x10513=((((-2.0)*r10*r11*r20*r21*x10511))+(((-1.0)*(r12*r12)))+(((-1.0)*x10512*(r10*r10)*(r20*r20)))+(((-1.0)*x10512*(r11*r11)*(r21*r21))));
j4eval[0]=x10513;
j4eval[1]=r12;
j4eval[2]=x10510;
j4eval[3]=IKsign(x10513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10515=(gconst5*r10);
IkReal x10516=(gconst4*r11);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(((((-1.0)*x10516))+x10515)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10515*x10515)))+(((2.0)*x10515*x10516))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10516*x10516))))),-1);
if(!x10518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10517.value)+(((1.5707963267949)*(x10518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10519=IKsin(j4);
IkReal x10520=IKcos(j4);
IkReal x10521=(gconst4*r11);
IkReal x10522=(gconst5*r10);
IkReal x10523=(gconst4*r01);
IkReal x10524=(gconst5*r00);
IkReal x10525=(gconst4*r21);
IkReal x10526=(gconst5*r20);
IkReal x10527=((1.0)*x10520);
IkReal x10528=((1.0)*x10519);
evalcond[0]=((((-1.0)*x10526*x10528))+(((-1.0)*r22*x10527))+((x10519*x10525)));
evalcond[1]=((((-1.0)*r02*x10527))+((x10519*x10523))+(((-1.0)*x10524*x10528)));
evalcond[2]=((((-1.0)*x10521*x10527))+(((-1.0)*r12*x10528))+((x10520*x10522)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10527))+((x10519*x10521))+(((-1.0)*x10522*x10528)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10523*x10527))+((cj1*sj2))+((x10520*x10524))+(((-1.0)*r02*x10528)));
evalcond[5]=((((-1.0)*r22*x10528))+((x10520*x10526))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10525*x10527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10529=((1.0)*gconst5);
CheckValue<IkReal> x10530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10529))+(((-1.0)*gconst4*r20)))),-1);
if(!x10530.valid){
continue;
}
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10530.value)))+(x10531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10532=IKsin(j4);
IkReal x10533=IKcos(j4);
IkReal x10534=(gconst4*r11);
IkReal x10535=(gconst5*r10);
IkReal x10536=(gconst4*r01);
IkReal x10537=(gconst5*r00);
IkReal x10538=(gconst4*r21);
IkReal x10539=(gconst5*r20);
IkReal x10540=((1.0)*x10533);
IkReal x10541=((1.0)*x10532);
evalcond[0]=((((-1.0)*x10539*x10541))+(((-1.0)*r22*x10540))+((x10532*x10538)));
evalcond[1]=((((-1.0)*r02*x10540))+(((-1.0)*x10537*x10541))+((x10532*x10536)));
evalcond[2]=(((x10533*x10535))+(((-1.0)*x10534*x10540))+(((-1.0)*r12*x10541)));
evalcond[3]=((-1.0)+(((-1.0)*x10535*x10541))+(((-1.0)*r12*x10540))+((x10532*x10534)));
evalcond[4]=(((x10533*x10537))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10541))+(((-1.0)*x10536*x10540)));
evalcond[5]=(((x10533*x10539))+(((-1.0)*x10538*x10540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10542=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10542.valid){
continue;
}
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10542.value)))+(x10543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10544=IKsin(j4);
IkReal x10545=IKcos(j4);
IkReal x10546=(gconst4*r11);
IkReal x10547=(gconst5*r10);
IkReal x10548=(gconst4*r01);
IkReal x10549=(gconst5*r00);
IkReal x10550=(gconst4*r21);
IkReal x10551=(gconst5*r20);
IkReal x10552=((1.0)*x10545);
IkReal x10553=((1.0)*x10544);
evalcond[0]=((((-1.0)*x10551*x10553))+((x10544*x10550))+(((-1.0)*r22*x10552)));
evalcond[1]=(((x10544*x10548))+(((-1.0)*r02*x10552))+(((-1.0)*x10549*x10553)));
evalcond[2]=((((-1.0)*r12*x10553))+(((-1.0)*x10546*x10552))+((x10545*x10547)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10552))+(((-1.0)*x10547*x10553))+((x10544*x10546)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10553))+(((-1.0)*x10548*x10552))+((x10545*x10549)));
evalcond[5]=(((x10545*x10551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10550*x10552))+(((-1.0)*r22*x10553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10554=((-1.0)*r21);
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(x10554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
IkReal x10555=((1.0)*(x10557.value));
IkReal x10556=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10555)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10555)));
IkReal gconst4=(x10554*x10556);
IkReal gconst5=((1.0)*r20*x10556);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10558=((-1.0)*r21);
CheckValue<IkReal> x10561 = IKatan2WithCheck(IkReal(x10558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10561.valid){
continue;
}
IkReal x10559=((1.0)*(x10561.value));
IkReal x10560=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10559)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10559)));
IkReal gconst4=(x10558*x10560);
IkReal gconst5=((1.0)*r20*x10560);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10562=((-1.0)*r21);
CheckValue<IkReal> x10565 = IKatan2WithCheck(IkReal(x10562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10565.valid){
continue;
}
IkReal x10563=((1.0)*(x10565.value));
IkReal x10564=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10563)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10563)));
IkReal gconst4=(x10562*x10564);
IkReal gconst5=((1.0)*r20*x10564);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10566=(gconst5*r10);
IkReal x10567=(gconst4*r11);
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(((((-1.0)*x10566))+x10567)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10566*x10566)+(((-2.0)*x10566*x10567))+(x10567*x10567))),-1);
if(!x10569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10568.value)+(((1.5707963267949)*(x10569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10570=IKcos(j4);
IkReal x10571=IKsin(j4);
IkReal x10572=(gconst4*r11);
IkReal x10573=(gconst5*r10);
IkReal x10574=(gconst5*r00);
IkReal x10575=(gconst5*r20);
IkReal x10576=((1.0)*x10570);
IkReal x10577=(gconst4*x10570);
IkReal x10578=((1.0)*x10571);
IkReal x10579=(gconst4*x10571);
evalcond[0]=(((x10570*x10572))+(((-1.0)*x10573*x10576))+((r12*x10571)));
evalcond[1]=((((-1.0)*r22*x10576))+(((-1.0)*x10575*x10578))+((r21*x10579)));
evalcond[2]=(((r01*x10579))+(((-1.0)*x10574*x10578))+(((-1.0)*r02*x10576)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10576))+((x10571*x10572))+(((-1.0)*x10573*x10578)));
evalcond[4]=(((cj2*sj1))+((r01*x10577))+((cj1*sj2))+(((-1.0)*x10574*x10576))+((r02*x10571)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10575*x10576))+((r21*x10577))+((r22*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10580=((1.0)*gconst5);
CheckValue<IkReal> x10581 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10580))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10581.valid){
continue;
}
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10580))+(((-1.0)*gconst4*r20)))),-1);
if(!x10582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10581.value)+(((1.5707963267949)*(x10582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10583=IKcos(j4);
IkReal x10584=IKsin(j4);
IkReal x10585=(gconst4*r11);
IkReal x10586=(gconst5*r10);
IkReal x10587=(gconst5*r00);
IkReal x10588=(gconst5*r20);
IkReal x10589=((1.0)*x10583);
IkReal x10590=(gconst4*x10583);
IkReal x10591=((1.0)*x10584);
IkReal x10592=(gconst4*x10584);
evalcond[0]=(((r12*x10584))+((x10583*x10585))+(((-1.0)*x10586*x10589)));
evalcond[1]=(((r21*x10592))+(((-1.0)*r22*x10589))+(((-1.0)*x10588*x10591)));
evalcond[2]=((((-1.0)*x10587*x10591))+((r01*x10592))+(((-1.0)*r02*x10589)));
evalcond[3]=((-1.0)+((x10584*x10585))+(((-1.0)*r12*x10589))+(((-1.0)*x10586*x10591)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10587*x10589))+((cj1*sj2))+((r01*x10590))+((r02*x10584)));
evalcond[5]=(((r21*x10590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10584))+(((-1.0)*x10588*x10589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10593=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10593.valid){
continue;
}
CheckValue<IkReal> x10594 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10593.value)))+(x10594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10595=IKcos(j4);
IkReal x10596=IKsin(j4);
IkReal x10597=(gconst4*r11);
IkReal x10598=(gconst5*r10);
IkReal x10599=(gconst5*r00);
IkReal x10600=(gconst5*r20);
IkReal x10601=((1.0)*x10595);
IkReal x10602=(gconst4*x10595);
IkReal x10603=((1.0)*x10596);
IkReal x10604=(gconst4*x10596);
evalcond[0]=((((-1.0)*x10598*x10601))+((r12*x10596))+((x10595*x10597)));
evalcond[1]=((((-1.0)*x10600*x10603))+((r21*x10604))+(((-1.0)*r22*x10601)));
evalcond[2]=(((r01*x10604))+(((-1.0)*r02*x10601))+(((-1.0)*x10599*x10603)));
evalcond[3]=((-1.0)+(((-1.0)*x10598*x10603))+((x10596*x10597))+(((-1.0)*r12*x10601)));
evalcond[4]=(((r01*x10602))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10599*x10601))+((r02*x10596)));
evalcond[5]=((((-1.0)*x10600*x10601))+((r21*x10602))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10605=((-1.0)*r21);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(x10605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
IkReal x10606=((1.0)*(x10608.value));
IkReal x10607=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10606)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10606)));
IkReal gconst4=(x10605*x10607);
IkReal gconst5=((1.0)*r20*x10607);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10609=((-1.0)*r21);
CheckValue<IkReal> x10612 = IKatan2WithCheck(IkReal(x10609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10612.valid){
continue;
}
IkReal x10610=((1.0)*(x10612.value));
IkReal x10611=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10610)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10610)));
IkReal gconst4=(x10609*x10611);
IkReal gconst5=((1.0)*r20*x10611);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10613=((-1.0)*r21);
CheckValue<IkReal> x10616 = IKatan2WithCheck(IkReal(x10613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10616.valid){
continue;
}
IkReal x10614=((1.0)*(x10616.value));
IkReal x10615=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10614)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10614)));
IkReal gconst4=(x10613*x10615);
IkReal gconst5=((1.0)*r20*x10615);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10617=(gconst5*r10);
IkReal x10618=(gconst4*r11);
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(IKsign(((x10618*x10618)+(r12*r12)+(((-2.0)*x10617*x10618))+(x10617*x10617))),-1);
if(!x10619.valid){
continue;
}
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(((((-1.0)*x10617))+x10618)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10619.value)))+(x10620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10621=IKcos(j4);
IkReal x10622=IKsin(j4);
IkReal x10623=(gconst5*r10);
IkReal x10624=(gconst5*r00);
IkReal x10625=(gconst5*r20);
IkReal x10626=((1.0)*x10621);
IkReal x10627=(gconst4*x10622);
IkReal x10628=(gconst4*x10621);
IkReal x10629=((1.0)*x10622);
evalcond[0]=((((-1.0)*x10623*x10626))+((r11*x10628))+((r12*x10622)));
evalcond[1]=(((r21*x10627))+(((-1.0)*x10625*x10629))+(((-1.0)*r22*x10626)));
evalcond[2]=((((-1.0)*r02*x10626))+(((-1.0)*x10624*x10629))+((r01*x10627)));
evalcond[3]=((-1.0)+(((-1.0)*x10623*x10629))+(((-1.0)*r12*x10626))+((r11*x10627)));
evalcond[4]=(((r21*x10628))+((cj2*sj1))+(((-1.0)*x10625*x10626))+((cj1*sj2))+((r22*x10622)));
evalcond[5]=((((-1.0)*x10624*x10626))+(((-1.0)*sj1*sj2))+((r01*x10628))+((r02*x10622))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10630=((1.0)*gconst5);
CheckValue<IkReal> x10631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10630))+(((-1.0)*gconst4*r20)))),-1);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10630))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10631.value)))+(x10632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j4);
IkReal x10634=IKsin(j4);
IkReal x10635=(gconst5*r10);
IkReal x10636=(gconst5*r00);
IkReal x10637=(gconst5*r20);
IkReal x10638=((1.0)*x10633);
IkReal x10639=(gconst4*x10634);
IkReal x10640=(gconst4*x10633);
IkReal x10641=((1.0)*x10634);
evalcond[0]=((((-1.0)*x10635*x10638))+((r11*x10640))+((r12*x10634)));
evalcond[1]=((((-1.0)*r22*x10638))+(((-1.0)*x10637*x10641))+((r21*x10639)));
evalcond[2]=((((-1.0)*r02*x10638))+((r01*x10639))+(((-1.0)*x10636*x10641)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10638))+((r11*x10639))+(((-1.0)*x10635*x10641)));
evalcond[4]=(((r21*x10640))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10637*x10638))+((r22*x10634)));
evalcond[5]=(((r01*x10640))+(((-1.0)*sj1*sj2))+(((-1.0)*x10636*x10638))+((r02*x10634))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10642=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10642.valid){
continue;
}
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10642.value)))+(x10643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10644=IKcos(j4);
IkReal x10645=IKsin(j4);
IkReal x10646=(gconst5*r10);
IkReal x10647=(gconst5*r00);
IkReal x10648=(gconst5*r20);
IkReal x10649=((1.0)*x10644);
IkReal x10650=(gconst4*x10645);
IkReal x10651=(gconst4*x10644);
IkReal x10652=((1.0)*x10645);
evalcond[0]=((((-1.0)*x10646*x10649))+((r11*x10651))+((r12*x10645)));
evalcond[1]=((((-1.0)*r22*x10649))+((r21*x10650))+(((-1.0)*x10648*x10652)));
evalcond[2]=((((-1.0)*x10647*x10652))+(((-1.0)*r02*x10649))+((r01*x10650)));
evalcond[3]=((-1.0)+(((-1.0)*x10646*x10652))+(((-1.0)*r12*x10649))+((r11*x10650)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10648*x10649))+((r22*x10645))+((r21*x10651)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10647*x10649))+((r02*x10645))+((cj1*cj2))+((r01*x10651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10653=((-1.0)*r21);
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(x10653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
IkReal x10654=((1.0)*(x10656.value));
IkReal x10655=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10654)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10654)));
IkReal gconst4=(x10653*x10655);
IkReal gconst5=((1.0)*r20*x10655);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10657=((-1.0)*r21);
CheckValue<IkReal> x10660 = IKatan2WithCheck(IkReal(x10657),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10660.valid){
continue;
}
IkReal x10658=((1.0)*(x10660.value));
IkReal x10659=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10658)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10658)));
IkReal gconst4=(x10657*x10659);
IkReal gconst5=((1.0)*r20*x10659);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10661=((-1.0)*r21);
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(x10661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
IkReal x10662=((1.0)*(x10664.value));
IkReal x10663=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10662)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10662)));
IkReal gconst4=(x10661*x10663);
IkReal gconst5=((1.0)*r20*x10663);
IkReal x10665=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(x10665,-1);
if(!x10669.valid){
continue;
}
IkReal x10666=x10669.value;
IkReal x10667=((1.0)*x10666);
IkReal x10668=((((-1.0)*x10667*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10666))+(((-1.0)*x10667*(r10*r10)*(r20*r20))));
j4eval[0]=x10668;
j4eval[1]=r12;
j4eval[2]=x10665;
j4eval[3]=IKsign(x10668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10670=(gconst5*r10);
IkReal x10671=(gconst4*r11);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(((((-1.0)*x10671))+x10670)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
CheckValue<IkReal> x10673=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10671*x10671)))+(((-1.0)*(x10670*x10670)))+(((2.0)*x10670*x10671))+(((-1.0)*(r12*r12))))),-1);
if(!x10673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10672.value)+(((1.5707963267949)*(x10673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10674=IKsin(j4);
IkReal x10675=IKcos(j4);
IkReal x10676=(gconst4*r11);
IkReal x10677=(gconst5*r10);
IkReal x10678=(gconst5*r00);
IkReal x10679=(gconst5*r20);
IkReal x10680=((1.0)*x10675);
IkReal x10681=(gconst4*x10674);
IkReal x10682=((1.0)*x10674);
evalcond[0]=((((-1.0)*r22*x10680))+(((-1.0)*x10679*x10682))+((r21*x10681)));
evalcond[1]=((((-1.0)*x10678*x10682))+(((-1.0)*r02*x10680))+((r01*x10681)));
evalcond[2]=((((-1.0)*r12*x10682))+(((-1.0)*x10676*x10680))+((x10675*x10677)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10680))+(((-1.0)*x10677*x10682))+((x10674*x10676)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10682))+((cj1*sj2))+((x10675*x10679))+(((-1.0)*gconst4*r21*x10680)));
evalcond[5]=((((-1.0)*gconst4*r01*x10680))+(((-1.0)*r02*x10682))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10675*x10678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10683=((1.0)*gconst5);
CheckValue<IkReal> x10684 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10684.valid){
continue;
}
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10683))+(((-1.0)*gconst4*r20)))),-1);
if(!x10685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10684.value)+(((1.5707963267949)*(x10685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10686=IKsin(j4);
IkReal x10687=IKcos(j4);
IkReal x10688=(gconst4*r11);
IkReal x10689=(gconst5*r10);
IkReal x10690=(gconst5*r00);
IkReal x10691=(gconst5*r20);
IkReal x10692=((1.0)*x10687);
IkReal x10693=(gconst4*x10686);
IkReal x10694=((1.0)*x10686);
evalcond[0]=(((r21*x10693))+(((-1.0)*x10691*x10694))+(((-1.0)*r22*x10692)));
evalcond[1]=((((-1.0)*x10690*x10694))+(((-1.0)*r02*x10692))+((r01*x10693)));
evalcond[2]=((((-1.0)*r12*x10694))+((x10687*x10689))+(((-1.0)*x10688*x10692)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10692))+((x10686*x10688))+(((-1.0)*x10689*x10694)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10692))+((cj1*sj2))+(((-1.0)*r22*x10694))+((x10687*x10691)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10694))+(((-1.0)*gconst4*r01*x10692))+((cj1*cj2))+((x10687*x10690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10695=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10695.valid){
continue;
}
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10695.value)))+(x10696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10697=IKsin(j4);
IkReal x10698=IKcos(j4);
IkReal x10699=(gconst4*r11);
IkReal x10700=(gconst5*r10);
IkReal x10701=(gconst5*r00);
IkReal x10702=(gconst5*r20);
IkReal x10703=((1.0)*x10698);
IkReal x10704=(gconst4*x10697);
IkReal x10705=((1.0)*x10697);
evalcond[0]=((((-1.0)*r22*x10703))+(((-1.0)*x10702*x10705))+((r21*x10704)));
evalcond[1]=(((r01*x10704))+(((-1.0)*r02*x10703))+(((-1.0)*x10701*x10705)));
evalcond[2]=((((-1.0)*r12*x10705))+(((-1.0)*x10699*x10703))+((x10698*x10700)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10703))+((x10697*x10699))+(((-1.0)*x10700*x10705)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10703))+((cj1*sj2))+(((-1.0)*r22*x10705))+((x10698*x10702)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10698*x10701))+(((-1.0)*gconst4*r01*x10703))+(((-1.0)*r02*x10705))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10706=((-1.0)*r21);
IkReal x10707=((-1.0)*px);
CheckValue<IkReal> x10709 = IKatan2WithCheck(IkReal(x10706),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10709.valid){
continue;
}
IkReal x10708=((1.0)*(x10709.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10708)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10707);
rxp1_1=(px*r21);
rxp1_2=(r11*x10707);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10708)));
IkReal gconst4=x10706;
IkReal gconst5=((1.0)*r20);
IkReal x10710=((1.0)*cj3);
IkReal x10711=(r10*r20);
IkReal x10712=(r11*r21);
j4eval[0]=((((-1.0)*x10711))+(((-1.0)*x10712)));
j4eval[1]=((((-1.0)*x10710*x10712))+(((-1.0)*x10710*x10711)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10713=((-1.0)*r21);
IkReal x10714=((-1.0)*px);
CheckValue<IkReal> x10716 = IKatan2WithCheck(IkReal(x10713),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10716.valid){
continue;
}
IkReal x10715=((1.0)*(x10716.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10715)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10714);
rxp1_1=(px*r21);
rxp1_2=(r11*x10714);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10715)));
IkReal gconst4=x10713;
IkReal gconst5=((1.0)*r20);
IkReal x10717=((1.0)*r11*r21);
IkReal x10718=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10717))+(((-1.0)*x10718)));
j4eval[1]=(((sj3*x10717))+((sj3*x10718)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10719=((-1.0)*r21);
IkReal x10720=((-1.0)*px);
CheckValue<IkReal> x10722 = IKatan2WithCheck(IkReal(x10719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10722.valid){
continue;
}
IkReal x10721=((1.0)*(x10722.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10721)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10720);
rxp1_1=(px*r21);
rxp1_2=(r11*x10720);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10721)));
IkReal gconst4=x10719;
IkReal gconst5=((1.0)*r20);
IkReal x10723=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10723))+(((-1.0)*r10*r20*x10723)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10724=((1.0)*r10);
CheckValue<IkReal> x10725=IKPowWithIntegerCheck(cj3,-1);
if(!x10725.valid){
continue;
}
CheckValue<IkReal> x10726=IKPowWithIntegerCheck(r02,-1);
if(!x10726.valid){
continue;
}
CheckValue<IkReal> x10727=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10724))),-1);
if(!x10727.valid){
continue;
}
if( IKabs(((x10725.value)*(x10726.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10727.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10724)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10725.value)*(x10726.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10727.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10724))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10725.value)*(x10726.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10727.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10724))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10728=IKsin(j4);
IkReal x10729=IKcos(j4);
IkReal x10730=(cj2*sj1);
IkReal x10731=(cj1*sj2);
IkReal x10732=(gconst5*sj3);
IkReal x10733=(gconst4*r11);
IkReal x10734=(sj1*sj2);
IkReal x10735=((1.0)*gconst5);
IkReal x10736=(cj1*cj2);
IkReal x10737=(gconst4*r21);
IkReal x10738=(cj3*gconst4);
IkReal x10739=(gconst4*sj3);
IkReal x10740=(cj3*gconst5);
IkReal x10741=(r20*x10729);
IkReal x10742=(r10*x10729);
IkReal x10743=(cj3*x10729);
IkReal x10744=(r02*x10728);
IkReal x10745=(x10730+x10731);
IkReal x10746=((1.0)*sj3*x10729);
evalcond[0]=((-1.0)*r02*x10729);
evalcond[1]=((((-1.0)*r20*x10728*x10735))+((x10728*x10737)));
evalcond[2]=(((cj3*x10744))+(((-1.0)*x10734))+x10736);
evalcond[3]=((((-1.0)*sj3*x10744))+x10745);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10728*x10735))+((x10728*x10733)));
evalcond[5]=(((r10*x10739))+((x10733*x10743))+(((-1.0)*cj3*x10735*x10742))+((r11*x10732)));
evalcond[6]=(((r10*x10738))+(((-1.0)*x10733*x10746))+((x10732*x10742))+((r11*x10740)));
evalcond[7]=(((x10737*x10743))+((r21*x10732))+((r20*x10739))+(((-1.0)*cj3*x10735*x10741))+x10745);
evalcond[8]=((((-1.0)*x10737*x10746))+((x10732*x10741))+((r20*x10738))+(((-1.0)*x10736))+x10734+((r21*x10740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10747=((1.0)*gconst5);
IkReal x10748=(gconst4*r11);
CheckValue<IkReal> x10749=IKPowWithIntegerCheck(((((-1.0)*r10*x10747))+x10748),-1);
if(!x10749.valid){
continue;
}
CheckValue<IkReal> x10750=IKPowWithIntegerCheck(((((-1.0)*sj3*x10748))+((gconst5*r10*sj3))),-1);
if(!x10750.valid){
continue;
}
if( IKabs(x10749.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10750.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10747)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10749.value)+IKsqr(((x10750.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10747))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10749.value, ((x10750.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10747))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10751=IKsin(j4);
IkReal x10752=IKcos(j4);
IkReal x10753=(cj2*sj1);
IkReal x10754=(cj1*sj2);
IkReal x10755=(gconst5*sj3);
IkReal x10756=(gconst4*r11);
IkReal x10757=(sj1*sj2);
IkReal x10758=((1.0)*gconst5);
IkReal x10759=(cj1*cj2);
IkReal x10760=(gconst4*r21);
IkReal x10761=(cj3*gconst4);
IkReal x10762=(gconst4*sj3);
IkReal x10763=(cj3*gconst5);
IkReal x10764=(r20*x10752);
IkReal x10765=(r10*x10752);
IkReal x10766=(cj3*x10752);
IkReal x10767=(r02*x10751);
IkReal x10768=(x10753+x10754);
IkReal x10769=((1.0)*sj3*x10752);
evalcond[0]=((-1.0)*r02*x10752);
evalcond[1]=(((x10751*x10760))+(((-1.0)*r20*x10751*x10758)));
evalcond[2]=(((cj3*x10767))+x10759+(((-1.0)*x10757)));
evalcond[3]=((((-1.0)*sj3*x10767))+x10768);
evalcond[4]=((-1.0)+((x10751*x10756))+(((-1.0)*r10*x10751*x10758)));
evalcond[5]=((((-1.0)*cj3*x10758*x10765))+((r11*x10755))+((x10756*x10766))+((r10*x10762)));
evalcond[6]=(((r11*x10763))+((x10755*x10765))+((r10*x10761))+(((-1.0)*x10756*x10769)));
evalcond[7]=(((r20*x10762))+((x10760*x10766))+(((-1.0)*cj3*x10758*x10764))+x10768+((r21*x10755)));
evalcond[8]=(((r20*x10761))+((r21*x10763))+((x10755*x10764))+(((-1.0)*x10760*x10769))+x10757+(((-1.0)*x10759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10770=((1.0)*sj3);
IkReal x10771=(gconst4*r11);
IkReal x10772=((1.0)*gconst5*r10);
CheckValue<IkReal> x10773=IKPowWithIntegerCheck(((((-1.0)*x10772))+x10771),-1);
if(!x10773.valid){
continue;
}
CheckValue<IkReal> x10774=IKPowWithIntegerCheck((((cj3*x10771))+(((-1.0)*cj3*x10772))),-1);
if(!x10774.valid){
continue;
}
if( IKabs(x10773.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10774.value)*(((((-1.0)*gconst4*r10*x10770))+(((-1.0)*gconst5*r11*x10770)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10773.value)+IKsqr(((x10774.value)*(((((-1.0)*gconst4*r10*x10770))+(((-1.0)*gconst5*r11*x10770))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10773.value, ((x10774.value)*(((((-1.0)*gconst4*r10*x10770))+(((-1.0)*gconst5*r11*x10770))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10775=IKsin(j4);
IkReal x10776=IKcos(j4);
IkReal x10777=(cj2*sj1);
IkReal x10778=(cj1*sj2);
IkReal x10779=(gconst5*sj3);
IkReal x10780=(gconst4*r11);
IkReal x10781=(sj1*sj2);
IkReal x10782=((1.0)*gconst5);
IkReal x10783=(cj1*cj2);
IkReal x10784=(gconst4*r21);
IkReal x10785=(cj3*gconst4);
IkReal x10786=(gconst4*sj3);
IkReal x10787=(cj3*gconst5);
IkReal x10788=(r20*x10776);
IkReal x10789=(r10*x10776);
IkReal x10790=(cj3*x10776);
IkReal x10791=(r02*x10775);
IkReal x10792=(x10777+x10778);
IkReal x10793=((1.0)*sj3*x10776);
evalcond[0]=((-1.0)*r02*x10776);
evalcond[1]=(((x10775*x10784))+(((-1.0)*r20*x10775*x10782)));
evalcond[2]=((((-1.0)*x10781))+((cj3*x10791))+x10783);
evalcond[3]=((((-1.0)*sj3*x10791))+x10792);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10775*x10782))+((x10775*x10780)));
evalcond[5]=((((-1.0)*cj3*x10782*x10789))+((r11*x10779))+((x10780*x10790))+((r10*x10786)));
evalcond[6]=(((r11*x10787))+((x10779*x10789))+(((-1.0)*x10780*x10793))+((r10*x10785)));
evalcond[7]=((((-1.0)*cj3*x10782*x10788))+((x10784*x10790))+((r20*x10786))+((r21*x10779))+x10792);
evalcond[8]=(((r21*x10787))+((x10779*x10788))+((r20*x10785))+(((-1.0)*x10784*x10793))+(((-1.0)*x10783))+x10781);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10794=gconst4*gconst4;
IkReal x10795=gconst5*gconst5;
IkReal x10796=(r10*r21);
IkReal x10797=((1.0)*cj3);
IkReal x10798=(r11*r21);
IkReal x10799=(r11*r20);
IkReal x10800=(r22*sj3);
IkReal x10801=(gconst4*r10);
IkReal x10802=((1.0)*sj3);
IkReal x10803=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10797))+(((-1.0)*r10*r20*x10795*x10797))+(((-1.0)*x10794*x10797*x10798))+((x10799*x10803))+((x10796*x10803)))),-1);
if(!x10804.valid){
continue;
}
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal((((gconst5*r11*x10800))+((x10800*x10801)))),IkReal(((((-1.0)*gconst5*r20*x10801*x10802))+((sj3*x10794*x10796))+(((-1.0)*x10795*x10799*x10802))+((gconst4*gconst5*sj3*x10798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10804.value)))+(x10805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10806=IKsin(j4);
IkReal x10807=IKcos(j4);
IkReal x10808=(cj2*sj1);
IkReal x10809=(cj1*sj2);
IkReal x10810=(gconst5*sj3);
IkReal x10811=(gconst4*r11);
IkReal x10812=(sj1*sj2);
IkReal x10813=(gconst5*r10);
IkReal x10814=(cj1*cj2);
IkReal x10815=(gconst4*r01);
IkReal x10816=(gconst4*r21);
IkReal x10817=(gconst5*r00);
IkReal x10818=(gconst4*sj3);
IkReal x10819=(cj3*gconst5);
IkReal x10820=(cj3*gconst4);
IkReal x10821=((1.0)*x10807);
IkReal x10822=((1.0)*x10806);
IkReal x10823=(cj3*x10806);
IkReal x10824=(cj3*x10807);
IkReal x10825=(x10808+x10809);
evalcond[0]=(((x10806*x10816))+(((-1.0)*gconst5*r20*x10822))+(((-1.0)*r22*x10821)));
evalcond[1]=((((-1.0)*r02*x10821))+((x10806*x10815))+(((-1.0)*x10817*x10822)));
evalcond[2]=((-1.0)+(((-1.0)*x10813*x10822))+(((-1.0)*r12*x10821))+((x10806*x10811)));
evalcond[3]=(((r12*x10823))+((x10811*x10824))+(((-1.0)*cj3*x10813*x10821))+((r10*x10818))+((r11*x10810)));
evalcond[4]=(((r10*x10807*x10810))+((r10*x10820))+(((-1.0)*r12*sj3*x10822))+(((-1.0)*sj3*x10811*x10821))+((r11*x10819)));
evalcond[5]=(((x10816*x10824))+(((-1.0)*r20*x10819*x10821))+((r20*x10818))+((r22*x10823))+((r21*x10810))+x10825);
evalcond[6]=((((-1.0)*x10812))+((r02*x10823))+((x10815*x10824))+((r01*x10810))+((r00*x10818))+(((-1.0)*cj3*x10817*x10821))+x10814);
evalcond[7]=(((r00*x10807*x10810))+(((-1.0)*r02*sj3*x10822))+(((-1.0)*sj3*x10815*x10821))+((r01*x10819))+((r00*x10820))+x10825);
evalcond[8]=((((-1.0)*x10814))+(((-1.0)*sj3*x10816*x10821))+((r20*x10807*x10810))+(((-1.0)*r22*sj3*x10822))+((r20*x10820))+((r21*x10819))+x10812);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10826=((1.0)*gconst5);
CheckValue<IkReal> x10827 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10827.valid){
continue;
}
CheckValue<IkReal> x10828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10826))+(((-1.0)*gconst4*r20)))),-1);
if(!x10828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10827.value)+(((1.5707963267949)*(x10828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10829=IKsin(j4);
IkReal x10830=IKcos(j4);
IkReal x10831=(cj2*sj1);
IkReal x10832=(cj1*sj2);
IkReal x10833=(gconst5*sj3);
IkReal x10834=(gconst4*r11);
IkReal x10835=(sj1*sj2);
IkReal x10836=(gconst5*r10);
IkReal x10837=(cj1*cj2);
IkReal x10838=(gconst4*r01);
IkReal x10839=(gconst4*r21);
IkReal x10840=(gconst5*r00);
IkReal x10841=(gconst4*sj3);
IkReal x10842=(cj3*gconst5);
IkReal x10843=(cj3*gconst4);
IkReal x10844=((1.0)*x10830);
IkReal x10845=((1.0)*x10829);
IkReal x10846=(cj3*x10829);
IkReal x10847=(cj3*x10830);
IkReal x10848=(x10832+x10831);
evalcond[0]=((((-1.0)*r22*x10844))+(((-1.0)*gconst5*r20*x10845))+((x10829*x10839)));
evalcond[1]=((((-1.0)*r02*x10844))+(((-1.0)*x10840*x10845))+((x10829*x10838)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10844))+(((-1.0)*x10836*x10845))+((x10829*x10834)));
evalcond[3]=((((-1.0)*cj3*x10836*x10844))+((r12*x10846))+((r10*x10841))+((x10834*x10847))+((r11*x10833)));
evalcond[4]=((((-1.0)*sj3*x10834*x10844))+((r11*x10842))+((r10*x10830*x10833))+(((-1.0)*r12*sj3*x10845))+((r10*x10843)));
evalcond[5]=(((r22*x10846))+(((-1.0)*r20*x10842*x10844))+((x10839*x10847))+((r20*x10841))+((r21*x10833))+x10848);
evalcond[6]=((((-1.0)*x10835))+((x10838*x10847))+((r00*x10841))+(((-1.0)*cj3*x10840*x10844))+((r02*x10846))+((r01*x10833))+x10837);
evalcond[7]=(((r01*x10842))+((r00*x10843))+(((-1.0)*r02*sj3*x10845))+((r00*x10830*x10833))+(((-1.0)*sj3*x10838*x10844))+x10848);
evalcond[8]=((((-1.0)*x10837))+(((-1.0)*r22*sj3*x10845))+(((-1.0)*sj3*x10839*x10844))+((r20*x10830*x10833))+((r21*x10842))+((r20*x10843))+x10835);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10849=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10849.valid){
continue;
}
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10849.value)))+(x10850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10851=IKsin(j4);
IkReal x10852=IKcos(j4);
IkReal x10853=(cj2*sj1);
IkReal x10854=(cj1*sj2);
IkReal x10855=(gconst5*sj3);
IkReal x10856=(gconst4*r11);
IkReal x10857=(sj1*sj2);
IkReal x10858=(gconst5*r10);
IkReal x10859=(cj1*cj2);
IkReal x10860=(gconst4*r01);
IkReal x10861=(gconst4*r21);
IkReal x10862=(gconst5*r00);
IkReal x10863=(gconst4*sj3);
IkReal x10864=(cj3*gconst5);
IkReal x10865=(cj3*gconst4);
IkReal x10866=((1.0)*x10852);
IkReal x10867=((1.0)*x10851);
IkReal x10868=(cj3*x10851);
IkReal x10869=(cj3*x10852);
IkReal x10870=(x10854+x10853);
evalcond[0]=((((-1.0)*r22*x10866))+(((-1.0)*gconst5*r20*x10867))+((x10851*x10861)));
evalcond[1]=((((-1.0)*x10862*x10867))+((x10851*x10860))+(((-1.0)*r02*x10866)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10866))+(((-1.0)*x10858*x10867))+((x10851*x10856)));
evalcond[3]=(((r11*x10855))+(((-1.0)*cj3*x10858*x10866))+((x10856*x10869))+((r12*x10868))+((r10*x10863)));
evalcond[4]=(((r11*x10864))+((r10*x10865))+(((-1.0)*r12*sj3*x10867))+(((-1.0)*sj3*x10856*x10866))+((r10*x10852*x10855)));
evalcond[5]=(((r21*x10855))+((r20*x10863))+(((-1.0)*r20*x10864*x10866))+((r22*x10868))+((x10861*x10869))+x10870);
evalcond[6]=((((-1.0)*cj3*x10862*x10866))+((x10860*x10869))+((r01*x10855))+((r00*x10863))+(((-1.0)*x10857))+((r02*x10868))+x10859);
evalcond[7]=(((r00*x10852*x10855))+(((-1.0)*sj3*x10860*x10866))+((r00*x10865))+((r01*x10864))+(((-1.0)*r02*sj3*x10867))+x10870);
evalcond[8]=((((-1.0)*r22*sj3*x10867))+((r21*x10864))+(((-1.0)*sj3*x10861*x10866))+((r20*x10865))+((r20*x10852*x10855))+(((-1.0)*x10859))+x10857);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10871=((-1.0)*r21);
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(x10871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
IkReal x10872=((1.0)*(x10874.value));
IkReal x10873=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10872)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10872)));
IkReal gconst4=(x10871*x10873);
IkReal gconst5=((1.0)*r20*x10873);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10875=((-1.0)*r21);
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(x10875),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
IkReal x10876=((1.0)*(x10878.value));
IkReal x10877=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10876)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10876)));
IkReal gconst4=(x10875*x10877);
IkReal gconst5=((1.0)*r20*x10877);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10879=((-1.0)*r21);
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(x10879),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
IkReal x10880=((1.0)*(x10882.value));
IkReal x10881=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10880)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10880)));
IkReal gconst4=(x10879*x10881);
IkReal gconst5=((1.0)*r20*x10881);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10883=((-1.0)*r21);
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal(x10883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
IkReal x10884=((1.0)*(x10886.value));
IkReal x10885=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10884)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10884)));
IkReal gconst4=(x10883*x10885);
IkReal gconst5=((1.0)*r20*x10885);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10887=((-1.0)*r21);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(x10887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=(x10887*x10889);
IkReal gconst5=((1.0)*r20*x10889);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10891=((-1.0)*r21);
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(x10891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10892=((1.0)*(x10894.value));
IkReal x10893=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10892)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst4=(x10891*x10893);
IkReal gconst5=((1.0)*r20*x10893);
IkReal x10895=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10899=IKPowWithIntegerCheck(x10895,-1);
if(!x10899.valid){
continue;
}
IkReal x10896=x10899.value;
IkReal x10897=((1.0)*x10896);
IkReal x10898=((((-1.0)*(r02*r02)))+(((-1.0)*x10897*(r01*r01)*(r21*r21)))+(((-1.0)*x10897*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10896)));
j4eval[0]=x10898;
j4eval[1]=r02;
j4eval[2]=x10895;
j4eval[3]=IKsign(x10898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10900=(gconst5*r00);
IkReal x10901=(gconst4*r01);
CheckValue<IkReal> x10902=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10900*x10900)))+(((-1.0)*(x10901*x10901)))+(((2.0)*x10900*x10901)))),-1);
if(!x10902.valid){
continue;
}
CheckValue<IkReal> x10903 = IKatan2WithCheck(IkReal(((((-1.0)*x10901))+x10900)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10902.value)))+(x10903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10904=IKsin(j4);
IkReal x10905=IKcos(j4);
IkReal x10906=(gconst4*r11);
IkReal x10907=((1.0)*cj1);
IkReal x10908=(gconst5*r10);
IkReal x10909=(gconst4*r01);
IkReal x10910=(gconst5*r00);
IkReal x10911=(gconst4*r21);
IkReal x10912=(gconst5*r20);
IkReal x10913=((1.0)*x10905);
IkReal x10914=((1.0)*x10904);
evalcond[0]=((((-1.0)*r22*x10913))+(((-1.0)*x10912*x10914))+((x10904*x10911)));
evalcond[1]=((((-1.0)*x10908*x10914))+(((-1.0)*r12*x10913))+((x10904*x10906)));
evalcond[2]=((((-1.0)*r02*x10914))+(((-1.0)*x10909*x10913))+((x10905*x10910)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10913))+(((-1.0)*x10910*x10914))+((x10904*x10909)));
evalcond[4]=((((-1.0)*r22*x10914))+((sj1*sj2))+(((-1.0)*x10911*x10913))+(((-1.0)*cj2*x10907))+((x10905*x10912)));
evalcond[5]=((((-1.0)*r12*x10914))+(((-1.0)*cj2*sj1))+(((-1.0)*x10906*x10913))+((x10905*x10908))+(((-1.0)*sj2*x10907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10915=((1.0)*gconst5);
CheckValue<IkReal> x10916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10915))+(((-1.0)*gconst4*r10)))),-1);
if(!x10916.valid){
continue;
}
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10915))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10916.value)))+(x10917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10918=IKsin(j4);
IkReal x10919=IKcos(j4);
IkReal x10920=(gconst4*r11);
IkReal x10921=((1.0)*cj1);
IkReal x10922=(gconst5*r10);
IkReal x10923=(gconst4*r01);
IkReal x10924=(gconst5*r00);
IkReal x10925=(gconst4*r21);
IkReal x10926=(gconst5*r20);
IkReal x10927=((1.0)*x10919);
IkReal x10928=((1.0)*x10918);
evalcond[0]=((((-1.0)*r22*x10927))+((x10918*x10925))+(((-1.0)*x10926*x10928)));
evalcond[1]=((((-1.0)*r12*x10927))+((x10918*x10920))+(((-1.0)*x10922*x10928)));
evalcond[2]=((((-1.0)*r02*x10928))+((x10919*x10924))+(((-1.0)*x10923*x10927)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10927))+(((-1.0)*x10924*x10928))+((x10918*x10923)));
evalcond[4]=((((-1.0)*r22*x10928))+((sj1*sj2))+(((-1.0)*cj2*x10921))+(((-1.0)*x10925*x10927))+((x10919*x10926)));
evalcond[5]=((((-1.0)*x10920*x10927))+(((-1.0)*sj2*x10921))+(((-1.0)*r12*x10928))+(((-1.0)*cj2*sj1))+((x10919*x10922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
CheckValue<IkReal> x10930=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10929.value)+(((1.5707963267949)*(x10930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10931=IKsin(j4);
IkReal x10932=IKcos(j4);
IkReal x10933=(gconst4*r11);
IkReal x10934=((1.0)*cj1);
IkReal x10935=(gconst5*r10);
IkReal x10936=(gconst4*r01);
IkReal x10937=(gconst5*r00);
IkReal x10938=(gconst4*r21);
IkReal x10939=(gconst5*r20);
IkReal x10940=((1.0)*x10932);
IkReal x10941=((1.0)*x10931);
evalcond[0]=(((x10931*x10938))+(((-1.0)*x10939*x10941))+(((-1.0)*r22*x10940)));
evalcond[1]=(((x10931*x10933))+(((-1.0)*x10935*x10941))+(((-1.0)*r12*x10940)));
evalcond[2]=((((-1.0)*x10936*x10940))+((x10932*x10937))+(((-1.0)*r02*x10941)));
evalcond[3]=((-1.0)+((x10931*x10936))+(((-1.0)*r02*x10940))+(((-1.0)*x10937*x10941)));
evalcond[4]=(((x10932*x10939))+((sj1*sj2))+(((-1.0)*r22*x10941))+(((-1.0)*cj2*x10934))+(((-1.0)*x10938*x10940)));
evalcond[5]=(((x10932*x10935))+(((-1.0)*cj2*sj1))+(((-1.0)*x10933*x10940))+(((-1.0)*r12*x10941))+(((-1.0)*sj2*x10934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10942=((-1.0)*r21);
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(x10942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
IkReal x10943=((1.0)*(x10945.value));
IkReal x10944=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10943)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10943)));
IkReal gconst4=(x10942*x10944);
IkReal gconst5=((1.0)*r20*x10944);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10946=((-1.0)*r21);
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal(x10946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
IkReal x10947=((1.0)*(x10949.value));
IkReal x10948=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10947)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10947)));
IkReal gconst4=(x10946*x10948);
IkReal gconst5=((1.0)*r20*x10948);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10950=((-1.0)*r21);
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(x10950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
IkReal x10951=((1.0)*(x10953.value));
IkReal x10952=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10951)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10951)));
IkReal gconst4=(x10950*x10952);
IkReal gconst5=((1.0)*r20*x10952);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10954=(gconst4*r01);
IkReal x10955=(gconst5*r00);
CheckValue<IkReal> x10956=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10954*x10955))+(x10955*x10955)+(x10954*x10954)+(r02*r02))),-1);
if(!x10956.valid){
continue;
}
CheckValue<IkReal> x10957 = IKatan2WithCheck(IkReal(((((-1.0)*x10955))+x10954)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10956.value)))+(x10957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10958=IKcos(j4);
IkReal x10959=IKsin(j4);
IkReal x10960=(gconst4*r11);
IkReal x10961=(gconst5*r10);
IkReal x10962=((1.0)*cj1);
IkReal x10963=(gconst5*r00);
IkReal x10964=(gconst5*r20);
IkReal x10965=((1.0)*x10958);
IkReal x10966=(gconst4*x10958);
IkReal x10967=((1.0)*x10959);
IkReal x10968=(gconst4*x10959);
evalcond[0]=(((r02*x10959))+((r01*x10966))+(((-1.0)*x10963*x10965)));
evalcond[1]=((((-1.0)*r22*x10965))+((r21*x10968))+(((-1.0)*x10964*x10967)));
evalcond[2]=((((-1.0)*x10961*x10967))+((x10959*x10960))+(((-1.0)*r12*x10965)));
evalcond[3]=((-1.0)+((r01*x10968))+(((-1.0)*x10963*x10967))+(((-1.0)*r02*x10965)));
evalcond[4]=(((r22*x10959))+((sj1*sj2))+((r21*x10966))+(((-1.0)*x10964*x10965))+(((-1.0)*cj2*x10962)));
evalcond[5]=((((-1.0)*x10961*x10965))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10962))+((x10958*x10960))+((r12*x10959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10969=((1.0)*gconst5);
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10969))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
CheckValue<IkReal> x10971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10969))+(((-1.0)*gconst4*r10)))),-1);
if(!x10971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10970.value)+(((1.5707963267949)*(x10971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10972=IKcos(j4);
IkReal x10973=IKsin(j4);
IkReal x10974=(gconst4*r11);
IkReal x10975=(gconst5*r10);
IkReal x10976=((1.0)*cj1);
IkReal x10977=(gconst5*r00);
IkReal x10978=(gconst5*r20);
IkReal x10979=((1.0)*x10972);
IkReal x10980=(gconst4*x10972);
IkReal x10981=((1.0)*x10973);
IkReal x10982=(gconst4*x10973);
evalcond[0]=(((r02*x10973))+((r01*x10980))+(((-1.0)*x10977*x10979)));
evalcond[1]=(((r21*x10982))+(((-1.0)*r22*x10979))+(((-1.0)*x10978*x10981)));
evalcond[2]=((((-1.0)*x10975*x10981))+((x10973*x10974))+(((-1.0)*r12*x10979)));
evalcond[3]=((-1.0)+((r01*x10982))+(((-1.0)*x10977*x10981))+(((-1.0)*r02*x10979)));
evalcond[4]=((((-1.0)*cj2*x10976))+((r21*x10980))+((r22*x10973))+((sj1*sj2))+(((-1.0)*x10978*x10979)));
evalcond[5]=(((x10972*x10974))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10976))+((r12*x10973))+(((-1.0)*x10975*x10979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10983 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10983.valid){
continue;
}
CheckValue<IkReal> x10984=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10983.value)+(((1.5707963267949)*(x10984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10985=IKcos(j4);
IkReal x10986=IKsin(j4);
IkReal x10987=(gconst4*r11);
IkReal x10988=(gconst5*r10);
IkReal x10989=((1.0)*cj1);
IkReal x10990=(gconst5*r00);
IkReal x10991=(gconst5*r20);
IkReal x10992=((1.0)*x10985);
IkReal x10993=(gconst4*x10985);
IkReal x10994=((1.0)*x10986);
IkReal x10995=(gconst4*x10986);
evalcond[0]=(((r01*x10993))+(((-1.0)*x10990*x10992))+((r02*x10986)));
evalcond[1]=(((r21*x10995))+(((-1.0)*x10991*x10994))+(((-1.0)*r22*x10992)));
evalcond[2]=(((x10986*x10987))+(((-1.0)*x10988*x10994))+(((-1.0)*r12*x10992)));
evalcond[3]=((-1.0)+((r01*x10995))+(((-1.0)*x10990*x10994))+(((-1.0)*r02*x10992)));
evalcond[4]=(((r22*x10986))+((r21*x10993))+(((-1.0)*x10991*x10992))+(((-1.0)*cj2*x10989))+((sj1*sj2)));
evalcond[5]=(((r12*x10986))+(((-1.0)*sj2*x10989))+((x10985*x10987))+(((-1.0)*x10988*x10992))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10996=((-1.0)*r21);
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(x10996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
IkReal x10997=((1.0)*(x10999.value));
IkReal x10998=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10997)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10997)));
IkReal gconst4=(x10996*x10998);
IkReal gconst5=((1.0)*r20*x10998);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11000=((-1.0)*r21);
CheckValue<IkReal> x11003 = IKatan2WithCheck(IkReal(x11000),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11003.valid){
continue;
}
IkReal x11001=((1.0)*(x11003.value));
IkReal x11002=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11001)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11001)));
IkReal gconst4=(x11000*x11002);
IkReal gconst5=((1.0)*r20*x11002);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11004=((-1.0)*r21);
CheckValue<IkReal> x11007 = IKatan2WithCheck(IkReal(x11004),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11007.valid){
continue;
}
IkReal x11005=((1.0)*(x11007.value));
IkReal x11006=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11005)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11005)));
IkReal gconst4=(x11004*x11006);
IkReal gconst5=((1.0)*r20*x11006);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11008=(gconst4*r01);
IkReal x11009=(gconst5*r00);
CheckValue<IkReal> x11010=IKPowWithIntegerCheck(IKsign(((x11008*x11008)+(((-2.0)*x11008*x11009))+(r02*r02)+(x11009*x11009))),-1);
if(!x11010.valid){
continue;
}
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal((x11008+(((-1.0)*x11009)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11010.value)))+(x11011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11012=IKcos(j4);
IkReal x11013=IKsin(j4);
IkReal x11014=(gconst4*r11);
IkReal x11015=(gconst5*r10);
IkReal x11016=(gconst5*r00);
IkReal x11017=(gconst5*r20);
IkReal x11018=((1.0)*x11012);
IkReal x11019=(gconst4*x11012);
IkReal x11020=((1.0)*x11013);
IkReal x11021=(gconst4*x11013);
evalcond[0]=(((r01*x11019))+(((-1.0)*x11016*x11018))+((r02*x11013)));
evalcond[1]=((((-1.0)*r22*x11018))+((r21*x11021))+(((-1.0)*x11017*x11020)));
evalcond[2]=((((-1.0)*x11015*x11020))+((x11013*x11014))+(((-1.0)*r12*x11018)));
evalcond[3]=((-1.0)+((r01*x11021))+(((-1.0)*r02*x11018))+(((-1.0)*x11016*x11020)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11013))+((r21*x11019))+(((-1.0)*x11017*x11018)));
evalcond[5]=((((-1.0)*x11015*x11018))+((x11012*x11014))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11022=((1.0)*gconst5);
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11022))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
CheckValue<IkReal> x11024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11022))+(((-1.0)*gconst4*r10)))),-1);
if(!x11024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11023.value)+(((1.5707963267949)*(x11024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11025=IKcos(j4);
IkReal x11026=IKsin(j4);
IkReal x11027=(gconst4*r11);
IkReal x11028=(gconst5*r10);
IkReal x11029=(gconst5*r00);
IkReal x11030=(gconst5*r20);
IkReal x11031=((1.0)*x11025);
IkReal x11032=(gconst4*x11025);
IkReal x11033=((1.0)*x11026);
IkReal x11034=(gconst4*x11026);
evalcond[0]=(((r01*x11032))+(((-1.0)*x11029*x11031))+((r02*x11026)));
evalcond[1]=(((r21*x11034))+(((-1.0)*r22*x11031))+(((-1.0)*x11030*x11033)));
evalcond[2]=((((-1.0)*x11028*x11033))+((x11026*x11027))+(((-1.0)*r12*x11031)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11031))+((r01*x11034))+(((-1.0)*x11029*x11033)));
evalcond[4]=(((cj2*sj1))+((r21*x11032))+((cj1*sj2))+((r22*x11026))+(((-1.0)*x11030*x11031)));
evalcond[5]=((((-1.0)*x11028*x11031))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11025*x11027))+((r12*x11026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
CheckValue<IkReal> x11036=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11035.value)+(((1.5707963267949)*(x11036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11037=IKcos(j4);
IkReal x11038=IKsin(j4);
IkReal x11039=(gconst4*r11);
IkReal x11040=(gconst5*r10);
IkReal x11041=(gconst5*r00);
IkReal x11042=(gconst5*r20);
IkReal x11043=((1.0)*x11037);
IkReal x11044=(gconst4*x11037);
IkReal x11045=((1.0)*x11038);
IkReal x11046=(gconst4*x11038);
evalcond[0]=((((-1.0)*x11041*x11043))+((r01*x11044))+((r02*x11038)));
evalcond[1]=((((-1.0)*r22*x11043))+(((-1.0)*x11042*x11045))+((r21*x11046)));
evalcond[2]=((((-1.0)*r12*x11043))+(((-1.0)*x11040*x11045))+((x11038*x11039)));
evalcond[3]=((-1.0)+(((-1.0)*x11041*x11045))+((r01*x11046))+(((-1.0)*r02*x11043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11042*x11043))+((r22*x11038))+((r21*x11044)));
evalcond[5]=(((x11037*x11039))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11038))+(((-1.0)*x11040*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11047=((-1.0)*r21);
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(x11047),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
IkReal x11048=((1.0)*(x11050.value));
IkReal x11049=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11048)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11048)));
IkReal gconst4=(x11047*x11049);
IkReal gconst5=((1.0)*r20*x11049);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11051=((-1.0)*r21);
CheckValue<IkReal> x11054 = IKatan2WithCheck(IkReal(x11051),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11054.valid){
continue;
}
IkReal x11052=((1.0)*(x11054.value));
IkReal x11053=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11052)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11052)));
IkReal gconst4=(x11051*x11053);
IkReal gconst5=((1.0)*r20*x11053);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11055=((-1.0)*r21);
CheckValue<IkReal> x11058 = IKatan2WithCheck(IkReal(x11055),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11058.valid){
continue;
}
IkReal x11056=((1.0)*(x11058.value));
IkReal x11057=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11056)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11056)));
IkReal gconst4=(x11055*x11057);
IkReal gconst5=((1.0)*r20*x11057);
IkReal x11059=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11063=IKPowWithIntegerCheck(x11059,-1);
if(!x11063.valid){
continue;
}
IkReal x11060=x11063.value;
IkReal x11061=((1.0)*x11060);
IkReal x11062=((((-1.0)*x11061*(r01*r01)*(r21*r21)))+(((-1.0)*x11061*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11060))+(((-1.0)*(r02*r02))));
j4eval[0]=x11062;
j4eval[1]=r02;
j4eval[2]=x11059;
j4eval[3]=IKsign(x11062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11064=(gconst5*r00);
IkReal x11065=(gconst4*r01);
CheckValue<IkReal> x11066 = IKatan2WithCheck(IkReal((x11064+(((-1.0)*x11065)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11066.valid){
continue;
}
CheckValue<IkReal> x11067=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11064*x11064)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11065*x11065)))+(((2.0)*x11064*x11065)))),-1);
if(!x11067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11066.value)+(((1.5707963267949)*(x11067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11068=IKsin(j4);
IkReal x11069=IKcos(j4);
IkReal x11070=(gconst4*r11);
IkReal x11071=(gconst5*r10);
IkReal x11072=(gconst4*r01);
IkReal x11073=(gconst5*r00);
IkReal x11074=(gconst4*r21);
IkReal x11075=(gconst5*r20);
IkReal x11076=((1.0)*x11069);
IkReal x11077=((1.0)*x11068);
evalcond[0]=((((-1.0)*x11075*x11077))+((x11068*x11074))+(((-1.0)*r22*x11076)));
evalcond[1]=((((-1.0)*x11071*x11077))+((x11068*x11070))+(((-1.0)*r12*x11076)));
evalcond[2]=((((-1.0)*x11072*x11076))+((x11069*x11073))+(((-1.0)*r02*x11077)));
evalcond[3]=((-1.0)+(((-1.0)*x11073*x11077))+(((-1.0)*r02*x11076))+((x11068*x11072)));
evalcond[4]=(((cj2*sj1))+((x11069*x11075))+((cj1*sj2))+(((-1.0)*x11074*x11076))+(((-1.0)*r22*x11077)));
evalcond[5]=(((x11069*x11071))+(((-1.0)*x11070*x11076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11078=((1.0)*gconst5);
CheckValue<IkReal> x11079 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11078))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11079.valid){
continue;
}
CheckValue<IkReal> x11080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11078))+(((-1.0)*gconst4*r10)))),-1);
if(!x11080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11079.value)+(((1.5707963267949)*(x11080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11081=IKsin(j4);
IkReal x11082=IKcos(j4);
IkReal x11083=(gconst4*r11);
IkReal x11084=(gconst5*r10);
IkReal x11085=(gconst4*r01);
IkReal x11086=(gconst5*r00);
IkReal x11087=(gconst4*r21);
IkReal x11088=(gconst5*r20);
IkReal x11089=((1.0)*x11082);
IkReal x11090=((1.0)*x11081);
evalcond[0]=((((-1.0)*r22*x11089))+((x11081*x11087))+(((-1.0)*x11088*x11090)));
evalcond[1]=(((x11081*x11083))+(((-1.0)*x11084*x11090))+(((-1.0)*r12*x11089)));
evalcond[2]=(((x11082*x11086))+(((-1.0)*r02*x11090))+(((-1.0)*x11085*x11089)));
evalcond[3]=((-1.0)+(((-1.0)*x11086*x11090))+(((-1.0)*r02*x11089))+((x11081*x11085)));
evalcond[4]=(((cj2*sj1))+((x11082*x11088))+(((-1.0)*r22*x11090))+((cj1*sj2))+(((-1.0)*x11087*x11089)));
evalcond[5]=((((-1.0)*r12*x11090))+((x11082*x11084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11083*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11091.value)+(((1.5707963267949)*(x11092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11093=IKsin(j4);
IkReal x11094=IKcos(j4);
IkReal x11095=(gconst4*r11);
IkReal x11096=(gconst5*r10);
IkReal x11097=(gconst4*r01);
IkReal x11098=(gconst5*r00);
IkReal x11099=(gconst4*r21);
IkReal x11100=(gconst5*r20);
IkReal x11101=((1.0)*x11094);
IkReal x11102=((1.0)*x11093);
evalcond[0]=(((x11093*x11099))+(((-1.0)*x11100*x11102))+(((-1.0)*r22*x11101)));
evalcond[1]=(((x11093*x11095))+(((-1.0)*x11096*x11102))+(((-1.0)*r12*x11101)));
evalcond[2]=((((-1.0)*x11097*x11101))+(((-1.0)*r02*x11102))+((x11094*x11098)));
evalcond[3]=((-1.0)+(((-1.0)*x11098*x11102))+((x11093*x11097))+(((-1.0)*r02*x11101)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11094*x11100))+(((-1.0)*x11099*x11101))+(((-1.0)*r22*x11102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11102))+((x11094*x11096))+(((-1.0)*x11095*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11103=gconst4*gconst4;
IkReal x11104=gconst5*gconst5;
IkReal x11105=(r01*r20);
IkReal x11106=(gconst4*sj3);
IkReal x11107=(r01*r21);
IkReal x11108=((1.0)*cj3);
IkReal x11109=(r00*r21);
IkReal x11110=(r00*r20);
IkReal x11111=(cj3*gconst4*gconst5);
IkReal x11112=((1.0)*x11104);
CheckValue<IkReal> x11113 = IKatan2WithCheck(IkReal((((r00*r22*x11106))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11105*x11112))+(((-1.0)*gconst5*x11106*x11110))+((sj3*x11103*x11109))+((gconst5*x11106*x11107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11113.valid){
continue;
}
CheckValue<IkReal> x11114=IKPowWithIntegerCheck(IKsign((((x11105*x11111))+(((-1.0)*x11104*x11108*x11110))+(((-1.0)*r02*r22*x11108))+((x11109*x11111))+(((-1.0)*x11103*x11107*x11108)))),-1);
if(!x11114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11113.value)+(((1.5707963267949)*(x11114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11115=IKsin(j4);
IkReal x11116=IKcos(j4);
IkReal x11117=(sj1*sj2);
IkReal x11118=(gconst5*sj3);
IkReal x11119=(gconst4*r11);
IkReal x11120=(gconst5*r10);
IkReal x11121=((1.0)*cj1);
IkReal x11122=(gconst4*r01);
IkReal x11123=(cj2*sj1);
IkReal x11124=(gconst5*r00);
IkReal x11125=(gconst4*sj3);
IkReal x11126=(cj3*gconst5);
IkReal x11127=(cj3*gconst4);
IkReal x11128=(gconst4*r21);
IkReal x11129=(cj2*x11121);
IkReal x11130=((1.0)*x11116);
IkReal x11131=((1.0)*x11115);
IkReal x11132=(cj3*x11115);
IkReal x11133=(cj3*x11116);
evalcond[0]=(((x11115*x11128))+(((-1.0)*r22*x11130))+(((-1.0)*gconst5*r20*x11131)));
evalcond[1]=((((-1.0)*x11120*x11131))+(((-1.0)*r12*x11130))+((x11115*x11119)));
evalcond[2]=((-1.0)+((x11115*x11122))+(((-1.0)*x11124*x11131))+(((-1.0)*r02*x11130)));
evalcond[3]=(((r02*x11132))+((x11122*x11133))+(((-1.0)*cj3*x11124*x11130))+((r00*x11125))+((r01*x11118)));
evalcond[4]=((((-1.0)*r02*sj3*x11131))+((r00*x11116*x11118))+(((-1.0)*sj3*x11122*x11130))+((r00*x11127))+((r01*x11126)));
evalcond[5]=(((r22*x11132))+((cj1*sj2))+(((-1.0)*r20*x11126*x11130))+x11123+((r21*x11118))+((r21*x11116*x11127))+((r20*x11125)));
evalcond[6]=((((-1.0)*cj3*x11120*x11130))+(((-1.0)*x11129))+((r10*x11125))+x11117+((x11119*x11133))+((r11*x11118))+((r12*x11132)));
evalcond[7]=((((-1.0)*x11129))+((r21*x11126))+x11117+(((-1.0)*r22*sj3*x11131))+((r20*x11116*x11118))+(((-1.0)*r21*x11125*x11130))+((r20*x11127)));
evalcond[8]=((((-1.0)*x11123))+(((-1.0)*r12*sj3*x11131))+((r10*x11127))+((r11*x11126))+((r10*x11116*x11118))+(((-1.0)*sj2*x11121))+(((-1.0)*sj3*x11119*x11130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11134=((1.0)*gconst5);
CheckValue<IkReal> x11135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11134))+(((-1.0)*gconst4*r10)))),-1);
if(!x11135.valid){
continue;
}
CheckValue<IkReal> x11136 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11134))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11135.value)))+(x11136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11137=IKsin(j4);
IkReal x11138=IKcos(j4);
IkReal x11139=(sj1*sj2);
IkReal x11140=(gconst5*sj3);
IkReal x11141=(gconst4*r11);
IkReal x11142=(gconst5*r10);
IkReal x11143=((1.0)*cj1);
IkReal x11144=(gconst4*r01);
IkReal x11145=(cj2*sj1);
IkReal x11146=(gconst5*r00);
IkReal x11147=(gconst4*sj3);
IkReal x11148=(cj3*gconst5);
IkReal x11149=(cj3*gconst4);
IkReal x11150=(gconst4*r21);
IkReal x11151=(cj2*x11143);
IkReal x11152=((1.0)*x11138);
IkReal x11153=((1.0)*x11137);
IkReal x11154=(cj3*x11137);
IkReal x11155=(cj3*x11138);
evalcond[0]=((((-1.0)*gconst5*r20*x11153))+((x11137*x11150))+(((-1.0)*r22*x11152)));
evalcond[1]=((((-1.0)*x11142*x11153))+((x11137*x11141))+(((-1.0)*r12*x11152)));
evalcond[2]=((-1.0)+((x11137*x11144))+(((-1.0)*r02*x11152))+(((-1.0)*x11146*x11153)));
evalcond[3]=(((r01*x11140))+((r00*x11147))+((r02*x11154))+(((-1.0)*cj3*x11146*x11152))+((x11144*x11155)));
evalcond[4]=(((r01*x11148))+((r00*x11149))+(((-1.0)*sj3*x11144*x11152))+(((-1.0)*r02*sj3*x11153))+((r00*x11138*x11140)));
evalcond[5]=(((r22*x11154))+((r21*x11140))+((cj1*sj2))+((r21*x11138*x11149))+x11145+((r20*x11147))+(((-1.0)*r20*x11148*x11152)));
evalcond[6]=(((r11*x11140))+x11139+((r12*x11154))+((r10*x11147))+(((-1.0)*cj3*x11142*x11152))+((x11141*x11155))+(((-1.0)*x11151)));
evalcond[7]=(((r21*x11148))+(((-1.0)*r21*x11147*x11152))+((r20*x11138*x11140))+x11139+((r20*x11149))+(((-1.0)*r22*sj3*x11153))+(((-1.0)*x11151)));
evalcond[8]=((((-1.0)*sj3*x11141*x11152))+(((-1.0)*r12*sj3*x11153))+(((-1.0)*x11145))+((r11*x11148))+((r10*x11149))+(((-1.0)*sj2*x11143))+((r10*x11138*x11140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
CheckValue<IkReal> x11157=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11156.value)+(((1.5707963267949)*(x11157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11158=IKsin(j4);
IkReal x11159=IKcos(j4);
IkReal x11160=(sj1*sj2);
IkReal x11161=(gconst5*sj3);
IkReal x11162=(gconst4*r11);
IkReal x11163=(gconst5*r10);
IkReal x11164=((1.0)*cj1);
IkReal x11165=(gconst4*r01);
IkReal x11166=(cj2*sj1);
IkReal x11167=(gconst5*r00);
IkReal x11168=(gconst4*sj3);
IkReal x11169=(cj3*gconst5);
IkReal x11170=(cj3*gconst4);
IkReal x11171=(gconst4*r21);
IkReal x11172=(cj2*x11164);
IkReal x11173=((1.0)*x11159);
IkReal x11174=((1.0)*x11158);
IkReal x11175=(cj3*x11158);
IkReal x11176=(cj3*x11159);
evalcond[0]=(((x11158*x11171))+(((-1.0)*r22*x11173))+(((-1.0)*gconst5*r20*x11174)));
evalcond[1]=((((-1.0)*x11163*x11174))+((x11158*x11162))+(((-1.0)*r12*x11173)));
evalcond[2]=((-1.0)+(((-1.0)*x11167*x11174))+((x11158*x11165))+(((-1.0)*r02*x11173)));
evalcond[3]=(((r01*x11161))+((r00*x11168))+((x11165*x11176))+(((-1.0)*cj3*x11167*x11173))+((r02*x11175)));
evalcond[4]=(((r01*x11169))+((r00*x11170))+(((-1.0)*sj3*x11165*x11173))+(((-1.0)*r02*sj3*x11174))+((r00*x11159*x11161)));
evalcond[5]=(((r20*x11168))+((cj1*sj2))+x11166+(((-1.0)*r20*x11169*x11173))+((r22*x11175))+((r21*x11161))+((r21*x11159*x11170)));
evalcond[6]=(((r12*x11175))+((r11*x11161))+(((-1.0)*x11172))+((x11162*x11176))+x11160+((r10*x11168))+(((-1.0)*cj3*x11163*x11173)));
evalcond[7]=((((-1.0)*r22*sj3*x11174))+((r20*x11159*x11161))+((r20*x11170))+(((-1.0)*x11172))+x11160+(((-1.0)*r21*x11168*x11173))+((r21*x11169)));
evalcond[8]=((((-1.0)*sj2*x11164))+((r11*x11169))+(((-1.0)*x11166))+(((-1.0)*r12*sj3*x11174))+((r10*x11170))+((r10*x11159*x11161))+(((-1.0)*sj3*x11162*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11177=((-1.0)*r21);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(x11177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11178)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst4=(x11177*x11179);
IkReal gconst5=((1.0)*r20*x11179);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11181=((-1.0)*r21);
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal(x11181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
IkReal x11182=((1.0)*(x11184.value));
IkReal x11183=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11182)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11182)));
IkReal gconst4=(x11181*x11183);
IkReal gconst5=((1.0)*r20*x11183);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11185=((-1.0)*r21);
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal(x11185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
IkReal x11186=((1.0)*(x11188.value));
IkReal x11187=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11186)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11186)));
IkReal gconst4=(x11185*x11187);
IkReal gconst5=((1.0)*r20*x11187);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11189=((-1.0)*r21);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11190=((1.0)*(x11192.value));
IkReal x11191=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11190)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11190)));
IkReal gconst4=(x11189*x11191);
IkReal gconst5=((1.0)*r20*x11191);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11193=((-1.0)*r21);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11194=((1.0)*(x11196.value));
IkReal x11195=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11194)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11194)));
IkReal gconst4=(x11193*x11195);
IkReal gconst5=((1.0)*r20*x11195);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11197=((-1.0)*r21);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11198=((1.0)*(x11200.value));
IkReal x11199=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11198)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11198)));
IkReal gconst4=(x11197*x11199);
IkReal gconst5=((1.0)*r20*x11199);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11201=(gconst5*r00);
IkReal x11202=(gconst4*r01);
CheckValue<IkReal> x11203=IKPowWithIntegerCheck(IKsign(((x11201*x11201)+(((-2.0)*x11201*x11202))+(x11202*x11202)+(r02*r02))),-1);
if(!x11203.valid){
continue;
}
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal((x11201+(((-1.0)*x11202)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11203.value)))+(x11204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11205=IKsin(j4);
IkReal x11206=IKcos(j4);
IkReal x11207=(gconst4*r11);
IkReal x11208=(gconst5*r10);
IkReal x11209=(gconst4*r01);
IkReal x11210=(gconst5*r00);
IkReal x11211=(gconst4*r21);
IkReal x11212=(gconst5*r20);
IkReal x11213=((1.0)*x11206);
IkReal x11214=((1.0)*x11205);
evalcond[0]=(((x11205*x11211))+(((-1.0)*x11212*x11214))+(((-1.0)*r22*x11213)));
evalcond[1]=(((x11205*x11207))+(((-1.0)*r12*x11213))+(((-1.0)*x11208*x11214)));
evalcond[2]=((((-1.0)*x11209*x11213))+((x11206*x11210))+(((-1.0)*r02*x11214)));
evalcond[3]=((1.0)+((x11205*x11209))+(((-1.0)*r02*x11213))+(((-1.0)*x11210*x11214)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11206*x11208))+(((-1.0)*r12*x11214))+(((-1.0)*x11207*x11213)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11206*x11212))+(((-1.0)*x11211*x11213))+(((-1.0)*r22*x11214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11215=((1.0)*gconst5);
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11215))+(((-1.0)*gconst4*r20)))),-1);
if(!x11216.valid){
continue;
}
CheckValue<IkReal> x11217 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11216.value)))+(x11217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11218=IKsin(j4);
IkReal x11219=IKcos(j4);
IkReal x11220=(gconst4*r11);
IkReal x11221=(gconst5*r10);
IkReal x11222=(gconst4*r01);
IkReal x11223=(gconst5*r00);
IkReal x11224=(gconst4*r21);
IkReal x11225=(gconst5*r20);
IkReal x11226=((1.0)*x11219);
IkReal x11227=((1.0)*x11218);
evalcond[0]=((((-1.0)*x11225*x11227))+((x11218*x11224))+(((-1.0)*r22*x11226)));
evalcond[1]=(((x11218*x11220))+(((-1.0)*x11221*x11227))+(((-1.0)*r12*x11226)));
evalcond[2]=((((-1.0)*x11222*x11226))+((x11219*x11223))+(((-1.0)*r02*x11227)));
evalcond[3]=((1.0)+(((-1.0)*x11223*x11227))+((x11218*x11222))+(((-1.0)*r02*x11226)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11220*x11226))+((x11219*x11221))+(((-1.0)*r12*x11227)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11224*x11226))+((x11219*x11225))+(((-1.0)*r22*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11228.valid){
continue;
}
CheckValue<IkReal> x11229 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11228.value)))+(x11229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11230=IKsin(j4);
IkReal x11231=IKcos(j4);
IkReal x11232=(gconst4*r11);
IkReal x11233=(gconst5*r10);
IkReal x11234=(gconst4*r01);
IkReal x11235=(gconst5*r00);
IkReal x11236=(gconst4*r21);
IkReal x11237=(gconst5*r20);
IkReal x11238=((1.0)*x11231);
IkReal x11239=((1.0)*x11230);
evalcond[0]=((((-1.0)*x11237*x11239))+((x11230*x11236))+(((-1.0)*r22*x11238)));
evalcond[1]=((((-1.0)*x11233*x11239))+((x11230*x11232))+(((-1.0)*r12*x11238)));
evalcond[2]=((((-1.0)*r02*x11239))+((x11231*x11235))+(((-1.0)*x11234*x11238)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11238))+((x11230*x11234))+(((-1.0)*x11235*x11239)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11232*x11238))+((x11231*x11233))+(((-1.0)*r12*x11239)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11231*x11237))+(((-1.0)*r22*x11239))+(((-1.0)*x11236*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11240=((-1.0)*r21);
CheckValue<IkReal> x11243 = IKatan2WithCheck(IkReal(x11240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11243.valid){
continue;
}
IkReal x11241=((1.0)*(x11243.value));
IkReal x11242=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11241)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11241)));
IkReal gconst4=(x11240*x11242);
IkReal gconst5=((1.0)*r20*x11242);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11244=((-1.0)*r21);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(x11244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11245=((1.0)*(x11247.value));
IkReal x11246=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11245)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11245)));
IkReal gconst4=(x11244*x11246);
IkReal gconst5=((1.0)*r20*x11246);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11248=((-1.0)*r21);
CheckValue<IkReal> x11251 = IKatan2WithCheck(IkReal(x11248),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11251.valid){
continue;
}
IkReal x11249=((1.0)*(x11251.value));
IkReal x11250=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11249)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11249)));
IkReal gconst4=(x11248*x11250);
IkReal gconst5=((1.0)*r20*x11250);
IkReal x11252=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(x11252,-1);
if(!x11256.valid){
continue;
}
IkReal x11253=x11256.value;
IkReal x11254=((1.0)*x11253);
IkReal x11255=((((-2.0)*r00*r01*r20*r21*x11253))+(((-1.0)*x11254*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11254*(r01*r01)*(r21*r21))));
j4eval[0]=x11255;
j4eval[1]=IKsign(x11255);
j4eval[2]=r02;
j4eval[3]=x11252;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11257=(gconst4*r01);
IkReal x11258=(gconst5*r00);
CheckValue<IkReal> x11259=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11258*x11258)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11257*x11257)))+(((2.0)*x11257*x11258)))),-1);
if(!x11259.valid){
continue;
}
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(((((-1.0)*x11258))+x11257)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11259.value)))+(x11260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11261=IKcos(j4);
IkReal x11262=IKsin(j4);
IkReal x11263=(gconst4*r11);
IkReal x11264=(gconst5*r10);
IkReal x11265=(gconst5*r00);
IkReal x11266=(gconst5*r20);
IkReal x11267=((1.0)*x11261);
IkReal x11268=(gconst4*x11261);
IkReal x11269=((1.0)*x11262);
IkReal x11270=(gconst4*x11262);
evalcond[0]=(((r02*x11262))+(((-1.0)*x11265*x11267))+((r01*x11268)));
evalcond[1]=(((r21*x11270))+(((-1.0)*r22*x11267))+(((-1.0)*x11266*x11269)));
evalcond[2]=(((x11262*x11263))+(((-1.0)*r12*x11267))+(((-1.0)*x11264*x11269)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11267))+((r01*x11270))+(((-1.0)*x11265*x11269)));
evalcond[4]=(((cj2*sj1))+((x11261*x11263))+((cj1*sj2))+(((-1.0)*x11264*x11267))+((r12*x11262)));
evalcond[5]=(((r21*x11268))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11262))+(((-1.0)*x11266*x11267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11271=((1.0)*gconst5);
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11271))+(((-1.0)*gconst4*r20)))),-1);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11272.value)))+(x11273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11274=IKcos(j4);
IkReal x11275=IKsin(j4);
IkReal x11276=(gconst4*r11);
IkReal x11277=(gconst5*r10);
IkReal x11278=(gconst5*r00);
IkReal x11279=(gconst5*r20);
IkReal x11280=((1.0)*x11274);
IkReal x11281=(gconst4*x11274);
IkReal x11282=((1.0)*x11275);
IkReal x11283=(gconst4*x11275);
evalcond[0]=((((-1.0)*x11278*x11280))+((r02*x11275))+((r01*x11281)));
evalcond[1]=((((-1.0)*r22*x11280))+((r21*x11283))+(((-1.0)*x11279*x11282)));
evalcond[2]=((((-1.0)*r12*x11280))+((x11275*x11276))+(((-1.0)*x11277*x11282)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11280))+(((-1.0)*x11278*x11282))+((r01*x11283)));
evalcond[4]=(((cj2*sj1))+((r12*x11275))+((cj1*sj2))+((x11274*x11276))+(((-1.0)*x11277*x11280)));
evalcond[5]=(((r22*x11275))+((r21*x11281))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11279*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11284.valid){
continue;
}
CheckValue<IkReal> x11285 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11284.value)))+(x11285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11286=IKcos(j4);
IkReal x11287=IKsin(j4);
IkReal x11288=(gconst4*r11);
IkReal x11289=(gconst5*r10);
IkReal x11290=(gconst5*r00);
IkReal x11291=(gconst5*r20);
IkReal x11292=((1.0)*x11286);
IkReal x11293=(gconst4*x11286);
IkReal x11294=((1.0)*x11287);
IkReal x11295=(gconst4*x11287);
evalcond[0]=(((r01*x11293))+((r02*x11287))+(((-1.0)*x11290*x11292)));
evalcond[1]=((((-1.0)*x11291*x11294))+(((-1.0)*r22*x11292))+((r21*x11295)));
evalcond[2]=(((x11287*x11288))+(((-1.0)*x11289*x11294))+(((-1.0)*r12*x11292)));
evalcond[3]=((1.0)+((r01*x11295))+(((-1.0)*r02*x11292))+(((-1.0)*x11290*x11294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11289*x11292))+((r12*x11287))+((x11286*x11288)));
evalcond[5]=(((r22*x11287))+(((-1.0)*x11291*x11292))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11296=((-1.0)*r21);
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal(x11296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
IkReal x11297=((1.0)*(x11299.value));
IkReal x11298=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11297)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11297)));
IkReal gconst4=(x11296*x11298);
IkReal gconst5=((1.0)*r20*x11298);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11300=((-1.0)*r21);
CheckValue<IkReal> x11303 = IKatan2WithCheck(IkReal(x11300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11303.valid){
continue;
}
IkReal x11301=((1.0)*(x11303.value));
IkReal x11302=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11301)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11301)));
IkReal gconst4=(x11300*x11302);
IkReal gconst5=((1.0)*r20*x11302);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11304=((-1.0)*r21);
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(x11304),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
IkReal x11305=((1.0)*(x11307.value));
IkReal x11306=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11305)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11305)));
IkReal gconst4=(x11304*x11306);
IkReal gconst5=((1.0)*r20*x11306);
IkReal x11308=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11312=IKPowWithIntegerCheck(x11308,-1);
if(!x11312.valid){
continue;
}
IkReal x11309=x11312.value;
IkReal x11310=((1.0)*x11309);
IkReal x11311=((((-1.0)*x11310*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11310*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11309)));
j4eval[0]=x11311;
j4eval[1]=IKsign(x11311);
j4eval[2]=r02;
j4eval[3]=x11308;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11313=(gconst4*r01);
IkReal x11314=(gconst5*r00);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal((x11313+(((-1.0)*x11314)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
CheckValue<IkReal> x11316=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11313*x11314))+(((-1.0)*(x11314*x11314)))+(((-1.0)*(x11313*x11313))))),-1);
if(!x11316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11315.value)+(((1.5707963267949)*(x11316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11317=IKcos(j4);
IkReal x11318=IKsin(j4);
IkReal x11319=(gconst5*r10);
IkReal x11320=(gconst5*r00);
IkReal x11321=(gconst5*r20);
IkReal x11322=((1.0)*x11317);
IkReal x11323=(gconst4*x11318);
IkReal x11324=(gconst4*x11317);
IkReal x11325=((1.0)*x11318);
evalcond[0]=(((r02*x11318))+(((-1.0)*x11320*x11322))+((r01*x11324)));
evalcond[1]=((((-1.0)*r22*x11322))+((r21*x11323))+(((-1.0)*x11321*x11325)));
evalcond[2]=((((-1.0)*x11319*x11325))+(((-1.0)*r12*x11322))+((r11*x11323)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11322))+(((-1.0)*x11320*x11325))+((r01*x11323)));
evalcond[4]=(((cj2*sj1))+((r22*x11318))+((cj1*sj2))+((r21*x11324))+(((-1.0)*x11321*x11322)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11319*x11322))+((cj1*cj2))+((r12*x11318))+((r11*x11324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11326=((1.0)*gconst5);
CheckValue<IkReal> x11327 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11326))+(((-1.0)*gconst4*r20)))),-1);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11327.value)+(((1.5707963267949)*(x11328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKcos(j4);
IkReal x11330=IKsin(j4);
IkReal x11331=(gconst5*r10);
IkReal x11332=(gconst5*r00);
IkReal x11333=(gconst5*r20);
IkReal x11334=((1.0)*x11329);
IkReal x11335=(gconst4*x11330);
IkReal x11336=(gconst4*x11329);
IkReal x11337=((1.0)*x11330);
evalcond[0]=((((-1.0)*x11332*x11334))+((r01*x11336))+((r02*x11330)));
evalcond[1]=((((-1.0)*x11333*x11337))+(((-1.0)*r22*x11334))+((r21*x11335)));
evalcond[2]=((((-1.0)*r12*x11334))+((r11*x11335))+(((-1.0)*x11331*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11332*x11337))+((r01*x11335))+(((-1.0)*r02*x11334)));
evalcond[4]=((((-1.0)*x11333*x11334))+((cj2*sj1))+((cj1*sj2))+((r22*x11330))+((r21*x11336)));
evalcond[5]=(((r11*x11336))+((r12*x11330))+(((-1.0)*sj1*sj2))+(((-1.0)*x11331*x11334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11338=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11338.valid){
continue;
}
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11338.value)))+(x11339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11340=IKcos(j4);
IkReal x11341=IKsin(j4);
IkReal x11342=(gconst5*r10);
IkReal x11343=(gconst5*r00);
IkReal x11344=(gconst5*r20);
IkReal x11345=((1.0)*x11340);
IkReal x11346=(gconst4*x11341);
IkReal x11347=(gconst4*x11340);
IkReal x11348=((1.0)*x11341);
evalcond[0]=((((-1.0)*x11343*x11345))+((r01*x11347))+((r02*x11341)));
evalcond[1]=((((-1.0)*r22*x11345))+(((-1.0)*x11344*x11348))+((r21*x11346)));
evalcond[2]=(((r11*x11346))+(((-1.0)*x11342*x11348))+(((-1.0)*r12*x11345)));
evalcond[3]=((1.0)+(((-1.0)*x11343*x11348))+((r01*x11346))+(((-1.0)*r02*x11345)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11341))+(((-1.0)*x11344*x11345))+((r21*x11347)));
evalcond[5]=(((r11*x11347))+(((-1.0)*x11342*x11345))+(((-1.0)*sj1*sj2))+((r12*x11341))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11349=((-1.0)*r21);
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal(x11349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
IkReal x11350=((1.0)*(x11352.value));
IkReal x11351=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11350)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11350)));
IkReal gconst4=(x11349*x11351);
IkReal gconst5=((1.0)*r20*x11351);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11353=((-1.0)*r21);
CheckValue<IkReal> x11356 = IKatan2WithCheck(IkReal(x11353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11356.valid){
continue;
}
IkReal x11354=((1.0)*(x11356.value));
IkReal x11355=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11354)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11354)));
IkReal gconst4=(x11353*x11355);
IkReal gconst5=((1.0)*r20*x11355);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11357=((-1.0)*r21);
CheckValue<IkReal> x11360 = IKatan2WithCheck(IkReal(x11357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11360.valid){
continue;
}
IkReal x11358=((1.0)*(x11360.value));
IkReal x11359=x10151;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11358)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11358)));
IkReal gconst4=(x11357*x11359);
IkReal gconst5=((1.0)*r20*x11359);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11361=(gconst5*r00);
IkReal x11362=(gconst4*r01);
CheckValue<IkReal> x11363=IKPowWithIntegerCheck(IKsign(((x11362*x11362)+(((-2.0)*x11361*x11362))+(x11361*x11361)+(r02*r02))),-1);
if(!x11363.valid){
continue;
}
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(((((-1.0)*x11362))+x11361)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11363.value)))+(x11364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11365=IKsin(j4);
IkReal x11366=IKcos(j4);
IkReal x11367=(gconst4*r11);
IkReal x11368=(gconst5*r10);
IkReal x11369=(gconst5*r00);
IkReal x11370=(gconst5*r20);
IkReal x11371=((1.0)*x11366);
IkReal x11372=(gconst4*x11365);
IkReal x11373=((1.0)*x11365);
evalcond[0]=(((r21*x11372))+(((-1.0)*r22*x11371))+(((-1.0)*x11370*x11373)));
evalcond[1]=((((-1.0)*x11368*x11373))+(((-1.0)*r12*x11371))+((x11365*x11367)));
evalcond[2]=((((-1.0)*gconst4*r01*x11371))+(((-1.0)*r02*x11373))+((x11366*x11369)));
evalcond[3]=((1.0)+((r01*x11372))+(((-1.0)*x11369*x11373))+(((-1.0)*r02*x11371)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11373))+((cj1*sj2))+((x11366*x11370))+(((-1.0)*gconst4*r21*x11371)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11366*x11368))+(((-1.0)*x11367*x11371))+(((-1.0)*r12*x11373))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11374=((1.0)*gconst5);
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11374))+(((-1.0)*gconst4*r20)))),-1);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11374))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11375.value)))+(x11376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11377=IKsin(j4);
IkReal x11378=IKcos(j4);
IkReal x11379=(gconst4*r11);
IkReal x11380=(gconst5*r10);
IkReal x11381=(gconst5*r00);
IkReal x11382=(gconst5*r20);
IkReal x11383=((1.0)*x11378);
IkReal x11384=(gconst4*x11377);
IkReal x11385=((1.0)*x11377);
evalcond[0]=((((-1.0)*x11382*x11385))+(((-1.0)*r22*x11383))+((r21*x11384)));
evalcond[1]=((((-1.0)*x11380*x11385))+((x11377*x11379))+(((-1.0)*r12*x11383)));
evalcond[2]=(((x11378*x11381))+(((-1.0)*r02*x11385))+(((-1.0)*gconst4*r01*x11383)));
evalcond[3]=((1.0)+(((-1.0)*x11381*x11385))+((r01*x11384))+(((-1.0)*r02*x11383)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11383))+((x11378*x11382))+((cj1*sj2))+(((-1.0)*r22*x11385)));
evalcond[5]=(((x11378*x11380))+(((-1.0)*x11379*x11383))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11385))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11386=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11386.valid){
continue;
}
CheckValue<IkReal> x11387 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11386.value)))+(x11387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11388=IKsin(j4);
IkReal x11389=IKcos(j4);
IkReal x11390=(gconst4*r11);
IkReal x11391=(gconst5*r10);
IkReal x11392=(gconst5*r00);
IkReal x11393=(gconst5*r20);
IkReal x11394=((1.0)*x11389);
IkReal x11395=(gconst4*x11388);
IkReal x11396=((1.0)*x11388);
evalcond[0]=((((-1.0)*x11393*x11396))+(((-1.0)*r22*x11394))+((r21*x11395)));
evalcond[1]=((((-1.0)*x11391*x11396))+((x11388*x11390))+(((-1.0)*r12*x11394)));
evalcond[2]=((((-1.0)*gconst4*r01*x11394))+(((-1.0)*r02*x11396))+((x11389*x11392)));
evalcond[3]=((1.0)+(((-1.0)*x11392*x11396))+((r01*x11395))+(((-1.0)*r02*x11394)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11394))+(((-1.0)*r22*x11396))+((x11389*x11393)));
evalcond[5]=((((-1.0)*x11390*x11394))+(((-1.0)*sj1*sj2))+((x11389*x11391))+((cj1*cj2))+(((-1.0)*r12*x11396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11397=((-1.0)*r21);
IkReal x11398=((-1.0)*r20);
CheckValue<IkReal> x11400 = IKatan2WithCheck(IkReal(x11397),IkReal(x11398),IKFAST_ATAN2_MAGTHRESH);
if(!x11400.valid){
continue;
}
IkReal x11399=((1.0)*(x11400.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11399)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11398);
rxp0_2=(py*r00);
rxp1_0=(py*x11397);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11399)));
IkReal gconst4=x11397;
IkReal gconst5=((1.0)*r20);
IkReal x11401=((1.0)*r01*r21);
IkReal x11402=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11401))+(((-1.0)*x11402)));
j4eval[1]=((((-1.0)*cj3*x11402))+(((-1.0)*cj3*x11401)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11403=((-1.0)*r21);
IkReal x11404=((-1.0)*r20);
CheckValue<IkReal> x11406 = IKatan2WithCheck(IkReal(x11403),IkReal(x11404),IKFAST_ATAN2_MAGTHRESH);
if(!x11406.valid){
continue;
}
IkReal x11405=((1.0)*(x11406.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11405)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11404);
rxp0_2=(py*r00);
rxp1_0=(py*x11403);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11405)));
IkReal gconst4=x11403;
IkReal gconst5=((1.0)*r20);
IkReal x11407=((1.0)*r01*r21);
IkReal x11408=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11407))+(((-1.0)*x11408)));
j4eval[1]=(((sj3*x11407))+((sj3*x11408)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11409=((-1.0)*r21);
IkReal x11410=((-1.0)*r20);
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal(x11409),IkReal(x11410),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
IkReal x11411=((1.0)*(x11412.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11411)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11410);
rxp0_2=(py*r00);
rxp1_0=(py*x11409);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11411)));
IkReal gconst4=x11409;
IkReal gconst5=((1.0)*r20);
IkReal x11413=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11413))+(((-1.0)*r00*r20*x11413)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11414=((1.0)*gconst5);
CheckValue<IkReal> x11415=IKPowWithIntegerCheck(cj3,-1);
if(!x11415.valid){
continue;
}
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(r12,-1);
if(!x11416.valid){
continue;
}
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11414))+((cj3*gconst4*r01))),-1);
if(!x11417.valid){
continue;
}
if( IKabs(((x11415.value)*(x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11417.value)*(((((-1.0)*r01*sj3*x11414))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11415.value)*(x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11417.value)*(((((-1.0)*r01*sj3*x11414))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11415.value)*(x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11417.value)*(((((-1.0)*r01*sj3*x11414))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11418=IKsin(j4);
IkReal x11419=IKcos(j4);
IkReal x11420=(cj2*sj1);
IkReal x11421=(cj1*sj2);
IkReal x11422=(sj1*sj2);
IkReal x11423=(gconst5*sj3);
IkReal x11424=(gconst5*r00);
IkReal x11425=(cj3*gconst5);
IkReal x11426=(gconst4*sj3);
IkReal x11427=(cj3*gconst4);
IkReal x11428=(cj1*cj2);
IkReal x11429=((1.0)*x11418);
IkReal x11430=(gconst4*x11418);
IkReal x11431=((1.0)*x11419);
IkReal x11432=(x11421+x11420);
IkReal x11433=(x11419*x11423);
IkReal x11434=(x11419*x11427);
evalcond[0]=((-1.0)*r12*x11419);
evalcond[1]=(((r21*x11430))+(((-1.0)*gconst5*r20*x11429)));
evalcond[2]=(((cj3*r12*x11418))+x11428+(((-1.0)*x11422)));
evalcond[3]=(x11432+(((-1.0)*r12*sj3*x11429)));
evalcond[4]=((1.0)+(((-1.0)*x11424*x11429))+((r01*x11430)));
evalcond[5]=((((-1.0)*cj3*x11424*x11431))+((r01*x11434))+((r01*x11423))+((r00*x11426)));
evalcond[6]=((((-1.0)*r01*x11426*x11431))+((r01*x11425))+((r00*x11427))+((r00*x11433)));
evalcond[7]=(((r20*x11426))+x11432+(((-1.0)*r20*x11425*x11431))+((r21*x11423))+((r21*x11434)));
evalcond[8]=(((r20*x11433))+((r20*x11427))+x11422+((r21*x11425))+(((-1.0)*x11428))+(((-1.0)*r21*x11426*x11431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11435=((1.0)*gconst4);
IkReal x11436=(gconst5*r00);
CheckValue<IkReal> x11437=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11436))),-1);
if(!x11437.valid){
continue;
}
CheckValue<IkReal> x11438=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11435))+((sj3*x11436))),-1);
if(!x11438.valid){
continue;
}
if( IKabs(((-1.0)*(x11437.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11438.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11437.value)))+IKsqr(((x11438.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11435))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11437.value)), ((x11438.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11435))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11439=IKsin(j4);
IkReal x11440=IKcos(j4);
IkReal x11441=(cj2*sj1);
IkReal x11442=(cj1*sj2);
IkReal x11443=(sj1*sj2);
IkReal x11444=(gconst5*sj3);
IkReal x11445=(gconst5*r00);
IkReal x11446=(cj3*gconst5);
IkReal x11447=(gconst4*sj3);
IkReal x11448=(cj3*gconst4);
IkReal x11449=(cj1*cj2);
IkReal x11450=((1.0)*x11439);
IkReal x11451=(gconst4*x11439);
IkReal x11452=((1.0)*x11440);
IkReal x11453=(x11441+x11442);
IkReal x11454=(x11440*x11444);
IkReal x11455=(x11440*x11448);
evalcond[0]=((-1.0)*r12*x11440);
evalcond[1]=(((r21*x11451))+(((-1.0)*gconst5*r20*x11450)));
evalcond[2]=((((-1.0)*x11443))+x11449+((cj3*r12*x11439)));
evalcond[3]=(x11453+(((-1.0)*r12*sj3*x11450)));
evalcond[4]=((1.0)+((r01*x11451))+(((-1.0)*x11445*x11450)));
evalcond[5]=(((r00*x11447))+((r01*x11455))+(((-1.0)*cj3*x11445*x11452))+((r01*x11444)));
evalcond[6]=(((r00*x11448))+(((-1.0)*r01*x11447*x11452))+((r00*x11454))+((r01*x11446)));
evalcond[7]=(x11453+((r21*x11455))+((r20*x11447))+((r21*x11444))+(((-1.0)*r20*x11446*x11452)));
evalcond[8]=((((-1.0)*x11449))+x11443+((r20*x11454))+(((-1.0)*r21*x11447*x11452))+((r20*x11448))+((r21*x11446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11456=((1.0)*gconst5);
IkReal x11457=(gconst4*r01);
CheckValue<IkReal> x11458=IKPowWithIntegerCheck(((((-1.0)*r00*x11456))+x11457),-1);
if(!x11458.valid){
continue;
}
CheckValue<IkReal> x11459=IKPowWithIntegerCheck((((cj3*x11457))+(((-1.0)*cj3*r00*x11456))),-1);
if(!x11459.valid){
continue;
}
if( IKabs(((-1.0)*(x11458.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11459.value)*(((((-1.0)*r01*sj3*x11456))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11458.value)))+IKsqr(((x11459.value)*(((((-1.0)*r01*sj3*x11456))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11458.value)), ((x11459.value)*(((((-1.0)*r01*sj3*x11456))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11460=IKsin(j4);
IkReal x11461=IKcos(j4);
IkReal x11462=(cj2*sj1);
IkReal x11463=(cj1*sj2);
IkReal x11464=(sj1*sj2);
IkReal x11465=(gconst5*sj3);
IkReal x11466=(gconst5*r00);
IkReal x11467=(cj3*gconst5);
IkReal x11468=(gconst4*sj3);
IkReal x11469=(cj3*gconst4);
IkReal x11470=(cj1*cj2);
IkReal x11471=((1.0)*x11460);
IkReal x11472=(gconst4*x11460);
IkReal x11473=((1.0)*x11461);
IkReal x11474=(x11463+x11462);
IkReal x11475=(x11461*x11465);
IkReal x11476=(x11461*x11469);
evalcond[0]=((-1.0)*r12*x11461);
evalcond[1]=((((-1.0)*gconst5*r20*x11471))+((r21*x11472)));
evalcond[2]=(x11470+((cj3*r12*x11460))+(((-1.0)*x11464)));
evalcond[3]=(x11474+(((-1.0)*r12*sj3*x11471)));
evalcond[4]=((1.0)+(((-1.0)*x11466*x11471))+((r01*x11472)));
evalcond[5]=(((r01*x11465))+((r00*x11468))+(((-1.0)*cj3*x11466*x11473))+((r01*x11476)));
evalcond[6]=(((r00*x11475))+((r01*x11467))+(((-1.0)*r01*x11468*x11473))+((r00*x11469)));
evalcond[7]=(x11474+((r20*x11468))+((r21*x11476))+(((-1.0)*r20*x11467*x11473))+((r21*x11465)));
evalcond[8]=((((-1.0)*x11470))+(((-1.0)*r21*x11468*x11473))+x11464+((r20*x11475))+((r20*x11469))+((r21*x11467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11477=gconst4*gconst4;
IkReal x11478=gconst5*gconst5;
IkReal x11479=(r01*r20);
IkReal x11480=(gconst4*sj3);
IkReal x11481=(r01*r21);
IkReal x11482=((1.0)*cj3);
IkReal x11483=(r00*r21);
IkReal x11484=(r00*r20);
IkReal x11485=(cj3*gconst4*gconst5);
IkReal x11486=((1.0)*x11478);
CheckValue<IkReal> x11487=IKPowWithIntegerCheck(IKsign((((x11483*x11485))+((x11479*x11485))+(((-1.0)*r02*r22*x11482))+(((-1.0)*x11477*x11481*x11482))+(((-1.0)*x11478*x11482*x11484)))),-1);
if(!x11487.valid){
continue;
}
CheckValue<IkReal> x11488 = IKatan2WithCheck(IkReal((((r00*r22*x11480))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11480*x11484))+((sj3*x11477*x11483))+((gconst5*x11480*x11481))+(((-1.0)*sj3*x11479*x11486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11487.value)))+(x11488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11489=IKsin(j4);
IkReal x11490=IKcos(j4);
IkReal x11491=(cj2*sj1);
IkReal x11492=(cj1*sj2);
IkReal x11493=(gconst5*sj3);
IkReal x11494=(gconst4*r11);
IkReal x11495=(sj1*sj2);
IkReal x11496=(gconst5*r10);
IkReal x11497=(cj1*cj2);
IkReal x11498=(gconst4*r01);
IkReal x11499=(gconst5*r00);
IkReal x11500=(gconst4*sj3);
IkReal x11501=(cj3*gconst5);
IkReal x11502=(cj3*gconst4);
IkReal x11503=(gconst4*r21);
IkReal x11504=((1.0)*x11490);
IkReal x11505=((1.0)*x11489);
IkReal x11506=(cj3*x11489);
IkReal x11507=(cj3*x11490);
IkReal x11508=(x11492+x11491);
evalcond[0]=(((x11489*x11503))+(((-1.0)*gconst5*r20*x11505))+(((-1.0)*r22*x11504)));
evalcond[1]=((((-1.0)*r12*x11504))+((x11489*x11494))+(((-1.0)*x11496*x11505)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11504))+((x11489*x11498))+(((-1.0)*x11499*x11505)));
evalcond[3]=(((x11498*x11507))+((r00*x11500))+((r01*x11493))+(((-1.0)*cj3*x11499*x11504))+((r02*x11506)));
evalcond[4]=((((-1.0)*r02*sj3*x11505))+((r00*x11490*x11493))+(((-1.0)*sj3*x11498*x11504))+((r00*x11502))+((r01*x11501)));
evalcond[5]=(x11508+((r21*x11493))+((r21*x11490*x11502))+((r20*x11500))+(((-1.0)*r20*x11501*x11504))+((r22*x11506)));
evalcond[6]=(x11497+((x11494*x11507))+((r12*x11506))+((r11*x11493))+((r10*x11500))+(((-1.0)*cj3*x11496*x11504))+(((-1.0)*x11495)));
evalcond[7]=((((-1.0)*r12*sj3*x11505))+x11508+((r11*x11501))+((r10*x11502))+(((-1.0)*sj3*x11494*x11504))+((r10*x11490*x11493)));
evalcond[8]=(x11495+((r21*x11501))+(((-1.0)*r21*x11500*x11504))+((r20*x11490*x11493))+((r20*x11502))+(((-1.0)*r22*sj3*x11505))+(((-1.0)*x11497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11509=((1.0)*gconst5);
CheckValue<IkReal> x11510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11509))+(((-1.0)*gconst4*r20)))),-1);
if(!x11510.valid){
continue;
}
CheckValue<IkReal> x11511 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11509))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11510.value)))+(x11511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11512=IKsin(j4);
IkReal x11513=IKcos(j4);
IkReal x11514=(cj2*sj1);
IkReal x11515=(cj1*sj2);
IkReal x11516=(gconst5*sj3);
IkReal x11517=(gconst4*r11);
IkReal x11518=(sj1*sj2);
IkReal x11519=(gconst5*r10);
IkReal x11520=(cj1*cj2);
IkReal x11521=(gconst4*r01);
IkReal x11522=(gconst5*r00);
IkReal x11523=(gconst4*sj3);
IkReal x11524=(cj3*gconst5);
IkReal x11525=(cj3*gconst4);
IkReal x11526=(gconst4*r21);
IkReal x11527=((1.0)*x11513);
IkReal x11528=((1.0)*x11512);
IkReal x11529=(cj3*x11512);
IkReal x11530=(cj3*x11513);
IkReal x11531=(x11515+x11514);
evalcond[0]=((((-1.0)*gconst5*r20*x11528))+((x11512*x11526))+(((-1.0)*r22*x11527)));
evalcond[1]=((((-1.0)*x11519*x11528))+((x11512*x11517))+(((-1.0)*r12*x11527)));
evalcond[2]=((1.0)+(((-1.0)*x11522*x11528))+(((-1.0)*r02*x11527))+((x11512*x11521)));
evalcond[3]=(((r01*x11516))+(((-1.0)*cj3*x11522*x11527))+((x11521*x11530))+((r00*x11523))+((r02*x11529)));
evalcond[4]=((((-1.0)*sj3*x11521*x11527))+((r00*x11513*x11516))+(((-1.0)*r02*sj3*x11528))+((r01*x11524))+((r00*x11525)));
evalcond[5]=(((r21*x11513*x11525))+x11531+((r20*x11523))+(((-1.0)*r20*x11524*x11527))+((r21*x11516))+((r22*x11529)));
evalcond[6]=((((-1.0)*cj3*x11519*x11527))+(((-1.0)*x11518))+x11520+((r12*x11529))+((x11517*x11530))+((r10*x11523))+((r11*x11516)));
evalcond[7]=(((r10*x11513*x11516))+(((-1.0)*sj3*x11517*x11527))+x11531+(((-1.0)*r12*sj3*x11528))+((r11*x11524))+((r10*x11525)));
evalcond[8]=(x11518+((r21*x11524))+((r20*x11513*x11516))+((r20*x11525))+(((-1.0)*r21*x11523*x11527))+(((-1.0)*r22*sj3*x11528))+(((-1.0)*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11532=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11532.valid){
continue;
}
CheckValue<IkReal> x11533 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11532.value)))+(x11533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11534=IKsin(j4);
IkReal x11535=IKcos(j4);
IkReal x11536=(cj2*sj1);
IkReal x11537=(cj1*sj2);
IkReal x11538=(gconst5*sj3);
IkReal x11539=(gconst4*r11);
IkReal x11540=(sj1*sj2);
IkReal x11541=(gconst5*r10);
IkReal x11542=(cj1*cj2);
IkReal x11543=(gconst4*r01);
IkReal x11544=(gconst5*r00);
IkReal x11545=(gconst4*sj3);
IkReal x11546=(cj3*gconst5);
IkReal x11547=(cj3*gconst4);
IkReal x11548=(gconst4*r21);
IkReal x11549=((1.0)*x11535);
IkReal x11550=((1.0)*x11534);
IkReal x11551=(cj3*x11534);
IkReal x11552=(cj3*x11535);
IkReal x11553=(x11537+x11536);
evalcond[0]=((((-1.0)*gconst5*r20*x11550))+((x11534*x11548))+(((-1.0)*r22*x11549)));
evalcond[1]=(((x11534*x11539))+(((-1.0)*x11541*x11550))+(((-1.0)*r12*x11549)));
evalcond[2]=((1.0)+(((-1.0)*x11544*x11550))+(((-1.0)*r02*x11549))+((x11534*x11543)));
evalcond[3]=(((r00*x11545))+((r02*x11551))+(((-1.0)*cj3*x11544*x11549))+((r01*x11538))+((x11543*x11552)));
evalcond[4]=((((-1.0)*sj3*x11543*x11549))+((r00*x11547))+((r01*x11546))+(((-1.0)*r02*sj3*x11550))+((r00*x11535*x11538)));
evalcond[5]=(x11553+((r22*x11551))+((r21*x11538))+((r20*x11545))+((r21*x11535*x11547))+(((-1.0)*r20*x11546*x11549)));
evalcond[6]=(((r12*x11551))+((r10*x11545))+x11542+(((-1.0)*cj3*x11541*x11549))+(((-1.0)*x11540))+((r11*x11538))+((x11539*x11552)));
evalcond[7]=((((-1.0)*r12*sj3*x11550))+((r10*x11547))+x11553+(((-1.0)*sj3*x11539*x11549))+((r10*x11535*x11538))+((r11*x11546)));
evalcond[8]=((((-1.0)*r22*sj3*x11550))+x11540+(((-1.0)*x11542))+((r20*x11547))+((r21*x11546))+(((-1.0)*r21*x11545*x11549))+((r20*x11535*x11538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11554=((-1.0)*r21);
IkReal x11555=((-1.0)*px);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(x11554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11556=((1.0)*(x11557.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11556)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11555);
rxp1_1=(px*r21);
rxp1_2=(r11*x11555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11556)));
IkReal gconst4=x11554;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11558=((-1.0)*r21);
IkReal x11559=((-1.0)*px);
CheckValue<IkReal> x11561 = IKatan2WithCheck(IkReal(x11558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11561.valid){
continue;
}
IkReal x11560=((1.0)*(x11561.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11560)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11559);
rxp1_1=(px*r21);
rxp1_2=(r11*x11559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11560)));
IkReal gconst4=x11558;
IkReal gconst5=((1.0)*r20);
IkReal x11562=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11562*(r10*r10)))+(((-1.0)*x11562*(r21*r21)))+(((-1.0)*x11562)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11563=((-1.0)*r21);
IkReal x11564=((-1.0)*px);
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal(x11563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
IkReal x11565=((1.0)*(x11566.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11565)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11564);
rxp1_1=(px*r21);
rxp1_2=(r11*x11564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst4=x11563;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11567=((-1.0)*r21);
IkReal x11568=((-1.0)*px);
CheckValue<IkReal> x11570 = IKatan2WithCheck(IkReal(x11567),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11570.valid){
continue;
}
IkReal x11569=((1.0)*(x11570.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11569)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11568);
rxp1_1=(px*r21);
rxp1_2=(r11*x11568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11569)));
IkReal gconst4=x11567;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11571=((-1.0)*r21);
IkReal x11572=((-1.0)*px);
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal(x11571),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
IkReal x11573=((1.0)*(x11574.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11573)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11572);
rxp1_1=(px*r21);
rxp1_2=(r11*x11572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11573)));
IkReal gconst4=x11571;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11575=((-1.0)*r21);
IkReal x11576=((-1.0)*px);
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal(x11575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
IkReal x11577=((1.0)*(x11578.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11577)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11576);
rxp1_1=(px*r21);
rxp1_2=(r11*x11576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11577)));
IkReal gconst4=x11575;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11581=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11581.valid){
continue;
}
IkReal x11579=x11581.value;
IkReal x11580=(sj0*x11579);
cj4array[0]=(((cj2*sj1*x11580))+((cj1*sj2*x11580)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11582=IKsin(j4);
IkReal x11583=IKcos(j4);
IkReal x11584=(gconst5*r20);
IkReal x11585=(gconst4*x11582);
IkReal x11586=((1.0)*x11583);
IkReal x11587=((1.0)*x11582);
evalcond[0]=((-1.0)*r02*x11582);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11586)));
evalcond[2]=((((-1.0)*x11584*x11587))+((r21*x11585)));
evalcond[3]=((((-1.0)*gconst5*r10*x11587))+((r11*x11585)));
evalcond[4]=(((x11583*x11584))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11589=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11589.valid){
continue;
}
IkReal x11588=x11589.value;
cj4array[0]=(((cj1*cj2*x11588))+(((-1.0)*sj1*sj2*x11588)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11590=IKsin(j4);
IkReal x11591=IKcos(j4);
IkReal x11592=(gconst5*r10);
IkReal x11593=((1.0)*sj0);
IkReal x11594=(gconst4*x11590);
IkReal x11595=((1.0)*x11591);
IkReal x11596=((1.0)*x11590);
evalcond[0]=((-1.0)*r02*x11590);
evalcond[1]=((((-1.0)*x11593))+(((-1.0)*r02*x11595)));
evalcond[2]=((((-1.0)*gconst5*r20*x11596))+((r21*x11594)));
evalcond[3]=(((r11*x11594))+(((-1.0)*x11592*x11596)));
evalcond[4]=((((-1.0)*cj2*sj1*x11593))+((x11591*x11592))+(((-1.0)*gconst4*r11*x11595))+(((-1.0)*cj1*sj2*x11593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11597=IKPowWithIntegerCheck(r02,-1);
if(!x11597.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11597.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11598=IKsin(j4);
IkReal x11599=IKcos(j4);
IkReal x11600=((1.0)*sj0);
IkReal x11601=(gconst5*x11599);
IkReal x11602=(gconst4*x11598);
IkReal x11603=((1.0)*gconst4*x11599);
IkReal x11604=((1.0)*gconst5*x11598);
evalcond[0]=((-1.0)*r02*x11598);
evalcond[1]=((((-1.0)*r20*x11604))+((r21*x11602)));
evalcond[2]=((((-1.0)*r10*x11604))+((r11*x11602)));
evalcond[3]=((((-1.0)*r21*x11603))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11601)));
evalcond[4]=((((-1.0)*r11*x11603))+(((-1.0)*cj1*sj2*x11600))+(((-1.0)*cj2*sj1*x11600))+((r10*x11601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11605=((-1.0)*r21);
IkReal x11606=((-1.0)*px);
CheckValue<IkReal> x11608 = IKatan2WithCheck(IkReal(x11605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11608.valid){
continue;
}
IkReal x11607=((1.0)*(x11608.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11607)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11606);
rxp1_1=(px*r21);
rxp1_2=(r11*x11606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11607)));
IkReal gconst4=x11605;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11609=((-1.0)*r21);
IkReal x11610=((-1.0)*px);
CheckValue<IkReal> x11612 = IKatan2WithCheck(IkReal(x11609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11612.valid){
continue;
}
IkReal x11611=((1.0)*(x11612.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11611)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11610);
rxp1_1=(px*r21);
rxp1_2=(r11*x11610);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11611)));
IkReal gconst4=x11609;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11613=((-1.0)*r21);
IkReal x11614=((-1.0)*px);
CheckValue<IkReal> x11616 = IKatan2WithCheck(IkReal(x11613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11616.valid){
continue;
}
IkReal x11615=((1.0)*(x11616.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11615)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11614);
rxp1_1=(px*r21);
rxp1_2=(r11*x11614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11615)));
IkReal gconst4=x11613;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11619=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11619.valid){
continue;
}
IkReal x11617=x11619.value;
IkReal x11618=(sj0*x11617);
cj4array[0]=(((cj1*sj2*x11618))+((cj2*sj1*x11618)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11620=IKsin(j4);
IkReal x11621=IKcos(j4);
IkReal x11622=(gconst5*r20);
IkReal x11623=(gconst4*x11620);
IkReal x11624=((1.0)*x11621);
IkReal x11625=((1.0)*x11620);
evalcond[0]=(r02*x11620);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11624)));
evalcond[2]=(((r21*x11623))+(((-1.0)*x11622*x11625)));
evalcond[3]=(((r11*x11623))+(((-1.0)*gconst5*r10*x11625)));
evalcond[4]=(((gconst4*r21*x11621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11622*x11624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11627=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11627.valid){
continue;
}
IkReal x11626=x11627.value;
cj4array[0]=(((cj1*cj2*x11626))+(((-1.0)*sj1*sj2*x11626)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11628=IKsin(j4);
IkReal x11629=IKcos(j4);
IkReal x11630=(gconst4*r11);
IkReal x11631=((1.0)*sj0);
IkReal x11632=(gconst5*r10);
IkReal x11633=((1.0)*x11629);
IkReal x11634=((1.0)*x11628);
evalcond[0]=(r02*x11628);
evalcond[1]=((((-1.0)*x11631))+(((-1.0)*r02*x11633)));
evalcond[2]=(((gconst4*r21*x11628))+(((-1.0)*gconst5*r20*x11634)));
evalcond[3]=((((-1.0)*x11632*x11634))+((x11628*x11630)));
evalcond[4]=(((x11629*x11630))+(((-1.0)*x11632*x11633))+(((-1.0)*cj1*sj2*x11631))+(((-1.0)*cj2*sj1*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11635=IKPowWithIntegerCheck(r02,-1);
if(!x11635.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11635.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11636=IKsin(j4);
IkReal x11637=IKcos(j4);
IkReal x11638=(gconst4*r11);
IkReal x11639=((1.0)*cj1);
IkReal x11640=(gconst4*r21);
IkReal x11641=((1.0)*gconst5*x11637);
IkReal x11642=((1.0)*gconst5*x11636);
evalcond[0]=(r02*x11636);
evalcond[1]=(((x11636*x11640))+(((-1.0)*r20*x11642)));
evalcond[2]=(((x11636*x11638))+(((-1.0)*r10*x11642)));
evalcond[3]=(((x11637*x11640))+((sj1*sj2))+(((-1.0)*r20*x11641))+(((-1.0)*cj2*x11639)));
evalcond[4]=(((x11637*x11638))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11641))+(((-1.0)*sj0*sj2*x11639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11644=IKPowWithIntegerCheck(r02,-1);
if(!x11644.valid){
continue;
}
IkReal x11643=x11644.value;
CheckValue<IkReal> x11645=IKPowWithIntegerCheck(cj3,-1);
if(!x11645.valid){
continue;
}
if( IKabs((x11643*(x11645.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11643)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11643*(x11645.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11643))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11643*(x11645.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11643));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11646=IKsin(j4);
IkReal x11647=IKcos(j4);
IkReal x11648=(gconst5*sj3);
IkReal x11649=(gconst4*r11);
IkReal x11650=(sj1*sj2);
IkReal x11651=((1.0)*gconst5);
IkReal x11652=(cj2*sj1);
IkReal x11653=((1.0)*sj0);
IkReal x11654=((1.0)*cj0);
IkReal x11655=(gconst4*r21);
IkReal x11656=(cj1*sj2);
IkReal x11657=(cj3*gconst4);
IkReal x11658=(gconst4*sj3);
IkReal x11659=(cj3*gconst5);
IkReal x11660=(r20*x11647);
IkReal x11661=((1.0)*cj1*cj2);
IkReal x11662=(r10*x11647);
IkReal x11663=(cj3*x11647);
IkReal x11664=(r02*x11646);
IkReal x11665=((1.0)*sj3*x11647);
evalcond[0]=((((-1.0)*x11653))+(((-1.0)*r02*x11647)));
evalcond[1]=((((-1.0)*r20*x11646*x11651))+((x11646*x11655)));
evalcond[2]=(cj0+((x11646*x11649))+(((-1.0)*r10*x11646*x11651)));
evalcond[3]=((((-1.0)*cj1*cj2*x11654))+((cj0*x11650))+((cj3*x11664)));
evalcond[4]=((((-1.0)*x11654*x11656))+(((-1.0)*sj3*x11664))+(((-1.0)*x11652*x11654)));
evalcond[5]=(x11652+x11656+(((-1.0)*cj3*x11651*x11660))+((r21*x11648))+((r20*x11658))+((x11655*x11663)));
evalcond[6]=((((-1.0)*x11655*x11665))+x11650+((x11648*x11660))+((r21*x11659))+((r20*x11657))+(((-1.0)*x11661)));
evalcond[7]=((((-1.0)*cj1*cj2*x11653))+((r11*x11648))+((x11649*x11663))+((r10*x11658))+(((-1.0)*cj3*x11651*x11662))+((sj0*x11650)));
evalcond[8]=(((r11*x11659))+((x11648*x11662))+((r10*x11657))+(((-1.0)*x11649*x11665))+(((-1.0)*x11653*x11656))+(((-1.0)*x11652*x11653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11666=((1.0)*gconst5);
CheckValue<IkReal> x11667=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11666))),-1);
if(!x11667.valid){
continue;
}
CheckValue<IkReal> x11668=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11666))),-1);
if(!x11668.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11667.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11666)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11667.value)))+IKsqr(((x11668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11666))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11667.value)), ((x11668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11666))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11669=IKsin(j4);
IkReal x11670=IKcos(j4);
IkReal x11671=(gconst5*sj3);
IkReal x11672=(gconst4*r11);
IkReal x11673=(sj1*sj2);
IkReal x11674=((1.0)*gconst5);
IkReal x11675=(cj2*sj1);
IkReal x11676=((1.0)*sj0);
IkReal x11677=((1.0)*cj0);
IkReal x11678=(gconst4*r21);
IkReal x11679=(cj1*sj2);
IkReal x11680=(cj3*gconst4);
IkReal x11681=(gconst4*sj3);
IkReal x11682=(cj3*gconst5);
IkReal x11683=(r20*x11670);
IkReal x11684=((1.0)*cj1*cj2);
IkReal x11685=(r10*x11670);
IkReal x11686=(cj3*x11670);
IkReal x11687=(r02*x11669);
IkReal x11688=((1.0)*sj3*x11670);
evalcond[0]=((((-1.0)*r02*x11670))+(((-1.0)*x11676)));
evalcond[1]=(((x11669*x11678))+(((-1.0)*r20*x11669*x11674)));
evalcond[2]=(cj0+((x11669*x11672))+(((-1.0)*r10*x11669*x11674)));
evalcond[3]=(((cj0*x11673))+((cj3*x11687))+(((-1.0)*cj1*cj2*x11677)));
evalcond[4]=((((-1.0)*x11677*x11679))+(((-1.0)*x11675*x11677))+(((-1.0)*sj3*x11687)));
evalcond[5]=(x11675+x11679+((x11678*x11686))+((r21*x11671))+(((-1.0)*cj3*x11674*x11683))+((r20*x11681)));
evalcond[6]=(x11673+(((-1.0)*x11684))+((r21*x11682))+(((-1.0)*x11678*x11688))+((r20*x11680))+((x11671*x11683)));
evalcond[7]=(((r10*x11681))+((r11*x11671))+((sj0*x11673))+(((-1.0)*cj1*cj2*x11676))+(((-1.0)*cj3*x11674*x11685))+((x11672*x11686)));
evalcond[8]=((((-1.0)*x11676*x11679))+(((-1.0)*x11672*x11688))+((r11*x11682))+(((-1.0)*x11675*x11676))+((r10*x11680))+((x11671*x11685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11689=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11689.valid){
continue;
}
CheckValue<IkReal> x11690=IKPowWithIntegerCheck(r02,-1);
if(!x11690.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11689.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11689.value)))+IKsqr(((-1.0)*sj0*(x11690.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11689.value)), ((-1.0)*sj0*(x11690.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11691=IKsin(j4);
IkReal x11692=IKcos(j4);
IkReal x11693=(gconst5*sj3);
IkReal x11694=(gconst4*r11);
IkReal x11695=(sj1*sj2);
IkReal x11696=((1.0)*gconst5);
IkReal x11697=(cj2*sj1);
IkReal x11698=((1.0)*sj0);
IkReal x11699=((1.0)*cj0);
IkReal x11700=(gconst4*r21);
IkReal x11701=(cj1*sj2);
IkReal x11702=(cj3*gconst4);
IkReal x11703=(gconst4*sj3);
IkReal x11704=(cj3*gconst5);
IkReal x11705=(r20*x11692);
IkReal x11706=((1.0)*cj1*cj2);
IkReal x11707=(r10*x11692);
IkReal x11708=(cj3*x11692);
IkReal x11709=(r02*x11691);
IkReal x11710=((1.0)*sj3*x11692);
evalcond[0]=((((-1.0)*x11698))+(((-1.0)*r02*x11692)));
evalcond[1]=(((x11691*x11700))+(((-1.0)*r20*x11691*x11696)));
evalcond[2]=(cj0+((x11691*x11694))+(((-1.0)*r10*x11691*x11696)));
evalcond[3]=(((cj0*x11695))+((cj3*x11709))+(((-1.0)*cj1*cj2*x11699)));
evalcond[4]=((((-1.0)*x11697*x11699))+(((-1.0)*sj3*x11709))+(((-1.0)*x11699*x11701)));
evalcond[5]=(x11701+x11697+(((-1.0)*cj3*x11696*x11705))+((x11700*x11708))+((r20*x11703))+((r21*x11693)));
evalcond[6]=(x11695+(((-1.0)*x11700*x11710))+((r21*x11704))+((x11693*x11705))+(((-1.0)*x11706))+((r20*x11702)));
evalcond[7]=((((-1.0)*cj3*x11696*x11707))+((r11*x11693))+((sj0*x11695))+((r10*x11703))+(((-1.0)*cj1*cj2*x11698))+((x11694*x11708)));
evalcond[8]=((((-1.0)*x11694*x11710))+(((-1.0)*x11697*x11698))+(((-1.0)*x11698*x11701))+((x11693*x11707))+((r10*x11702))+((r11*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11711=((1.0)*sj0);
IkReal x11712=((1.0)*gconst4);
CheckValue<IkReal> x11713 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11711))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11712))+(((-1.0)*gconst4*r11*x11711))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11713.valid){
continue;
}
CheckValue<IkReal> x11714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11712))+(((-1.0)*gconst5*r21)))),-1);
if(!x11714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11713.value)+(((1.5707963267949)*(x11714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11715=IKsin(j4);
IkReal x11716=IKcos(j4);
IkReal x11717=(gconst5*sj3);
IkReal x11718=(cj3*gconst5);
IkReal x11719=(gconst4*r11);
IkReal x11720=(sj1*sj2);
IkReal x11721=(cj2*sj1);
IkReal x11722=((1.0)*sj0);
IkReal x11723=(gconst4*r01);
IkReal x11724=(gconst4*r21);
IkReal x11725=((1.0)*cj0);
IkReal x11726=(cj1*sj2);
IkReal x11727=(gconst4*sj3);
IkReal x11728=(cj3*gconst4);
IkReal x11729=((1.0)*x11716);
IkReal x11730=((1.0)*cj1*cj2);
IkReal x11731=(cj3*x11715);
IkReal x11732=(cj3*x11716);
IkReal x11733=((1.0)*gconst5*x11715);
IkReal x11734=((1.0)*sj3*x11715);
evalcond[0]=((((-1.0)*r20*x11733))+(((-1.0)*r22*x11729))+((x11715*x11724)));
evalcond[1]=(cj0+(((-1.0)*r10*x11733))+(((-1.0)*r12*x11729))+((x11715*x11719)));
evalcond[2]=((((-1.0)*x11722))+(((-1.0)*r00*x11733))+((x11715*x11723))+(((-1.0)*r02*x11729)));
evalcond[3]=(x11726+x11721+((r20*x11727))+(((-1.0)*r20*x11718*x11729))+((x11724*x11732))+((r21*x11717))+((r22*x11731)));
evalcond[4]=((((-1.0)*sj3*x11724*x11729))+x11720+(((-1.0)*x11730))+((r20*x11728))+(((-1.0)*r22*x11734))+((r21*x11718))+((r20*x11716*x11717)));
evalcond[5]=(((r01*x11717))+((r00*x11727))+(((-1.0)*r00*x11718*x11729))+((cj0*x11720))+((r02*x11731))+((x11723*x11732))+(((-1.0)*cj1*cj2*x11725)));
evalcond[6]=(((sj0*x11720))+((x11719*x11732))+(((-1.0)*r10*x11718*x11729))+((r10*x11727))+(((-1.0)*cj1*cj2*x11722))+((r12*x11731))+((r11*x11717)));
evalcond[7]=(((r00*x11716*x11717))+(((-1.0)*sj3*x11723*x11729))+((r01*x11718))+((r00*x11728))+(((-1.0)*x11721*x11725))+(((-1.0)*r02*x11734))+(((-1.0)*x11725*x11726)));
evalcond[8]=(((r10*x11716*x11717))+(((-1.0)*r12*x11734))+(((-1.0)*x11721*x11722))+((r10*x11728))+(((-1.0)*x11722*x11726))+(((-1.0)*sj3*x11719*x11729))+((r11*x11718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11735=((1.0)*gconst5);
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11735))+(((-1.0)*gconst4*r10)))),-1);
if(!x11736.valid){
continue;
}
CheckValue<IkReal> x11737 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11735))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11736.value)))+(x11737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11738=IKsin(j4);
IkReal x11739=IKcos(j4);
IkReal x11740=(gconst5*sj3);
IkReal x11741=(cj3*gconst5);
IkReal x11742=(gconst4*r11);
IkReal x11743=(sj1*sj2);
IkReal x11744=(cj2*sj1);
IkReal x11745=((1.0)*sj0);
IkReal x11746=(gconst4*r01);
IkReal x11747=(gconst4*r21);
IkReal x11748=((1.0)*cj0);
IkReal x11749=(cj1*sj2);
IkReal x11750=(gconst4*sj3);
IkReal x11751=(cj3*gconst4);
IkReal x11752=((1.0)*x11739);
IkReal x11753=((1.0)*cj1*cj2);
IkReal x11754=(cj3*x11738);
IkReal x11755=(cj3*x11739);
IkReal x11756=((1.0)*gconst5*x11738);
IkReal x11757=((1.0)*sj3*x11738);
evalcond[0]=((((-1.0)*r22*x11752))+((x11738*x11747))+(((-1.0)*r20*x11756)));
evalcond[1]=((((-1.0)*r12*x11752))+cj0+(((-1.0)*r10*x11756))+((x11738*x11742)));
evalcond[2]=((((-1.0)*x11745))+(((-1.0)*r02*x11752))+((x11738*x11746))+(((-1.0)*r00*x11756)));
evalcond[3]=(x11744+x11749+(((-1.0)*r20*x11741*x11752))+((x11747*x11755))+((r22*x11754))+((r21*x11740))+((r20*x11750)));
evalcond[4]=(x11743+((r20*x11739*x11740))+(((-1.0)*r22*x11757))+(((-1.0)*x11753))+((r21*x11741))+(((-1.0)*sj3*x11747*x11752))+((r20*x11751)));
evalcond[5]=(((r01*x11740))+((cj0*x11743))+(((-1.0)*r00*x11741*x11752))+((r02*x11754))+((x11746*x11755))+(((-1.0)*cj1*cj2*x11748))+((r00*x11750)));
evalcond[6]=((((-1.0)*r10*x11741*x11752))+((x11742*x11755))+((sj0*x11743))+((r10*x11750))+((r12*x11754))+(((-1.0)*cj1*cj2*x11745))+((r11*x11740)));
evalcond[7]=(((r01*x11741))+(((-1.0)*sj3*x11746*x11752))+((r00*x11739*x11740))+(((-1.0)*r02*x11757))+(((-1.0)*x11744*x11748))+(((-1.0)*x11748*x11749))+((r00*x11751)));
evalcond[8]=((((-1.0)*r12*x11757))+((r10*x11751))+((r10*x11739*x11740))+(((-1.0)*x11744*x11745))+(((-1.0)*sj3*x11742*x11752))+(((-1.0)*x11745*x11749))+((r11*x11741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11758=((1.0)*gconst5);
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11758))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
CheckValue<IkReal> x11760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11758)))),-1);
if(!x11760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11759.value)+(((1.5707963267949)*(x11760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11761=IKsin(j4);
IkReal x11762=IKcos(j4);
IkReal x11763=(gconst5*sj3);
IkReal x11764=(cj3*gconst5);
IkReal x11765=(gconst4*r11);
IkReal x11766=(sj1*sj2);
IkReal x11767=(cj2*sj1);
IkReal x11768=((1.0)*sj0);
IkReal x11769=(gconst4*r01);
IkReal x11770=(gconst4*r21);
IkReal x11771=((1.0)*cj0);
IkReal x11772=(cj1*sj2);
IkReal x11773=(gconst4*sj3);
IkReal x11774=(cj3*gconst4);
IkReal x11775=((1.0)*x11762);
IkReal x11776=((1.0)*cj1*cj2);
IkReal x11777=(cj3*x11761);
IkReal x11778=(cj3*x11762);
IkReal x11779=((1.0)*gconst5*x11761);
IkReal x11780=((1.0)*sj3*x11761);
evalcond[0]=(((x11761*x11770))+(((-1.0)*r22*x11775))+(((-1.0)*r20*x11779)));
evalcond[1]=(cj0+(((-1.0)*r10*x11779))+(((-1.0)*r12*x11775))+((x11761*x11765)));
evalcond[2]=((((-1.0)*r02*x11775))+(((-1.0)*r00*x11779))+(((-1.0)*x11768))+((x11761*x11769)));
evalcond[3]=(((x11770*x11778))+x11772+x11767+((r20*x11773))+(((-1.0)*r20*x11764*x11775))+((r22*x11777))+((r21*x11763)));
evalcond[4]=(x11766+((r20*x11762*x11763))+((r20*x11774))+(((-1.0)*r22*x11780))+(((-1.0)*sj3*x11770*x11775))+(((-1.0)*x11776))+((r21*x11764)));
evalcond[5]=((((-1.0)*r00*x11764*x11775))+((cj0*x11766))+((r02*x11777))+((x11769*x11778))+((r00*x11773))+((r01*x11763))+(((-1.0)*cj1*cj2*x11771)));
evalcond[6]=((((-1.0)*cj1*cj2*x11768))+((r11*x11763))+((r10*x11773))+((r12*x11777))+((x11765*x11778))+((sj0*x11766))+(((-1.0)*r10*x11764*x11775)));
evalcond[7]=((((-1.0)*sj3*x11769*x11775))+(((-1.0)*x11771*x11772))+(((-1.0)*x11767*x11771))+((r00*x11774))+((r00*x11762*x11763))+(((-1.0)*r02*x11780))+((r01*x11764)));
evalcond[8]=(((r11*x11764))+((r10*x11774))+(((-1.0)*sj3*x11765*x11775))+(((-1.0)*x11768*x11772))+(((-1.0)*r12*x11780))+((r10*x11762*x11763))+(((-1.0)*x11767*x11768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11781=((-1.0)*r10);
IkReal x11783 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11783)==0){
continue;
}
IkReal x11782=pow(x11783,-0.5);
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11781),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11784.value));
IkReal gconst7=(r11*x11782);
IkReal gconst8=(x11781*x11782);
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11785.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11786=((-1.0)*r10);
IkReal x11787=x11782;
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11786),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
IkReal x11788=((-1.0)*(x11789.value));
sj5=gconst7;
cj5=gconst8;
j5=x11788;
IkReal gconst6=x11788;
IkReal gconst7=(r11*x11787);
IkReal gconst8=(x11786*x11787);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11790=((1.0)*sj0);
IkReal x11791=((1.0)*gconst7);
CheckValue<IkReal> x11792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11791))+(((-1.0)*gconst8*r21)))),-1);
if(!x11792.valid){
continue;
}
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11790))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11791))+(((-1.0)*gconst7*r11*x11790))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11792.value)))+(x11793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11794=IKsin(j4);
IkReal x11795=IKcos(j4);
IkReal x11796=(gconst7*sj3);
IkReal x11797=(cj3*gconst8);
IkReal x11798=(cj3*gconst7);
IkReal x11799=(sj1*sj2);
IkReal x11800=(cj2*sj1);
IkReal x11801=((1.0)*sj0);
IkReal x11802=((1.0)*cj0);
IkReal x11803=(gconst8*sj3);
IkReal x11804=(cj1*sj2);
IkReal x11805=((1.0)*x11795);
IkReal x11806=((1.0)*x11794);
IkReal x11807=((1.0)*cj1*cj2);
IkReal x11808=(cj3*x11794);
IkReal x11809=(gconst7*x11794);
IkReal x11810=(x11795*x11803);
evalcond[0]=(((r21*x11809))+(((-1.0)*gconst8*r20*x11806))+(((-1.0)*r22*x11805)));
evalcond[1]=((((-1.0)*gconst8*r10*x11806))+cj0+(((-1.0)*r12*x11805))+((r11*x11809)));
evalcond[2]=((((-1.0)*gconst8*r00*x11806))+(((-1.0)*x11801))+(((-1.0)*r02*x11805))+((r01*x11809)));
evalcond[3]=(((r21*x11803))+((r21*x11795*x11798))+((r20*x11796))+((r22*x11808))+(((-1.0)*r20*x11797*x11805))+x11800+x11804);
evalcond[4]=(x11799+((r20*x11798))+(((-1.0)*r22*sj3*x11806))+(((-1.0)*x11807))+(((-1.0)*r21*x11796*x11805))+((r21*x11797))+((r20*x11810)));
evalcond[5]=(((r02*x11808))+((r01*x11795*x11798))+(((-1.0)*r00*x11797*x11805))+(((-1.0)*cj1*cj2*x11802))+((r01*x11803))+((r00*x11796))+((cj0*x11799)));
evalcond[6]=((((-1.0)*r10*x11797*x11805))+((r10*x11796))+((sj0*x11799))+((r11*x11803))+((r12*x11808))+((r11*x11795*x11798))+(((-1.0)*cj1*cj2*x11801)));
evalcond[7]=((((-1.0)*x11802*x11804))+(((-1.0)*r02*sj3*x11806))+((r00*x11810))+(((-1.0)*x11800*x11802))+((r01*x11797))+((r00*x11798))+(((-1.0)*r01*x11796*x11805)));
evalcond[8]=((((-1.0)*r11*x11796*x11805))+((r11*x11797))+((r10*x11798))+((r10*x11810))+(((-1.0)*x11800*x11801))+(((-1.0)*r12*sj3*x11806))+(((-1.0)*x11801*x11804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11811=((1.0)*gconst8);
CheckValue<IkReal> x11812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11811))+(((-1.0)*gconst7*r00)))),-1);
if(!x11812.valid){
continue;
}
CheckValue<IkReal> x11813 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11812.value)))+(x11813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11814=IKsin(j4);
IkReal x11815=IKcos(j4);
IkReal x11816=(gconst7*sj3);
IkReal x11817=(cj3*gconst8);
IkReal x11818=(cj3*gconst7);
IkReal x11819=(sj1*sj2);
IkReal x11820=(cj2*sj1);
IkReal x11821=((1.0)*sj0);
IkReal x11822=((1.0)*cj0);
IkReal x11823=(gconst8*sj3);
IkReal x11824=(cj1*sj2);
IkReal x11825=((1.0)*x11815);
IkReal x11826=((1.0)*x11814);
IkReal x11827=((1.0)*cj1*cj2);
IkReal x11828=(cj3*x11814);
IkReal x11829=(gconst7*x11814);
IkReal x11830=(x11815*x11823);
evalcond[0]=((((-1.0)*gconst8*r20*x11826))+(((-1.0)*r22*x11825))+((r21*x11829)));
evalcond[1]=(cj0+(((-1.0)*r12*x11825))+((r11*x11829))+(((-1.0)*gconst8*r10*x11826)));
evalcond[2]=((((-1.0)*gconst8*r00*x11826))+(((-1.0)*r02*x11825))+(((-1.0)*x11821))+((r01*x11829)));
evalcond[3]=(((r21*x11815*x11818))+((r22*x11828))+(((-1.0)*r20*x11817*x11825))+((r20*x11816))+((r21*x11823))+x11824+x11820);
evalcond[4]=((((-1.0)*r22*sj3*x11826))+((r21*x11817))+(((-1.0)*r21*x11816*x11825))+(((-1.0)*x11827))+((r20*x11830))+((r20*x11818))+x11819);
evalcond[5]=(((r01*x11815*x11818))+((r00*x11816))+((r02*x11828))+((cj0*x11819))+(((-1.0)*cj1*cj2*x11822))+((r01*x11823))+(((-1.0)*r00*x11817*x11825)));
evalcond[6]=(((sj0*x11819))+((r11*x11815*x11818))+((r12*x11828))+((r10*x11816))+(((-1.0)*cj1*cj2*x11821))+((r11*x11823))+(((-1.0)*r10*x11817*x11825)));
evalcond[7]=((((-1.0)*x11822*x11824))+(((-1.0)*x11820*x11822))+((r01*x11817))+(((-1.0)*r01*x11816*x11825))+((r00*x11818))+((r00*x11830))+(((-1.0)*r02*sj3*x11826)));
evalcond[8]=((((-1.0)*x11821*x11824))+(((-1.0)*x11820*x11821))+(((-1.0)*r11*x11816*x11825))+((r10*x11830))+((r10*x11818))+(((-1.0)*r12*sj3*x11826))+((r11*x11817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11831=((-1.0)*r11);
IkReal x11833 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11833)==0){
continue;
}
IkReal x11832=pow(x11833,-0.5);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(x11831),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11834.value))));
IkReal gconst10=(x11831*x11832);
IkReal gconst11=((1.0)*r10*x11832);
CheckValue<IkReal> x11835 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11835.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11835.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11836=((-1.0)*r11);
CheckValue<IkReal> x11839 = IKatan2WithCheck(IkReal(x11836),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11839.valid){
continue;
}
IkReal x11837=((1.0)*(x11839.value));
IkReal x11838=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11837)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11837)));
IkReal gconst10=(x11836*x11838);
IkReal gconst11=((1.0)*r10*x11838);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11840=((-1.0)*r11);
CheckValue<IkReal> x11843 = IKatan2WithCheck(IkReal(x11840),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11843.valid){
continue;
}
IkReal x11841=((1.0)*(x11843.value));
IkReal x11842=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11841)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11841)));
IkReal gconst10=(x11840*x11842);
IkReal gconst11=((1.0)*r10*x11842);
IkReal x11844=r12*r12;
IkReal x11845=((1.0)*sj0);
IkReal x11846=(cj0*r02);
IkReal x11847=x11832;
j4eval[0]=((IKabs(((((-1.0)*x11845*x11847))+((sj0*x11844*x11847))+((r12*x11846*x11847)))))+(IKabs(((((-1.0)*x11846))+(((-1.0)*r12*x11845))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11848=((-1.0)*r11);
CheckValue<IkReal> x11851 = IKatan2WithCheck(IkReal(x11848),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11851.valid){
continue;
}
IkReal x11849=((1.0)*(x11851.value));
IkReal x11850=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11849)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11849)));
IkReal gconst10=(x11848*x11850);
IkReal gconst11=((1.0)*r10*x11850);
IkReal x11852=((1.0)*cj3);
CheckValue<IkReal> x11857=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11857.valid){
continue;
}
IkReal x11853=x11857.value;
IkReal x11854=(cj3*x11853);
IkReal x11855=(x11852*x11853);
IkReal x11856=((((-1.0)*x11852*(r22*r22)))+(((-1.0)*x11855*(r11*r11)*(r21*r21)))+(((-1.0)*x11855*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11854)));
j4eval[0]=x11856;
j4eval[1]=IKsign(x11856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11858=((-1.0)*r11);
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(x11858),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11859=((1.0)*(x11861.value));
IkReal x11860=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11859)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11859)));
IkReal gconst10=(x11858*x11860);
IkReal gconst11=((1.0)*r10*x11860);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11862=((-1.0)*r11);
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(x11862),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
IkReal x11863=((1.0)*(x11865.value));
IkReal x11864=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11863)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11863)));
IkReal gconst10=(x11862*x11864);
IkReal gconst11=((1.0)*r10*x11864);
IkReal x11866=r12*r12;
IkReal x11867=((1.0)*sj0);
IkReal x11868=(cj0*r02);
IkReal x11869=x11832;
j4eval[0]=((IKabs(((((-1.0)*x11868))+(((-1.0)*r12*x11867)))))+(IKabs(((((-1.0)*x11867*x11869))+((sj0*x11866*x11869))+((r12*x11868*x11869))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11870=((-1.0)*r11);
CheckValue<IkReal> x11873 = IKatan2WithCheck(IkReal(x11870),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11873.valid){
continue;
}
IkReal x11871=((1.0)*(x11873.value));
IkReal x11872=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11871)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11871)));
IkReal gconst10=(x11870*x11872);
IkReal gconst11=((1.0)*r10*x11872);
IkReal x11874=r12*r12;
IkReal x11875=(cj1*cj2*r22);
IkReal x11876=(r22*sj1*sj2);
CheckValue<IkReal> x11880=IKPowWithIntegerCheck(((-1.0)+x11874),-1);
if(!x11880.valid){
continue;
}
IkReal x11877=x11880.value;
if((((1.0)+(((-1.0)*x11874)))) < -0.00001)
continue;
IkReal x11878=IKsqrt(((1.0)+(((-1.0)*x11874))));
IkReal x11879=(r12*x11877*x11878);
j4eval[0]=((IKabs(((((-1.0)*x11875))+x11876)))+(IKabs(((((-1.0)*x11876*x11879))+((x11875*x11879))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11881=((-1.0)*r11);
CheckValue<IkReal> x11884 = IKatan2WithCheck(IkReal(x11881),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11884.valid){
continue;
}
IkReal x11882=((1.0)*(x11884.value));
IkReal x11883=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11882)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11882)));
IkReal gconst10=(x11881*x11883);
IkReal gconst11=((1.0)*r10*x11883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11885=((-1.0)*r11);
CheckValue<IkReal> x11888 = IKatan2WithCheck(IkReal(x11885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11888.valid){
continue;
}
IkReal x11886=((1.0)*(x11888.value));
IkReal x11887=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11886)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11886)));
IkReal gconst10=(x11885*x11887);
IkReal gconst11=((1.0)*r10*x11887);
IkReal x11889=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11893=IKPowWithIntegerCheck(x11889,-1);
if(!x11893.valid){
continue;
}
IkReal x11890=x11893.value;
IkReal x11891=((1.0)*x11890);
IkReal x11892=((((-2.0)*r00*r01*r10*r11*x11890))+(((-1.0)*x11891*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11891*(r00*r00)*(r10*r10))));
j4eval[0]=x11892;
j4eval[1]=IKsign(x11892);
j4eval[2]=r02;
j4eval[3]=x11889;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11894=((-1.0)*r11);
CheckValue<IkReal> x11897 = IKatan2WithCheck(IkReal(x11894),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11897.valid){
continue;
}
IkReal x11895=((1.0)*(x11897.value));
IkReal x11896=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11895)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11895)));
IkReal gconst10=(x11894*x11896);
IkReal gconst11=((1.0)*r10*x11896);
IkReal x11898=r12*r12;
IkReal x11899=(cj1*cj2*r22);
IkReal x11900=(r22*sj1*sj2);
CheckValue<IkReal> x11904=IKPowWithIntegerCheck(((-1.0)+x11898),-1);
if(!x11904.valid){
continue;
}
IkReal x11901=x11904.value;
if((((1.0)+(((-1.0)*x11898)))) < -0.00001)
continue;
IkReal x11902=IKsqrt(((1.0)+(((-1.0)*x11898))));
IkReal x11903=(r12*x11901*x11902);
j4eval[0]=((IKabs(((((-1.0)*x11900*x11903))+((x11899*x11903)))))+(IKabs((x11900+(((-1.0)*x11899))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11905=(gconst10*r21);
IkReal x11906=(gconst11*r20);
IkReal x11907=(sj1*sj2);
IkReal x11908=(cj1*cj2);
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11908))+((r22*x11907)))),IkReal((((x11906*x11908))+(((-1.0)*x11906*x11907))+((x11905*x11907))+(((-1.0)*x11905*x11908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(IKsign(((x11906*x11906)+(r22*r22)+(x11905*x11905)+(((-2.0)*x11905*x11906)))),-1);
if(!x11910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11909.value)+(((1.5707963267949)*(x11910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11911=IKsin(j4);
IkReal x11912=IKcos(j4);
IkReal x11913=((1.0)*cj2);
IkReal x11914=((1.0)*x11912);
IkReal x11915=(gconst10*x11911);
IkReal x11916=((1.0)*x11911);
IkReal x11917=(gconst11*x11912);
IkReal x11918=(gconst11*x11916);
evalcond[0]=((((-1.0)*r22*x11914))+(((-1.0)*r20*x11918))+((r21*x11915)));
evalcond[1]=(((r11*x11915))+(((-1.0)*r12*x11914))+(((-1.0)*r10*x11918)));
evalcond[2]=(((r00*x11917))+(((-1.0)*gconst10*r01*x11914))+(((-1.0)*r02*x11916)));
evalcond[3]=((-1.0)+((r01*x11915))+(((-1.0)*r02*x11914))+(((-1.0)*r00*x11918)));
evalcond[4]=((((-1.0)*gconst10*r21*x11914))+(((-1.0)*cj1*x11913))+(((-1.0)*r22*x11916))+((sj1*sj2))+((r20*x11917)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11914))+(((-1.0)*sj1*x11913))+((r10*x11917))+(((-1.0)*r12*x11916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11919=(gconst11*r00);
IkReal x11920=(gconst10*r01);
CheckValue<IkReal> x11921 = IKatan2WithCheck(IkReal((x11919+(((-1.0)*x11920)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11921.valid){
continue;
}
CheckValue<IkReal> x11922=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11920*x11920)))+(((-1.0)*(x11919*x11919)))+(((-1.0)*(r02*r02)))+(((2.0)*x11919*x11920)))),-1);
if(!x11922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11921.value)+(((1.5707963267949)*(x11922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11923=IKsin(j4);
IkReal x11924=IKcos(j4);
IkReal x11925=((1.0)*cj2);
IkReal x11926=((1.0)*x11924);
IkReal x11927=(gconst10*x11923);
IkReal x11928=((1.0)*x11923);
IkReal x11929=(gconst11*x11924);
IkReal x11930=(gconst11*x11928);
evalcond[0]=(((r21*x11927))+(((-1.0)*r22*x11926))+(((-1.0)*r20*x11930)));
evalcond[1]=((((-1.0)*r10*x11930))+((r11*x11927))+(((-1.0)*r12*x11926)));
evalcond[2]=((((-1.0)*r02*x11928))+((r00*x11929))+(((-1.0)*gconst10*r01*x11926)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11926))+(((-1.0)*r00*x11930))+((r01*x11927)));
evalcond[4]=((((-1.0)*cj1*x11925))+((r20*x11929))+((sj1*sj2))+(((-1.0)*r22*x11928))+(((-1.0)*gconst10*r21*x11926)));
evalcond[5]=(((r10*x11929))+(((-1.0)*gconst10*r11*x11926))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11928))+(((-1.0)*sj1*x11925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
CheckValue<IkReal> x11932=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11931.value)+(((1.5707963267949)*(x11932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11933=IKsin(j4);
IkReal x11934=IKcos(j4);
IkReal x11935=((1.0)*cj2);
IkReal x11936=((1.0)*x11934);
IkReal x11937=(gconst10*x11933);
IkReal x11938=((1.0)*x11933);
IkReal x11939=(gconst11*x11934);
IkReal x11940=(gconst11*x11938);
evalcond[0]=((((-1.0)*r20*x11940))+((r21*x11937))+(((-1.0)*r22*x11936)));
evalcond[1]=(((r11*x11937))+(((-1.0)*r12*x11936))+(((-1.0)*r10*x11940)));
evalcond[2]=((((-1.0)*gconst10*r01*x11936))+(((-1.0)*r02*x11938))+((r00*x11939)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11936))+(((-1.0)*r00*x11940))+((r01*x11937)));
evalcond[4]=(((r20*x11939))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11936))+(((-1.0)*r22*x11938))+(((-1.0)*cj1*x11935)));
evalcond[5]=((((-1.0)*sj1*x11935))+((r10*x11939))+(((-1.0)*gconst10*r11*x11936))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11941=((-1.0)*r11);
CheckValue<IkReal> x11944 = IKatan2WithCheck(IkReal(x11941),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11944.valid){
continue;
}
IkReal x11942=((1.0)*(x11944.value));
IkReal x11943=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11942)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11942)));
IkReal gconst10=(x11941*x11943);
IkReal gconst11=((1.0)*r10*x11943);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11945=((-1.0)*r11);
CheckValue<IkReal> x11948 = IKatan2WithCheck(IkReal(x11945),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11948.valid){
continue;
}
IkReal x11946=((1.0)*(x11948.value));
IkReal x11947=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11946)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11946)));
IkReal gconst10=(x11945*x11947);
IkReal gconst11=((1.0)*r10*x11947);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11949=((-1.0)*r11);
CheckValue<IkReal> x11952 = IKatan2WithCheck(IkReal(x11949),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11952.valid){
continue;
}
IkReal x11950=((1.0)*(x11952.value));
IkReal x11951=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11950)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11950)));
IkReal gconst10=(x11949*x11951);
IkReal gconst11=((1.0)*r10*x11951);
IkReal x11953=r12*r12;
CheckValue<IkReal> x11956=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11953))),-1);
if(!x11956.valid){
continue;
}
IkReal x11954=x11956.value;
IkReal x11955=((1.0)*x11954);
j4eval[0]=IKsign((x11953+((x11955*(r10*r10*r10*r10)))+(((2.0)*x11954*(r10*r10)*(r11*r11)))+((x11955*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11957=(cj2*sj1);
IkReal x11958=(gconst10*r11);
IkReal x11959=(gconst11*r10);
IkReal x11960=(cj1*sj2);
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(IKsign(((x11959*x11959)+(r12*r12)+(((-2.0)*x11958*x11959))+(x11958*x11958))),-1);
if(!x11961.valid){
continue;
}
CheckValue<IkReal> x11962 = IKatan2WithCheck(IkReal((((r12*x11957))+((r12*x11960)))),IkReal((((x11958*x11960))+((x11957*x11958))+(((-1.0)*x11959*x11960))+(((-1.0)*x11957*x11959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11961.value)))+(x11962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11963=IKsin(j4);
IkReal x11964=IKcos(j4);
IkReal x11965=((1.0)*x11964);
IkReal x11966=(gconst10*x11963);
IkReal x11967=((1.0)*x11963);
IkReal x11968=(gconst11*x11964);
IkReal x11969=(gconst11*x11967);
evalcond[0]=((((-1.0)*r20*x11969))+(((-1.0)*r22*x11965))+((r21*x11966)));
evalcond[1]=((((-1.0)*r10*x11969))+(((-1.0)*r12*x11965))+((r11*x11966)));
evalcond[2]=(((r00*x11968))+(((-1.0)*gconst10*r01*x11965))+(((-1.0)*r02*x11967)));
evalcond[3]=((1.0)+((r01*x11966))+(((-1.0)*r00*x11969))+(((-1.0)*r02*x11965)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11967))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11965))+((r10*x11968)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11968))+(((-1.0)*r22*x11967))+(((-1.0)*gconst10*r21*x11965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11970=(gconst11*r00);
IkReal x11971=(gconst10*r01);
CheckValue<IkReal> x11972=IKPowWithIntegerCheck(IKsign(((x11970*x11970)+(x11971*x11971)+(r02*r02)+(((-2.0)*x11970*x11971)))),-1);
if(!x11972.valid){
continue;
}
CheckValue<IkReal> x11973 = IKatan2WithCheck(IkReal((x11970+(((-1.0)*x11971)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11972.value)))+(x11973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11974=IKsin(j4);
IkReal x11975=IKcos(j4);
IkReal x11976=((1.0)*x11975);
IkReal x11977=(gconst10*x11974);
IkReal x11978=((1.0)*x11974);
IkReal x11979=(gconst11*x11975);
IkReal x11980=(gconst11*x11978);
evalcond[0]=((((-1.0)*r22*x11976))+(((-1.0)*r20*x11980))+((r21*x11977)));
evalcond[1]=((((-1.0)*r12*x11976))+((r11*x11977))+(((-1.0)*r10*x11980)));
evalcond[2]=(((r00*x11979))+(((-1.0)*gconst10*r01*x11976))+(((-1.0)*r02*x11978)));
evalcond[3]=((1.0)+((r01*x11977))+(((-1.0)*r00*x11980))+(((-1.0)*r02*x11976)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11978))+(((-1.0)*gconst10*r11*x11976))+((cj1*sj2))+((r10*x11979)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11979))+(((-1.0)*r22*x11978))+(((-1.0)*gconst10*r21*x11976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11981=((1.0)*gconst11);
CheckValue<IkReal> x11982 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11982.valid){
continue;
}
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11981)))),-1);
if(!x11983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11982.value)+(((1.5707963267949)*(x11983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11984=IKsin(j4);
IkReal x11985=IKcos(j4);
IkReal x11986=((1.0)*x11985);
IkReal x11987=(gconst10*x11984);
IkReal x11988=((1.0)*x11984);
IkReal x11989=(gconst11*x11985);
IkReal x11990=(gconst11*x11988);
evalcond[0]=(((r21*x11987))+(((-1.0)*r20*x11990))+(((-1.0)*r22*x11986)));
evalcond[1]=((((-1.0)*r12*x11986))+((r11*x11987))+(((-1.0)*r10*x11990)));
evalcond[2]=((((-1.0)*gconst10*r01*x11986))+(((-1.0)*r02*x11988))+((r00*x11989)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11986))+((r01*x11987))+(((-1.0)*r00*x11990)));
evalcond[4]=((((-1.0)*r12*x11988))+((cj2*sj1))+((r10*x11989))+(((-1.0)*gconst10*r11*x11986))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11986))+((r20*x11989))+(((-1.0)*r22*x11988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11991=((-1.0)*r11);
IkReal x11992=((-1.0)*r10);
CheckValue<IkReal> x11994 = IKatan2WithCheck(IkReal(x11991),IkReal(x11992),IKFAST_ATAN2_MAGTHRESH);
if(!x11994.valid){
continue;
}
IkReal x11993=((1.0)*(x11994.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11993)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11992);
rxp1_1=(px*r21);
rxp1_2=(px*x11991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11993)));
IkReal gconst10=x11991;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11995=((-1.0)*r11);
IkReal x11996=((-1.0)*r10);
CheckValue<IkReal> x11998 = IKatan2WithCheck(IkReal(x11995),IkReal(x11996),IKFAST_ATAN2_MAGTHRESH);
if(!x11998.valid){
continue;
}
IkReal x11997=((1.0)*(x11998.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11997)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11996);
rxp1_1=(px*r21);
rxp1_2=(px*x11995);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11997)));
IkReal gconst10=x11995;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11999=((-1.0)*r11);
IkReal x12000=((-1.0)*r10);
CheckValue<IkReal> x12002 = IKatan2WithCheck(IkReal(x11999),IkReal(x12000),IKFAST_ATAN2_MAGTHRESH);
if(!x12002.valid){
continue;
}
IkReal x12001=((1.0)*(x12002.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12001)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12000);
rxp1_1=(px*r21);
rxp1_2=(px*x11999);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12001)));
IkReal gconst10=x11999;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12005=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12005.valid){
continue;
}
IkReal x12003=x12005.value;
IkReal x12004=(sj0*x12003);
cj4array[0]=(((cj1*sj2*x12004))+((cj2*sj1*x12004)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12006=IKsin(j4);
IkReal x12007=IKcos(j4);
IkReal x12008=(gconst10*r21);
IkReal x12009=(gconst11*r20);
IkReal x12010=((1.0)*x12006);
IkReal x12011=((1.0)*x12007);
evalcond[0]=((-1.0)*r02*x12006);
evalcond[1]=((((-1.0)*r02*x12011))+(((-1.0)*sj0)));
evalcond[2]=(((x12006*x12008))+(((-1.0)*x12009*x12010)));
evalcond[3]=((((-1.0)*gconst11*r10*x12010))+((gconst10*r11*x12006)));
evalcond[4]=((((-1.0)*x12008*x12011))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12007*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12013=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12013.valid){
continue;
}
IkReal x12012=x12013.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12012))+((cj1*cj2*x12012)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12014=IKsin(j4);
IkReal x12015=IKcos(j4);
IkReal x12016=((1.0)*sj0);
IkReal x12017=(gconst10*x12014);
IkReal x12018=((1.0)*x12015);
IkReal x12019=((1.0)*gconst11*x12014);
evalcond[0]=((-1.0)*r02*x12014);
evalcond[1]=((((-1.0)*r02*x12018))+(((-1.0)*x12016)));
evalcond[2]=(((r21*x12017))+(((-1.0)*r20*x12019)));
evalcond[3]=(((r11*x12017))+(((-1.0)*r10*x12019)));
evalcond[4]=(((gconst11*r10*x12015))+(((-1.0)*cj2*sj1*x12016))+(((-1.0)*cj1*sj2*x12016))+(((-1.0)*gconst10*r11*x12018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(r02,-1);
if(!x12020.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12020.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12021=IKsin(j4);
IkReal x12022=IKcos(j4);
IkReal x12023=(gconst10*r21);
IkReal x12024=((1.0)*sj0);
IkReal x12025=(gconst10*r11);
IkReal x12026=(gconst11*x12022);
IkReal x12027=((1.0)*x12022);
IkReal x12028=((1.0)*gconst11*x12021);
evalcond[0]=((-1.0)*r02*x12021);
evalcond[1]=((((-1.0)*r20*x12028))+((x12021*x12023)));
evalcond[2]=(((x12021*x12025))+(((-1.0)*r10*x12028)));
evalcond[3]=(((r20*x12026))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12023*x12027)));
evalcond[4]=((((-1.0)*cj1*sj2*x12024))+(((-1.0)*cj2*sj1*x12024))+(((-1.0)*x12025*x12027))+((r10*x12026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12029=((1.0)*gconst11);
CheckValue<IkReal> x12030=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12030.valid){
continue;
}
CheckValue<IkReal> x12031 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12029))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12030.value)))+(x12031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12032=IKsin(j4);
IkReal x12033=IKcos(j4);
IkReal x12034=((1.0)*cj2);
IkReal x12035=((1.0)*sj0);
IkReal x12036=(cj1*sj2);
IkReal x12037=(gconst10*x12032);
IkReal x12038=((1.0)*x12033);
IkReal x12039=(gconst11*x12033);
IkReal x12040=((1.0)*x12032);
IkReal x12041=(gconst11*x12040);
evalcond[0]=((((-1.0)*r20*x12041))+((r21*x12037)));
evalcond[1]=(cj0+(((-1.0)*r10*x12041))+(((-1.0)*r12*x12038))+((r11*x12037)));
evalcond[2]=((((-1.0)*cj1*x12034))+((r20*x12039))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12038)));
evalcond[3]=((((-1.0)*r00*x12041))+(((-1.0)*x12035))+((r01*x12037))+(((-1.0)*r02*x12038)));
evalcond[4]=((((-1.0)*gconst10*r01*x12038))+((r00*x12039))+(((-1.0)*cj0*sj1*x12034))+(((-1.0)*r02*x12040))+(((-1.0)*cj0*x12036)));
evalcond[5]=((((-1.0)*r12*x12040))+(((-1.0)*x12035*x12036))+(((-1.0)*gconst10*r11*x12038))+((r10*x12039))+(((-1.0)*sj0*sj1*x12034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12042=(gconst10*r21);
IkReal x12043=(gconst11*r20);
IkReal x12044=(sj1*sj2);
IkReal x12045=(cj1*cj2);
CheckValue<IkReal> x12046 = IKatan2WithCheck(IkReal((((r22*x12044))+(((-1.0)*r22*x12045)))),IkReal(((((-1.0)*x12042*x12045))+((x12042*x12044))+((x12043*x12045))+(((-1.0)*x12043*x12044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12046.valid){
continue;
}
CheckValue<IkReal> x12047=IKPowWithIntegerCheck(IKsign(((x12042*x12042)+(r22*r22)+(((-2.0)*x12042*x12043))+(x12043*x12043))),-1);
if(!x12047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12046.value)+(((1.5707963267949)*(x12047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12048=IKsin(j4);
IkReal x12049=IKcos(j4);
IkReal x12050=((1.0)*cj2);
IkReal x12051=((1.0)*sj0);
IkReal x12052=(cj1*sj2);
IkReal x12053=((1.0)*x12049);
IkReal x12054=(gconst10*x12048);
IkReal x12055=((1.0)*x12048);
IkReal x12056=(gconst11*x12049);
IkReal x12057=(gconst11*x12055);
evalcond[0]=((((-1.0)*r20*x12057))+(((-1.0)*r22*x12053))+((r21*x12054)));
evalcond[1]=((((-1.0)*r10*x12057))+cj0+(((-1.0)*r12*x12053))+((r11*x12054)));
evalcond[2]=((((-1.0)*x12051))+((r01*x12054))+(((-1.0)*r02*x12053))+(((-1.0)*r00*x12057)));
evalcond[3]=(((r20*x12056))+(((-1.0)*cj1*x12050))+((sj1*sj2))+(((-1.0)*r22*x12055))+(((-1.0)*gconst10*r21*x12053)));
evalcond[4]=((((-1.0)*cj0*sj1*x12050))+((r00*x12056))+(((-1.0)*r02*x12055))+(((-1.0)*gconst10*r01*x12053))+(((-1.0)*cj0*x12052)));
evalcond[5]=(((r10*x12056))+(((-1.0)*gconst10*r11*x12053))+(((-1.0)*r12*x12055))+(((-1.0)*sj0*sj1*x12050))+(((-1.0)*x12051*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12058=((1.0)*sj0);
IkReal x12059=((1.0)*gconst10);
CheckValue<IkReal> x12060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12059))+(((-1.0)*gconst11*r21)))),-1);
if(!x12060.valid){
continue;
}
CheckValue<IkReal> x12061 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12058)))),IkReal(((((-1.0)*gconst10*r11*x12058))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12059))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12060.value)))+(x12061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12062=IKsin(j4);
IkReal x12063=IKcos(j4);
IkReal x12064=((1.0)*cj2);
IkReal x12065=((1.0)*sj0);
IkReal x12066=(cj1*sj2);
IkReal x12067=((1.0)*x12063);
IkReal x12068=(gconst10*x12062);
IkReal x12069=((1.0)*x12062);
IkReal x12070=(gconst11*x12063);
IkReal x12071=(gconst11*x12069);
evalcond[0]=(((r21*x12068))+(((-1.0)*r20*x12071))+(((-1.0)*r22*x12067)));
evalcond[1]=(cj0+(((-1.0)*r10*x12071))+(((-1.0)*r12*x12067))+((r11*x12068)));
evalcond[2]=(((r01*x12068))+(((-1.0)*r02*x12067))+(((-1.0)*x12065))+(((-1.0)*r00*x12071)));
evalcond[3]=((((-1.0)*gconst10*r21*x12067))+((sj1*sj2))+((r20*x12070))+(((-1.0)*r22*x12069))+(((-1.0)*cj1*x12064)));
evalcond[4]=((((-1.0)*cj0*x12066))+(((-1.0)*cj0*sj1*x12064))+(((-1.0)*r02*x12069))+(((-1.0)*gconst10*r01*x12067))+((r00*x12070)));
evalcond[5]=((((-1.0)*sj0*sj1*x12064))+((r10*x12070))+(((-1.0)*gconst10*r11*x12067))+(((-1.0)*r12*x12069))+(((-1.0)*x12065*x12066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12072=((1.0)*gconst11);
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12072)))),-1);
if(!x12074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12073.value)+(((1.5707963267949)*(x12074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12075=IKsin(j4);
IkReal x12076=IKcos(j4);
IkReal x12077=((1.0)*cj2);
IkReal x12078=((1.0)*sj0);
IkReal x12079=(cj1*sj2);
IkReal x12080=((1.0)*x12076);
IkReal x12081=(gconst10*x12075);
IkReal x12082=((1.0)*x12075);
IkReal x12083=(gconst11*x12076);
IkReal x12084=(gconst11*x12082);
evalcond[0]=((((-1.0)*r22*x12080))+((r21*x12081))+(((-1.0)*r20*x12084)));
evalcond[1]=((((-1.0)*r12*x12080))+cj0+((r11*x12081))+(((-1.0)*r10*x12084)));
evalcond[2]=(((r01*x12081))+(((-1.0)*r00*x12084))+(((-1.0)*r02*x12080))+(((-1.0)*x12078)));
evalcond[3]=(((r20*x12083))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12080))+(((-1.0)*r22*x12082))+(((-1.0)*cj1*x12077)));
evalcond[4]=(((r00*x12083))+(((-1.0)*gconst10*r01*x12080))+(((-1.0)*cj0*sj1*x12077))+(((-1.0)*r02*x12082))+(((-1.0)*cj0*x12079)));
evalcond[5]=((((-1.0)*r12*x12082))+(((-1.0)*sj0*sj1*x12077))+(((-1.0)*x12078*x12079))+(((-1.0)*gconst10*r11*x12080))+((r10*x12083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12085=((-1.0)*r11);
CheckValue<IkReal> x12088 = IKatan2WithCheck(IkReal(x12085),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12088.valid){
continue;
}
IkReal x12086=((1.0)*(x12088.value));
IkReal x12087=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12086)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12086)));
IkReal gconst10=(x12085*x12087);
IkReal gconst11=((1.0)*r10*x12087);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12089=((-1.0)*r11);
CheckValue<IkReal> x12092 = IKatan2WithCheck(IkReal(x12089),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12092.valid){
continue;
}
IkReal x12090=((1.0)*(x12092.value));
IkReal x12091=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12090)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12090)));
IkReal gconst10=(x12089*x12091);
IkReal gconst11=((1.0)*r10*x12091);
IkReal x12093=r12*r12;
IkReal x12094=((1.0)*sj0);
IkReal x12095=(cj0*r02);
IkReal x12096=x11832;
j4eval[0]=((IKabs(((((-1.0)*x12094*x12096))+((r12*x12095*x12096))+((sj0*x12093*x12096)))))+(IKabs(((((-1.0)*x12095))+(((-1.0)*r12*x12094))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12097=((-1.0)*r11);
CheckValue<IkReal> x12100 = IKatan2WithCheck(IkReal(x12097),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12100.valid){
continue;
}
IkReal x12098=((1.0)*(x12100.value));
IkReal x12099=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12098)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12098)));
IkReal gconst10=(x12097*x12099);
IkReal gconst11=((1.0)*r10*x12099);
IkReal x12101=r12*r12;
IkReal x12102=((1.0)+(((-1.0)*x12101)));
IkReal x12103=(r22*sj1*sj2);
IkReal x12104=(cj1*cj2*r22);
CheckValue<IkReal> x12111=IKPowWithIntegerCheck(x12102,-1);
if(!x12111.valid){
continue;
}
IkReal x12105=x12111.value;
CheckValue<IkReal> x12112=IKPowWithIntegerCheck(((-1.0)+x12101),-1);
if(!x12112.valid){
continue;
}
IkReal x12106=x12112.value;
IkReal x12107=((1.0)*x12105);
if((x12102) < -0.00001)
continue;
IkReal x12108=IKsqrt(x12102);
IkReal x12109=(r12*x12106*x12108);
IkReal x12110=((((-1.0)*x12107*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12105))+(((-1.0)*x12107*(r11*r11)*(r21*r21))));
j4eval[0]=x12110;
j4eval[1]=((IKabs(((((-1.0)*x12103*x12109))+((x12104*x12109)))))+(IKabs((x12103+(((-1.0)*x12104))))));
j4eval[2]=IKsign(x12110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12113=((-1.0)*r11);
CheckValue<IkReal> x12116 = IKatan2WithCheck(IkReal(x12113),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12116.valid){
continue;
}
IkReal x12114=((1.0)*(x12116.value));
IkReal x12115=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12114)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12114)));
IkReal gconst10=(x12113*x12115);
IkReal gconst11=((1.0)*r10*x12115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12117=((-1.0)*r11);
CheckValue<IkReal> x12120 = IKatan2WithCheck(IkReal(x12117),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12120.valid){
continue;
}
IkReal x12118=((1.0)*(x12120.value));
IkReal x12119=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12118)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12118)));
IkReal gconst10=(x12117*x12119);
IkReal gconst11=((1.0)*r10*x12119);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12121=((-1.0)*r11);
CheckValue<IkReal> x12124 = IKatan2WithCheck(IkReal(x12121),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12124.valid){
continue;
}
IkReal x12122=((1.0)*(x12124.value));
IkReal x12123=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12122)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12122)));
IkReal gconst10=(x12121*x12123);
IkReal gconst11=((1.0)*r10*x12123);
IkReal x12125=(cj1*r02*sj2);
IkReal x12126=(cj2*r02*sj1);
IkReal x12127=x11832;
IkReal x12128=(r12*x12127);
j4eval[0]=((IKabs((((x12125*x12128))+((x12126*x12128)))))+(IKabs((x12126+x12125))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12129=(cj1*sj2);
IkReal x12130=(cj2*sj1);
IkReal x12131=(gconst11*r00);
IkReal x12132=((1.0)*gconst10*r01);
CheckValue<IkReal> x12133=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12133.valid){
continue;
}
CheckValue<IkReal> x12134 = IKatan2WithCheck(IkReal(((((-1.0)*x12129*x12132))+((x12129*x12131))+(((-1.0)*x12130*x12132))+((x12130*x12131)))),IkReal((((r02*x12130))+((r02*x12129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12133.value)))+(x12134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12135=IKcos(j4);
IkReal x12136=IKsin(j4);
IkReal x12137=((1.0)*cj2);
IkReal x12138=((1.0)*x12135);
IkReal x12139=(gconst10*x12135);
IkReal x12140=(gconst10*x12136);
IkReal x12141=((1.0)*gconst11*x12136);
evalcond[0]=((((-1.0)*gconst11*r00*x12138))+((r01*x12139))+((r02*x12136)));
evalcond[1]=((((-1.0)*r22*x12138))+(((-1.0)*r20*x12141))+((r21*x12140)));
evalcond[2]=(((r11*x12140))+(((-1.0)*r12*x12138))+(((-1.0)*r10*x12141)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12141))+((r01*x12140))+(((-1.0)*r02*x12138)));
evalcond[4]=((((-1.0)*cj1*x12137))+((sj1*sj2))+((r21*x12139))+((r22*x12136))+(((-1.0)*gconst11*r20*x12138)));
evalcond[5]=(((r12*x12136))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12138))+((r11*x12139))+(((-1.0)*sj1*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12142=(gconst10*r01);
IkReal x12143=(gconst11*r00);
CheckValue<IkReal> x12144=IKPowWithIntegerCheck(IKsign(((x12143*x12143)+(x12142*x12142)+(((-2.0)*x12142*x12143))+(r02*r02))),-1);
if(!x12144.valid){
continue;
}
CheckValue<IkReal> x12145 = IKatan2WithCheck(IkReal(((((-1.0)*x12143))+x12142)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12144.value)))+(x12145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12146=IKcos(j4);
IkReal x12147=IKsin(j4);
IkReal x12148=((1.0)*cj2);
IkReal x12149=((1.0)*x12146);
IkReal x12150=(gconst10*x12146);
IkReal x12151=(gconst10*x12147);
IkReal x12152=((1.0)*gconst11*x12147);
evalcond[0]=(((r02*x12147))+((r01*x12150))+(((-1.0)*gconst11*r00*x12149)));
evalcond[1]=((((-1.0)*r22*x12149))+((r21*x12151))+(((-1.0)*r20*x12152)));
evalcond[2]=((((-1.0)*r12*x12149))+((r11*x12151))+(((-1.0)*r10*x12152)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12149))+(((-1.0)*r00*x12152))+((r01*x12151)));
evalcond[4]=(((r22*x12147))+(((-1.0)*gconst11*r20*x12149))+((sj1*sj2))+(((-1.0)*cj1*x12148))+((r21*x12150)));
evalcond[5]=((((-1.0)*gconst11*r10*x12149))+(((-1.0)*cj1*sj2))+((r12*x12147))+(((-1.0)*sj1*x12148))+((r11*x12150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
CheckValue<IkReal> x12154=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12153.value)+(((1.5707963267949)*(x12154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12155=IKcos(j4);
IkReal x12156=IKsin(j4);
IkReal x12157=((1.0)*cj2);
IkReal x12158=((1.0)*x12155);
IkReal x12159=(gconst10*x12155);
IkReal x12160=(gconst10*x12156);
IkReal x12161=((1.0)*gconst11*x12156);
evalcond[0]=(((r02*x12156))+((r01*x12159))+(((-1.0)*gconst11*r00*x12158)));
evalcond[1]=(((r21*x12160))+(((-1.0)*r22*x12158))+(((-1.0)*r20*x12161)));
evalcond[2]=((((-1.0)*r10*x12161))+(((-1.0)*r12*x12158))+((r11*x12160)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12158))+(((-1.0)*r00*x12161))+((r01*x12160)));
evalcond[4]=((((-1.0)*gconst11*r20*x12158))+((r22*x12156))+((sj1*sj2))+((r21*x12159))+(((-1.0)*cj1*x12157)));
evalcond[5]=((((-1.0)*gconst11*r10*x12158))+((r12*x12156))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12157))+((r11*x12159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12162=((-1.0)*r11);
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(x12162),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
IkReal x12163=((1.0)*(x12165.value));
IkReal x12164=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12163)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12163)));
IkReal gconst10=(x12162*x12164);
IkReal gconst11=((1.0)*r10*x12164);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12166=((-1.0)*r11);
CheckValue<IkReal> x12169 = IKatan2WithCheck(IkReal(x12166),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12169.valid){
continue;
}
IkReal x12167=((1.0)*(x12169.value));
IkReal x12168=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12167)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12167)));
IkReal gconst10=(x12166*x12168);
IkReal gconst11=((1.0)*r10*x12168);
IkReal x12170=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12174=IKPowWithIntegerCheck(x12170,-1);
if(!x12174.valid){
continue;
}
IkReal x12171=x12174.value;
IkReal x12172=((1.0)*x12171);
IkReal x12173=((((-2.0)*r00*r01*r10*r11*x12171))+(((-1.0)*(r02*r02)))+(((-1.0)*x12172*(r01*r01)*(r11*r11)))+(((-1.0)*x12172*(r00*r00)*(r10*r10))));
j4eval[0]=x12173;
j4eval[1]=r02;
j4eval[2]=x12170;
j4eval[3]=IKsign(x12173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12175=((-1.0)*r11);
CheckValue<IkReal> x12178 = IKatan2WithCheck(IkReal(x12175),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12178.valid){
continue;
}
IkReal x12176=((1.0)*(x12178.value));
IkReal x12177=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12176)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12176)));
IkReal gconst10=(x12175*x12177);
IkReal gconst11=((1.0)*r10*x12177);
IkReal x12179=r12*r12;
IkReal x12180=((1.0)*r02);
IkReal x12181=(cj1*sj2);
IkReal x12182=(cj2*sj1);
CheckValue<IkReal> x12186=IKPowWithIntegerCheck(((-1.0)+x12179),-1);
if(!x12186.valid){
continue;
}
IkReal x12183=x12186.value;
if((((1.0)+(((-1.0)*x12179)))) < -0.00001)
continue;
IkReal x12184=IKsqrt(((1.0)+(((-1.0)*x12179))));
IkReal x12185=(r12*x12183*x12184);
j4eval[0]=((IKabs(((((-1.0)*x12180*x12181))+(((-1.0)*x12180*x12182)))))+(IKabs(((((-1.0)*x12180*x12181*x12185))+(((-1.0)*x12180*x12182*x12185))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12187=(cj1*sj2);
IkReal x12188=(gconst10*r01);
IkReal x12189=(cj2*sj1);
IkReal x12190=((1.0)*r02);
IkReal x12191=((1.0)*gconst11*r00);
CheckValue<IkReal> x12192=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12192.valid){
continue;
}
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal((((x12187*x12188))+(((-1.0)*x12187*x12191))+((x12188*x12189))+(((-1.0)*x12189*x12191)))),IkReal(((((-1.0)*x12187*x12190))+(((-1.0)*x12189*x12190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12192.value)))+(x12193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12194=IKcos(j4);
IkReal x12195=IKsin(j4);
IkReal x12196=((1.0)*x12194);
IkReal x12197=(gconst10*x12194);
IkReal x12198=(gconst10*x12195);
IkReal x12199=((1.0)*gconst11*x12195);
evalcond[0]=((((-1.0)*gconst11*r00*x12196))+((r02*x12195))+((r01*x12197)));
evalcond[1]=((((-1.0)*r20*x12199))+((r21*x12198))+(((-1.0)*r22*x12196)));
evalcond[2]=(((r11*x12198))+(((-1.0)*r10*x12199))+(((-1.0)*r12*x12196)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12196))+((r01*x12198))+(((-1.0)*r00*x12199)));
evalcond[4]=(((cj2*sj1))+((r12*x12195))+((cj1*sj2))+((r11*x12197))+(((-1.0)*gconst11*r10*x12196)));
evalcond[5]=(((r21*x12197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12195))+(((-1.0)*gconst11*r20*x12196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12200=(gconst10*r01);
IkReal x12201=(gconst11*r00);
CheckValue<IkReal> x12202 = IKatan2WithCheck(IkReal(((((-1.0)*x12201))+x12200)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12202.valid){
continue;
}
CheckValue<IkReal> x12203=IKPowWithIntegerCheck(IKsign(((((2.0)*x12200*x12201))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12200*x12200)))+(((-1.0)*(x12201*x12201))))),-1);
if(!x12203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12202.value)+(((1.5707963267949)*(x12203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12204=IKcos(j4);
IkReal x12205=IKsin(j4);
IkReal x12206=((1.0)*x12204);
IkReal x12207=(gconst10*x12204);
IkReal x12208=(gconst10*x12205);
IkReal x12209=((1.0)*gconst11*x12205);
evalcond[0]=(((r02*x12205))+(((-1.0)*gconst11*r00*x12206))+((r01*x12207)));
evalcond[1]=((((-1.0)*r22*x12206))+((r21*x12208))+(((-1.0)*r20*x12209)));
evalcond[2]=((((-1.0)*r12*x12206))+(((-1.0)*r10*x12209))+((r11*x12208)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12206))+(((-1.0)*r00*x12209))+((r01*x12208)));
evalcond[4]=(((cj2*sj1))+((r12*x12205))+(((-1.0)*gconst11*r10*x12206))+((cj1*sj2))+((r11*x12207)));
evalcond[5]=(((r22*x12205))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12206))+((r21*x12207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12210=((1.0)*gconst11);
CheckValue<IkReal> x12211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12210)))),-1);
if(!x12211.valid){
continue;
}
CheckValue<IkReal> x12212 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12211.value)))+(x12212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12213=IKcos(j4);
IkReal x12214=IKsin(j4);
IkReal x12215=((1.0)*x12213);
IkReal x12216=(gconst10*x12213);
IkReal x12217=(gconst10*x12214);
IkReal x12218=((1.0)*gconst11*x12214);
evalcond[0]=((((-1.0)*gconst11*r00*x12215))+((r02*x12214))+((r01*x12216)));
evalcond[1]=((((-1.0)*r22*x12215))+((r21*x12217))+(((-1.0)*r20*x12218)));
evalcond[2]=((((-1.0)*r12*x12215))+(((-1.0)*r10*x12218))+((r11*x12217)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12215))+(((-1.0)*r00*x12218))+((r01*x12217)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12215))+((r12*x12214))+((cj1*sj2))+((r11*x12216)));
evalcond[5]=(((r22*x12214))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12215))+((r21*x12216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12219=((-1.0)*r11);
IkReal x12220=((-1.0)*r10);
CheckValue<IkReal> x12222 = IKatan2WithCheck(IkReal(x12219),IkReal(x12220),IKFAST_ATAN2_MAGTHRESH);
if(!x12222.valid){
continue;
}
IkReal x12221=((1.0)*(x12222.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12221)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12220);
rxp1_1=(px*r21);
rxp1_2=(px*x12219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12221)));
IkReal gconst10=x12219;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12223=((-1.0)*r11);
IkReal x12224=((-1.0)*r10);
CheckValue<IkReal> x12226 = IKatan2WithCheck(IkReal(x12223),IkReal(x12224),IKFAST_ATAN2_MAGTHRESH);
if(!x12226.valid){
continue;
}
IkReal x12225=((1.0)*(x12226.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12225)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12224);
rxp1_1=(px*r21);
rxp1_2=(px*x12223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12225)));
IkReal gconst10=x12223;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12227=((-1.0)*r11);
IkReal x12228=((-1.0)*r10);
CheckValue<IkReal> x12230 = IKatan2WithCheck(IkReal(x12227),IkReal(x12228),IKFAST_ATAN2_MAGTHRESH);
if(!x12230.valid){
continue;
}
IkReal x12229=((1.0)*(x12230.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12229)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12228);
rxp1_1=(px*r21);
rxp1_2=(px*x12227);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12229)));
IkReal gconst10=x12227;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12233=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12233.valid){
continue;
}
IkReal x12231=x12233.value;
IkReal x12232=(sj0*x12231);
cj4array[0]=(((cj2*sj1*x12232))+((cj1*sj2*x12232)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12234=IKsin(j4);
IkReal x12235=IKcos(j4);
IkReal x12236=(gconst10*r21);
IkReal x12237=((1.0)*x12235);
IkReal x12238=((1.0)*gconst11*x12234);
evalcond[0]=(r02*x12234);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12237)));
evalcond[2]=((((-1.0)*r20*x12238))+((x12234*x12236)));
evalcond[3]=(((gconst10*r11*x12234))+(((-1.0)*r10*x12238)));
evalcond[4]=(((x12235*x12236))+(((-1.0)*gconst11*r20*x12237))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12240=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12240.valid){
continue;
}
IkReal x12239=x12240.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12239))+((cj1*cj2*x12239)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12241=IKsin(j4);
IkReal x12242=IKcos(j4);
IkReal x12243=((1.0)*sj0);
IkReal x12244=(gconst10*x12241);
IkReal x12245=((1.0)*x12242);
IkReal x12246=((1.0)*gconst11*x12241);
evalcond[0]=(r02*x12241);
evalcond[1]=((((-1.0)*x12243))+(((-1.0)*r02*x12245)));
evalcond[2]=((((-1.0)*r20*x12246))+((r21*x12244)));
evalcond[3]=((((-1.0)*r10*x12246))+((r11*x12244)));
evalcond[4]=(((gconst10*r11*x12242))+(((-1.0)*cj2*sj1*x12243))+(((-1.0)*gconst11*r10*x12245))+(((-1.0)*cj1*sj2*x12243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12247=IKPowWithIntegerCheck(r02,-1);
if(!x12247.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12247.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12248=IKsin(j4);
IkReal x12249=IKcos(j4);
IkReal x12250=(gconst10*r21);
IkReal x12251=((1.0)*cj1);
IkReal x12252=(gconst10*r11);
IkReal x12253=((1.0)*gconst11*x12248);
IkReal x12254=((1.0)*gconst11*x12249);
evalcond[0]=(r02*x12248);
evalcond[1]=((((-1.0)*r20*x12253))+((x12248*x12250)));
evalcond[2]=(((x12248*x12252))+(((-1.0)*r10*x12253)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12254))+(((-1.0)*cj2*x12251))+((x12249*x12250)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12251))+((x12249*x12252))+(((-1.0)*r10*x12254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12255=((1.0)*gconst11);
CheckValue<IkReal> x12256 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12255))+(((-1.0)*cj0*r00*x12255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12256.valid){
continue;
}
CheckValue<IkReal> x12257=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12256.value)+(((1.5707963267949)*(x12257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12258=IKsin(j4);
IkReal x12259=IKcos(j4);
IkReal x12260=((1.0)*gconst11);
IkReal x12261=((1.0)*cj2);
IkReal x12262=((1.0)*sj0);
IkReal x12263=(cj1*sj2);
IkReal x12264=(gconst10*x12259);
IkReal x12265=(gconst10*x12258);
IkReal x12266=((1.0)*x12259);
evalcond[0]=((((-1.0)*r20*x12258*x12260))+((r21*x12265)));
evalcond[1]=((((-1.0)*r12*x12266))+cj0+((r11*x12265))+(((-1.0)*r10*x12258*x12260)));
evalcond[2]=((((-1.0)*r20*x12259*x12260))+((sj1*sj2))+((r21*x12264))+(((-1.0)*cj1*x12261)));
evalcond[3]=(((r01*x12265))+(((-1.0)*r00*x12258*x12260))+(((-1.0)*r02*x12266))+(((-1.0)*x12262)));
evalcond[4]=((((-1.0)*r00*x12259*x12260))+(((-1.0)*cj0*sj1*x12261))+((r01*x12264))+(((-1.0)*cj0*x12263))+((r02*x12258)));
evalcond[5]=(((r12*x12258))+((r11*x12264))+(((-1.0)*r10*x12259*x12260))+(((-1.0)*x12262*x12263))+(((-1.0)*sj0*sj1*x12261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12267=(gconst10*r21);
IkReal x12268=(gconst11*r20);
IkReal x12269=(sj1*sj2);
IkReal x12270=(cj1*cj2);
CheckValue<IkReal> x12271=IKPowWithIntegerCheck(IKsign(((((2.0)*x12267*x12268))+(((-1.0)*(x12267*x12267)))+(((-1.0)*(x12268*x12268)))+(((-1.0)*(r22*r22))))),-1);
if(!x12271.valid){
continue;
}
CheckValue<IkReal> x12272 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12270))+((r22*x12269)))),IkReal((((x12268*x12270))+(((-1.0)*x12268*x12269))+((x12267*x12269))+(((-1.0)*x12267*x12270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12271.value)))+(x12272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12273=IKsin(j4);
IkReal x12274=IKcos(j4);
IkReal x12275=((1.0)*cj2);
IkReal x12276=((1.0)*sj0);
IkReal x12277=(cj1*sj2);
IkReal x12278=((1.0)*x12274);
IkReal x12279=(gconst10*x12274);
IkReal x12280=(gconst10*x12273);
IkReal x12281=((1.0)*gconst11*x12273);
evalcond[0]=((((-1.0)*r22*x12278))+(((-1.0)*r20*x12281))+((r21*x12280)));
evalcond[1]=((((-1.0)*r10*x12281))+cj0+((r11*x12280))+(((-1.0)*r12*x12278)));
evalcond[2]=((((-1.0)*r02*x12278))+(((-1.0)*x12276))+((r01*x12280))+(((-1.0)*r00*x12281)));
evalcond[3]=(((r21*x12279))+(((-1.0)*cj1*x12275))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12278))+((r22*x12273)));
evalcond[4]=((((-1.0)*cj0*x12277))+((r02*x12273))+(((-1.0)*gconst11*r00*x12278))+(((-1.0)*cj0*sj1*x12275))+((r01*x12279)));
evalcond[5]=((((-1.0)*sj0*sj1*x12275))+(((-1.0)*x12276*x12277))+((r12*x12273))+((r11*x12279))+(((-1.0)*gconst11*r10*x12278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12282=((1.0)*sj0);
IkReal x12283=((1.0)*gconst10);
CheckValue<IkReal> x12284 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12282))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12283))+(((-1.0)*gconst10*r11*x12282))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12284.valid){
continue;
}
CheckValue<IkReal> x12285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12283)))),-1);
if(!x12285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12284.value)+(((1.5707963267949)*(x12285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12286=IKsin(j4);
IkReal x12287=IKcos(j4);
IkReal x12288=((1.0)*cj2);
IkReal x12289=((1.0)*sj0);
IkReal x12290=(cj1*sj2);
IkReal x12291=((1.0)*x12287);
IkReal x12292=(gconst10*x12287);
IkReal x12293=(gconst10*x12286);
IkReal x12294=((1.0)*gconst11*x12286);
evalcond[0]=(((r21*x12293))+(((-1.0)*r20*x12294))+(((-1.0)*r22*x12291)));
evalcond[1]=((((-1.0)*r10*x12294))+cj0+((r11*x12293))+(((-1.0)*r12*x12291)));
evalcond[2]=(((r01*x12293))+(((-1.0)*r00*x12294))+(((-1.0)*r02*x12291))+(((-1.0)*x12289)));
evalcond[3]=(((r21*x12292))+((r22*x12286))+(((-1.0)*cj1*x12288))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12291)));
evalcond[4]=(((r01*x12292))+((r02*x12286))+(((-1.0)*cj0*x12290))+(((-1.0)*cj0*sj1*x12288))+(((-1.0)*gconst11*r00*x12291)));
evalcond[5]=((((-1.0)*sj0*sj1*x12288))+((r11*x12292))+(((-1.0)*gconst11*r10*x12291))+((r12*x12286))+(((-1.0)*x12289*x12290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12295=((1.0)*gconst11);
CheckValue<IkReal> x12296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12295))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12296.valid){
continue;
}
CheckValue<IkReal> x12297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12295)))),-1);
if(!x12297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12296.value)+(((1.5707963267949)*(x12297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12298=IKsin(j4);
IkReal x12299=IKcos(j4);
IkReal x12300=((1.0)*cj2);
IkReal x12301=((1.0)*sj0);
IkReal x12302=(cj1*sj2);
IkReal x12303=((1.0)*x12299);
IkReal x12304=(gconst10*x12299);
IkReal x12305=(gconst10*x12298);
IkReal x12306=((1.0)*gconst11*x12298);
evalcond[0]=((((-1.0)*r20*x12306))+((r21*x12305))+(((-1.0)*r22*x12303)));
evalcond[1]=(cj0+((r11*x12305))+(((-1.0)*r10*x12306))+(((-1.0)*r12*x12303)));
evalcond[2]=((((-1.0)*r02*x12303))+(((-1.0)*r00*x12306))+(((-1.0)*x12301))+((r01*x12305)));
evalcond[3]=((((-1.0)*cj1*x12300))+((r21*x12304))+(((-1.0)*gconst11*r20*x12303))+((sj1*sj2))+((r22*x12298)));
evalcond[4]=((((-1.0)*cj0*x12302))+(((-1.0)*gconst11*r00*x12303))+((r02*x12298))+((r01*x12304))+(((-1.0)*cj0*sj1*x12300)));
evalcond[5]=((((-1.0)*gconst11*r10*x12303))+((r11*x12304))+(((-1.0)*x12301*x12302))+((r12*x12298))+(((-1.0)*sj0*sj1*x12300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12307=((-1.0)*r11);
CheckValue<IkReal> x12310 = IKatan2WithCheck(IkReal(x12307),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12310.valid){
continue;
}
IkReal x12308=((1.0)*(x12310.value));
IkReal x12309=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12308)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12308)));
IkReal gconst10=(x12307*x12309);
IkReal gconst11=((1.0)*r10*x12309);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12311=gconst10*gconst10;
IkReal x12312=gconst11*gconst11;
IkReal x12313=(gconst10*r21);
IkReal x12314=(cj3*r00);
IkReal x12315=(r00*sj3);
IkReal x12316=((1.0)*gconst11);
IkReal x12317=(gconst10*r20);
IkReal x12318=(r01*sj3);
IkReal x12319=(cj3*gconst11*r01);
IkReal x12320=(r21*x12311);
IkReal x12321=(r20*x12312);
CheckValue<IkReal> x12322 = IKatan2WithCheck(IkReal((((gconst10*r22*x12314))+((r22*x12319)))),IkReal((((x12314*x12320))+(((-1.0)*cj3*r01*x12321))+(((-1.0)*x12314*x12316*x12317))+((x12313*x12319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12322.valid){
continue;
}
CheckValue<IkReal> x12323=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12316*x12317*x12318))+((x12315*x12321))+((x12318*x12320))+(((-1.0)*x12313*x12315*x12316))+((r02*r22*sj3)))),-1);
if(!x12323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12322.value)+(((1.5707963267949)*(x12323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12324=IKsin(j4);
IkReal x12325=IKcos(j4);
IkReal x12326=(sj1*sj2);
IkReal x12327=(gconst10*sj3);
IkReal x12328=(cj3*gconst10);
IkReal x12329=(gconst11*r20);
IkReal x12330=(gconst11*r21);
IkReal x12331=(gconst11*r00);
IkReal x12332=(cj3*gconst11);
IkReal x12333=(gconst11*r10);
IkReal x12334=((1.0)*cj1);
IkReal x12335=(cj2*sj1);
IkReal x12336=(gconst11*sj3);
IkReal x12337=(cj2*x12334);
IkReal x12338=((1.0)*x12325);
IkReal x12339=((1.0)*x12324);
IkReal x12340=(gconst10*x12324);
IkReal x12341=(cj3*x12324);
IkReal x12342=(sj3*x12325);
evalcond[0]=((((-1.0)*r22*x12338))+(((-1.0)*x12329*x12339))+((r21*x12340)));
evalcond[1]=((((-1.0)*x12333*x12339))+((r11*x12340))+(((-1.0)*r12*x12338)));
evalcond[2]=((-1.0)+(((-1.0)*x12331*x12339))+((r01*x12340))+(((-1.0)*r02*x12338)));
evalcond[3]=(((r00*x12327))+((r01*x12336))+((r02*x12341))+(((-1.0)*cj3*x12331*x12338))+((r01*x12325*x12328)));
evalcond[4]=(((r00*x12328))+((r01*x12332))+(((-1.0)*r01*x12327*x12338))+((x12331*x12342))+(((-1.0)*r02*sj3*x12339)));
evalcond[5]=((((-1.0)*cj3*x12329*x12338))+((cj1*sj2))+x12335+((r20*x12327))+((r22*x12341))+((sj3*x12330))+((r21*x12325*x12328)));
evalcond[6]=(x12326+(((-1.0)*x12337))+((r10*x12327))+(((-1.0)*r10*x12332*x12338))+((r11*x12336))+((r12*x12341))+((r11*x12325*x12328)));
evalcond[7]=(x12326+((r20*x12328))+(((-1.0)*x12337))+((x12329*x12342))+(((-1.0)*r22*sj3*x12339))+((cj3*x12330))+(((-1.0)*r21*x12327*x12338)));
evalcond[8]=(((x12333*x12342))+(((-1.0)*r11*x12327*x12338))+(((-1.0)*r12*sj3*x12339))+((r10*x12328))+(((-1.0)*sj2*x12334))+((r11*x12332))+(((-1.0)*x12335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12343 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12343.valid){
continue;
}
CheckValue<IkReal> x12344=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12343.value)+(((1.5707963267949)*(x12344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12345=IKsin(j4);
IkReal x12346=IKcos(j4);
IkReal x12347=(sj1*sj2);
IkReal x12348=(gconst10*sj3);
IkReal x12349=(cj3*gconst10);
IkReal x12350=(gconst11*r20);
IkReal x12351=(gconst11*r21);
IkReal x12352=(gconst11*r00);
IkReal x12353=(cj3*gconst11);
IkReal x12354=(gconst11*r10);
IkReal x12355=((1.0)*cj1);
IkReal x12356=(cj2*sj1);
IkReal x12357=(gconst11*sj3);
IkReal x12358=(cj2*x12355);
IkReal x12359=((1.0)*x12346);
IkReal x12360=((1.0)*x12345);
IkReal x12361=(gconst10*x12345);
IkReal x12362=(cj3*x12345);
IkReal x12363=(sj3*x12346);
evalcond[0]=(((r21*x12361))+(((-1.0)*x12350*x12360))+(((-1.0)*r22*x12359)));
evalcond[1]=(((r11*x12361))+(((-1.0)*x12354*x12360))+(((-1.0)*r12*x12359)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12359))+(((-1.0)*x12352*x12360))+((r01*x12361)));
evalcond[3]=(((r00*x12348))+((r01*x12357))+((r01*x12346*x12349))+(((-1.0)*cj3*x12352*x12359))+((r02*x12362)));
evalcond[4]=((((-1.0)*r02*sj3*x12360))+(((-1.0)*r01*x12348*x12359))+((r00*x12349))+((r01*x12353))+((x12352*x12363)));
evalcond[5]=(((r21*x12346*x12349))+((r20*x12348))+((cj1*sj2))+x12356+(((-1.0)*cj3*x12350*x12359))+((sj3*x12351))+((r22*x12362)));
evalcond[6]=((((-1.0)*r10*x12353*x12359))+(((-1.0)*x12358))+x12347+((r11*x12357))+((r11*x12346*x12349))+((r10*x12348))+((r12*x12362)));
evalcond[7]=(((r20*x12349))+(((-1.0)*x12358))+x12347+((cj3*x12351))+((x12350*x12363))+(((-1.0)*r21*x12348*x12359))+(((-1.0)*r22*sj3*x12360)));
evalcond[8]=((((-1.0)*x12356))+(((-1.0)*r11*x12348*x12359))+(((-1.0)*sj2*x12355))+((r11*x12353))+((x12354*x12363))+((r10*x12349))+(((-1.0)*r12*sj3*x12360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12364=((-1.0)*r11);
CheckValue<IkReal> x12367 = IKatan2WithCheck(IkReal(x12364),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12367.valid){
continue;
}
IkReal x12365=((1.0)*(x12367.value));
IkReal x12366=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12365)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12365)));
IkReal gconst10=(x12364*x12366);
IkReal gconst11=((1.0)*r10*x12366);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12368=gconst10*gconst10;
IkReal x12369=gconst11*gconst11;
IkReal x12370=(gconst10*r21);
IkReal x12371=(cj3*r00);
IkReal x12372=(r00*sj3);
IkReal x12373=((1.0)*gconst11);
IkReal x12374=(gconst10*r20);
IkReal x12375=(r01*sj3);
IkReal x12376=(cj3*gconst11*r01);
IkReal x12377=(r21*x12368);
IkReal x12378=(r20*x12369);
CheckValue<IkReal> x12379=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12370*x12372*x12373))+(((-1.0)*x12373*x12374*x12375))+((x12375*x12377))+((x12372*x12378))+((r02*r22*sj3)))),-1);
if(!x12379.valid){
continue;
}
CheckValue<IkReal> x12380 = IKatan2WithCheck(IkReal((((r22*x12376))+((gconst10*r22*x12371)))),IkReal(((((-1.0)*x12371*x12373*x12374))+(((-1.0)*cj3*r01*x12378))+((x12370*x12376))+((x12371*x12377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12379.value)))+(x12380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12381=IKsin(j4);
IkReal x12382=IKcos(j4);
IkReal x12383=(cj2*sj1);
IkReal x12384=(cj1*sj2);
IkReal x12385=(gconst10*sj3);
IkReal x12386=(cj3*gconst10);
IkReal x12387=(gconst11*r20);
IkReal x12388=(gconst11*r21);
IkReal x12389=(gconst11*r00);
IkReal x12390=(sj1*sj2);
IkReal x12391=(cj3*gconst11);
IkReal x12392=(gconst11*r10);
IkReal x12393=(cj1*cj2);
IkReal x12394=(gconst11*sj3);
IkReal x12395=((1.0)*x12382);
IkReal x12396=((1.0)*x12381);
IkReal x12397=(gconst10*x12381);
IkReal x12398=(cj3*x12381);
IkReal x12399=(sj3*x12382);
IkReal x12400=(x12384+x12383);
evalcond[0]=((((-1.0)*r22*x12395))+((r21*x12397))+(((-1.0)*x12387*x12396)));
evalcond[1]=((((-1.0)*r12*x12395))+((r11*x12397))+(((-1.0)*x12392*x12396)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12395))+(((-1.0)*x12389*x12396))+((r01*x12397)));
evalcond[3]=(((r02*x12398))+((r01*x12382*x12386))+((r00*x12385))+(((-1.0)*cj3*x12389*x12395))+((r01*x12394)));
evalcond[4]=(((x12389*x12399))+(((-1.0)*r01*x12385*x12395))+((r00*x12386))+((r01*x12391))+(((-1.0)*r02*sj3*x12396)));
evalcond[5]=(((r22*x12398))+(((-1.0)*cj3*x12387*x12395))+((r21*x12382*x12386))+((r20*x12385))+((sj3*x12388))+x12400);
evalcond[6]=(((r11*x12394))+((r10*x12385))+x12393+(((-1.0)*x12390))+((r11*x12382*x12386))+(((-1.0)*r10*x12391*x12395))+((r12*x12398)));
evalcond[7]=((((-1.0)*r11*x12385*x12395))+((r11*x12391))+((r10*x12386))+((x12392*x12399))+x12400+(((-1.0)*r12*sj3*x12396)));
evalcond[8]=(((cj3*x12388))+(((-1.0)*r22*sj3*x12396))+x12390+((r20*x12386))+((x12387*x12399))+(((-1.0)*x12393))+(((-1.0)*r21*x12385*x12395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12401=((1.0)*gconst11);
CheckValue<IkReal> x12402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12401)))),-1);
if(!x12402.valid){
continue;
}
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12402.value)))+(x12403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12404=IKsin(j4);
IkReal x12405=IKcos(j4);
IkReal x12406=(cj2*sj1);
IkReal x12407=(cj1*sj2);
IkReal x12408=(gconst10*sj3);
IkReal x12409=(cj3*gconst10);
IkReal x12410=(gconst11*r20);
IkReal x12411=(gconst11*r21);
IkReal x12412=(gconst11*r00);
IkReal x12413=(sj1*sj2);
IkReal x12414=(cj3*gconst11);
IkReal x12415=(gconst11*r10);
IkReal x12416=(cj1*cj2);
IkReal x12417=(gconst11*sj3);
IkReal x12418=((1.0)*x12405);
IkReal x12419=((1.0)*x12404);
IkReal x12420=(gconst10*x12404);
IkReal x12421=(cj3*x12404);
IkReal x12422=(sj3*x12405);
IkReal x12423=(x12406+x12407);
evalcond[0]=((((-1.0)*r22*x12418))+((r21*x12420))+(((-1.0)*x12410*x12419)));
evalcond[1]=((((-1.0)*x12415*x12419))+((r11*x12420))+(((-1.0)*r12*x12418)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12418))+(((-1.0)*x12412*x12419))+((r01*x12420)));
evalcond[3]=(((r01*x12405*x12409))+((r01*x12417))+((r02*x12421))+(((-1.0)*cj3*x12412*x12418))+((r00*x12408)));
evalcond[4]=((((-1.0)*r02*sj3*x12419))+((r01*x12414))+(((-1.0)*r01*x12408*x12418))+((r00*x12409))+((x12412*x12422)));
evalcond[5]=(((sj3*x12411))+(((-1.0)*cj3*x12410*x12418))+((r22*x12421))+((r20*x12408))+x12423+((r21*x12405*x12409)));
evalcond[6]=(((r11*x12417))+((r11*x12405*x12409))+(((-1.0)*x12413))+((r12*x12421))+((r10*x12408))+(((-1.0)*r10*x12414*x12418))+x12416);
evalcond[7]=(((r11*x12414))+(((-1.0)*r11*x12408*x12418))+((r10*x12409))+(((-1.0)*r12*sj3*x12419))+x12423+((x12415*x12422)));
evalcond[8]=(((cj3*x12411))+(((-1.0)*r21*x12408*x12418))+(((-1.0)*x12416))+(((-1.0)*r22*sj3*x12419))+((x12410*x12422))+((r20*x12409))+x12413);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12424=((-1.0)*r11);
IkReal x12425=((-1.0)*r10);
CheckValue<IkReal> x12427 = IKatan2WithCheck(IkReal(x12424),IkReal(x12425),IKFAST_ATAN2_MAGTHRESH);
if(!x12427.valid){
continue;
}
IkReal x12426=((1.0)*(x12427.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12426)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12425);
rxp1_1=(px*r21);
rxp1_2=(px*x12424);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12426)));
IkReal gconst10=x12424;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12428=((-1.0)*r11);
IkReal x12429=((-1.0)*r10);
CheckValue<IkReal> x12431 = IKatan2WithCheck(IkReal(x12428),IkReal(x12429),IKFAST_ATAN2_MAGTHRESH);
if(!x12431.valid){
continue;
}
IkReal x12430=((1.0)*(x12431.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12430)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12429);
rxp1_1=(px*r21);
rxp1_2=(px*x12428);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12430)));
IkReal gconst10=x12428;
IkReal gconst11=((1.0)*r10);
IkReal x12432=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12432))+(((-1.0)*r10*r20*x12432)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12433=((-1.0)*r11);
IkReal x12434=((-1.0)*r10);
CheckValue<IkReal> x12436 = IKatan2WithCheck(IkReal(x12433),IkReal(x12434),IKFAST_ATAN2_MAGTHRESH);
if(!x12436.valid){
continue;
}
IkReal x12435=((1.0)*(x12436.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12435)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12434);
rxp1_1=(px*r21);
rxp1_2=(px*x12433);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12435)));
IkReal gconst10=x12433;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(r02,-1);
if(!x12438.valid){
continue;
}
IkReal x12437=x12438.value;
CheckValue<IkReal> x12439=IKPowWithIntegerCheck(cj3,-1);
if(!x12439.valid){
continue;
}
if( IKabs((x12437*(x12439.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12437)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12437*(x12439.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12437))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12437*(x12439.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12437));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12440=IKsin(j4);
IkReal x12441=IKcos(j4);
IkReal x12442=(cj3*r10);
IkReal x12443=((1.0)*gconst11);
IkReal x12444=(sj1*sj2);
IkReal x12445=(gconst11*sj3);
IkReal x12446=(cj3*r11);
IkReal x12447=(cj2*sj1);
IkReal x12448=(gconst10*r20);
IkReal x12449=(gconst10*sj3);
IkReal x12450=((1.0)*cj0);
IkReal x12451=((1.0)*sj0);
IkReal x12452=(cj1*sj2);
IkReal x12453=(cj3*r21);
IkReal x12454=((1.0)*cj1*cj2);
IkReal x12455=(r20*x12441);
IkReal x12456=(gconst10*x12440);
IkReal x12457=(gconst10*x12441);
IkReal x12458=(r02*x12440);
IkReal x12459=((1.0)*x12441);
evalcond[0]=((((-1.0)*r02*x12459))+(((-1.0)*x12451)));
evalcond[1]=((((-1.0)*r20*x12440*x12443))+((r21*x12456)));
evalcond[2]=(cj0+(((-1.0)*r10*x12440*x12443))+((r11*x12456)));
evalcond[3]=(((cj0*x12444))+((cj3*x12458))+(((-1.0)*cj1*cj2*x12450)));
evalcond[4]=((((-1.0)*x12450*x12452))+(((-1.0)*sj3*x12458))+(((-1.0)*x12447*x12450)));
evalcond[5]=(((r21*x12445))+((x12453*x12457))+(((-1.0)*cj3*x12443*x12455))+((sj3*x12448))+x12447+x12452);
evalcond[6]=(((cj3*x12448))+(((-1.0)*x12454))+x12444+((x12445*x12455))+(((-1.0)*r21*x12449*x12459))+((gconst11*x12453)));
evalcond[7]=(((sj0*x12444))+((x12446*x12457))+(((-1.0)*x12441*x12442*x12443))+((r11*x12445))+(((-1.0)*cj1*cj2*x12451))+((r10*x12449)));
evalcond[8]=(((gconst10*x12442))+((r10*x12441*x12445))+(((-1.0)*x12451*x12452))+(((-1.0)*x12447*x12451))+(((-1.0)*r11*x12449*x12459))+((gconst11*x12446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12460=((1.0)*r20);
IkReal x12461=((1.0)*gconst11);
CheckValue<IkReal> x12462=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12461))),-1);
if(!x12462.valid){
continue;
}
CheckValue<IkReal> x12463=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12460))+((cj3*gconst10*r21))),-1);
if(!x12463.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12462.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12463.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12460))+(((-1.0)*r21*sj3*x12461)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12462.value)))+IKsqr(((x12463.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12460))+(((-1.0)*r21*sj3*x12461))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12462.value)), ((x12463.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12460))+(((-1.0)*r21*sj3*x12461))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12464=IKsin(j4);
IkReal x12465=IKcos(j4);
IkReal x12466=(cj3*r10);
IkReal x12467=((1.0)*gconst11);
IkReal x12468=(sj1*sj2);
IkReal x12469=(gconst11*sj3);
IkReal x12470=(cj3*r11);
IkReal x12471=(cj2*sj1);
IkReal x12472=(gconst10*r20);
IkReal x12473=(gconst10*sj3);
IkReal x12474=((1.0)*cj0);
IkReal x12475=((1.0)*sj0);
IkReal x12476=(cj1*sj2);
IkReal x12477=(cj3*r21);
IkReal x12478=((1.0)*cj1*cj2);
IkReal x12479=(r20*x12465);
IkReal x12480=(gconst10*x12464);
IkReal x12481=(gconst10*x12465);
IkReal x12482=(r02*x12464);
IkReal x12483=((1.0)*x12465);
evalcond[0]=((((-1.0)*r02*x12483))+(((-1.0)*x12475)));
evalcond[1]=((((-1.0)*r20*x12464*x12467))+((r21*x12480)));
evalcond[2]=(cj0+((r11*x12480))+(((-1.0)*r10*x12464*x12467)));
evalcond[3]=(((cj0*x12468))+((cj3*x12482))+(((-1.0)*cj1*cj2*x12474)));
evalcond[4]=((((-1.0)*sj3*x12482))+(((-1.0)*x12471*x12474))+(((-1.0)*x12474*x12476)));
evalcond[5]=(((sj3*x12472))+((x12477*x12481))+(((-1.0)*cj3*x12467*x12479))+x12471+x12476+((r21*x12469)));
evalcond[6]=((((-1.0)*r21*x12473*x12483))+((cj3*x12472))+(((-1.0)*x12478))+((x12469*x12479))+x12468+((gconst11*x12477)));
evalcond[7]=(((r11*x12469))+(((-1.0)*x12465*x12466*x12467))+((sj0*x12468))+((r10*x12473))+(((-1.0)*cj1*cj2*x12475))+((x12470*x12481)));
evalcond[8]=(((r10*x12465*x12469))+(((-1.0)*x12475*x12476))+(((-1.0)*r11*x12473*x12483))+(((-1.0)*x12471*x12475))+((gconst10*x12466))+((gconst11*x12470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12484=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12484.valid){
continue;
}
CheckValue<IkReal> x12485=IKPowWithIntegerCheck(r02,-1);
if(!x12485.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12484.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12485.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12484.value)))+IKsqr(((-1.0)*sj0*(x12485.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12484.value)), ((-1.0)*sj0*(x12485.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12486=IKsin(j4);
IkReal x12487=IKcos(j4);
IkReal x12488=(cj3*r10);
IkReal x12489=((1.0)*gconst11);
IkReal x12490=(sj1*sj2);
IkReal x12491=(gconst11*sj3);
IkReal x12492=(cj3*r11);
IkReal x12493=(cj2*sj1);
IkReal x12494=(gconst10*r20);
IkReal x12495=(gconst10*sj3);
IkReal x12496=((1.0)*cj0);
IkReal x12497=((1.0)*sj0);
IkReal x12498=(cj1*sj2);
IkReal x12499=(cj3*r21);
IkReal x12500=((1.0)*cj1*cj2);
IkReal x12501=(r20*x12487);
IkReal x12502=(gconst10*x12486);
IkReal x12503=(gconst10*x12487);
IkReal x12504=(r02*x12486);
IkReal x12505=((1.0)*x12487);
evalcond[0]=((((-1.0)*r02*x12505))+(((-1.0)*x12497)));
evalcond[1]=(((r21*x12502))+(((-1.0)*r20*x12486*x12489)));
evalcond[2]=(((r11*x12502))+cj0+(((-1.0)*r10*x12486*x12489)));
evalcond[3]=(((cj3*x12504))+((cj0*x12490))+(((-1.0)*cj1*cj2*x12496)));
evalcond[4]=((((-1.0)*sj3*x12504))+(((-1.0)*x12493*x12496))+(((-1.0)*x12496*x12498)));
evalcond[5]=(((r21*x12491))+((x12499*x12503))+x12493+x12498+(((-1.0)*cj3*x12489*x12501))+((sj3*x12494)));
evalcond[6]=((((-1.0)*x12500))+((cj3*x12494))+(((-1.0)*r21*x12495*x12505))+((gconst11*x12499))+((x12491*x12501))+x12490);
evalcond[7]=(((x12492*x12503))+((sj0*x12490))+((r10*x12495))+(((-1.0)*x12487*x12488*x12489))+(((-1.0)*cj1*cj2*x12497))+((r11*x12491)));
evalcond[8]=((((-1.0)*r11*x12495*x12505))+((gconst10*x12488))+((gconst11*x12492))+((r10*x12487*x12491))+(((-1.0)*x12497*x12498))+(((-1.0)*x12493*x12497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12506=((-1.0)*r11);
CheckValue<IkReal> x12509 = IKatan2WithCheck(IkReal(x12506),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12509.valid){
continue;
}
IkReal x12507=((1.0)*(x12509.value));
IkReal x12508=x11832;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12507)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12507)));
IkReal gconst10=(x12506*x12508);
IkReal gconst11=((1.0)*r10*x12508);
IkReal x12510=r12*r12;
IkReal x12511=((1.0)*sj0);
IkReal x12512=(cj0*r02);
IkReal x12513=x11832;
j4eval[0]=((IKabs(((((-1.0)*r12*x12511))+(((-1.0)*x12512)))))+(IKabs((((r12*x12512*x12513))+(((-1.0)*x12511*x12513))+((sj0*x12510*x12513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12514=((1.0)*r12);
IkReal x12515=(sj1*sj2);
IkReal x12516=((1.0)*r21);
IkReal x12517=(cj3*gconst11);
IkReal x12518=(r11*sj3);
IkReal x12519=(gconst11*r20);
IkReal x12520=((1.0)*sj3);
IkReal x12521=(cj1*cj2);
IkReal x12522=(gconst10*r21*sj3);
IkReal x12523=(cj3*gconst10*r20);
CheckValue<IkReal> x12524=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12519*x12520))+((gconst11*r10*x12522))+(((-1.0)*x12516*x12518*(gconst10*gconst10)))+((gconst10*x12518*x12519))),-1);
if(!x12524.valid){
continue;
}
CheckValue<IkReal> x12525=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12516))+((sj3*x12519))),-1);
if(!x12525.valid){
continue;
}
if( IKabs(((x12524.value)*(((((-1.0)*x12514*x12515))+((cj0*x12522))+(((-1.0)*r21*x12514*x12517))+(((-1.0)*cj0*x12519*x12520))+(((-1.0)*x12514*x12523))+((r12*x12521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12525.value)*(((((-1.0)*x12516*x12517))+(((-1.0)*x12515))+x12521+(((-1.0)*x12523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12524.value)*(((((-1.0)*x12514*x12515))+((cj0*x12522))+(((-1.0)*r21*x12514*x12517))+(((-1.0)*cj0*x12519*x12520))+(((-1.0)*x12514*x12523))+((r12*x12521))))))+IKsqr(((x12525.value)*(((((-1.0)*x12516*x12517))+(((-1.0)*x12515))+x12521+(((-1.0)*x12523))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12524.value)*(((((-1.0)*x12514*x12515))+((cj0*x12522))+(((-1.0)*r21*x12514*x12517))+(((-1.0)*cj0*x12519*x12520))+(((-1.0)*x12514*x12523))+((r12*x12521))))), ((x12525.value)*(((((-1.0)*x12516*x12517))+(((-1.0)*x12515))+x12521+(((-1.0)*x12523))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12526=IKsin(j4);
IkReal x12527=IKcos(j4);
IkReal x12528=(cj3*r10);
IkReal x12529=(gconst11*r20);
IkReal x12530=(gconst11*sj3);
IkReal x12531=(sj1*sj2);
IkReal x12532=(cj3*r11);
IkReal x12533=(r10*sj3);
IkReal x12534=(gconst10*r01);
IkReal x12535=(gconst10*sj3);
IkReal x12536=(cj2*sj1);
IkReal x12537=((1.0)*sj0);
IkReal x12538=(cj1*sj2);
IkReal x12539=(gconst10*r21);
IkReal x12540=(cj3*gconst10);
IkReal x12541=(cj3*gconst11);
IkReal x12542=((1.0)*cj0);
IkReal x12543=((1.0)*x12526);
IkReal x12544=((1.0)*cj1*cj2);
IkReal x12545=(gconst11*x12527);
IkReal x12546=(sj3*x12527);
IkReal x12547=(gconst10*x12526);
IkReal x12548=((1.0)*x12527);
IkReal x12549=(cj3*x12527);
IkReal x12550=(cj3*x12526);
evalcond[0]=(((x12526*x12539))+(((-1.0)*x12529*x12543)));
evalcond[1]=(cj0+((r11*x12547))+(((-1.0)*gconst11*r10*x12543))+(((-1.0)*r12*x12548)));
evalcond[2]=(((x12526*x12534))+(((-1.0)*x12537))+(((-1.0)*gconst11*r00*x12543))+(((-1.0)*r02*x12548)));
evalcond[3]=(((x12539*x12549))+((r20*x12535))+((r21*x12530))+(((-1.0)*cj3*x12529*x12548))+x12536+x12538);
evalcond[4]=((((-1.0)*r21*x12535*x12548))+((r20*x12540))+((x12529*x12546))+x12531+((r21*x12541))+(((-1.0)*x12544)));
evalcond[5]=(((r00*x12535))+((x12534*x12549))+(((-1.0)*cj1*cj2*x12542))+((r02*x12550))+(((-1.0)*r00*x12541*x12548))+((r01*x12530))+((cj0*x12531)));
evalcond[6]=(((r11*x12530))+((r12*x12550))+((gconst10*x12527*x12532))+(((-1.0)*cj1*cj2*x12537))+(((-1.0)*x12528*x12545))+((gconst10*x12533))+((sj0*x12531)));
evalcond[7]=((((-1.0)*x12538*x12542))+((r00*x12540))+((r01*x12541))+(((-1.0)*x12536*x12542))+(((-1.0)*x12534*x12546))+(((-1.0)*r02*sj3*x12543))+((r00*x12527*x12530)));
evalcond[8]=(((r10*x12527*x12530))+(((-1.0)*r12*sj3*x12543))+((gconst10*x12528))+(((-1.0)*r11*x12535*x12548))+(((-1.0)*x12537*x12538))+(((-1.0)*x12536*x12537))+((gconst11*x12532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12551=((1.0)*sj0);
IkReal x12552=((1.0)*gconst10);
CheckValue<IkReal> x12553 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12551))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12551))+(((-1.0)*cj0*r01*x12552))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12553.valid){
continue;
}
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12552))+(((-1.0)*gconst11*r21)))),-1);
if(!x12554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12553.value)+(((1.5707963267949)*(x12554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12555=IKsin(j4);
IkReal x12556=IKcos(j4);
IkReal x12557=(cj3*r10);
IkReal x12558=(gconst11*r20);
IkReal x12559=(gconst11*sj3);
IkReal x12560=(sj1*sj2);
IkReal x12561=(cj3*r11);
IkReal x12562=(r10*sj3);
IkReal x12563=(gconst10*r01);
IkReal x12564=(gconst10*sj3);
IkReal x12565=(cj2*sj1);
IkReal x12566=((1.0)*sj0);
IkReal x12567=(cj1*sj2);
IkReal x12568=(gconst10*r21);
IkReal x12569=(cj3*gconst10);
IkReal x12570=(cj3*gconst11);
IkReal x12571=((1.0)*cj0);
IkReal x12572=((1.0)*x12555);
IkReal x12573=((1.0)*cj1*cj2);
IkReal x12574=(gconst11*x12556);
IkReal x12575=(sj3*x12556);
IkReal x12576=(gconst10*x12555);
IkReal x12577=((1.0)*x12556);
IkReal x12578=(cj3*x12556);
IkReal x12579=(cj3*x12555);
evalcond[0]=((((-1.0)*x12558*x12572))+((x12555*x12568)));
evalcond[1]=((((-1.0)*gconst11*r10*x12572))+cj0+(((-1.0)*r12*x12577))+((r11*x12576)));
evalcond[2]=((((-1.0)*r02*x12577))+(((-1.0)*gconst11*r00*x12572))+(((-1.0)*x12566))+((x12555*x12563)));
evalcond[3]=(((r20*x12564))+((x12568*x12578))+(((-1.0)*cj3*x12558*x12577))+((r21*x12559))+x12567+x12565);
evalcond[4]=(((r20*x12569))+((r21*x12570))+((x12558*x12575))+(((-1.0)*x12573))+x12560+(((-1.0)*r21*x12564*x12577)));
evalcond[5]=(((r01*x12559))+((x12563*x12578))+((r02*x12579))+((r00*x12564))+(((-1.0)*cj1*cj2*x12571))+((cj0*x12560))+(((-1.0)*r00*x12570*x12577)));
evalcond[6]=(((gconst10*x12556*x12561))+((sj0*x12560))+((r11*x12559))+((r12*x12579))+(((-1.0)*cj1*cj2*x12566))+((gconst10*x12562))+(((-1.0)*x12557*x12574)));
evalcond[7]=((((-1.0)*x12565*x12571))+((r00*x12569))+(((-1.0)*x12567*x12571))+((r01*x12570))+(((-1.0)*x12563*x12575))+(((-1.0)*r02*sj3*x12572))+((r00*x12556*x12559)));
evalcond[8]=((((-1.0)*x12565*x12566))+((gconst11*x12561))+((gconst10*x12557))+(((-1.0)*x12566*x12567))+((r10*x12556*x12559))+(((-1.0)*r12*sj3*x12572))+(((-1.0)*r11*x12564*x12577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12580=gconst10*gconst10;
IkReal x12581=r21*r21;
IkReal x12582=gconst11*gconst11;
IkReal x12583=r20*r20;
IkReal x12584=((1.0)*cj3);
IkReal x12585=(r20*sj3);
IkReal x12586=(gconst10*gconst11);
IkReal x12587=(cj2*sj1);
IkReal x12588=(gconst10*r21);
IkReal x12589=(cj1*sj2);
IkReal x12590=((1.0)*gconst11*r20);
CheckValue<IkReal> x12591=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12580*x12581*x12584))+(((-1.0)*x12584*(r22*r22)))+(((-1.0)*x12582*x12583*x12584))+(((2.0)*cj3*r20*r21*x12586)))),-1);
if(!x12591.valid){
continue;
}
CheckValue<IkReal> x12592 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12589))+((r22*x12587))+((gconst10*r22*x12585)))),IkReal(((((-1.0)*sj3*x12583*x12586))+((x12587*x12588))+((sj3*x12581*x12586))+(((-1.0)*x12587*x12590))+(((-1.0)*x12589*x12590))+((x12588*x12589))+(((-1.0)*r21*x12582*x12585))+((r21*x12580*x12585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12591.value)))+(x12592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12593=IKsin(j4);
IkReal x12594=IKcos(j4);
IkReal x12595=(cj3*r10);
IkReal x12596=(gconst11*r20);
IkReal x12597=(gconst11*sj3);
IkReal x12598=(sj1*sj2);
IkReal x12599=(gconst11*r00);
IkReal x12600=(cj3*r11);
IkReal x12601=(gconst10*sj3);
IkReal x12602=(cj2*sj1);
IkReal x12603=(cj3*r01);
IkReal x12604=((1.0)*sj0);
IkReal x12605=(cj1*sj2);
IkReal x12606=(cj3*r21);
IkReal x12607=(cj3*gconst10);
IkReal x12608=((1.0)*cj0);
IkReal x12609=((1.0)*x12594);
IkReal x12610=((1.0)*x12593);
IkReal x12611=((1.0)*cj1*cj2);
IkReal x12612=(cj3*x12593);
IkReal x12613=(gconst10*x12593);
IkReal x12614=(gconst10*x12594);
evalcond[0]=((((-1.0)*x12596*x12610))+(((-1.0)*r22*x12609))+((r21*x12613)));
evalcond[1]=(cj0+(((-1.0)*r12*x12609))+(((-1.0)*gconst11*r10*x12610))+((r11*x12613)));
evalcond[2]=((((-1.0)*x12604))+(((-1.0)*r02*x12609))+((r01*x12613))+(((-1.0)*x12599*x12610)));
evalcond[3]=(((r20*x12601))+(((-1.0)*cj3*x12596*x12609))+((r21*x12597))+x12602+x12605+((x12606*x12614))+((r22*x12612)));
evalcond[4]=(((r20*x12607))+(((-1.0)*r22*sj3*x12610))+((sj3*x12594*x12596))+(((-1.0)*r21*x12601*x12609))+((gconst11*x12606))+x12598+(((-1.0)*x12611)));
evalcond[5]=(((r02*x12612))+((r01*x12597))+((r00*x12601))+((cj0*x12598))+(((-1.0)*cj3*x12599*x12609))+((x12603*x12614))+(((-1.0)*cj1*cj2*x12608)));
evalcond[6]=(((r10*x12601))+((x12600*x12614))+(((-1.0)*gconst11*x12595*x12609))+((r12*x12612))+(((-1.0)*cj1*cj2*x12604))+((sj0*x12598))+((r11*x12597)));
evalcond[7]=(((r00*x12607))+(((-1.0)*r01*x12601*x12609))+((gconst11*x12603))+(((-1.0)*r02*sj3*x12610))+(((-1.0)*x12605*x12608))+((r00*x12594*x12597))+(((-1.0)*x12602*x12608)));
evalcond[8]=((((-1.0)*r11*x12601*x12609))+((gconst11*x12600))+((gconst10*x12595))+(((-1.0)*r12*sj3*x12610))+((r10*x12594*x12597))+(((-1.0)*x12602*x12604))+(((-1.0)*x12604*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12615=((1.0)*sj0);
IkReal x12616=((1.0)*gconst10);
CheckValue<IkReal> x12617 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12615))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12616))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12617.valid){
continue;
}
CheckValue<IkReal> x12618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12616))+(((-1.0)*gconst11*r21)))),-1);
if(!x12618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12617.value)+(((1.5707963267949)*(x12618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12619=IKsin(j4);
IkReal x12620=IKcos(j4);
IkReal x12621=(cj3*r10);
IkReal x12622=(gconst11*r20);
IkReal x12623=(gconst11*sj3);
IkReal x12624=(sj1*sj2);
IkReal x12625=(gconst11*r00);
IkReal x12626=(cj3*r11);
IkReal x12627=(gconst10*sj3);
IkReal x12628=(cj2*sj1);
IkReal x12629=(cj3*r01);
IkReal x12630=((1.0)*sj0);
IkReal x12631=(cj1*sj2);
IkReal x12632=(cj3*r21);
IkReal x12633=(cj3*gconst10);
IkReal x12634=((1.0)*cj0);
IkReal x12635=((1.0)*x12620);
IkReal x12636=((1.0)*x12619);
IkReal x12637=((1.0)*cj1*cj2);
IkReal x12638=(cj3*x12619);
IkReal x12639=(gconst10*x12619);
IkReal x12640=(gconst10*x12620);
evalcond[0]=((((-1.0)*r22*x12635))+((r21*x12639))+(((-1.0)*x12622*x12636)));
evalcond[1]=(((r11*x12639))+cj0+(((-1.0)*gconst11*r10*x12636))+(((-1.0)*r12*x12635)));
evalcond[2]=(((r01*x12639))+(((-1.0)*x12630))+(((-1.0)*x12625*x12636))+(((-1.0)*r02*x12635)));
evalcond[3]=((((-1.0)*cj3*x12622*x12635))+((r21*x12623))+x12631+x12628+((r22*x12638))+((r20*x12627))+((x12632*x12640)));
evalcond[4]=(((r20*x12633))+((sj3*x12620*x12622))+(((-1.0)*r21*x12627*x12635))+(((-1.0)*x12637))+x12624+(((-1.0)*r22*sj3*x12636))+((gconst11*x12632)));
evalcond[5]=(((x12629*x12640))+(((-1.0)*cj1*cj2*x12634))+((r01*x12623))+((r02*x12638))+((r00*x12627))+((cj0*x12624))+(((-1.0)*cj3*x12625*x12635)));
evalcond[6]=(((r12*x12638))+((sj0*x12624))+((x12626*x12640))+(((-1.0)*gconst11*x12621*x12635))+(((-1.0)*cj1*cj2*x12630))+((r10*x12627))+((r11*x12623)));
evalcond[7]=((((-1.0)*r02*sj3*x12636))+((gconst11*x12629))+(((-1.0)*x12631*x12634))+(((-1.0)*x12628*x12634))+(((-1.0)*r01*x12627*x12635))+((r00*x12633))+((r00*x12620*x12623)));
evalcond[8]=(((r10*x12620*x12623))+((gconst11*x12626))+(((-1.0)*x12628*x12630))+((gconst10*x12621))+(((-1.0)*r12*sj3*x12636))+(((-1.0)*r11*x12627*x12635))+(((-1.0)*x12630*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12641=((1.0)*gconst11);
CheckValue<IkReal> x12642 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12641))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12642.valid){
continue;
}
CheckValue<IkReal> x12643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12641)))),-1);
if(!x12643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12642.value)+(((1.5707963267949)*(x12643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12644=IKsin(j4);
IkReal x12645=IKcos(j4);
IkReal x12646=(cj3*r10);
IkReal x12647=(gconst11*r20);
IkReal x12648=(gconst11*sj3);
IkReal x12649=(sj1*sj2);
IkReal x12650=(gconst11*r00);
IkReal x12651=(cj3*r11);
IkReal x12652=(gconst10*sj3);
IkReal x12653=(cj2*sj1);
IkReal x12654=(cj3*r01);
IkReal x12655=((1.0)*sj0);
IkReal x12656=(cj1*sj2);
IkReal x12657=(cj3*r21);
IkReal x12658=(cj3*gconst10);
IkReal x12659=((1.0)*cj0);
IkReal x12660=((1.0)*x12645);
IkReal x12661=((1.0)*x12644);
IkReal x12662=((1.0)*cj1*cj2);
IkReal x12663=(cj3*x12644);
IkReal x12664=(gconst10*x12644);
IkReal x12665=(gconst10*x12645);
evalcond[0]=((((-1.0)*r22*x12660))+((r21*x12664))+(((-1.0)*x12647*x12661)));
evalcond[1]=(cj0+((r11*x12664))+(((-1.0)*r12*x12660))+(((-1.0)*gconst11*r10*x12661)));
evalcond[2]=((((-1.0)*x12655))+(((-1.0)*r02*x12660))+((r01*x12664))+(((-1.0)*x12650*x12661)));
evalcond[3]=((((-1.0)*cj3*x12647*x12660))+((r22*x12663))+((x12657*x12665))+x12653+x12656+((r21*x12648))+((r20*x12652)));
evalcond[4]=((((-1.0)*x12662))+(((-1.0)*r22*sj3*x12661))+((gconst11*x12657))+((sj3*x12645*x12647))+x12649+((r20*x12658))+(((-1.0)*r21*x12652*x12660)));
evalcond[5]=(((r02*x12663))+((r01*x12648))+((cj0*x12649))+((x12654*x12665))+(((-1.0)*cj3*x12650*x12660))+(((-1.0)*cj1*cj2*x12659))+((r00*x12652)));
evalcond[6]=(((x12651*x12665))+((r10*x12652))+((r12*x12663))+((sj0*x12649))+(((-1.0)*gconst11*x12646*x12660))+(((-1.0)*cj1*cj2*x12655))+((r11*x12648)));
evalcond[7]=((((-1.0)*x12656*x12659))+(((-1.0)*r02*sj3*x12661))+((gconst11*x12654))+(((-1.0)*r01*x12652*x12660))+((r00*x12645*x12648))+(((-1.0)*x12653*x12659))+((r00*x12658)));
evalcond[8]=(((r10*x12645*x12648))+((gconst11*x12651))+(((-1.0)*x12653*x12655))+(((-1.0)*r12*sj3*x12661))+((gconst10*x12646))+(((-1.0)*r11*x12652*x12660))+(((-1.0)*x12655*x12656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12666=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12666;
j4eval[1]=IKsign(x12666);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12667=((1.0)*cj5);
IkReal x12668=((((-1.0)*r01*x12667))+(((-1.0)*r00*sj5)));
j4eval[0]=x12668;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12667)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12669=cj5*cj5;
IkReal x12670=(cj3*r21);
IkReal x12671=(cj5*sj5);
IkReal x12672=((1.0)*cj3);
IkReal x12673=(((cj3*r11*r20*x12671))+(((-1.0)*r10*r20*x12669*x12672))+(((-1.0)*r12*r22*x12672))+((r11*x12669*x12670))+(((-1.0)*r11*x12670))+((r10*x12670*x12671)));
j4eval[0]=x12673;
j4eval[1]=IKsign(x12673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12674=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12674;
j4eval[1]=IKsign(x12674);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12675=((1.0)*cj5);
IkReal x12676=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12675)));
j4eval[0]=x12676;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12675))))));
j4eval[2]=IKsign(x12676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12677=cj5*cj5;
IkReal x12678=r11*r11;
IkReal x12679=(r11*sj5);
IkReal x12680=(cj5*r10);
IkReal x12681=(((x12677*(r10*r10)))+(r12*r12)+(((-2.0)*x12679*x12680))+x12678+(((-1.0)*x12677*x12678)));
j4eval[0]=x12681;
j4eval[1]=IKsign(x12681);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12679))+x12680))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12682=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12682);
rxp1_1=(px*r21);
rxp1_2=(r11*x12682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12683=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12683);
rxp1_1=(px*r21);
rxp1_2=(r11*x12683);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12684=((1.0)*sj1);
CheckValue<IkReal> x12685=IKPowWithIntegerCheck(r02,-1);
if(!x12685.valid){
continue;
}
CheckValue<IkReal> x12686=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12686.valid){
continue;
}
if( IKabs(((x12685.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12686.value)*((((cj1*cj2))+(((-1.0)*sj2*x12684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12685.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12684))))))+IKsqr(((x12686.value)*((((cj1*cj2))+(((-1.0)*sj2*x12684))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12685.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12684))))), ((x12686.value)*((((cj1*cj2))+(((-1.0)*sj2*x12684))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12687=IKsin(j4);
IkReal x12688=IKcos(j4);
IkReal x12689=(cj5*r20);
IkReal x12690=((1.0)*cj2);
IkReal x12691=(cj5*r10);
IkReal x12692=((1.0)*x12687);
IkReal x12693=(sj5*x12687);
IkReal x12694=((1.0)*sj5*x12688);
evalcond[0]=((-1.0)*r02*x12688);
evalcond[1]=(((r21*x12693))+(((-1.0)*x12689*x12692)));
evalcond[2]=((((-1.0)*r11*x12694))+((x12688*x12691)));
evalcond[3]=((1.0)+(((-1.0)*x12691*x12692))+((r11*x12693)));
evalcond[4]=((((-1.0)*r02*x12692))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12690)));
evalcond[5]=((((-1.0)*cj1*x12690))+((sj1*sj2))+((x12688*x12689))+(((-1.0)*r21*x12694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12695=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12695.valid){
continue;
}
CheckValue<IkReal> x12696=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12696.valid){
continue;
}
if( IKabs(((-1.0)*(x12695.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12696.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12695.value)))+IKsqr(((x12696.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12695.value)), ((x12696.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12697=IKsin(j4);
IkReal x12698=IKcos(j4);
IkReal x12699=(cj5*r20);
IkReal x12700=((1.0)*cj2);
IkReal x12701=(cj5*r10);
IkReal x12702=((1.0)*x12697);
IkReal x12703=(sj5*x12697);
IkReal x12704=((1.0)*sj5*x12698);
evalcond[0]=((-1.0)*r02*x12698);
evalcond[1]=(((r21*x12703))+(((-1.0)*x12699*x12702)));
evalcond[2]=((((-1.0)*r11*x12704))+((x12698*x12701)));
evalcond[3]=((1.0)+(((-1.0)*x12701*x12702))+((r11*x12703)));
evalcond[4]=((((-1.0)*sj1*x12700))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12702)));
evalcond[5]=(((x12698*x12699))+((sj1*sj2))+(((-1.0)*r21*x12704))+(((-1.0)*cj1*x12700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12705=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12705);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12705);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12706=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(r22,-1);
if(!x12707.valid){
continue;
}
CheckValue<IkReal> x12708=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12708.valid){
continue;
}
if( IKabs(((x12707.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12708.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12707.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12708.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12707.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12708.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12709=IKsin(j4);
IkReal x12710=IKcos(j4);
IkReal x12711=((1.0)*cj2);
IkReal x12712=(cj5*x12710);
IkReal x12713=(sj5*x12709);
IkReal x12714=((1.0)*sj5*x12710);
IkReal x12715=((1.0)*cj5*x12709);
evalcond[0]=((-1.0)*r22*x12710);
evalcond[1]=((((-1.0)*r00*x12715))+((r01*x12713)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12711))+(((-1.0)*r22*x12709)));
evalcond[3]=(((r10*x12712))+(((-1.0)*r11*x12714)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12715))+((r11*x12713)));
evalcond[5]=((((-1.0)*sj1*x12711))+(((-1.0)*cj1*sj2))+((r00*x12712))+(((-1.0)*r01*x12714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12716.valid){
continue;
}
CheckValue<IkReal> x12717=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12717.valid){
continue;
}
if( IKabs(((-1.0)*(x12716.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12717.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12716.value)))+IKsqr(((x12717.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12716.value)), ((x12717.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12718=IKsin(j4);
IkReal x12719=IKcos(j4);
IkReal x12720=((1.0)*cj2);
IkReal x12721=(cj5*x12719);
IkReal x12722=(sj5*x12718);
IkReal x12723=((1.0)*sj5*x12719);
IkReal x12724=((1.0)*cj5*x12718);
evalcond[0]=((-1.0)*r22*x12719);
evalcond[1]=((((-1.0)*r00*x12724))+((r01*x12722)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12718))+(((-1.0)*cj1*x12720)));
evalcond[3]=(((r10*x12721))+(((-1.0)*r11*x12723)));
evalcond[4]=((1.0)+((r11*x12722))+(((-1.0)*r10*x12724)));
evalcond[5]=((((-1.0)*sj1*x12720))+(((-1.0)*r01*x12723))+(((-1.0)*cj1*sj2))+((r00*x12721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12725=cj5*cj5;
IkReal x12726=r11*r11;
IkReal x12727=(cj5*r10);
IkReal x12728=(r11*sj5);
CheckValue<IkReal> x12729 = IKatan2WithCheck(IkReal(((((-1.0)*x12728))+x12727)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12729.valid){
continue;
}
CheckValue<IkReal> x12730=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12725*(r10*r10)))+(((-1.0)*x12725*x12726))+x12726+(((-2.0)*x12727*x12728)))),-1);
if(!x12730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12729.value)+(((1.5707963267949)*(x12730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12731=IKsin(j4);
IkReal x12732=IKcos(j4);
IkReal x12733=(cj5*r10);
IkReal x12734=(r01*sj5);
IkReal x12735=((1.0)*cj2);
IkReal x12736=(cj5*r00);
IkReal x12737=(cj5*r20);
IkReal x12738=((1.0)*x12732);
IkReal x12739=((1.0)*x12731);
IkReal x12740=(sj5*x12731);
evalcond[0]=((((-1.0)*r22*x12738))+((r21*x12740))+(((-1.0)*x12737*x12739)));
evalcond[1]=((((-1.0)*r02*x12738))+((x12731*x12734))+(((-1.0)*x12736*x12739)));
evalcond[2]=(((x12732*x12733))+(((-1.0)*r11*sj5*x12738))+(((-1.0)*r12*x12739)));
evalcond[3]=((1.0)+((r11*x12740))+(((-1.0)*x12733*x12739))+(((-1.0)*r12*x12738)));
evalcond[4]=(((x12732*x12737))+(((-1.0)*r22*x12739))+((sj1*sj2))+(((-1.0)*r21*sj5*x12738))+(((-1.0)*cj1*x12735)));
evalcond[5]=((((-1.0)*sj1*x12735))+(((-1.0)*r02*x12739))+((x12732*x12736))+(((-1.0)*cj1*sj2))+(((-1.0)*x12734*x12738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12741=((1.0)*cj5);
CheckValue<IkReal> x12742 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12741)))),-1);
if(!x12743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12742.value)+(((1.5707963267949)*(x12743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12744=IKsin(j4);
IkReal x12745=IKcos(j4);
IkReal x12746=(cj5*r10);
IkReal x12747=(r01*sj5);
IkReal x12748=((1.0)*cj2);
IkReal x12749=(cj5*r00);
IkReal x12750=(cj5*r20);
IkReal x12751=((1.0)*x12745);
IkReal x12752=((1.0)*x12744);
IkReal x12753=(sj5*x12744);
evalcond[0]=((((-1.0)*r22*x12751))+((r21*x12753))+(((-1.0)*x12750*x12752)));
evalcond[1]=(((x12744*x12747))+(((-1.0)*r02*x12751))+(((-1.0)*x12749*x12752)));
evalcond[2]=(((x12745*x12746))+(((-1.0)*r12*x12752))+(((-1.0)*r11*sj5*x12751)));
evalcond[3]=((1.0)+((r11*x12753))+(((-1.0)*r12*x12751))+(((-1.0)*x12746*x12752)));
evalcond[4]=((((-1.0)*r21*sj5*x12751))+(((-1.0)*r22*x12752))+((sj1*sj2))+(((-1.0)*cj1*x12748))+((x12745*x12750)));
evalcond[5]=(((x12745*x12749))+(((-1.0)*r02*x12752))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12748))+(((-1.0)*x12747*x12751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12754=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12754.valid){
continue;
}
CheckValue<IkReal> x12755 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12754.value)))+(x12755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12756=IKsin(j4);
IkReal x12757=IKcos(j4);
IkReal x12758=(cj5*r10);
IkReal x12759=(r01*sj5);
IkReal x12760=((1.0)*cj2);
IkReal x12761=(cj5*r00);
IkReal x12762=(cj5*r20);
IkReal x12763=((1.0)*x12757);
IkReal x12764=((1.0)*x12756);
IkReal x12765=(sj5*x12756);
evalcond[0]=(((r21*x12765))+(((-1.0)*x12762*x12764))+(((-1.0)*r22*x12763)));
evalcond[1]=(((x12756*x12759))+(((-1.0)*r02*x12763))+(((-1.0)*x12761*x12764)));
evalcond[2]=((((-1.0)*r12*x12764))+(((-1.0)*r11*sj5*x12763))+((x12757*x12758)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12763))+(((-1.0)*x12758*x12764))+((r11*x12765)));
evalcond[4]=((((-1.0)*r21*sj5*x12763))+(((-1.0)*r22*x12764))+((sj1*sj2))+((x12757*x12762))+(((-1.0)*cj1*x12760)));
evalcond[5]=((((-1.0)*x12759*x12763))+(((-1.0)*sj1*x12760))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12764))+((x12757*x12761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12766=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12766;
j4eval[1]=IKsign(x12766);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12767=((1.0)*cj5);
IkReal x12768=((((-1.0)*r01*x12767))+(((-1.0)*r00*sj5)));
j4eval[0]=x12768;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12767))+((r21*sj5))))));
j4eval[2]=IKsign(x12768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12769=(sj1*sj2);
IkReal x12770=(cj5*r10);
IkReal x12771=(r11*sj5);
IkReal x12772=(cj1*cj2);
IkReal x12773=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12773;
j4eval[1]=((IKabs(((((-1.0)*x12771*x12772))+((x12770*x12772))+(((-1.0)*x12769*x12770))+((x12769*x12771)))))+(IKabs(((((-1.0)*r12*x12769))+((r12*x12772))))));
j4eval[2]=IKsign(x12773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12774=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12774);
rxp1_1=(px*r21);
rxp1_2=(r11*x12774);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12775=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12775);
rxp1_1=(px*r21);
rxp1_2=(r11*x12775);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12776=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12776)));
j4eval[1]=((((-1.0)*r20*x12776))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12777=((1.0)*cj5);
CheckValue<IkReal> x12778=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12777))),-1);
if(!x12778.valid){
continue;
}
CheckValue<IkReal> x12779=IKPowWithIntegerCheck(((((-1.0)*r20*x12777))+((r21*sj5))),-1);
if(!x12779.valid){
continue;
}
if( IKabs(((-1.0)*(x12778.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12778.value)))+IKsqr(((x12779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12778.value)), ((x12779.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12780=IKsin(j4);
IkReal x12781=IKcos(j4);
IkReal x12782=((1.0)*cj2);
IkReal x12783=(r21*sj5);
IkReal x12784=(r11*sj5);
IkReal x12785=((1.0)*cj5*x12780);
IkReal x12786=((1.0)*cj5*x12781);
evalcond[0]=((-1.0)*r02*x12781);
evalcond[1]=((((-1.0)*r20*x12785))+((x12780*x12783)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12782))+((r02*x12780)));
evalcond[3]=((((-1.0)*r10*x12786))+((x12781*x12784)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12785))+((x12780*x12784)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12786))+((x12781*x12783))+(((-1.0)*cj1*x12782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12787=IKPowWithIntegerCheck(r02,-1);
if(!x12787.valid){
continue;
}
CheckValue<IkReal> x12788=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12788.valid){
continue;
}
if( IKabs(((x12787.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12787.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12787.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12788.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12789=IKsin(j4);
IkReal x12790=IKcos(j4);
IkReal x12791=((1.0)*cj2);
IkReal x12792=(r21*sj5);
IkReal x12793=(r11*sj5);
IkReal x12794=((1.0)*cj5*x12789);
IkReal x12795=((1.0)*cj5*x12790);
evalcond[0]=((-1.0)*r02*x12790);
evalcond[1]=((((-1.0)*r20*x12794))+((x12789*x12792)));
evalcond[2]=((((-1.0)*sj1*x12791))+(((-1.0)*cj1*sj2))+((r02*x12789)));
evalcond[3]=((((-1.0)*r10*x12795))+((x12790*x12793)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12794))+((x12789*x12793)));
evalcond[5]=((((-1.0)*r20*x12795))+((sj1*sj2))+((x12790*x12792))+(((-1.0)*cj1*x12791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12796=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12796;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12797=((1.0)*cj5);
IkReal x12798=((((-1.0)*r21*x12797))+(((-1.0)*r20*sj5)));
j4eval[0]=x12798;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12797))+((r11*sj5))))));
j4eval[2]=IKsign(x12798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12799=cj5*cj5;
IkReal x12800=(r11*r21);
IkReal x12801=((1.0)*r20);
IkReal x12802=(cj5*sj5);
IkReal x12803=(((r11*r20*x12802))+((x12799*x12800))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12799*x12801))+(((-1.0)*x12800))+((r10*r21*x12802)));
j4eval[0]=x12803;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12801)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12804=cj5*cj5;
IkReal x12805=(r21*sj5);
IkReal x12806=(r11*r21);
IkReal x12807=((1.0)*r20);
CheckValue<IkReal> x12808 = IKatan2WithCheck(IkReal((x12805+(((-1.0)*cj5*x12807)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12808.valid){
continue;
}
CheckValue<IkReal> x12809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12804*x12807))+(((-1.0)*x12806))+((cj5*r10*x12805))+((x12804*x12806))+((cj5*r11*r20*sj5)))),-1);
if(!x12809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12808.value)+(((1.5707963267949)*(x12809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12810=IKcos(j4);
IkReal x12811=IKsin(j4);
IkReal x12812=(cj5*r00);
IkReal x12813=(cj5*r20);
IkReal x12814=(cj5*r10);
IkReal x12815=((1.0)*x12810);
IkReal x12816=((1.0)*x12811);
IkReal x12817=(sj5*x12810);
IkReal x12818=(sj5*x12811);
evalcond[0]=((((-1.0)*x12813*x12815))+((r21*x12817))+((r22*x12811)));
evalcond[1]=((((-1.0)*x12814*x12815))+((r12*x12811))+((r11*x12817)));
evalcond[2]=((((-1.0)*x12813*x12816))+((r21*x12818))+(((-1.0)*r22*x12815)));
evalcond[3]=((((-1.0)*x12812*x12816))+(((-1.0)*r02*x12815))+((r01*x12818)));
evalcond[4]=((-1.0)+((r02*x12811))+(((-1.0)*x12812*x12815))+((r01*x12817)));
evalcond[5]=((1.0)+(((-1.0)*x12814*x12816))+(((-1.0)*r12*x12815))+((r11*x12818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12819=((1.0)*cj5);
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12819))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12819))+(((-1.0)*r20*sj5)))),-1);
if(!x12821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12820.value)+(((1.5707963267949)*(x12821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12822=IKcos(j4);
IkReal x12823=IKsin(j4);
IkReal x12824=(cj5*r00);
IkReal x12825=(cj5*r20);
IkReal x12826=(cj5*r10);
IkReal x12827=((1.0)*x12822);
IkReal x12828=((1.0)*x12823);
IkReal x12829=(sj5*x12822);
IkReal x12830=(sj5*x12823);
evalcond[0]=((((-1.0)*x12825*x12827))+((r22*x12823))+((r21*x12829)));
evalcond[1]=((((-1.0)*x12826*x12827))+((r12*x12823))+((r11*x12829)));
evalcond[2]=((((-1.0)*x12825*x12828))+((r21*x12830))+(((-1.0)*r22*x12827)));
evalcond[3]=((((-1.0)*r02*x12827))+(((-1.0)*x12824*x12828))+((r01*x12830)));
evalcond[4]=((-1.0)+((r01*x12829))+(((-1.0)*x12824*x12827))+((r02*x12823)));
evalcond[5]=((1.0)+((r11*x12830))+(((-1.0)*x12826*x12828))+(((-1.0)*r12*x12827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12831 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12831.valid){
continue;
}
CheckValue<IkReal> x12832=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12831.value)+(((1.5707963267949)*(x12832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12833=IKcos(j4);
IkReal x12834=IKsin(j4);
IkReal x12835=(cj5*r00);
IkReal x12836=(cj5*r20);
IkReal x12837=(cj5*r10);
IkReal x12838=((1.0)*x12833);
IkReal x12839=((1.0)*x12834);
IkReal x12840=(sj5*x12833);
IkReal x12841=(sj5*x12834);
evalcond[0]=(((r22*x12834))+(((-1.0)*x12836*x12838))+((r21*x12840)));
evalcond[1]=((((-1.0)*x12837*x12838))+((r12*x12834))+((r11*x12840)));
evalcond[2]=((((-1.0)*x12836*x12839))+(((-1.0)*r22*x12838))+((r21*x12841)));
evalcond[3]=(((r01*x12841))+(((-1.0)*r02*x12838))+(((-1.0)*x12835*x12839)));
evalcond[4]=((-1.0)+((r01*x12840))+((r02*x12834))+(((-1.0)*x12835*x12838)));
evalcond[5]=((1.0)+(((-1.0)*x12837*x12839))+((r11*x12841))+(((-1.0)*r12*x12838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12842=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12842;
j4eval[1]=IKsign(x12842);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12843=((1.0)*cj5);
IkReal x12844=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12843)));
j4eval[0]=x12844;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12843)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12845=cj5*cj5;
IkReal x12846=(r11*r21);
IkReal x12847=((1.0)*r20);
IkReal x12848=(cj5*sj5);
IkReal x12849=(((r11*r20*x12848))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12845*x12847))+(((-1.0)*x12846))+((r10*r21*x12848))+((x12845*x12846)));
j4eval[0]=x12849;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12847))))));
j4eval[2]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12850=cj5*cj5;
IkReal x12851=(r21*sj5);
IkReal x12852=(r11*r21);
IkReal x12853=((1.0)*r20);
CheckValue<IkReal> x12854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12852))+(((-1.0)*r10*x12850*x12853))+((cj5*r10*x12851))+((x12850*x12852))+((cj5*r11*r20*sj5)))),-1);
if(!x12854.valid){
continue;
}
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal((x12851+(((-1.0)*cj5*x12853)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12854.value)))+(x12855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12856=IKcos(j4);
IkReal x12857=IKsin(j4);
IkReal x12858=(cj5*r00);
IkReal x12859=(cj5*r20);
IkReal x12860=(cj5*r10);
IkReal x12861=((1.0)*x12856);
IkReal x12862=((1.0)*x12857);
IkReal x12863=(sj5*x12856);
IkReal x12864=(sj5*x12857);
evalcond[0]=((((-1.0)*x12859*x12861))+((r21*x12863))+((r22*x12857)));
evalcond[1]=(((r11*x12863))+(((-1.0)*x12860*x12861))+((r12*x12857)));
evalcond[2]=((((-1.0)*x12859*x12862))+((r21*x12864))+(((-1.0)*r22*x12861)));
evalcond[3]=((((-1.0)*x12858*x12862))+(((-1.0)*r02*x12861))+((r01*x12864)));
evalcond[4]=((1.0)+(((-1.0)*x12858*x12861))+((r02*x12857))+((r01*x12863)));
evalcond[5]=((1.0)+((r11*x12864))+(((-1.0)*x12860*x12862))+(((-1.0)*r12*x12861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12865=((1.0)*cj5);
CheckValue<IkReal> x12866 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12865)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12866.valid){
continue;
}
CheckValue<IkReal> x12867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12865)))),-1);
if(!x12867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12866.value)+(((1.5707963267949)*(x12867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12868=IKcos(j4);
IkReal x12869=IKsin(j4);
IkReal x12870=(cj5*r00);
IkReal x12871=(cj5*r20);
IkReal x12872=(cj5*r10);
IkReal x12873=((1.0)*x12868);
IkReal x12874=((1.0)*x12869);
IkReal x12875=(sj5*x12868);
IkReal x12876=(sj5*x12869);
evalcond[0]=((((-1.0)*x12871*x12873))+((r21*x12875))+((r22*x12869)));
evalcond[1]=(((r12*x12869))+(((-1.0)*x12872*x12873))+((r11*x12875)));
evalcond[2]=((((-1.0)*r22*x12873))+(((-1.0)*x12871*x12874))+((r21*x12876)));
evalcond[3]=(((r01*x12876))+(((-1.0)*r02*x12873))+(((-1.0)*x12870*x12874)));
evalcond[4]=((1.0)+((r01*x12875))+((r02*x12869))+(((-1.0)*x12870*x12873)));
evalcond[5]=((1.0)+(((-1.0)*x12872*x12874))+(((-1.0)*r12*x12873))+((r11*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12877=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12877.valid){
continue;
}
CheckValue<IkReal> x12878 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12877.value)))+(x12878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12879=IKcos(j4);
IkReal x12880=IKsin(j4);
IkReal x12881=(cj5*r00);
IkReal x12882=(cj5*r20);
IkReal x12883=(cj5*r10);
IkReal x12884=((1.0)*x12879);
IkReal x12885=((1.0)*x12880);
IkReal x12886=(sj5*x12879);
IkReal x12887=(sj5*x12880);
evalcond[0]=(((r22*x12880))+(((-1.0)*x12882*x12884))+((r21*x12886)));
evalcond[1]=((((-1.0)*x12883*x12884))+((r12*x12880))+((r11*x12886)));
evalcond[2]=((((-1.0)*r22*x12884))+(((-1.0)*x12882*x12885))+((r21*x12887)));
evalcond[3]=((((-1.0)*r02*x12884))+((r01*x12887))+(((-1.0)*x12881*x12885)));
evalcond[4]=((1.0)+((r01*x12886))+(((-1.0)*x12881*x12884))+((r02*x12880)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12884))+(((-1.0)*x12883*x12885))+((r11*x12887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12888=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12888;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12889=((1.0)*cj5);
IkReal x12890=((((-1.0)*r21*x12889))+(((-1.0)*r20*sj5)));
j4eval[0]=x12890;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12889))))));
j4eval[2]=IKsign(x12890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12891=cj5*cj5;
IkReal x12892=(r11*r21);
IkReal x12893=((1.0)*r20);
IkReal x12894=(cj5*sj5);
IkReal x12895=((((-1.0)*x12892))+(((-1.0)*r12*r22))+((r11*r20*x12894))+((r10*r21*x12894))+((x12891*x12892))+(((-1.0)*r10*x12891*x12893)));
j4eval[0]=x12895;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12893))))));
j4eval[2]=IKsign(x12895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12896=cj5*cj5;
IkReal x12897=(r21*sj5);
IkReal x12898=(r11*r21);
IkReal x12899=((1.0)*r20);
CheckValue<IkReal> x12900 = IKatan2WithCheck(IkReal((x12897+(((-1.0)*cj5*x12899)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12900.valid){
continue;
}
CheckValue<IkReal> x12901=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12898))+((x12896*x12898))+((cj5*r10*x12897))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12896*x12899))+((cj5*r11*r20*sj5)))),-1);
if(!x12901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12900.value)+(((1.5707963267949)*(x12901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12902=IKcos(j4);
IkReal x12903=IKsin(j4);
IkReal x12904=(cj5*r00);
IkReal x12905=(cj5*r20);
IkReal x12906=(cj5*r10);
IkReal x12907=((1.0)*x12902);
IkReal x12908=((1.0)*x12903);
IkReal x12909=(sj5*x12902);
IkReal x12910=(sj5*x12903);
evalcond[0]=(((r21*x12909))+(((-1.0)*x12905*x12907))+((r22*x12903)));
evalcond[1]=((((-1.0)*x12906*x12907))+((r12*x12903))+((r11*x12909)));
evalcond[2]=(((r21*x12910))+(((-1.0)*x12905*x12908))+(((-1.0)*r22*x12907)));
evalcond[3]=((((-1.0)*r02*x12907))+(((-1.0)*x12904*x12908))+((r01*x12910)));
evalcond[4]=((-1.0)+((r01*x12909))+((r02*x12903))+(((-1.0)*x12904*x12907)));
evalcond[5]=((1.0)+(((-1.0)*x12906*x12908))+(((-1.0)*r12*x12907))+((r11*x12910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12911=((1.0)*cj5);
CheckValue<IkReal> x12912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12911))+(((-1.0)*r20*sj5)))),-1);
if(!x12912.valid){
continue;
}
CheckValue<IkReal> x12913 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12911))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12912.value)))+(x12913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12914=IKcos(j4);
IkReal x12915=IKsin(j4);
IkReal x12916=(cj5*r00);
IkReal x12917=(cj5*r20);
IkReal x12918=(cj5*r10);
IkReal x12919=((1.0)*x12914);
IkReal x12920=((1.0)*x12915);
IkReal x12921=(sj5*x12914);
IkReal x12922=(sj5*x12915);
evalcond[0]=((((-1.0)*x12917*x12919))+((r21*x12921))+((r22*x12915)));
evalcond[1]=(((r11*x12921))+((r12*x12915))+(((-1.0)*x12918*x12919)));
evalcond[2]=((((-1.0)*x12917*x12920))+(((-1.0)*r22*x12919))+((r21*x12922)));
evalcond[3]=((((-1.0)*r02*x12919))+((r01*x12922))+(((-1.0)*x12916*x12920)));
evalcond[4]=((-1.0)+((r02*x12915))+(((-1.0)*x12916*x12919))+((r01*x12921)));
evalcond[5]=((1.0)+(((-1.0)*x12918*x12920))+((r11*x12922))+(((-1.0)*r12*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12923 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12923.valid){
continue;
}
CheckValue<IkReal> x12924=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12923.value)+(((1.5707963267949)*(x12924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12925=IKcos(j4);
IkReal x12926=IKsin(j4);
IkReal x12927=(cj5*r00);
IkReal x12928=(cj5*r20);
IkReal x12929=(cj5*r10);
IkReal x12930=((1.0)*x12925);
IkReal x12931=((1.0)*x12926);
IkReal x12932=(sj5*x12925);
IkReal x12933=(sj5*x12926);
evalcond[0]=((((-1.0)*x12928*x12930))+((r22*x12926))+((r21*x12932)));
evalcond[1]=(((r11*x12932))+(((-1.0)*x12929*x12930))+((r12*x12926)));
evalcond[2]=((((-1.0)*x12928*x12931))+(((-1.0)*r22*x12930))+((r21*x12933)));
evalcond[3]=((((-1.0)*r02*x12930))+(((-1.0)*x12927*x12931))+((r01*x12933)));
evalcond[4]=((-1.0)+(((-1.0)*x12927*x12930))+((r02*x12926))+((r01*x12932)));
evalcond[5]=((1.0)+((r11*x12933))+(((-1.0)*r12*x12930))+(((-1.0)*x12929*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12934=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12934;
j4eval[1]=IKsign(x12934);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12935=((1.0)*cj5);
IkReal x12936=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12935)));
j4eval[0]=x12936;
j4eval[1]=((IKabs(((((-1.0)*r20*x12935))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12937=cj5*cj5;
IkReal x12938=(r11*r21);
IkReal x12939=((1.0)*r20);
IkReal x12940=(cj5*sj5);
IkReal x12941=((((-1.0)*r12*r22))+(((-1.0)*r10*x12937*x12939))+(((-1.0)*x12938))+((r10*r21*x12940))+((x12937*x12938))+((r11*r20*x12940)));
j4eval[0]=x12941;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12939))))));
j4eval[2]=IKsign(x12941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12942=cj5*cj5;
IkReal x12943=(r21*sj5);
IkReal x12944=(r11*r21);
IkReal x12945=((1.0)*r20);
CheckValue<IkReal> x12946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12942*x12945))+(((-1.0)*x12944))+((cj5*r10*x12943))+((x12942*x12944))+((cj5*r11*r20*sj5)))),-1);
if(!x12946.valid){
continue;
}
CheckValue<IkReal> x12947 = IKatan2WithCheck(IkReal((x12943+(((-1.0)*cj5*x12945)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12946.value)))+(x12947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12948=IKcos(j4);
IkReal x12949=IKsin(j4);
IkReal x12950=(cj5*r00);
IkReal x12951=(cj5*r20);
IkReal x12952=(cj5*r10);
IkReal x12953=((1.0)*x12948);
IkReal x12954=((1.0)*x12949);
IkReal x12955=(sj5*x12948);
IkReal x12956=(sj5*x12949);
evalcond[0]=(((r22*x12949))+(((-1.0)*x12951*x12953))+((r21*x12955)));
evalcond[1]=((((-1.0)*x12952*x12953))+((r12*x12949))+((r11*x12955)));
evalcond[2]=((((-1.0)*x12951*x12954))+((r21*x12956))+(((-1.0)*r22*x12953)));
evalcond[3]=(((r01*x12956))+(((-1.0)*x12950*x12954))+(((-1.0)*r02*x12953)));
evalcond[4]=((1.0)+((r01*x12955))+(((-1.0)*x12950*x12953))+((r02*x12949)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12953))+(((-1.0)*x12952*x12954))+((r11*x12956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12957=((1.0)*cj5);
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12957)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12957)))),-1);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12958.value)+(((1.5707963267949)*(x12959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(cj5*r00);
IkReal x12963=(cj5*r20);
IkReal x12964=(cj5*r10);
IkReal x12965=((1.0)*x12960);
IkReal x12966=((1.0)*x12961);
IkReal x12967=(sj5*x12960);
IkReal x12968=(sj5*x12961);
evalcond[0]=(((r22*x12961))+((r21*x12967))+(((-1.0)*x12963*x12965)));
evalcond[1]=(((r11*x12967))+((r12*x12961))+(((-1.0)*x12964*x12965)));
evalcond[2]=((((-1.0)*r22*x12965))+((r21*x12968))+(((-1.0)*x12963*x12966)));
evalcond[3]=(((r01*x12968))+(((-1.0)*x12962*x12966))+(((-1.0)*r02*x12965)));
evalcond[4]=((1.0)+((r01*x12967))+(((-1.0)*x12962*x12965))+((r02*x12961)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12965))+((r11*x12968))+(((-1.0)*x12964*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12969.valid){
continue;
}
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12969.value)))+(x12970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12971=IKcos(j4);
IkReal x12972=IKsin(j4);
IkReal x12973=(cj5*r00);
IkReal x12974=(cj5*r20);
IkReal x12975=(cj5*r10);
IkReal x12976=((1.0)*x12971);
IkReal x12977=((1.0)*x12972);
IkReal x12978=(sj5*x12971);
IkReal x12979=(sj5*x12972);
evalcond[0]=((((-1.0)*x12974*x12976))+((r22*x12972))+((r21*x12978)));
evalcond[1]=((((-1.0)*x12975*x12976))+((r11*x12978))+((r12*x12972)));
evalcond[2]=((((-1.0)*x12974*x12977))+(((-1.0)*r22*x12976))+((r21*x12979)));
evalcond[3]=(((r01*x12979))+(((-1.0)*r02*x12976))+(((-1.0)*x12973*x12977)));
evalcond[4]=((1.0)+((r01*x12978))+((r02*x12972))+(((-1.0)*x12973*x12976)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12976))+(((-1.0)*x12975*x12977))+((r11*x12979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12980=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12980;
j4eval[1]=IKsign(x12980);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12981=((1.0)*cj5);
IkReal x12982=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12981)));
j4eval[0]=x12982;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12981))))));
j4eval[2]=IKsign(x12982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12983=cj5*cj5;
IkReal x12984=(r11*r21);
IkReal x12985=((1.0)*r20);
IkReal x12986=(cj5*sj5);
IkReal x12987=(((r10*r21*x12986))+(((-1.0)*r12*r22))+((x12983*x12984))+(((-1.0)*r10*x12983*x12985))+((r11*r20*x12986))+(((-1.0)*x12984)));
j4eval[0]=x12987;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12985))))));
j4eval[2]=IKsign(x12987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12988=cj5*cj5;
IkReal x12989=(r21*sj5);
IkReal x12990=(r11*r21);
IkReal x12991=((1.0)*r20);
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal((x12989+(((-1.0)*cj5*x12991)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
CheckValue<IkReal> x12993=IKPowWithIntegerCheck(IKsign((((x12988*x12990))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12988*x12991))+((cj5*r10*x12989))+(((-1.0)*x12990))+((cj5*r11*r20*sj5)))),-1);
if(!x12993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12992.value)+(((1.5707963267949)*(x12993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12994=IKcos(j4);
IkReal x12995=IKsin(j4);
IkReal x12996=(cj5*r00);
IkReal x12997=(cj5*r20);
IkReal x12998=(cj5*r10);
IkReal x12999=((1.0)*x12994);
IkReal x13000=((1.0)*x12995);
IkReal x13001=(sj5*x12994);
IkReal x13002=(sj5*x12995);
evalcond[0]=((((-1.0)*x12997*x12999))+((r22*x12995))+((r21*x13001)));
evalcond[1]=((((-1.0)*x12998*x12999))+((r12*x12995))+((r11*x13001)));
evalcond[2]=((((-1.0)*r22*x12999))+((r21*x13002))+(((-1.0)*x12997*x13000)));
evalcond[3]=((((-1.0)*x12996*x13000))+(((-1.0)*r02*x12999))+((r01*x13002)));
evalcond[4]=((1.0)+((r02*x12995))+(((-1.0)*x12996*x12999))+((r01*x13001)));
evalcond[5]=((1.0)+(((-1.0)*x12998*x13000))+(((-1.0)*r12*x12999))+((r11*x13002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13003=((1.0)*cj5);
CheckValue<IkReal> x13004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13003))+(((-1.0)*r10*sj5)))),-1);
if(!x13004.valid){
continue;
}
CheckValue<IkReal> x13005 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13003)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13004.value)))+(x13005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13006=IKcos(j4);
IkReal x13007=IKsin(j4);
IkReal x13008=(cj5*r00);
IkReal x13009=(cj5*r20);
IkReal x13010=(cj5*r10);
IkReal x13011=((1.0)*x13006);
IkReal x13012=((1.0)*x13007);
IkReal x13013=(sj5*x13006);
IkReal x13014=(sj5*x13007);
evalcond[0]=(((r21*x13013))+(((-1.0)*x13009*x13011))+((r22*x13007)));
evalcond[1]=(((r12*x13007))+((r11*x13013))+(((-1.0)*x13010*x13011)));
evalcond[2]=((((-1.0)*r22*x13011))+((r21*x13014))+(((-1.0)*x13009*x13012)));
evalcond[3]=(((r01*x13014))+(((-1.0)*x13008*x13012))+(((-1.0)*r02*x13011)));
evalcond[4]=((1.0)+((r01*x13013))+(((-1.0)*x13008*x13011))+((r02*x13007)));
evalcond[5]=((1.0)+((r11*x13014))+(((-1.0)*x13010*x13012))+(((-1.0)*r12*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13015=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13015.valid){
continue;
}
CheckValue<IkReal> x13016 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13015.value)))+(x13016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13017=IKcos(j4);
IkReal x13018=IKsin(j4);
IkReal x13019=(cj5*r00);
IkReal x13020=(cj5*r20);
IkReal x13021=(cj5*r10);
IkReal x13022=((1.0)*x13017);
IkReal x13023=((1.0)*x13018);
IkReal x13024=(sj5*x13017);
IkReal x13025=(sj5*x13018);
evalcond[0]=(((r21*x13024))+((r22*x13018))+(((-1.0)*x13020*x13022)));
evalcond[1]=((((-1.0)*x13021*x13022))+((r11*x13024))+((r12*x13018)));
evalcond[2]=((((-1.0)*r22*x13022))+((r21*x13025))+(((-1.0)*x13020*x13023)));
evalcond[3]=(((r01*x13025))+(((-1.0)*x13019*x13023))+(((-1.0)*r02*x13022)));
evalcond[4]=((1.0)+((r01*x13024))+(((-1.0)*x13019*x13022))+((r02*x13018)));
evalcond[5]=((1.0)+(((-1.0)*x13021*x13023))+((r11*x13025))+(((-1.0)*r12*x13022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13026=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13026;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13027=((1.0)*cj5);
IkReal x13028=((((-1.0)*r21*x13027))+(((-1.0)*r20*sj5)));
j4eval[0]=x13028;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13027))+((r11*sj5))))));
j4eval[2]=IKsign(x13028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13029=cj5*cj5;
IkReal x13030=(r11*r21);
IkReal x13031=((1.0)*r20);
IkReal x13032=(cj5*sj5);
IkReal x13033=((((-1.0)*x13030))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13029*x13031))+((x13029*x13030))+((r10*r21*x13032))+((r11*r20*x13032)));
j4eval[0]=x13033;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13031))))));
j4eval[2]=IKsign(x13033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13034=cj5*cj5;
IkReal x13035=(r21*sj5);
IkReal x13036=(r11*r21);
IkReal x13037=((1.0)*r20);
CheckValue<IkReal> x13038=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13036))+(((-1.0)*r12*r22))+((x13034*x13036))+((cj5*r10*x13035))+(((-1.0)*r10*x13034*x13037))+((cj5*r11*r20*sj5)))),-1);
if(!x13038.valid){
continue;
}
CheckValue<IkReal> x13039 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13037))+x13035)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13038.value)))+(x13039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13040=IKcos(j4);
IkReal x13041=IKsin(j4);
IkReal x13042=(cj5*r00);
IkReal x13043=(cj5*r20);
IkReal x13044=(cj5*r10);
IkReal x13045=((1.0)*x13040);
IkReal x13046=((1.0)*x13041);
IkReal x13047=(sj5*x13040);
IkReal x13048=(sj5*x13041);
evalcond[0]=(((r21*x13047))+((r22*x13041))+(((-1.0)*x13043*x13045)));
evalcond[1]=(((r11*x13047))+(((-1.0)*x13044*x13045))+((r12*x13041)));
evalcond[2]=(((r21*x13048))+(((-1.0)*r22*x13045))+(((-1.0)*x13043*x13046)));
evalcond[3]=((((-1.0)*r02*x13045))+((r01*x13048))+(((-1.0)*x13042*x13046)));
evalcond[4]=((-1.0)+((r02*x13041))+((r01*x13047))+(((-1.0)*x13042*x13045)));
evalcond[5]=((1.0)+((r11*x13048))+(((-1.0)*x13044*x13046))+(((-1.0)*r12*x13045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13049=((1.0)*cj5);
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13049))+(((-1.0)*r20*sj5)))),-1);
if(!x13050.valid){
continue;
}
CheckValue<IkReal> x13051 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13049))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13050.value)))+(x13051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13052=IKcos(j4);
IkReal x13053=IKsin(j4);
IkReal x13054=(cj5*r00);
IkReal x13055=(cj5*r20);
IkReal x13056=(cj5*r10);
IkReal x13057=((1.0)*x13052);
IkReal x13058=((1.0)*x13053);
IkReal x13059=(sj5*x13052);
IkReal x13060=(sj5*x13053);
evalcond[0]=(((r21*x13059))+((r22*x13053))+(((-1.0)*x13055*x13057)));
evalcond[1]=(((r12*x13053))+(((-1.0)*x13056*x13057))+((r11*x13059)));
evalcond[2]=(((r21*x13060))+(((-1.0)*r22*x13057))+(((-1.0)*x13055*x13058)));
evalcond[3]=((((-1.0)*x13054*x13058))+(((-1.0)*r02*x13057))+((r01*x13060)));
evalcond[4]=((-1.0)+((r02*x13053))+(((-1.0)*x13054*x13057))+((r01*x13059)));
evalcond[5]=((1.0)+(((-1.0)*x13056*x13058))+(((-1.0)*r12*x13057))+((r11*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13061 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13061.valid){
continue;
}
CheckValue<IkReal> x13062=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13061.value)+(((1.5707963267949)*(x13062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13063=IKcos(j4);
IkReal x13064=IKsin(j4);
IkReal x13065=(cj5*r00);
IkReal x13066=(cj5*r20);
IkReal x13067=(cj5*r10);
IkReal x13068=((1.0)*x13063);
IkReal x13069=((1.0)*x13064);
IkReal x13070=(sj5*x13063);
IkReal x13071=(sj5*x13064);
evalcond[0]=(((r21*x13070))+(((-1.0)*x13066*x13068))+((r22*x13064)));
evalcond[1]=(((r12*x13064))+((r11*x13070))+(((-1.0)*x13067*x13068)));
evalcond[2]=(((r21*x13071))+(((-1.0)*x13066*x13069))+(((-1.0)*r22*x13068)));
evalcond[3]=(((r01*x13071))+(((-1.0)*r02*x13068))+(((-1.0)*x13065*x13069)));
evalcond[4]=((-1.0)+((r02*x13064))+((r01*x13070))+(((-1.0)*x13065*x13068)));
evalcond[5]=((1.0)+((r11*x13071))+(((-1.0)*r12*x13068))+(((-1.0)*x13067*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13072=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13072;
j4eval[1]=IKsign(x13072);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13073=((1.0)*cj5);
IkReal x13074=((((-1.0)*r11*x13073))+(((-1.0)*r10*sj5)));
j4eval[0]=x13074;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13073)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13075=cj5*cj5;
IkReal x13076=(r11*r21);
IkReal x13077=((1.0)*r20);
IkReal x13078=(cj5*sj5);
IkReal x13079=((((-1.0)*r12*r22))+((x13075*x13076))+((r11*r20*x13078))+(((-1.0)*x13076))+(((-1.0)*r10*x13075*x13077))+((r10*r21*x13078)));
j4eval[0]=x13079;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13077))))));
j4eval[2]=IKsign(x13079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13080=cj5*cj5;
IkReal x13081=(r21*sj5);
IkReal x13082=(r11*r21);
IkReal x13083=((1.0)*r20);
CheckValue<IkReal> x13084 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13083))+x13081)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13084.valid){
continue;
}
CheckValue<IkReal> x13085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x13080*x13083))+(((-1.0)*x13082))+((cj5*r11*r20*sj5))+((cj5*r10*x13081))+((x13080*x13082)))),-1);
if(!x13085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13084.value)+(((1.5707963267949)*(x13085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13086=IKcos(j4);
IkReal x13087=IKsin(j4);
IkReal x13088=(cj5*r00);
IkReal x13089=(cj5*r20);
IkReal x13090=(cj5*r10);
IkReal x13091=((1.0)*x13086);
IkReal x13092=((1.0)*x13087);
IkReal x13093=(sj5*x13086);
IkReal x13094=(sj5*x13087);
evalcond[0]=(((r22*x13087))+(((-1.0)*x13089*x13091))+((r21*x13093)));
evalcond[1]=((((-1.0)*x13090*x13091))+((r11*x13093))+((r12*x13087)));
evalcond[2]=((((-1.0)*r22*x13091))+(((-1.0)*x13089*x13092))+((r21*x13094)));
evalcond[3]=(((r01*x13094))+(((-1.0)*x13088*x13092))+(((-1.0)*r02*x13091)));
evalcond[4]=((1.0)+((r02*x13087))+((r01*x13093))+(((-1.0)*x13088*x13091)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13091))+(((-1.0)*x13090*x13092))+((r11*x13094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13095=((1.0)*cj5);
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13095)))),-1);
if(!x13096.valid){
continue;
}
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13095))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13096.value)))+(x13097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13098=IKcos(j4);
IkReal x13099=IKsin(j4);
IkReal x13100=(cj5*r00);
IkReal x13101=(cj5*r20);
IkReal x13102=(cj5*r10);
IkReal x13103=((1.0)*x13098);
IkReal x13104=((1.0)*x13099);
IkReal x13105=(sj5*x13098);
IkReal x13106=(sj5*x13099);
evalcond[0]=((((-1.0)*x13101*x13103))+((r22*x13099))+((r21*x13105)));
evalcond[1]=((((-1.0)*x13102*x13103))+((r12*x13099))+((r11*x13105)));
evalcond[2]=((((-1.0)*x13101*x13104))+((r21*x13106))+(((-1.0)*r22*x13103)));
evalcond[3]=(((r01*x13106))+(((-1.0)*x13100*x13104))+(((-1.0)*r02*x13103)));
evalcond[4]=((1.0)+((r02*x13099))+((r01*x13105))+(((-1.0)*x13100*x13103)));
evalcond[5]=((1.0)+(((-1.0)*x13102*x13104))+(((-1.0)*r12*x13103))+((r11*x13106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13107=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13107.valid){
continue;
}
CheckValue<IkReal> x13108 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13107.value)))+(x13108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13109=IKcos(j4);
IkReal x13110=IKsin(j4);
IkReal x13111=(cj5*r00);
IkReal x13112=(cj5*r20);
IkReal x13113=(cj5*r10);
IkReal x13114=((1.0)*x13109);
IkReal x13115=((1.0)*x13110);
IkReal x13116=(sj5*x13109);
IkReal x13117=(sj5*x13110);
evalcond[0]=(((r22*x13110))+(((-1.0)*x13112*x13114))+((r21*x13116)));
evalcond[1]=(((r12*x13110))+(((-1.0)*x13113*x13114))+((r11*x13116)));
evalcond[2]=((((-1.0)*x13112*x13115))+((r21*x13117))+(((-1.0)*r22*x13114)));
evalcond[3]=((((-1.0)*r02*x13114))+(((-1.0)*x13111*x13115))+((r01*x13117)));
evalcond[4]=((1.0)+((r02*x13110))+(((-1.0)*x13111*x13114))+((r01*x13116)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13114))+(((-1.0)*x13113*x13115))+((r11*x13117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13118=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13118;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13119=((1.0)*cj5);
IkReal x13120=((((-1.0)*r21*x13119))+(((-1.0)*r20*sj5)));
j4eval[0]=x13120;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13119))+((r11*sj5))))));
j4eval[2]=IKsign(x13120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13121=cj5*cj5;
IkReal x13122=(r11*r21);
IkReal x13123=((1.0)*r20);
IkReal x13124=(cj5*sj5);
IkReal x13125=((((-1.0)*r10*x13121*x13123))+(((-1.0)*r12*r22))+((r10*r21*x13124))+((x13121*x13122))+((r11*r20*x13124))+(((-1.0)*x13122)));
j4eval[0]=x13125;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13123))))));
j4eval[2]=IKsign(x13125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13126=cj5*cj5;
IkReal x13127=(r21*sj5);
IkReal x13128=(r11*r21);
IkReal x13129=((1.0)*r20);
CheckValue<IkReal> x13130 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13129))+x13127)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13130.valid){
continue;
}
CheckValue<IkReal> x13131=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13127))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13126*x13129))+((x13126*x13128))+((cj5*r11*r20*sj5))+(((-1.0)*x13128)))),-1);
if(!x13131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13130.value)+(((1.5707963267949)*(x13131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13132=IKcos(j4);
IkReal x13133=IKsin(j4);
IkReal x13134=(cj5*r00);
IkReal x13135=(cj5*r20);
IkReal x13136=(cj5*r10);
IkReal x13137=((1.0)*x13132);
IkReal x13138=((1.0)*x13133);
IkReal x13139=(sj5*x13132);
IkReal x13140=(sj5*x13133);
evalcond[0]=((((-1.0)*x13135*x13137))+((r21*x13139))+((r22*x13133)));
evalcond[1]=(((r12*x13133))+(((-1.0)*x13136*x13137))+((r11*x13139)));
evalcond[2]=((((-1.0)*x13135*x13138))+(((-1.0)*r22*x13137))+((r21*x13140)));
evalcond[3]=((((-1.0)*x13134*x13138))+((r01*x13140))+(((-1.0)*r02*x13137)));
evalcond[4]=((-1.0)+((r01*x13139))+(((-1.0)*x13134*x13137))+((r02*x13133)));
evalcond[5]=((1.0)+((r11*x13140))+(((-1.0)*x13136*x13138))+(((-1.0)*r12*x13137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13141=((1.0)*cj5);
CheckValue<IkReal> x13142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13141))+(((-1.0)*r20*sj5)))),-1);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13141))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13142.value)))+(x13143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13144=IKcos(j4);
IkReal x13145=IKsin(j4);
IkReal x13146=(cj5*r00);
IkReal x13147=(cj5*r20);
IkReal x13148=(cj5*r10);
IkReal x13149=((1.0)*x13144);
IkReal x13150=((1.0)*x13145);
IkReal x13151=(sj5*x13144);
IkReal x13152=(sj5*x13145);
evalcond[0]=((((-1.0)*x13147*x13149))+((r21*x13151))+((r22*x13145)));
evalcond[1]=(((r12*x13145))+((r11*x13151))+(((-1.0)*x13148*x13149)));
evalcond[2]=(((r21*x13152))+(((-1.0)*x13147*x13150))+(((-1.0)*r22*x13149)));
evalcond[3]=((((-1.0)*x13146*x13150))+(((-1.0)*r02*x13149))+((r01*x13152)));
evalcond[4]=((-1.0)+(((-1.0)*x13146*x13149))+((r02*x13145))+((r01*x13151)));
evalcond[5]=((1.0)+(((-1.0)*x13148*x13150))+(((-1.0)*r12*x13149))+((r11*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13153 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13153.valid){
continue;
}
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13153.value)+(((1.5707963267949)*(x13154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13155=IKcos(j4);
IkReal x13156=IKsin(j4);
IkReal x13157=(cj5*r00);
IkReal x13158=(cj5*r20);
IkReal x13159=(cj5*r10);
IkReal x13160=((1.0)*x13155);
IkReal x13161=((1.0)*x13156);
IkReal x13162=(sj5*x13155);
IkReal x13163=(sj5*x13156);
evalcond[0]=((((-1.0)*x13158*x13160))+((r22*x13156))+((r21*x13162)));
evalcond[1]=(((r11*x13162))+((r12*x13156))+(((-1.0)*x13159*x13160)));
evalcond[2]=((((-1.0)*x13158*x13161))+(((-1.0)*r22*x13160))+((r21*x13163)));
evalcond[3]=((((-1.0)*x13157*x13161))+((r01*x13163))+(((-1.0)*r02*x13160)));
evalcond[4]=((-1.0)+(((-1.0)*x13157*x13160))+((r02*x13156))+((r01*x13162)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13160))+((r11*x13163))+(((-1.0)*x13159*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13164=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13165=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13166=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13166)));
j4eval[1]=((((-1.0)*r00*x13166))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13167=((1.0)*cj5);
CheckValue<IkReal> x13168=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13167))),-1);
if(!x13168.valid){
continue;
}
CheckValue<IkReal> x13169=IKPowWithIntegerCheck(((((-1.0)*r00*x13167))+((r01*sj5))),-1);
if(!x13169.valid){
continue;
}
if( IKabs(((-1.0)*(x13168.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13169.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13168.value)))+IKsqr(((x13169.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13168.value)), ((x13169.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13170=IKsin(j4);
IkReal x13171=IKcos(j4);
IkReal x13172=((1.0)*cj5);
IkReal x13173=((1.0)*cj2);
IkReal x13174=(sj5*x13171);
IkReal x13175=(sj5*x13170);
evalcond[0]=((-1.0)*r22*x13171);
evalcond[1]=((((-1.0)*cj1*x13173))+((sj1*sj2))+((r22*x13170)));
evalcond[2]=(((r01*x13175))+(((-1.0)*r00*x13170*x13172)));
evalcond[3]=((((-1.0)*r10*x13171*x13172))+((r11*x13174)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13170*x13172))+((r11*x13175)));
evalcond[5]=(((r01*x13174))+(((-1.0)*sj1*x13173))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13171*x13172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13176=IKPowWithIntegerCheck(r22,-1);
if(!x13176.valid){
continue;
}
CheckValue<IkReal> x13177=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13177.valid){
continue;
}
if( IKabs(((x13176.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13177.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13176.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13177.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13176.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13177.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13178=IKsin(j4);
IkReal x13179=IKcos(j4);
IkReal x13180=((1.0)*cj5);
IkReal x13181=((1.0)*cj2);
IkReal x13182=(sj5*x13179);
IkReal x13183=(sj5*x13178);
evalcond[0]=((-1.0)*r22*x13179);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13181))+((r22*x13178)));
evalcond[2]=(((r01*x13183))+(((-1.0)*r00*x13178*x13180)));
evalcond[3]=(((r11*x13182))+(((-1.0)*r10*x13179*x13180)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13178*x13180))+((r11*x13183)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13179*x13180))+((r01*x13182))+(((-1.0)*sj1*x13181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13184=(sj1*sj2);
IkReal x13185=(cj5*r10);
IkReal x13186=(r11*sj5);
IkReal x13187=(cj1*cj2);
CheckValue<IkReal> x13188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13188.valid){
continue;
}
CheckValue<IkReal> x13189 = IKatan2WithCheck(IkReal(((((-1.0)*x13186*x13187))+(((-1.0)*x13184*x13185))+((x13185*x13187))+((x13184*x13186)))),IkReal((((r12*x13187))+(((-1.0)*r12*x13184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13188.value)))+(x13189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13190=IKcos(j4);
IkReal x13191=IKsin(j4);
IkReal x13192=(cj5*r00);
IkReal x13193=(cj5*r10);
IkReal x13194=(r21*sj5);
IkReal x13195=((1.0)*cj2);
IkReal x13196=(cj5*r20);
IkReal x13197=((1.0)*x13190);
IkReal x13198=((1.0)*x13191);
IkReal x13199=(sj5*x13191);
IkReal x13200=(sj5*x13190);
evalcond[0]=(((r12*x13191))+((r11*x13200))+(((-1.0)*x13193*x13197)));
evalcond[1]=((((-1.0)*r22*x13197))+((x13191*x13194))+(((-1.0)*x13196*x13198)));
evalcond[2]=((((-1.0)*r02*x13197))+((r01*x13199))+(((-1.0)*x13192*x13198)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13197))+((r11*x13199))+(((-1.0)*x13193*x13198)));
evalcond[4]=((((-1.0)*cj1*x13195))+((sj1*sj2))+((x13190*x13194))+(((-1.0)*x13196*x13197))+((r22*x13191)));
evalcond[5]=(((r01*x13200))+((r02*x13191))+(((-1.0)*cj1*sj2))+(((-1.0)*x13192*x13197))+(((-1.0)*sj1*x13195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13201=((1.0)*cj5);
CheckValue<IkReal> x13202 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13202.valid){
continue;
}
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13201)))),-1);
if(!x13203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13202.value)+(((1.5707963267949)*(x13203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13204=IKcos(j4);
IkReal x13205=IKsin(j4);
IkReal x13206=(cj5*r00);
IkReal x13207=(cj5*r10);
IkReal x13208=(r21*sj5);
IkReal x13209=((1.0)*cj2);
IkReal x13210=(cj5*r20);
IkReal x13211=((1.0)*x13204);
IkReal x13212=((1.0)*x13205);
IkReal x13213=(sj5*x13205);
IkReal x13214=(sj5*x13204);
evalcond[0]=((((-1.0)*x13207*x13211))+((r11*x13214))+((r12*x13205)));
evalcond[1]=(((x13205*x13208))+(((-1.0)*x13210*x13212))+(((-1.0)*r22*x13211)));
evalcond[2]=(((r01*x13213))+(((-1.0)*x13206*x13212))+(((-1.0)*r02*x13211)));
evalcond[3]=((1.0)+(((-1.0)*x13207*x13212))+((r11*x13213))+(((-1.0)*r12*x13211)));
evalcond[4]=((((-1.0)*cj1*x13209))+((x13204*x13208))+((sj1*sj2))+(((-1.0)*x13210*x13211))+((r22*x13205)));
evalcond[5]=(((r01*x13214))+(((-1.0)*x13206*x13211))+((r02*x13205))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13215=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13215.valid){
continue;
}
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13215.value)))+(x13216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13217=IKcos(j4);
IkReal x13218=IKsin(j4);
IkReal x13219=(cj5*r00);
IkReal x13220=(cj5*r10);
IkReal x13221=(r21*sj5);
IkReal x13222=((1.0)*cj2);
IkReal x13223=(cj5*r20);
IkReal x13224=((1.0)*x13217);
IkReal x13225=((1.0)*x13218);
IkReal x13226=(sj5*x13218);
IkReal x13227=(sj5*x13217);
evalcond[0]=((((-1.0)*x13220*x13224))+((r12*x13218))+((r11*x13227)));
evalcond[1]=(((x13218*x13221))+(((-1.0)*r22*x13224))+(((-1.0)*x13223*x13225)));
evalcond[2]=((((-1.0)*x13219*x13225))+(((-1.0)*r02*x13224))+((r01*x13226)));
evalcond[3]=((1.0)+(((-1.0)*x13220*x13225))+(((-1.0)*r12*x13224))+((r11*x13226)));
evalcond[4]=((((-1.0)*cj1*x13222))+((x13217*x13221))+((sj1*sj2))+(((-1.0)*x13223*x13224))+((r22*x13218)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13219*x13224))+(((-1.0)*sj1*x13222))+((r01*x13227))+((r02*x13218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13228=((-1.0)*r00);
IkReal x13230 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13230)==0){
continue;
}
IkReal x13229=pow(x13230,-0.5);
CheckValue<IkReal> x13231 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13228),IKFAST_ATAN2_MAGTHRESH);
if(!x13231.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13231.value));
IkReal gconst19=(r01*x13229);
IkReal gconst20=(x13228*x13229);
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13232.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13233=((-1.0)*r00);
IkReal x13234=x13229;
CheckValue<IkReal> x13236 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13233),IKFAST_ATAN2_MAGTHRESH);
if(!x13236.valid){
continue;
}
IkReal x13235=((-1.0)*(x13236.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13235;
IkReal gconst18=x13235;
IkReal gconst19=(r01*x13234);
IkReal gconst20=(x13233*x13234);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13237=((-1.0)*r00);
IkReal x13238=x13229;
CheckValue<IkReal> x13240 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13237),IKFAST_ATAN2_MAGTHRESH);
if(!x13240.valid){
continue;
}
IkReal x13239=((-1.0)*(x13240.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13239;
IkReal gconst18=x13239;
IkReal gconst19=(r01*x13238);
IkReal gconst20=(x13237*x13238);
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13248.valid){
continue;
}
IkReal x13241=x13248.value;
IkReal x13242=(sj3*x13241);
IkReal x13243=(r11*x13242);
IkReal x13244=(r21*x13242);
IkReal x13245=(r20*x13242);
IkReal x13246=(r10*x13242);
IkReal x13247=(r00*r01*x13242);
j4eval[0]=IKsign((((r10*x13245*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13244))+((r00*r01*r20*x13243))+((r21*x13243*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13249=gconst19*gconst19;
IkReal x13250=gconst20*gconst20;
IkReal x13251=(gconst20*sj3);
IkReal x13252=((1.0)*cj3);
IkReal x13253=(r10*sj3);
IkReal x13254=(gconst19*r21);
IkReal x13255=(r11*r20);
IkReal x13256=(cj3*gconst20);
IkReal x13257=((1.0)*r10*r20);
IkReal x13258=(r21*x13249);
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal((((gconst19*r22*x13253))+((r11*r22*x13251)))),IkReal((((r11*x13251*x13254))+((x13253*x13258))+(((-1.0)*gconst19*x13251*x13257))+(((-1.0)*sj3*x13250*x13255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13252*x13258))+((gconst19*x13255*x13256))+(((-1.0)*r12*r22*x13252))+((r10*x13254*x13256))+(((-1.0)*r10*r20*x13250*x13252)))),-1);
if(!x13260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13259.value)+(((1.5707963267949)*(x13260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13261=IKsin(j4);
IkReal x13262=IKcos(j4);
IkReal x13263=(sj1*sj2);
IkReal x13264=(gconst20*sj3);
IkReal x13265=(gconst19*r21);
IkReal x13266=(gconst20*r10);
IkReal x13267=(cj3*gconst19);
IkReal x13268=(gconst19*sj3);
IkReal x13269=((1.0)*cj1);
IkReal x13270=(cj3*gconst20);
IkReal x13271=(cj2*sj1);
IkReal x13272=(cj2*x13269);
IkReal x13273=((1.0)*x13262);
IkReal x13274=((1.0)*x13261);
IkReal x13275=(cj3*x13261);
IkReal x13276=(gconst19*x13261);
evalcond[0]=((((-1.0)*r22*x13273))+(((-1.0)*gconst20*r20*x13274))+((x13261*x13265)));
evalcond[1]=((((-1.0)*gconst20*r00*x13274))+((r01*x13276))+(((-1.0)*r02*x13273)));
evalcond[2]=((1.0)+((r11*x13276))+(((-1.0)*x13266*x13274))+(((-1.0)*r12*x13273)));
evalcond[3]=(((r11*x13264))+((r12*x13275))+((r10*x13268))+(((-1.0)*cj3*x13266*x13273))+((r11*x13262*x13267)));
evalcond[4]=(((r11*x13270))+((r10*x13262*x13264))+(((-1.0)*r11*x13268*x13273))+((r10*x13267))+(((-1.0)*r12*sj3*x13274)));
evalcond[5]=(((cj3*x13262*x13265))+((r21*x13264))+((cj1*sj2))+((r20*x13268))+((r22*x13275))+x13271+(((-1.0)*r20*x13270*x13273)));
evalcond[6]=((((-1.0)*x13272))+((r00*x13268))+((r01*x13264))+((r01*x13262*x13267))+(((-1.0)*r00*x13270*x13273))+((r02*x13275))+x13263);
evalcond[7]=((((-1.0)*x13272))+((r21*x13270))+((r20*x13262*x13264))+((r20*x13267))+(((-1.0)*sj3*x13265*x13273))+(((-1.0)*r22*sj3*x13274))+x13263);
evalcond[8]=((((-1.0)*sj2*x13269))+(((-1.0)*x13271))+((r01*x13270))+((r00*x13267))+(((-1.0)*r02*sj3*x13274))+(((-1.0)*r01*x13268*x13273))+((r00*x13262*x13264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13277=gconst19*gconst19;
IkReal x13278=gconst20*gconst20;
IkReal x13279=(r21*sj3);
IkReal x13280=(cj3*r11);
IkReal x13281=(gconst19*gconst20);
IkReal x13282=((1.0)*r10);
IkReal x13283=(cj3*r10);
IkReal x13284=(r20*x13278);
CheckValue<IkReal> x13285 = IKatan2WithCheck(IkReal((((gconst20*r22*x13280))+((gconst19*r22*x13283)))),IkReal((((r21*x13277*x13283))+(((-1.0)*cj3*r20*x13281*x13282))+(((-1.0)*x13280*x13284))+((r21*x13280*x13281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13285.valid){
continue;
}
CheckValue<IkReal> x13286=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13279*x13281*x13282))+(((-1.0)*r11*r20*sj3*x13281))+((r10*sj3*x13284))+((r12*r22*sj3))+((r11*x13277*x13279)))),-1);
if(!x13286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13285.value)+(((1.5707963267949)*(x13286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13287=IKsin(j4);
IkReal x13288=IKcos(j4);
IkReal x13289=(sj1*sj2);
IkReal x13290=(gconst20*sj3);
IkReal x13291=(gconst19*r21);
IkReal x13292=(gconst20*r10);
IkReal x13293=(cj3*gconst19);
IkReal x13294=(gconst19*sj3);
IkReal x13295=((1.0)*cj1);
IkReal x13296=(cj3*gconst20);
IkReal x13297=(cj2*sj1);
IkReal x13298=(cj2*x13295);
IkReal x13299=((1.0)*x13288);
IkReal x13300=((1.0)*x13287);
IkReal x13301=(cj3*x13287);
IkReal x13302=(gconst19*x13287);
evalcond[0]=(((x13287*x13291))+(((-1.0)*gconst20*r20*x13300))+(((-1.0)*r22*x13299)));
evalcond[1]=((((-1.0)*gconst20*r00*x13300))+((r01*x13302))+(((-1.0)*r02*x13299)));
evalcond[2]=((1.0)+(((-1.0)*x13292*x13300))+(((-1.0)*r12*x13299))+((r11*x13302)));
evalcond[3]=((((-1.0)*cj3*x13292*x13299))+((r11*x13290))+((r12*x13301))+((r10*x13294))+((r11*x13288*x13293)));
evalcond[4]=((((-1.0)*r12*sj3*x13300))+((r11*x13296))+(((-1.0)*r11*x13294*x13299))+((r10*x13288*x13290))+((r10*x13293)));
evalcond[5]=(((r20*x13294))+((cj1*sj2))+(((-1.0)*r20*x13296*x13299))+((r22*x13301))+((cj3*x13288*x13291))+x13297+((r21*x13290)));
evalcond[6]=(((r01*x13288*x13293))+(((-1.0)*r00*x13296*x13299))+x13289+((r02*x13301))+(((-1.0)*x13298))+((r00*x13294))+((r01*x13290)));
evalcond[7]=(((r20*x13293))+((r20*x13288*x13290))+(((-1.0)*r22*sj3*x13300))+(((-1.0)*sj3*x13291*x13299))+x13289+(((-1.0)*x13298))+((r21*x13296)));
evalcond[8]=(((r00*x13288*x13290))+(((-1.0)*r02*sj3*x13300))+(((-1.0)*x13297))+(((-1.0)*sj2*x13295))+(((-1.0)*r01*x13294*x13299))+((r00*x13293))+((r01*x13296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13303 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13303.valid){
continue;
}
CheckValue<IkReal> x13304=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13303.value)+(((1.5707963267949)*(x13304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13305=IKsin(j4);
IkReal x13306=IKcos(j4);
IkReal x13307=(sj1*sj2);
IkReal x13308=(gconst20*sj3);
IkReal x13309=(gconst19*r21);
IkReal x13310=(gconst20*r10);
IkReal x13311=(cj3*gconst19);
IkReal x13312=(gconst19*sj3);
IkReal x13313=((1.0)*cj1);
IkReal x13314=(cj3*gconst20);
IkReal x13315=(cj2*sj1);
IkReal x13316=(cj2*x13313);
IkReal x13317=((1.0)*x13306);
IkReal x13318=((1.0)*x13305);
IkReal x13319=(cj3*x13305);
IkReal x13320=(gconst19*x13305);
evalcond[0]=((((-1.0)*gconst20*r20*x13318))+((x13305*x13309))+(((-1.0)*r22*x13317)));
evalcond[1]=((((-1.0)*gconst20*r00*x13318))+(((-1.0)*r02*x13317))+((r01*x13320)));
evalcond[2]=((1.0)+(((-1.0)*x13310*x13318))+((r11*x13320))+(((-1.0)*r12*x13317)));
evalcond[3]=(((r10*x13312))+(((-1.0)*cj3*x13310*x13317))+((r11*x13308))+((r12*x13319))+((r11*x13306*x13311)));
evalcond[4]=(((r11*x13314))+((r10*x13311))+((r10*x13306*x13308))+(((-1.0)*r11*x13312*x13317))+(((-1.0)*r12*sj3*x13318)));
evalcond[5]=(((cj3*x13306*x13309))+((r21*x13308))+((r20*x13312))+((cj1*sj2))+((r22*x13319))+(((-1.0)*r20*x13314*x13317))+x13315);
evalcond[6]=(((r00*x13312))+((r01*x13308))+((r01*x13306*x13311))+(((-1.0)*r00*x13314*x13317))+(((-1.0)*x13316))+x13307+((r02*x13319)));
evalcond[7]=(((r20*x13306*x13308))+(((-1.0)*r22*sj3*x13318))+(((-1.0)*sj3*x13309*x13317))+((r20*x13311))+(((-1.0)*x13316))+((r21*x13314))+x13307);
evalcond[8]=((((-1.0)*sj2*x13313))+(((-1.0)*r02*sj3*x13318))+((r01*x13314))+((r00*x13311))+(((-1.0)*r01*x13312*x13317))+((r00*x13306*x13308))+(((-1.0)*x13315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13321=((-1.0)*r01);
IkReal x13323 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13323)==0){
continue;
}
IkReal x13322=pow(x13323,-0.5);
CheckValue<IkReal> x13324 = IKatan2WithCheck(IkReal(x13321),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13324.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13324.value))));
IkReal gconst22=(x13321*x13322);
IkReal gconst23=((1.0)*r00*x13322);
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13325.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13326=((-1.0)*r01);
CheckValue<IkReal> x13329 = IKatan2WithCheck(IkReal(x13326),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13329.valid){
continue;
}
IkReal x13327=((1.0)*(x13329.value));
IkReal x13328=x13322;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13327)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13327)));
IkReal gconst22=(x13326*x13328);
IkReal gconst23=((1.0)*r00*x13328);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13330=((-1.0)*r01);
CheckValue<IkReal> x13333 = IKatan2WithCheck(IkReal(x13330),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13333.valid){
continue;
}
IkReal x13331=((1.0)*(x13333.value));
IkReal x13332=x13322;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13331)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13331)));
IkReal gconst22=(x13330*x13332);
IkReal gconst23=((1.0)*r00*x13332);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13334=gconst22*gconst22;
IkReal x13335=gconst23*gconst23;
IkReal x13336=(r21*sj3);
IkReal x13337=((1.0)*cj3);
IkReal x13338=(gconst23*r11);
IkReal x13339=(r22*sj3);
IkReal x13340=(gconst22*r10);
IkReal x13341=((1.0)*r20*sj3);
CheckValue<IkReal> x13342=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13338))+(((-1.0)*r12*r22*x13337))+(((-1.0)*r11*r21*x13334*x13337))+(((-1.0)*r10*r20*x13335*x13337))+((cj3*gconst23*r21*x13340)))),-1);
if(!x13342.valid){
continue;
}
CheckValue<IkReal> x13343 = IKatan2WithCheck(IkReal((((x13338*x13339))+((x13339*x13340)))),IkReal((((r10*x13334*x13336))+(((-1.0)*r11*x13335*x13341))+(((-1.0)*gconst23*x13340*x13341))+((gconst22*x13336*x13338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13342.value)))+(x13343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13344=IKsin(j4);
IkReal x13345=IKcos(j4);
IkReal x13346=(sj1*sj2);
IkReal x13347=(gconst23*sj3);
IkReal x13348=(gconst22*sj3);
IkReal x13349=(cj2*sj1);
IkReal x13350=((1.0)*cj1);
IkReal x13351=(cj3*gconst23);
IkReal x13352=(cj3*gconst22);
IkReal x13353=(cj2*x13350);
IkReal x13354=((1.0)*x13345);
IkReal x13355=(cj3*x13344);
IkReal x13356=(gconst22*x13344);
IkReal x13357=((1.0)*sj3*x13344);
IkReal x13358=(x13345*x13352);
IkReal x13359=((1.0)*gconst23*x13344);
evalcond[0]=((((-1.0)*r22*x13354))+((r21*x13356))+(((-1.0)*r20*x13359)));
evalcond[1]=((((-1.0)*r02*x13354))+(((-1.0)*r00*x13359))+((r01*x13356)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13354))+((r11*x13356))+(((-1.0)*r10*x13359)));
evalcond[3]=(((r10*x13348))+((r11*x13347))+(((-1.0)*r10*x13351*x13354))+((r11*x13358))+((r12*x13355)));
evalcond[4]=((((-1.0)*r12*x13357))+((r10*x13345*x13347))+((r10*x13352))+(((-1.0)*r11*x13348*x13354))+((r11*x13351)));
evalcond[5]=(((r22*x13355))+(((-1.0)*r20*x13351*x13354))+((cj1*sj2))+((r21*x13347))+((r21*x13358))+((r20*x13348))+x13349);
evalcond[6]=(((r02*x13355))+((r01*x13358))+((r00*x13348))+((r01*x13347))+(((-1.0)*x13353))+x13346+(((-1.0)*r00*x13351*x13354)));
evalcond[7]=((((-1.0)*r22*x13357))+((r20*x13352))+(((-1.0)*r21*x13348*x13354))+((r21*x13351))+(((-1.0)*x13353))+((r20*x13345*x13347))+x13346);
evalcond[8]=((((-1.0)*r02*x13357))+(((-1.0)*r01*x13348*x13354))+((r00*x13345*x13347))+(((-1.0)*x13349))+((r01*x13351))+((r00*x13352))+(((-1.0)*sj2*x13350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13360=((1.0)*gconst23);
CheckValue<IkReal> x13361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13360)))),-1);
if(!x13361.valid){
continue;
}
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13361.value)))+(x13362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13363=IKsin(j4);
IkReal x13364=IKcos(j4);
IkReal x13365=(sj1*sj2);
IkReal x13366=(gconst23*sj3);
IkReal x13367=(gconst22*sj3);
IkReal x13368=(cj2*sj1);
IkReal x13369=((1.0)*cj1);
IkReal x13370=(cj3*gconst23);
IkReal x13371=(cj3*gconst22);
IkReal x13372=(cj2*x13369);
IkReal x13373=((1.0)*x13364);
IkReal x13374=(cj3*x13363);
IkReal x13375=(gconst22*x13363);
IkReal x13376=((1.0)*sj3*x13363);
IkReal x13377=(x13364*x13371);
IkReal x13378=((1.0)*gconst23*x13363);
evalcond[0]=((((-1.0)*r22*x13373))+(((-1.0)*r20*x13378))+((r21*x13375)));
evalcond[1]=((((-1.0)*r00*x13378))+((r01*x13375))+(((-1.0)*r02*x13373)));
evalcond[2]=((1.0)+((r11*x13375))+(((-1.0)*r10*x13378))+(((-1.0)*r12*x13373)));
evalcond[3]=(((r10*x13367))+((r12*x13374))+((r11*x13377))+((r11*x13366))+(((-1.0)*r10*x13370*x13373)));
evalcond[4]=(((r10*x13371))+((r11*x13370))+(((-1.0)*r11*x13367*x13373))+((r10*x13364*x13366))+(((-1.0)*r12*x13376)));
evalcond[5]=((((-1.0)*r20*x13370*x13373))+((r20*x13367))+((cj1*sj2))+((r22*x13374))+((r21*x13366))+((r21*x13377))+x13368);
evalcond[6]=(((r02*x13374))+((r01*x13366))+((r01*x13377))+(((-1.0)*r00*x13370*x13373))+((r00*x13367))+(((-1.0)*x13372))+x13365);
evalcond[7]=((((-1.0)*r22*x13376))+((r20*x13371))+((r20*x13364*x13366))+(((-1.0)*x13372))+(((-1.0)*r21*x13367*x13373))+((r21*x13370))+x13365);
evalcond[8]=((((-1.0)*x13368))+(((-1.0)*sj2*x13369))+(((-1.0)*r01*x13367*x13373))+((r00*x13364*x13366))+((r00*x13371))+((r01*x13370))+(((-1.0)*r02*x13376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13379=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13379.valid){
continue;
}
CheckValue<IkReal> x13380 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13379.value)))+(x13380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13381=IKsin(j4);
IkReal x13382=IKcos(j4);
IkReal x13383=(sj1*sj2);
IkReal x13384=(gconst23*sj3);
IkReal x13385=(gconst22*sj3);
IkReal x13386=(cj2*sj1);
IkReal x13387=((1.0)*cj1);
IkReal x13388=(cj3*gconst23);
IkReal x13389=(cj3*gconst22);
IkReal x13390=(cj2*x13387);
IkReal x13391=((1.0)*x13382);
IkReal x13392=(cj3*x13381);
IkReal x13393=(gconst22*x13381);
IkReal x13394=((1.0)*sj3*x13381);
IkReal x13395=(x13382*x13389);
IkReal x13396=((1.0)*gconst23*x13381);
evalcond[0]=(((r21*x13393))+(((-1.0)*r22*x13391))+(((-1.0)*r20*x13396)));
evalcond[1]=(((r01*x13393))+(((-1.0)*r00*x13396))+(((-1.0)*r02*x13391)));
evalcond[2]=((1.0)+((r11*x13393))+(((-1.0)*r10*x13396))+(((-1.0)*r12*x13391)));
evalcond[3]=((((-1.0)*r10*x13388*x13391))+((r11*x13395))+((r11*x13384))+((r10*x13385))+((r12*x13392)));
evalcond[4]=(((r11*x13388))+((r10*x13389))+(((-1.0)*r11*x13385*x13391))+((r10*x13382*x13384))+(((-1.0)*r12*x13394)));
evalcond[5]=(((r21*x13395))+((r20*x13385))+((cj1*sj2))+(((-1.0)*r20*x13388*x13391))+((r22*x13392))+x13386+((r21*x13384)));
evalcond[6]=(((r01*x13384))+((r01*x13395))+((r00*x13385))+(((-1.0)*x13390))+((r02*x13392))+(((-1.0)*r00*x13388*x13391))+x13383);
evalcond[7]=((((-1.0)*r22*x13394))+((r20*x13389))+((r20*x13382*x13384))+(((-1.0)*x13390))+x13383+(((-1.0)*r21*x13385*x13391))+((r21*x13388)));
evalcond[8]=((((-1.0)*r01*x13385*x13391))+(((-1.0)*x13386))+((r01*x13388))+((r00*x13389))+(((-1.0)*r02*x13394))+(((-1.0)*sj2*x13387))+((r00*x13382*x13384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13398 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13398)==0){
continue;
}
IkReal x13397=pow(x13398,-0.5);
CheckValue<IkReal> x13399 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13399.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13399.value));
IkReal gconst25=((-1.0)*r21*x13397);
IkReal gconst26=(r20*x13397);
CheckValue<IkReal> x13400 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13400.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13400.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13403 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13403.valid){
continue;
}
IkReal x13401=((-1.0)*(x13403.value));
IkReal x13402=x13397;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13401;
IkReal gconst24=x13401;
IkReal gconst25=((-1.0)*r21*x13402);
IkReal gconst26=(r20*x13402);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13406 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13406.valid){
continue;
}
IkReal x13404=((-1.0)*(x13406.value));
IkReal x13405=x13397;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13404;
IkReal gconst24=x13404;
IkReal gconst25=((-1.0)*r21*x13405);
IkReal gconst26=(r20*x13405);
CheckValue<IkReal> x13414=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13414.valid){
continue;
}
IkReal x13407=x13414.value;
IkReal x13408=(sj3*x13407);
IkReal x13409=(r11*x13408);
IkReal x13410=(r00*x13408);
IkReal x13411=(r01*x13408);
IkReal x13412=(r10*x13408);
IkReal x13413=(r20*r21*x13408);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13409*(r21*r21)))+((r10*x13410*(r20*r20)))+((r00*r20*r21*x13409))+((r10*r20*r21*x13411))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13415=gconst25*gconst25;
IkReal x13416=gconst26*gconst26;
IkReal x13417=(r00*r11);
IkReal x13418=(r01*r10);
IkReal x13419=(r02*sj3);
IkReal x13420=(gconst25*r10);
IkReal x13421=(gconst26*r11);
IkReal x13422=((1.0)*sj3);
IkReal x13423=((1.0)*cj3);
IkReal x13424=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13423))+((x13417*x13424))+(((-1.0)*r00*r10*x13416*x13423))+((x13418*x13424))+(((-1.0)*r01*r11*x13415*x13423)))),-1);
if(!x13425.valid){
continue;
}
CheckValue<IkReal> x13426 = IKatan2WithCheck(IkReal((((x13419*x13421))+((x13419*x13420)))),IkReal(((((-1.0)*gconst26*r00*x13420*x13422))+((gconst25*r01*sj3*x13421))+(((-1.0)*x13416*x13417*x13422))+((sj3*x13415*x13418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13425.value)))+(x13426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13427=IKsin(j4);
IkReal x13428=IKcos(j4);
IkReal x13429=(sj1*sj2);
IkReal x13430=(gconst26*sj3);
IkReal x13431=(gconst25*sj3);
IkReal x13432=(gconst26*r10);
IkReal x13433=(gconst25*r11);
IkReal x13434=(cj3*gconst25);
IkReal x13435=((1.0)*cj2);
IkReal x13436=(cj1*sj2);
IkReal x13437=(gconst26*r00);
IkReal x13438=(gconst26*r20);
IkReal x13439=(cj3*gconst26);
IkReal x13440=(cj1*x13435);
IkReal x13441=((1.0)*x13428);
IkReal x13442=((1.0)*x13427);
IkReal x13443=(cj3*x13427);
IkReal x13444=(gconst25*x13427);
evalcond[0]=((((-1.0)*x13438*x13442))+(((-1.0)*r22*x13441))+((r21*x13444)));
evalcond[1]=((((-1.0)*x13437*x13442))+(((-1.0)*r02*x13441))+((r01*x13444)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13441))+((x13427*x13433))+(((-1.0)*x13432*x13442)));
evalcond[3]=(((r11*x13430))+(((-1.0)*cj3*x13432*x13441))+((r12*x13443))+((cj3*x13428*x13433))+((r10*x13431)));
evalcond[4]=(((r10*x13428*x13430))+(((-1.0)*r11*x13431*x13441))+(((-1.0)*r12*sj3*x13442))+((r11*x13439))+((r10*x13434)));
evalcond[5]=(((r22*x13443))+x13436+((cj2*sj1))+((r21*x13430))+(((-1.0)*cj3*x13438*x13441))+((r20*x13431))+((r21*x13428*x13434)));
evalcond[6]=(((r01*x13430))+x13429+((r02*x13443))+(((-1.0)*x13440))+((r01*x13428*x13434))+(((-1.0)*cj3*x13437*x13441))+((r00*x13431)));
evalcond[7]=(x13429+(((-1.0)*r22*sj3*x13442))+(((-1.0)*x13440))+(((-1.0)*r21*x13431*x13441))+((r21*x13439))+((r20*x13434))+((r20*x13428*x13430)));
evalcond[8]=(((r01*x13439))+(((-1.0)*x13436))+(((-1.0)*sj1*x13435))+(((-1.0)*r02*sj3*x13442))+((r00*x13428*x13430))+((r00*x13434))+(((-1.0)*r01*x13431*x13441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13445=gconst26*gconst26;
IkReal x13446=gconst25*gconst25;
IkReal x13447=(r01*r10);
IkReal x13448=(cj3*r11);
IkReal x13449=(gconst25*gconst26);
IkReal x13450=(cj3*r10);
IkReal x13451=(r00*x13445);
IkReal x13452=((1.0)*sj3*x13449);
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal((((gconst26*r02*x13448))+((gconst25*r02*x13450)))),IkReal(((((-1.0)*r00*x13449*x13450))+(((-1.0)*x13448*x13451))+((r01*x13448*x13449))+((cj3*x13446*x13447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
CheckValue<IkReal> x13454=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13452))+(((-1.0)*x13447*x13452))+((r01*r11*sj3*x13446))+((r10*sj3*x13451)))),-1);
if(!x13454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13453.value)+(((1.5707963267949)*(x13454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13455=IKsin(j4);
IkReal x13456=IKcos(j4);
IkReal x13457=(sj1*sj2);
IkReal x13458=(gconst26*sj3);
IkReal x13459=(gconst25*sj3);
IkReal x13460=(gconst26*r10);
IkReal x13461=(gconst25*r11);
IkReal x13462=(cj3*gconst25);
IkReal x13463=((1.0)*cj2);
IkReal x13464=(cj1*sj2);
IkReal x13465=(gconst26*r00);
IkReal x13466=(gconst26*r20);
IkReal x13467=(cj3*gconst26);
IkReal x13468=(cj1*x13463);
IkReal x13469=((1.0)*x13456);
IkReal x13470=((1.0)*x13455);
IkReal x13471=(cj3*x13455);
IkReal x13472=(gconst25*x13455);
evalcond[0]=((((-1.0)*r22*x13469))+((r21*x13472))+(((-1.0)*x13466*x13470)));
evalcond[1]=(((r01*x13472))+(((-1.0)*x13465*x13470))+(((-1.0)*r02*x13469)));
evalcond[2]=((1.0)+((x13455*x13461))+(((-1.0)*r12*x13469))+(((-1.0)*x13460*x13470)));
evalcond[3]=(((r10*x13459))+((cj3*x13456*x13461))+((r12*x13471))+((r11*x13458))+(((-1.0)*cj3*x13460*x13469)));
evalcond[4]=(((r10*x13462))+((r10*x13456*x13458))+(((-1.0)*r11*x13459*x13469))+((r11*x13467))+(((-1.0)*r12*sj3*x13470)));
evalcond[5]=(x13464+((cj2*sj1))+((r20*x13459))+((r21*x13458))+((r22*x13471))+((r21*x13456*x13462))+(((-1.0)*cj3*x13466*x13469)));
evalcond[6]=(x13457+((r01*x13456*x13462))+(((-1.0)*x13468))+((r02*x13471))+((r01*x13458))+(((-1.0)*cj3*x13465*x13469))+((r00*x13459)));
evalcond[7]=(x13457+((r20*x13462))+(((-1.0)*r21*x13459*x13469))+((r21*x13467))+(((-1.0)*r22*sj3*x13470))+(((-1.0)*x13468))+((r20*x13456*x13458)));
evalcond[8]=((((-1.0)*r02*sj3*x13470))+((r00*x13456*x13458))+(((-1.0)*r01*x13459*x13469))+(((-1.0)*sj1*x13463))+(((-1.0)*x13464))+((r01*x13467))+((r00*x13462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13473=((1.0)*gconst26);
CheckValue<IkReal> x13474 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13474.valid){
continue;
}
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13473))+(((-1.0)*gconst25*r00)))),-1);
if(!x13475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13474.value)+(((1.5707963267949)*(x13475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13476=IKsin(j4);
IkReal x13477=IKcos(j4);
IkReal x13478=(sj1*sj2);
IkReal x13479=(gconst26*sj3);
IkReal x13480=(gconst25*sj3);
IkReal x13481=(gconst26*r10);
IkReal x13482=(gconst25*r11);
IkReal x13483=(cj3*gconst25);
IkReal x13484=((1.0)*cj2);
IkReal x13485=(cj1*sj2);
IkReal x13486=(gconst26*r00);
IkReal x13487=(gconst26*r20);
IkReal x13488=(cj3*gconst26);
IkReal x13489=(cj1*x13484);
IkReal x13490=((1.0)*x13477);
IkReal x13491=((1.0)*x13476);
IkReal x13492=(cj3*x13476);
IkReal x13493=(gconst25*x13476);
evalcond[0]=((((-1.0)*r22*x13490))+((r21*x13493))+(((-1.0)*x13487*x13491)));
evalcond[1]=((((-1.0)*x13486*x13491))+(((-1.0)*r02*x13490))+((r01*x13493)));
evalcond[2]=((1.0)+((x13476*x13482))+(((-1.0)*r12*x13490))+(((-1.0)*x13481*x13491)));
evalcond[3]=(((r11*x13479))+(((-1.0)*cj3*x13481*x13490))+((r10*x13480))+((cj3*x13477*x13482))+((r12*x13492)));
evalcond[4]=((((-1.0)*r12*sj3*x13491))+(((-1.0)*r11*x13480*x13490))+((r10*x13477*x13479))+((r11*x13488))+((r10*x13483)));
evalcond[5]=(((r21*x13477*x13483))+x13485+((cj2*sj1))+((r22*x13492))+((r21*x13479))+((r20*x13480))+(((-1.0)*cj3*x13487*x13490)));
evalcond[6]=(x13478+((r02*x13492))+(((-1.0)*x13489))+((r01*x13479))+(((-1.0)*cj3*x13486*x13490))+((r01*x13477*x13483))+((r00*x13480)));
evalcond[7]=(x13478+(((-1.0)*x13489))+(((-1.0)*r21*x13480*x13490))+(((-1.0)*r22*sj3*x13491))+((r20*x13477*x13479))+((r20*x13483))+((r21*x13488)));
evalcond[8]=((((-1.0)*sj1*x13484))+(((-1.0)*r02*sj3*x13491))+(((-1.0)*x13485))+((r00*x13477*x13479))+((r00*x13483))+((r01*x13488))+(((-1.0)*r01*x13480*x13490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13495 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13495)==0){
continue;
}
IkReal x13494=pow(x13495,-0.5);
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13496.value))));
IkReal gconst28=((1.0)*r21*x13494);
IkReal gconst29=((-1.0)*r20*x13494);
CheckValue<IkReal> x13497 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13497.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13497.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
IkReal x13498=((1.0)*(x13500.value));
IkReal x13499=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13498)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13498)));
IkReal gconst28=((1.0)*r21*x13499);
IkReal gconst29=((-1.0)*r20*x13499);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
IkReal x13501=((1.0)*(x13503.value));
IkReal x13502=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13501)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13501)));
IkReal gconst28=((1.0)*r21*x13502);
IkReal gconst29=((-1.0)*r20*x13502);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13506 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13506.valid){
continue;
}
IkReal x13504=((1.0)*(x13506.value));
IkReal x13505=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13504)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13504)));
IkReal gconst28=((1.0)*r21*x13505);
IkReal gconst29=((-1.0)*r20*x13505);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
IkReal x13507=((1.0)*(x13509.value));
IkReal x13508=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13507)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13507)));
IkReal gconst28=((1.0)*r21*x13508);
IkReal gconst29=((-1.0)*r20*x13508);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13512 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13512.valid){
continue;
}
IkReal x13510=((1.0)*(x13512.value));
IkReal x13511=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13510)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13510)));
IkReal gconst28=((1.0)*r21*x13511);
IkReal gconst29=((-1.0)*r20*x13511);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal x13513=((1.0)*(x13515.value));
IkReal x13514=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13513)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13513)));
IkReal gconst28=((1.0)*r21*x13514);
IkReal gconst29=((-1.0)*r20*x13514);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13516=(gconst29*r10);
IkReal x13517=(gconst28*r11);
CheckValue<IkReal> x13518=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13517*x13517)+(((-2.0)*x13516*x13517))+(x13516*x13516))),-1);
if(!x13518.valid){
continue;
}
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal((x13516+(((-1.0)*x13517)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13518.value)))+(x13519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13520=IKsin(j4);
IkReal x13521=IKcos(j4);
IkReal x13522=(gconst28*r11);
IkReal x13523=((1.0)*cj2);
IkReal x13524=((1.0)*x13521);
IkReal x13525=(gconst29*x13521);
IkReal x13526=(gconst28*x13520);
IkReal x13527=((1.0)*x13520);
IkReal x13528=(gconst29*x13527);
evalcond[0]=(((r21*x13526))+(((-1.0)*r22*x13524))+(((-1.0)*r20*x13528)));
evalcond[1]=(((r01*x13526))+(((-1.0)*r00*x13528))+(((-1.0)*r02*x13524)));
evalcond[2]=((((-1.0)*r12*x13527))+((r10*x13525))+(((-1.0)*x13522*x13524)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13524))+((x13520*x13522))+(((-1.0)*r10*x13528)));
evalcond[4]=((((-1.0)*r22*x13527))+((r20*x13525))+((sj1*sj2))+(((-1.0)*cj1*x13523))+(((-1.0)*gconst28*r21*x13524)));
evalcond[5]=((((-1.0)*sj1*x13523))+(((-1.0)*gconst28*r01*x13524))+(((-1.0)*cj1*sj2))+((r00*x13525))+(((-1.0)*r02*x13527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13529=((1.0)*gconst29);
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13529)))),-1);
if(!x13530.valid){
continue;
}
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13529))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13530.value)))+(x13531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13532=IKsin(j4);
IkReal x13533=IKcos(j4);
IkReal x13534=(gconst28*r11);
IkReal x13535=((1.0)*cj2);
IkReal x13536=((1.0)*x13533);
IkReal x13537=(gconst29*x13533);
IkReal x13538=(gconst28*x13532);
IkReal x13539=((1.0)*x13532);
IkReal x13540=(gconst29*x13539);
evalcond[0]=((((-1.0)*r22*x13536))+((r21*x13538))+(((-1.0)*r20*x13540)));
evalcond[1]=((((-1.0)*r00*x13540))+(((-1.0)*r02*x13536))+((r01*x13538)));
evalcond[2]=((((-1.0)*x13534*x13536))+(((-1.0)*r12*x13539))+((r10*x13537)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13536))+(((-1.0)*r10*x13540))+((x13532*x13534)));
evalcond[4]=((((-1.0)*r22*x13539))+((r20*x13537))+(((-1.0)*cj1*x13535))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13536)));
evalcond[5]=((((-1.0)*sj1*x13535))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13536))+(((-1.0)*r02*x13539))+((r00*x13537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13541=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13541.valid){
continue;
}
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13541.value)))+(x13542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13543=IKsin(j4);
IkReal x13544=IKcos(j4);
IkReal x13545=(gconst28*r11);
IkReal x13546=((1.0)*cj2);
IkReal x13547=((1.0)*x13544);
IkReal x13548=(gconst29*x13544);
IkReal x13549=(gconst28*x13543);
IkReal x13550=((1.0)*x13543);
IkReal x13551=(gconst29*x13550);
evalcond[0]=(((r21*x13549))+(((-1.0)*r22*x13547))+(((-1.0)*r20*x13551)));
evalcond[1]=(((r01*x13549))+(((-1.0)*r00*x13551))+(((-1.0)*r02*x13547)));
evalcond[2]=(((r10*x13548))+(((-1.0)*x13545*x13547))+(((-1.0)*r12*x13550)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13551))+(((-1.0)*r12*x13547))+((x13543*x13545)));
evalcond[4]=((((-1.0)*gconst28*r21*x13547))+((sj1*sj2))+((r20*x13548))+(((-1.0)*cj1*x13546))+(((-1.0)*r22*x13550)));
evalcond[5]=((((-1.0)*gconst28*r01*x13547))+((r00*x13548))+(((-1.0)*r02*x13550))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
IkReal x13552=((1.0)*(x13554.value));
IkReal x13553=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13552)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13552)));
IkReal gconst28=((1.0)*r21*x13553);
IkReal gconst29=((-1.0)*r20*x13553);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13557 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13557.valid){
continue;
}
IkReal x13555=((1.0)*(x13557.value));
IkReal x13556=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13555)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13555)));
IkReal gconst28=((1.0)*r21*x13556);
IkReal gconst29=((-1.0)*r20*x13556);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13560 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13560.valid){
continue;
}
IkReal x13558=((1.0)*(x13560.value));
IkReal x13559=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13558)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13558)));
IkReal gconst28=((1.0)*r21*x13559);
IkReal gconst29=((-1.0)*r20*x13559);
IkReal x13561=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(x13561,-1);
if(!x13565.valid){
continue;
}
IkReal x13562=x13565.value;
IkReal x13563=((1.0)*x13562);
IkReal x13564=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13562))+(((-1.0)*x13563*(r11*r11)*(r21*r21)))+(((-1.0)*x13563*(r10*r10)*(r20*r20))));
j4eval[0]=x13564;
j4eval[1]=r12;
j4eval[2]=x13561;
j4eval[3]=IKsign(x13564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13566=(gconst28*r11);
IkReal x13567=(gconst29*r10);
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal((x13566+(((-1.0)*x13567)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
CheckValue<IkReal> x13569=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x13566*x13566)))+(((2.0)*x13566*x13567))+(((-1.0)*(x13567*x13567))))),-1);
if(!x13569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13568.value)+(((1.5707963267949)*(x13569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13570=IKcos(j4);
IkReal x13571=IKsin(j4);
IkReal x13572=(gconst29*r10);
IkReal x13573=(gconst29*r20);
IkReal x13574=(gconst28*r21);
IkReal x13575=((1.0)*cj2);
IkReal x13576=(gconst29*r00);
IkReal x13577=((1.0)*x13570);
IkReal x13578=((1.0)*x13571);
IkReal x13579=(gconst28*x13570);
IkReal x13580=(gconst28*x13571);
evalcond[0]=((((-1.0)*x13572*x13577))+((r12*x13571))+((r11*x13579)));
evalcond[1]=((((-1.0)*r22*x13577))+(((-1.0)*x13573*x13578))+((x13571*x13574)));
evalcond[2]=((((-1.0)*r02*x13577))+((r01*x13580))+(((-1.0)*x13576*x13578)));
evalcond[3]=((1.0)+(((-1.0)*x13572*x13578))+(((-1.0)*r12*x13577))+((r11*x13580)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x13573*x13577))+(((-1.0)*cj1*x13575))+((r22*x13571))+((x13570*x13574)));
evalcond[5]=((((-1.0)*sj1*x13575))+(((-1.0)*cj1*sj2))+((r02*x13571))+(((-1.0)*x13576*x13577))+((r01*x13579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13581=((1.0)*gconst29);
CheckValue<IkReal> x13582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13581))+(((-1.0)*gconst28*r00)))),-1);
if(!x13582.valid){
continue;
}
CheckValue<IkReal> x13583 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13581))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13582.value)))+(x13583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13584=IKcos(j4);
IkReal x13585=IKsin(j4);
IkReal x13586=(gconst29*r10);
IkReal x13587=(gconst29*r20);
IkReal x13588=(gconst28*r21);
IkReal x13589=((1.0)*cj2);
IkReal x13590=(gconst29*r00);
IkReal x13591=((1.0)*x13584);
IkReal x13592=((1.0)*x13585);
IkReal x13593=(gconst28*x13584);
IkReal x13594=(gconst28*x13585);
evalcond[0]=(((r11*x13593))+((r12*x13585))+(((-1.0)*x13586*x13591)));
evalcond[1]=((((-1.0)*x13587*x13592))+(((-1.0)*r22*x13591))+((x13585*x13588)));
evalcond[2]=(((r01*x13594))+(((-1.0)*x13590*x13592))+(((-1.0)*r02*x13591)));
evalcond[3]=((1.0)+((r11*x13594))+(((-1.0)*x13586*x13592))+(((-1.0)*r12*x13591)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x13587*x13591))+((x13584*x13588))+(((-1.0)*cj1*x13589))+((r22*x13585)));
evalcond[5]=(((r01*x13593))+(((-1.0)*sj1*x13589))+(((-1.0)*cj1*sj2))+((r02*x13585))+(((-1.0)*x13590*x13591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13595=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13595.valid){
continue;
}
CheckValue<IkReal> x13596 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13595.value)))+(x13596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13597=IKcos(j4);
IkReal x13598=IKsin(j4);
IkReal x13599=(gconst29*r10);
IkReal x13600=(gconst29*r20);
IkReal x13601=(gconst28*r21);
IkReal x13602=((1.0)*cj2);
IkReal x13603=(gconst29*r00);
IkReal x13604=((1.0)*x13597);
IkReal x13605=((1.0)*x13598);
IkReal x13606=(gconst28*x13597);
IkReal x13607=(gconst28*x13598);
evalcond[0]=(((r11*x13606))+(((-1.0)*x13599*x13604))+((r12*x13598)));
evalcond[1]=(((x13598*x13601))+(((-1.0)*r22*x13604))+(((-1.0)*x13600*x13605)));
evalcond[2]=((((-1.0)*r02*x13604))+(((-1.0)*x13603*x13605))+((r01*x13607)));
evalcond[3]=((1.0)+((r11*x13607))+(((-1.0)*x13599*x13605))+(((-1.0)*r12*x13604)));
evalcond[4]=(((r22*x13598))+(((-1.0)*cj1*x13602))+((sj1*sj2))+(((-1.0)*x13600*x13604))+((x13597*x13601)));
evalcond[5]=((((-1.0)*x13603*x13604))+(((-1.0)*sj1*x13602))+(((-1.0)*cj1*sj2))+((r02*x13598))+((r01*x13606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
IkReal x13608=((1.0)*(x13610.value));
IkReal x13609=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13608)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13608)));
IkReal gconst28=((1.0)*r21*x13609);
IkReal gconst29=((-1.0)*r20*x13609);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13613 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13613.valid){
continue;
}
IkReal x13611=((1.0)*(x13613.value));
IkReal x13612=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13611)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13611)));
IkReal gconst28=((1.0)*r21*x13612);
IkReal gconst29=((-1.0)*r20*x13612);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13616 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13616.valid){
continue;
}
IkReal x13614=((1.0)*(x13616.value));
IkReal x13615=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13614)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13614)));
IkReal gconst28=((1.0)*r21*x13615);
IkReal gconst29=((-1.0)*r20*x13615);
IkReal x13617=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13621=IKPowWithIntegerCheck(x13617,-1);
if(!x13621.valid){
continue;
}
IkReal x13618=x13621.value;
IkReal x13619=((1.0)*x13618);
IkReal x13620=((((-2.0)*r10*r11*r20*r21*x13618))+(((-1.0)*x13619*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13619*(r11*r11)*(r21*r21))));
j4eval[0]=x13620;
j4eval[1]=r12;
j4eval[2]=x13617;
j4eval[3]=IKsign(x13620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13622=(gconst28*r11);
IkReal x13623=(gconst29*r10);
CheckValue<IkReal> x13624=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13622*x13622)))+(((-1.0)*(x13623*x13623)))+(((-1.0)*(r12*r12)))+(((2.0)*x13622*x13623)))),-1);
if(!x13624.valid){
continue;
}
CheckValue<IkReal> x13625 = IKatan2WithCheck(IkReal((x13622+(((-1.0)*x13623)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13624.value)))+(x13625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13626=IKcos(j4);
IkReal x13627=IKsin(j4);
IkReal x13628=(gconst29*r10);
IkReal x13629=(gconst29*r20);
IkReal x13630=(gconst28*r21);
IkReal x13631=(gconst29*r00);
IkReal x13632=((1.0)*x13626);
IkReal x13633=((1.0)*x13627);
IkReal x13634=(gconst28*x13626);
IkReal x13635=(gconst28*x13627);
evalcond[0]=(((r11*x13634))+((r12*x13627))+(((-1.0)*x13628*x13632)));
evalcond[1]=((((-1.0)*x13629*x13633))+(((-1.0)*r22*x13632))+((x13627*x13630)));
evalcond[2]=((((-1.0)*r02*x13632))+(((-1.0)*x13631*x13633))+((r01*x13635)));
evalcond[3]=((1.0)+((r11*x13635))+(((-1.0)*r12*x13632))+(((-1.0)*x13628*x13633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13629*x13632))+((r22*x13627))+((x13626*x13630)));
evalcond[5]=((((-1.0)*x13631*x13632))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13627))+((r01*x13634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13636=((1.0)*gconst29);
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13636))+(((-1.0)*gconst28*r00)))),-1);
if(!x13637.valid){
continue;
}
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13637.value)))+(x13638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13639=IKcos(j4);
IkReal x13640=IKsin(j4);
IkReal x13641=(gconst29*r10);
IkReal x13642=(gconst29*r20);
IkReal x13643=(gconst28*r21);
IkReal x13644=(gconst29*r00);
IkReal x13645=((1.0)*x13639);
IkReal x13646=((1.0)*x13640);
IkReal x13647=(gconst28*x13639);
IkReal x13648=(gconst28*x13640);
evalcond[0]=((((-1.0)*x13641*x13645))+((r11*x13647))+((r12*x13640)));
evalcond[1]=((((-1.0)*r22*x13645))+((x13640*x13643))+(((-1.0)*x13642*x13646)));
evalcond[2]=(((r01*x13648))+(((-1.0)*x13644*x13646))+(((-1.0)*r02*x13645)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13645))+(((-1.0)*x13641*x13646))+((r11*x13648)));
evalcond[4]=(((cj2*sj1))+((r22*x13640))+((x13639*x13643))+((cj1*sj2))+(((-1.0)*x13642*x13645)));
evalcond[5]=(((r02*x13640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13647))+(((-1.0)*x13644*x13645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13649=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13649.valid){
continue;
}
CheckValue<IkReal> x13650 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13649.value)))+(x13650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13651=IKcos(j4);
IkReal x13652=IKsin(j4);
IkReal x13653=(gconst29*r10);
IkReal x13654=(gconst29*r20);
IkReal x13655=(gconst28*r21);
IkReal x13656=(gconst29*r00);
IkReal x13657=((1.0)*x13651);
IkReal x13658=((1.0)*x13652);
IkReal x13659=(gconst28*x13651);
IkReal x13660=(gconst28*x13652);
evalcond[0]=(((r12*x13652))+(((-1.0)*x13653*x13657))+((r11*x13659)));
evalcond[1]=((((-1.0)*r22*x13657))+((x13652*x13655))+(((-1.0)*x13654*x13658)));
evalcond[2]=((((-1.0)*r02*x13657))+((r01*x13660))+(((-1.0)*x13656*x13658)));
evalcond[3]=((1.0)+((r11*x13660))+(((-1.0)*r12*x13657))+(((-1.0)*x13653*x13658)));
evalcond[4]=(((cj2*sj1))+((x13651*x13655))+((cj1*sj2))+(((-1.0)*x13654*x13657))+((r22*x13652)));
evalcond[5]=(((r01*x13659))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13652))+(((-1.0)*x13656*x13657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13663 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13663.valid){
continue;
}
IkReal x13661=((1.0)*(x13663.value));
IkReal x13662=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13661)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13661)));
IkReal gconst28=((1.0)*r21*x13662);
IkReal gconst29=((-1.0)*r20*x13662);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13666 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13666.valid){
continue;
}
IkReal x13664=((1.0)*(x13666.value));
IkReal x13665=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13664)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13664)));
IkReal gconst28=((1.0)*r21*x13665);
IkReal gconst29=((-1.0)*r20*x13665);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
IkReal x13667=((1.0)*(x13669.value));
IkReal x13668=x13494;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13667)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13667)));
IkReal gconst28=((1.0)*r21*x13668);
IkReal gconst29=((-1.0)*r20*x13668);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13670=(gconst29*r10);
IkReal x13671=(gconst28*r11);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal((x13670+(((-1.0)*x13671)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
CheckValue<IkReal> x13673=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13670*x13671))+(x13670*x13670)+(x13671*x13671))),-1);
if(!x13673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13672.value)+(((1.5707963267949)*(x13673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13674=IKsin(j4);
IkReal x13675=IKcos(j4);
IkReal x13676=(gconst28*r11);
IkReal x13677=((1.0)*x13675);
IkReal x13678=(gconst29*x13675);
IkReal x13679=(gconst28*x13674);
IkReal x13680=((1.0)*x13674);
IkReal x13681=(gconst29*x13680);
evalcond[0]=((((-1.0)*r20*x13681))+((r21*x13679))+(((-1.0)*r22*x13677)));
evalcond[1]=((((-1.0)*r00*x13681))+((r01*x13679))+(((-1.0)*r02*x13677)));
evalcond[2]=((((-1.0)*r12*x13680))+(((-1.0)*x13676*x13677))+((r10*x13678)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13681))+(((-1.0)*r12*x13677))+((x13674*x13676)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13677))+(((-1.0)*r22*x13680))+((cj1*sj2))+((r20*x13678)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13678))+(((-1.0)*r02*x13680))+(((-1.0)*gconst28*r01*x13677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13682=((1.0)*gconst29);
CheckValue<IkReal> x13683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13682))+(((-1.0)*gconst28*r00)))),-1);
if(!x13683.valid){
continue;
}
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13682))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13683.value)))+(x13684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13685=IKsin(j4);
IkReal x13686=IKcos(j4);
IkReal x13687=(gconst28*r11);
IkReal x13688=((1.0)*x13686);
IkReal x13689=(gconst29*x13686);
IkReal x13690=(gconst28*x13685);
IkReal x13691=((1.0)*x13685);
IkReal x13692=(gconst29*x13691);
evalcond[0]=((((-1.0)*r20*x13692))+(((-1.0)*r22*x13688))+((r21*x13690)));
evalcond[1]=(((r01*x13690))+(((-1.0)*r00*x13692))+(((-1.0)*r02*x13688)));
evalcond[2]=((((-1.0)*x13687*x13688))+((r10*x13689))+(((-1.0)*r12*x13691)));
evalcond[3]=((1.0)+((x13685*x13687))+(((-1.0)*r12*x13688))+(((-1.0)*r10*x13692)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13688))+(((-1.0)*r22*x13691))+((r20*x13689)));
evalcond[5]=((((-1.0)*gconst28*r01*x13688))+(((-1.0)*r02*x13691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13693=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13693.valid){
continue;
}
CheckValue<IkReal> x13694 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13693.value)))+(x13694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13695=IKsin(j4);
IkReal x13696=IKcos(j4);
IkReal x13697=(gconst28*r11);
IkReal x13698=((1.0)*x13696);
IkReal x13699=(gconst29*x13696);
IkReal x13700=(gconst28*x13695);
IkReal x13701=((1.0)*x13695);
IkReal x13702=(gconst29*x13701);
evalcond[0]=(((r21*x13700))+(((-1.0)*r20*x13702))+(((-1.0)*r22*x13698)));
evalcond[1]=((((-1.0)*r00*x13702))+(((-1.0)*r02*x13698))+((r01*x13700)));
evalcond[2]=(((r10*x13699))+(((-1.0)*r12*x13701))+(((-1.0)*x13697*x13698)));
evalcond[3]=((1.0)+((x13695*x13697))+(((-1.0)*r10*x13702))+(((-1.0)*r12*x13698)));
evalcond[4]=((((-1.0)*r22*x13701))+((cj2*sj1))+(((-1.0)*gconst28*r21*x13698))+((cj1*sj2))+((r20*x13699)));
evalcond[5]=(((r00*x13699))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13698))+(((-1.0)*r02*x13701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13703=gconst28*gconst28;
IkReal x13704=gconst29*gconst29;
IkReal x13705=(r11*r21);
IkReal x13706=(gconst29*sj3);
IkReal x13707=((1.0)*cj3);
IkReal x13708=(r10*r20);
IkReal x13709=(r10*r21);
IkReal x13710=(r11*r20);
IkReal x13711=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13712 = IKatan2WithCheck(IkReal((((r11*r22*x13706))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13704*x13710))+(((-1.0)*gconst28*x13706*x13708))+((gconst28*x13705*x13706))+((sj3*x13703*x13709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13712.valid){
continue;
}
CheckValue<IkReal> x13713=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13703*x13705*x13707))+((x13710*x13711))+((x13709*x13711))+(((-1.0)*x13704*x13707*x13708))+(((-1.0)*r12*r22*x13707)))),-1);
if(!x13713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13712.value)+(((1.5707963267949)*(x13713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13714=IKsin(j4);
IkReal x13715=IKcos(j4);
IkReal x13716=(sj1*sj2);
IkReal x13717=(gconst29*r20);
IkReal x13718=(gconst28*r20);
IkReal x13719=((1.0)*cj2);
IkReal x13720=(r11*sj3);
IkReal x13721=(cj1*sj2);
IkReal x13722=(gconst29*r01);
IkReal x13723=(gconst29*r10);
IkReal x13724=(cj3*gconst28);
IkReal x13725=(cj3*gconst29);
IkReal x13726=(gconst28*sj3);
IkReal x13727=(gconst29*r00);
IkReal x13728=(cj1*x13719);
IkReal x13729=((1.0)*x13715);
IkReal x13730=((1.0)*x13714);
IkReal x13731=(gconst28*x13714);
IkReal x13732=(cj3*x13714);
IkReal x13733=(sj3*x13715);
evalcond[0]=((((-1.0)*r22*x13729))+((r21*x13731))+(((-1.0)*x13717*x13730)));
evalcond[1]=((((-1.0)*x13727*x13730))+(((-1.0)*r02*x13729))+((r01*x13731)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13729))+((r11*x13731))+(((-1.0)*x13723*x13730)));
evalcond[3]=((((-1.0)*cj3*x13723*x13729))+((r10*x13726))+((r11*x13715*x13724))+((r12*x13732))+((gconst29*x13720)));
evalcond[4]=(((r10*x13724))+((r11*x13725))+((x13723*x13733))+(((-1.0)*gconst28*x13720*x13729))+(((-1.0)*r12*sj3*x13730)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13718))+((r22*x13732))+x13721+(((-1.0)*cj3*x13717*x13729))+((r21*x13715*x13724)));
evalcond[6]=(((r00*x13726))+x13716+((r02*x13732))+((r01*x13715*x13724))+(((-1.0)*r00*x13725*x13729))+(((-1.0)*x13728))+((sj3*x13722)));
evalcond[7]=((((-1.0)*r21*x13726*x13729))+x13716+((r21*x13725))+((cj3*x13718))+((x13717*x13733))+(((-1.0)*x13728))+(((-1.0)*r22*sj3*x13730)));
evalcond[8]=((((-1.0)*r02*sj3*x13730))+((r00*x13724))+(((-1.0)*sj1*x13719))+((x13727*x13733))+(((-1.0)*r01*x13726*x13729))+(((-1.0)*x13721))+((cj3*x13722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13734=((1.0)*gconst29);
CheckValue<IkReal> x13735 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13734))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13735.valid){
continue;
}
CheckValue<IkReal> x13736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13734)))),-1);
if(!x13736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13735.value)+(((1.5707963267949)*(x13736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13737=IKsin(j4);
IkReal x13738=IKcos(j4);
IkReal x13739=(sj1*sj2);
IkReal x13740=(gconst29*r20);
IkReal x13741=(gconst28*r20);
IkReal x13742=((1.0)*cj2);
IkReal x13743=(r11*sj3);
IkReal x13744=(cj1*sj2);
IkReal x13745=(gconst29*r01);
IkReal x13746=(gconst29*r10);
IkReal x13747=(cj3*gconst28);
IkReal x13748=(cj3*gconst29);
IkReal x13749=(gconst28*sj3);
IkReal x13750=(gconst29*r00);
IkReal x13751=(cj1*x13742);
IkReal x13752=((1.0)*x13738);
IkReal x13753=((1.0)*x13737);
IkReal x13754=(gconst28*x13737);
IkReal x13755=(cj3*x13737);
IkReal x13756=(sj3*x13738);
evalcond[0]=(((r21*x13754))+(((-1.0)*r22*x13752))+(((-1.0)*x13740*x13753)));
evalcond[1]=((((-1.0)*x13750*x13753))+((r01*x13754))+(((-1.0)*r02*x13752)));
evalcond[2]=((1.0)+(((-1.0)*x13746*x13753))+((r11*x13754))+(((-1.0)*r12*x13752)));
evalcond[3]=(((gconst29*x13743))+(((-1.0)*cj3*x13746*x13752))+((r12*x13755))+((r10*x13749))+((r11*x13738*x13747)));
evalcond[4]=((((-1.0)*gconst28*x13743*x13752))+(((-1.0)*r12*sj3*x13753))+((r10*x13747))+((x13746*x13756))+((r11*x13748)));
evalcond[5]=(((cj2*sj1))+((r22*x13755))+((gconst29*r21*sj3))+x13744+(((-1.0)*cj3*x13740*x13752))+((r21*x13738*x13747))+((sj3*x13741)));
evalcond[6]=(x13739+((r02*x13755))+(((-1.0)*x13751))+((r01*x13738*x13747))+(((-1.0)*r00*x13748*x13752))+((sj3*x13745))+((r00*x13749)));
evalcond[7]=(((x13740*x13756))+(((-1.0)*r21*x13749*x13752))+x13739+(((-1.0)*x13751))+(((-1.0)*r22*sj3*x13753))+((r21*x13748))+((cj3*x13741)));
evalcond[8]=(((x13750*x13756))+(((-1.0)*x13744))+(((-1.0)*sj1*x13742))+(((-1.0)*r02*sj3*x13753))+(((-1.0)*r01*x13749*x13752))+((cj3*x13745))+((r00*x13747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13757=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13757.valid){
continue;
}
CheckValue<IkReal> x13758 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13757.value)))+(x13758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13759=IKsin(j4);
IkReal x13760=IKcos(j4);
IkReal x13761=(sj1*sj2);
IkReal x13762=(gconst29*r20);
IkReal x13763=(gconst28*r20);
IkReal x13764=((1.0)*cj2);
IkReal x13765=(r11*sj3);
IkReal x13766=(cj1*sj2);
IkReal x13767=(gconst29*r01);
IkReal x13768=(gconst29*r10);
IkReal x13769=(cj3*gconst28);
IkReal x13770=(cj3*gconst29);
IkReal x13771=(gconst28*sj3);
IkReal x13772=(gconst29*r00);
IkReal x13773=(cj1*x13764);
IkReal x13774=((1.0)*x13760);
IkReal x13775=((1.0)*x13759);
IkReal x13776=(gconst28*x13759);
IkReal x13777=(cj3*x13759);
IkReal x13778=(sj3*x13760);
evalcond[0]=((((-1.0)*r22*x13774))+(((-1.0)*x13762*x13775))+((r21*x13776)));
evalcond[1]=(((r01*x13776))+(((-1.0)*r02*x13774))+(((-1.0)*x13772*x13775)));
evalcond[2]=((1.0)+((r11*x13776))+(((-1.0)*r12*x13774))+(((-1.0)*x13768*x13775)));
evalcond[3]=(((gconst29*x13765))+(((-1.0)*cj3*x13768*x13774))+((r10*x13771))+((r11*x13760*x13769))+((r12*x13777)));
evalcond[4]=(((r11*x13770))+(((-1.0)*gconst28*x13765*x13774))+((x13768*x13778))+((r10*x13769))+(((-1.0)*r12*sj3*x13775)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r21*x13760*x13769))+x13766+(((-1.0)*cj3*x13762*x13774))+((sj3*x13763))+((r22*x13777)));
evalcond[6]=((((-1.0)*x13773))+x13761+((r00*x13771))+((r01*x13760*x13769))+((sj3*x13767))+(((-1.0)*r00*x13770*x13774))+((r02*x13777)));
evalcond[7]=((((-1.0)*x13773))+x13761+(((-1.0)*r22*sj3*x13775))+((cj3*x13763))+((x13762*x13778))+(((-1.0)*r21*x13771*x13774))+((r21*x13770)));
evalcond[8]=(((x13772*x13778))+(((-1.0)*x13766))+(((-1.0)*sj1*x13764))+((r00*x13769))+((cj3*x13767))+(((-1.0)*r02*sj3*x13775))+(((-1.0)*r01*x13771*x13774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13779=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13779);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13779);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13780=(r11*sj5);
IkReal x13781=((1.0)*cj5*r10);
j4eval[0]=(x13780+(((-1.0)*x13781)));
j4eval[1]=((((-1.0)*cj3*x13781))+((cj3*x13780)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13782=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13782);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13782);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13783=(cj5*r10);
IkReal x13784=(r11*sj5);
j4eval[0]=(x13784+(((-1.0)*x13783)));
j4eval[1]=((((-1.0)*sj3*x13784))+((sj3*x13783)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13785=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13785);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13785);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13786=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13786);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13786);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13787=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13787))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13787)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13788=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13788);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13788);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13789=((1.0)*sj1);
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(r22,-1);
if(!x13790.valid){
continue;
}
CheckValue<IkReal> x13791=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13791.valid){
continue;
}
if( IKabs(((x13790.value)*(((((-1.0)*cj2*x13789))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13791.value)*(((((-1.0)*sj2*x13789))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13790.value)*(((((-1.0)*cj2*x13789))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13791.value)*(((((-1.0)*sj2*x13789))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13790.value)*(((((-1.0)*cj2*x13789))+(((-1.0)*cj1*sj2))))), ((x13791.value)*(((((-1.0)*sj2*x13789))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13792=IKsin(j4);
IkReal x13793=IKcos(j4);
IkReal x13794=((1.0)*cj5);
IkReal x13795=(sj5*x13793);
IkReal x13796=(sj5*x13792);
evalcond[0]=((-1.0)*r22*x13793);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13792)));
evalcond[2]=(((r01*x13796))+(((-1.0)*r00*x13792*x13794)));
evalcond[3]=(((r11*x13795))+(((-1.0)*r10*x13793*x13794)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13792*x13794))+((r11*x13796)));
evalcond[5]=((((-1.0)*r00*x13793*x13794))+((r01*x13795))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13797=((1.0)*cj5);
CheckValue<IkReal> x13798=IKPowWithIntegerCheck(((((-1.0)*r10*x13797))+((r11*sj5))),-1);
if(!x13798.valid){
continue;
}
CheckValue<IkReal> x13799=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13797))),-1);
if(!x13799.valid){
continue;
}
if( IKabs(((-1.0)*(x13798.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13798.value)))+IKsqr(((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13798.value)), ((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13800=IKsin(j4);
IkReal x13801=IKcos(j4);
IkReal x13802=((1.0)*cj5);
IkReal x13803=(sj5*x13801);
IkReal x13804=(sj5*x13800);
evalcond[0]=((-1.0)*r22*x13801);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13800)));
evalcond[2]=(((r01*x13804))+(((-1.0)*r00*x13800*x13802)));
evalcond[3]=(((r11*x13803))+(((-1.0)*r10*x13801*x13802)));
evalcond[4]=((1.0)+((r11*x13804))+(((-1.0)*r10*x13800*x13802)));
evalcond[5]=(((r01*x13803))+(((-1.0)*r00*x13801*x13802))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13805=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13805);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13805);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13806=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13806);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13806);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13807.valid){
continue;
}
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13808.valid){
continue;
}
if( IKabs(((-1.0)*(x13807.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13808.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13807.value)))+IKsqr(((x13808.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13807.value)), ((x13808.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13809=IKsin(j4);
IkReal x13810=IKcos(j4);
IkReal x13811=(cj5*x13810);
IkReal x13812=(sj5*x13809);
IkReal x13813=((1.0)*cj5*x13809);
IkReal x13814=((1.0)*sj5*x13810);
evalcond[0]=((-1.0)*r22*x13810);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13809)));
evalcond[2]=(((r01*x13812))+(((-1.0)*r00*x13813)));
evalcond[3]=(((r10*x13811))+(((-1.0)*r11*x13814)));
evalcond[4]=((1.0)+((r11*x13812))+(((-1.0)*r10*x13813)));
evalcond[5]=(((r00*x13811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(r22,-1);
if(!x13815.valid){
continue;
}
CheckValue<IkReal> x13816=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13816.valid){
continue;
}
if( IKabs(((x13815.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13816.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13815.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13816.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13815.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13816.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13817=IKsin(j4);
IkReal x13818=IKcos(j4);
IkReal x13819=(cj5*x13818);
IkReal x13820=(sj5*x13817);
IkReal x13821=((1.0)*cj5*x13817);
IkReal x13822=((1.0)*sj5*x13818);
evalcond[0]=((-1.0)*r22*x13818);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13817)));
evalcond[2]=(((r01*x13820))+(((-1.0)*r00*x13821)));
evalcond[3]=(((r10*x13819))+(((-1.0)*r11*x13822)));
evalcond[4]=((1.0)+((r11*x13820))+(((-1.0)*r10*x13821)));
evalcond[5]=(((r00*x13819))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13823=((1.0)*r10);
CheckValue<IkReal> x13824=IKPowWithIntegerCheck(cj3,-1);
if(!x13824.valid){
continue;
}
CheckValue<IkReal> x13825=IKPowWithIntegerCheck(r22,-1);
if(!x13825.valid){
continue;
}
CheckValue<IkReal> x13826=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13823))+((cj3*r11*sj5))),-1);
if(!x13826.valid){
continue;
}
if( IKabs(((x13824.value)*(x13825.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13826.value)*(((((-1.0)*sj3*sj5*x13823))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13824.value)*(x13825.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13826.value)*(((((-1.0)*sj3*sj5*x13823))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13824.value)*(x13825.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13826.value)*(((((-1.0)*sj3*sj5*x13823))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13827=IKsin(j4);
IkReal x13828=IKcos(j4);
IkReal x13829=(sj1*sj2);
IkReal x13830=(r11*sj5);
IkReal x13831=(r00*sj3);
IkReal x13832=(cj5*r01);
IkReal x13833=((1.0)*cj1);
IkReal x13834=(cj3*sj5);
IkReal x13835=(cj5*r11);
IkReal x13836=(r10*sj3);
IkReal x13837=(cj2*sj1);
IkReal x13838=((1.0)*cj5);
IkReal x13839=((1.0)*sj3);
IkReal x13840=(r01*sj5);
IkReal x13841=(cj2*x13833);
IkReal x13842=(cj3*x13828);
IkReal x13843=(r22*x13827);
IkReal x13844=(cj5*x13828);
IkReal x13845=(x13827*x13838);
evalcond[0]=((-1.0)*r22*x13828);
evalcond[1]=(x13837+((cj1*sj2))+((cj3*x13843)));
evalcond[2]=((((-1.0)*r00*x13845))+((x13827*x13840)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13845))+((x13827*x13830)));
evalcond[4]=((((-1.0)*x13841))+x13829+(((-1.0)*x13839*x13843)));
evalcond[5]=(((sj5*x13836))+(((-1.0)*r10*x13838*x13842))+((sj3*x13835))+((x13830*x13842)));
evalcond[6]=(((x13836*x13844))+(((-1.0)*x13828*x13830*x13839))+((r10*x13834))+((cj3*x13835)));
evalcond[7]=((((-1.0)*x13841))+x13829+((sj5*x13831))+(((-1.0)*r00*x13838*x13842))+((r01*x13828*x13834))+((sj3*x13832)));
evalcond[8]=((((-1.0)*sj2*x13833))+(((-1.0)*x13828*x13839*x13840))+((x13831*x13844))+(((-1.0)*x13837))+((r00*x13834))+((cj3*x13832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13846=(cj5*r10);
IkReal x13847=((1.0)*r11);
CheckValue<IkReal> x13848=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13846))),-1);
if(!x13848.valid){
continue;
}
CheckValue<IkReal> x13849=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13847))+((sj3*x13846))),-1);
if(!x13849.valid){
continue;
}
if( IKabs(((-1.0)*(x13848.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13849.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13847)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13848.value)))+IKsqr(((x13849.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13847))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13848.value)), ((x13849.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13847))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13850=IKsin(j4);
IkReal x13851=IKcos(j4);
IkReal x13852=(sj1*sj2);
IkReal x13853=(r11*sj5);
IkReal x13854=(r00*sj3);
IkReal x13855=(cj5*r01);
IkReal x13856=((1.0)*cj1);
IkReal x13857=(cj3*sj5);
IkReal x13858=(cj5*r11);
IkReal x13859=(r10*sj3);
IkReal x13860=(cj2*sj1);
IkReal x13861=((1.0)*cj5);
IkReal x13862=((1.0)*sj3);
IkReal x13863=(r01*sj5);
IkReal x13864=(cj2*x13856);
IkReal x13865=(cj3*x13851);
IkReal x13866=(r22*x13850);
IkReal x13867=(cj5*x13851);
IkReal x13868=(x13850*x13861);
evalcond[0]=((-1.0)*r22*x13851);
evalcond[1]=(x13860+((cj1*sj2))+((cj3*x13866)));
evalcond[2]=((((-1.0)*r00*x13868))+((x13850*x13863)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13868))+((x13850*x13853)));
evalcond[4]=((((-1.0)*x13862*x13866))+x13852+(((-1.0)*x13864)));
evalcond[5]=(((sj3*x13858))+((x13853*x13865))+((sj5*x13859))+(((-1.0)*r10*x13861*x13865)));
evalcond[6]=((((-1.0)*x13851*x13853*x13862))+((cj3*x13858))+((r10*x13857))+((x13859*x13867)));
evalcond[7]=((((-1.0)*r00*x13861*x13865))+x13852+((sj3*x13855))+((sj5*x13854))+((r01*x13851*x13857))+(((-1.0)*x13864)));
evalcond[8]=((((-1.0)*x13851*x13862*x13863))+((r00*x13857))+(((-1.0)*x13860))+(((-1.0)*sj2*x13856))+((x13854*x13867))+((cj3*x13855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13869=((1.0)*sj3);
IkReal x13870=(r11*sj5);
IkReal x13871=((1.0)*cj5*r10);
CheckValue<IkReal> x13872=IKPowWithIntegerCheck((x13870+(((-1.0)*x13871))),-1);
if(!x13872.valid){
continue;
}
CheckValue<IkReal> x13873=IKPowWithIntegerCheck((((cj3*x13870))+(((-1.0)*cj3*x13871))),-1);
if(!x13873.valid){
continue;
}
if( IKabs(((-1.0)*(x13872.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13873.value)*(((((-1.0)*r10*sj5*x13869))+(((-1.0)*cj5*r11*x13869)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13872.value)))+IKsqr(((x13873.value)*(((((-1.0)*r10*sj5*x13869))+(((-1.0)*cj5*r11*x13869))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13872.value)), ((x13873.value)*(((((-1.0)*r10*sj5*x13869))+(((-1.0)*cj5*r11*x13869))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13874=IKsin(j4);
IkReal x13875=IKcos(j4);
IkReal x13876=(sj1*sj2);
IkReal x13877=(r11*sj5);
IkReal x13878=(r00*sj3);
IkReal x13879=(cj5*r01);
IkReal x13880=((1.0)*cj1);
IkReal x13881=(cj3*sj5);
IkReal x13882=(cj5*r11);
IkReal x13883=(r10*sj3);
IkReal x13884=(cj2*sj1);
IkReal x13885=((1.0)*cj5);
IkReal x13886=((1.0)*sj3);
IkReal x13887=(r01*sj5);
IkReal x13888=(cj2*x13880);
IkReal x13889=(cj3*x13875);
IkReal x13890=(r22*x13874);
IkReal x13891=(cj5*x13875);
IkReal x13892=(x13874*x13885);
evalcond[0]=((-1.0)*r22*x13875);
evalcond[1]=(x13884+((cj3*x13890))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13892))+((x13874*x13887)));
evalcond[3]=((1.0)+((x13874*x13877))+(((-1.0)*r10*x13892)));
evalcond[4]=(x13876+(((-1.0)*x13888))+(((-1.0)*x13886*x13890)));
evalcond[5]=(((sj5*x13883))+((sj3*x13882))+(((-1.0)*r10*x13885*x13889))+((x13877*x13889)));
evalcond[6]=(((cj3*x13882))+((r10*x13881))+(((-1.0)*x13875*x13877*x13886))+((x13883*x13891)));
evalcond[7]=(((sj3*x13879))+((sj5*x13878))+x13876+((r01*x13875*x13881))+(((-1.0)*x13888))+(((-1.0)*r00*x13885*x13889)));
evalcond[8]=((((-1.0)*sj2*x13880))+((cj3*x13879))+((x13878*x13891))+(((-1.0)*x13875*x13886*x13887))+(((-1.0)*x13884))+((r00*x13881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13893=cj5*cj5;
IkReal x13894=((1.0)*cj3);
IkReal x13895=(r10*r21);
IkReal x13896=(cj5*sj5);
IkReal x13897=(r11*r21);
IkReal x13898=(r11*r20);
IkReal x13899=(r22*sj3);
IkReal x13900=(r10*r20);
IkReal x13901=((1.0)*sj3*x13893);
CheckValue<IkReal> x13902=IKPowWithIntegerCheck(IKsign((((cj3*x13895*x13896))+(((-1.0)*x13893*x13894*x13900))+((cj3*x13893*x13897))+((cj3*x13896*x13898))+(((-1.0)*r12*r22*x13894))+(((-1.0)*x13894*x13897)))),-1);
if(!x13902.valid){
continue;
}
CheckValue<IkReal> x13903 = IKatan2WithCheck(IkReal((((r10*sj5*x13899))+((cj5*r11*x13899)))),IkReal((((sj3*x13896*x13897))+((sj3*x13895))+(((-1.0)*x13898*x13901))+(((-1.0)*sj3*x13896*x13900))+(((-1.0)*x13895*x13901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13902.value)))+(x13903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13904=IKsin(j4);
IkReal x13905=IKcos(j4);
IkReal x13906=(sj1*sj2);
IkReal x13907=(cj5*sj3);
IkReal x13908=(cj5*r10);
IkReal x13909=(r00*sj5);
IkReal x13910=(r11*sj5);
IkReal x13911=(cj3*cj5);
IkReal x13912=((1.0)*cj1);
IkReal x13913=(cj3*sj5);
IkReal x13914=(r21*sj5);
IkReal x13915=(cj2*sj1);
IkReal x13916=(sj3*sj5);
IkReal x13917=(r01*sj5);
IkReal x13918=(cj2*x13912);
IkReal x13919=((1.0)*x13905);
IkReal x13920=((1.0)*x13904);
IkReal x13921=(cj3*x13904);
IkReal x13922=(cj3*x13905);
evalcond[0]=((((-1.0)*r22*x13919))+(((-1.0)*cj5*r20*x13920))+((x13904*x13914)));
evalcond[1]=((((-1.0)*cj5*r00*x13920))+((x13904*x13917))+(((-1.0)*r02*x13919)));
evalcond[2]=((1.0)+(((-1.0)*x13908*x13920))+(((-1.0)*r12*x13919))+((x13904*x13910)));
evalcond[3]=(((r10*x13916))+(((-1.0)*cj3*x13908*x13919))+((r11*x13907))+((x13910*x13922))+((r12*x13921)));
evalcond[4]=(((r10*x13913))+(((-1.0)*sj3*x13910*x13919))+(((-1.0)*r12*sj3*x13920))+((r11*x13911))+((r10*x13905*x13907)));
evalcond[5]=(((cj1*sj2))+x13915+((r22*x13921))+((r20*x13916))+((r21*x13907))+(((-1.0)*r20*x13911*x13919))+((r21*x13905*x13913)));
evalcond[6]=(x13906+((r01*x13905*x13913))+((r01*x13907))+(((-1.0)*r00*x13911*x13919))+((sj3*x13909))+((r02*x13921))+(((-1.0)*x13918)));
evalcond[7]=((((-1.0)*sj3*x13914*x13919))+x13906+((r20*x13905*x13907))+((r20*x13913))+((r21*x13911))+(((-1.0)*x13918))+(((-1.0)*r22*sj3*x13920)));
evalcond[8]=((((-1.0)*r01*x13916*x13919))+(((-1.0)*x13915))+(((-1.0)*sj2*x13912))+((r01*x13911))+((cj3*x13909))+(((-1.0)*r02*sj3*x13920))+((r00*x13905*x13907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13923=((1.0)*cj5);
CheckValue<IkReal> x13924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13923)))),-1);
if(!x13924.valid){
continue;
}
CheckValue<IkReal> x13925 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13924.value)))+(x13925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13926=IKsin(j4);
IkReal x13927=IKcos(j4);
IkReal x13928=(sj1*sj2);
IkReal x13929=(cj5*sj3);
IkReal x13930=(cj5*r10);
IkReal x13931=(r00*sj5);
IkReal x13932=(r11*sj5);
IkReal x13933=(cj3*cj5);
IkReal x13934=((1.0)*cj1);
IkReal x13935=(cj3*sj5);
IkReal x13936=(r21*sj5);
IkReal x13937=(cj2*sj1);
IkReal x13938=(sj3*sj5);
IkReal x13939=(r01*sj5);
IkReal x13940=(cj2*x13934);
IkReal x13941=((1.0)*x13927);
IkReal x13942=((1.0)*x13926);
IkReal x13943=(cj3*x13926);
IkReal x13944=(cj3*x13927);
evalcond[0]=(((x13926*x13936))+(((-1.0)*cj5*r20*x13942))+(((-1.0)*r22*x13941)));
evalcond[1]=((((-1.0)*cj5*r00*x13942))+((x13926*x13939))+(((-1.0)*r02*x13941)));
evalcond[2]=((1.0)+((x13926*x13932))+(((-1.0)*r12*x13941))+(((-1.0)*x13930*x13942)));
evalcond[3]=((((-1.0)*cj3*x13930*x13941))+((r10*x13938))+((r12*x13943))+((r11*x13929))+((x13932*x13944)));
evalcond[4]=(((r11*x13933))+(((-1.0)*r12*sj3*x13942))+((r10*x13935))+((r10*x13927*x13929))+(((-1.0)*sj3*x13932*x13941)));
evalcond[5]=(((r20*x13938))+((r21*x13929))+((cj1*sj2))+x13937+((r21*x13927*x13935))+((r22*x13943))+(((-1.0)*r20*x13933*x13941)));
evalcond[6]=(((sj3*x13931))+((r01*x13927*x13935))+x13928+((r01*x13929))+(((-1.0)*x13940))+(((-1.0)*r00*x13933*x13941))+((r02*x13943)));
evalcond[7]=(((r20*x13927*x13929))+((r20*x13935))+((r21*x13933))+x13928+(((-1.0)*x13940))+(((-1.0)*r22*sj3*x13942))+(((-1.0)*sj3*x13936*x13941)));
evalcond[8]=((((-1.0)*sj2*x13934))+((cj3*x13931))+((r01*x13933))+((r00*x13927*x13929))+(((-1.0)*r01*x13938*x13941))+(((-1.0)*r02*sj3*x13942))+(((-1.0)*x13937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13945=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13945.valid){
continue;
}
CheckValue<IkReal> x13946 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13945.value)))+(x13946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13947=IKsin(j4);
IkReal x13948=IKcos(j4);
IkReal x13949=(sj1*sj2);
IkReal x13950=(cj5*sj3);
IkReal x13951=(cj5*r10);
IkReal x13952=(r00*sj5);
IkReal x13953=(r11*sj5);
IkReal x13954=(cj3*cj5);
IkReal x13955=((1.0)*cj1);
IkReal x13956=(cj3*sj5);
IkReal x13957=(r21*sj5);
IkReal x13958=(cj2*sj1);
IkReal x13959=(sj3*sj5);
IkReal x13960=(r01*sj5);
IkReal x13961=(cj2*x13955);
IkReal x13962=((1.0)*x13948);
IkReal x13963=((1.0)*x13947);
IkReal x13964=(cj3*x13947);
IkReal x13965=(cj3*x13948);
evalcond[0]=((((-1.0)*r22*x13962))+(((-1.0)*cj5*r20*x13963))+((x13947*x13957)));
evalcond[1]=((((-1.0)*r02*x13962))+((x13947*x13960))+(((-1.0)*cj5*r00*x13963)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13962))+(((-1.0)*x13951*x13963))+((x13947*x13953)));
evalcond[3]=(((r11*x13950))+((r12*x13964))+((r10*x13959))+(((-1.0)*cj3*x13951*x13962))+((x13953*x13965)));
evalcond[4]=(((r11*x13954))+(((-1.0)*r12*sj3*x13963))+(((-1.0)*sj3*x13953*x13962))+((r10*x13948*x13950))+((r10*x13956)));
evalcond[5]=((((-1.0)*r20*x13954*x13962))+((cj1*sj2))+x13958+((r21*x13950))+((r21*x13948*x13956))+((r22*x13964))+((r20*x13959)));
evalcond[6]=(((r02*x13964))+(((-1.0)*r00*x13954*x13962))+((r01*x13950))+x13949+((r01*x13948*x13956))+(((-1.0)*x13961))+((sj3*x13952)));
evalcond[7]=((((-1.0)*r22*sj3*x13963))+x13949+((r21*x13954))+(((-1.0)*sj3*x13957*x13962))+(((-1.0)*x13961))+((r20*x13948*x13950))+((r20*x13956)));
evalcond[8]=((((-1.0)*r01*x13959*x13962))+((cj3*x13952))+((r01*x13954))+(((-1.0)*r02*sj3*x13963))+((r00*x13948*x13950))+(((-1.0)*sj2*x13955))+(((-1.0)*x13958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13966=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13966;
j4eval[1]=IKsign(x13966);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13967=((1.0)*cj5);
IkReal x13968=((((-1.0)*r21*x13967))+(((-1.0)*r20*sj5)));
j4eval[0]=x13968;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13967)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13969=cj5*cj5;
IkReal x13970=(cj3*r21);
IkReal x13971=(cj5*sj5);
IkReal x13972=((1.0)*cj3);
IkReal x13973=((((-1.0)*r10*r20*x13969*x13972))+(((-1.0)*r12*r22*x13972))+((r10*x13970*x13971))+((cj3*r11*r20*x13971))+(((-1.0)*r11*x13970))+((r11*x13969*x13970)));
j4eval[0]=x13973;
j4eval[1]=IKsign(x13973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13974=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13974;
j4eval[1]=IKsign(x13974);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13975=((1.0)*cj5);
IkReal x13976=((((-1.0)*r21*x13975))+(((-1.0)*r20*sj5)));
j4eval[0]=x13976;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13975))))));
j4eval[2]=IKsign(x13976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13977=cj5*cj5;
IkReal x13978=r11*r11;
IkReal x13979=(cj5*r10);
IkReal x13980=(r11*sj5);
IkReal x13981=((((2.0)*x13979*x13980))+(((-1.0)*x13978))+(((-1.0)*x13977*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13977*x13978)));
j4eval[0]=x13981;
j4eval[1]=((IKabs(r12))+(IKabs((x13979+(((-1.0)*x13980))))));
j4eval[2]=IKsign(x13981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13982=cj5*cj5;
IkReal x13983=r11*r11;
IkReal x13984=(cj5*r10);
IkReal x13985=(r11*sj5);
CheckValue<IkReal> x13986 = IKatan2WithCheck(IkReal((x13984+(((-1.0)*x13985)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13986.valid){
continue;
}
CheckValue<IkReal> x13987=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13982*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13982*x13983))+(((-1.0)*x13983))+(((2.0)*x13984*x13985)))),-1);
if(!x13987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13986.value)+(((1.5707963267949)*(x13987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13988=IKsin(j4);
IkReal x13989=IKcos(j4);
IkReal x13990=(cj5*r10);
IkReal x13991=(r01*sj5);
IkReal x13992=(cj5*r00);
IkReal x13993=(cj5*r20);
IkReal x13994=((1.0)*x13989);
IkReal x13995=((1.0)*x13988);
IkReal x13996=(sj5*x13988);
evalcond[0]=((((-1.0)*x13993*x13995))+((r21*x13996))+(((-1.0)*r22*x13994)));
evalcond[1]=((((-1.0)*x13992*x13995))+(((-1.0)*r02*x13994))+((x13988*x13991)));
evalcond[2]=((((-1.0)*r11*sj5*x13994))+(((-1.0)*r12*x13995))+((x13989*x13990)));
evalcond[3]=((-1.0)+((r11*x13996))+(((-1.0)*r12*x13994))+(((-1.0)*x13990*x13995)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13995))+((cj1*sj2))+(((-1.0)*x13991*x13994))+((x13989*x13992)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13995))+(((-1.0)*r21*sj5*x13994))+((x13989*x13993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13997=((1.0)*cj5);
CheckValue<IkReal> x13998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13997))+(((-1.0)*r20*sj5)))),-1);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13998.value)))+(x13999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKsin(j4);
IkReal x14001=IKcos(j4);
IkReal x14002=(cj5*r10);
IkReal x14003=(r01*sj5);
IkReal x14004=(cj5*r00);
IkReal x14005=(cj5*r20);
IkReal x14006=((1.0)*x14001);
IkReal x14007=((1.0)*x14000);
IkReal x14008=(sj5*x14000);
evalcond[0]=(((r21*x14008))+(((-1.0)*x14005*x14007))+(((-1.0)*r22*x14006)));
evalcond[1]=((((-1.0)*r02*x14006))+((x14000*x14003))+(((-1.0)*x14004*x14007)));
evalcond[2]=((((-1.0)*r11*sj5*x14006))+(((-1.0)*r12*x14007))+((x14001*x14002)));
evalcond[3]=((-1.0)+((r11*x14008))+(((-1.0)*x14002*x14007))+(((-1.0)*r12*x14006)));
evalcond[4]=((((-1.0)*r02*x14007))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14003*x14006))+((x14001*x14004)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14006))+((x14001*x14005))+(((-1.0)*r22*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14009 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14009.valid){
continue;
}
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14009.value)+(((1.5707963267949)*(x14010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14011=IKsin(j4);
IkReal x14012=IKcos(j4);
IkReal x14013=(cj5*r10);
IkReal x14014=(r01*sj5);
IkReal x14015=(cj5*r00);
IkReal x14016=(cj5*r20);
IkReal x14017=((1.0)*x14012);
IkReal x14018=((1.0)*x14011);
IkReal x14019=(sj5*x14011);
evalcond[0]=(((r21*x14019))+(((-1.0)*x14016*x14018))+(((-1.0)*r22*x14017)));
evalcond[1]=((((-1.0)*x14015*x14018))+(((-1.0)*r02*x14017))+((x14011*x14014)));
evalcond[2]=(((x14012*x14013))+(((-1.0)*r11*sj5*x14017))+(((-1.0)*r12*x14018)));
evalcond[3]=((-1.0)+((r11*x14019))+(((-1.0)*r12*x14017))+(((-1.0)*x14013*x14018)));
evalcond[4]=(((x14012*x14015))+((cj2*sj1))+(((-1.0)*r02*x14018))+(((-1.0)*x14014*x14017))+((cj1*sj2)));
evalcond[5]=(((x14012*x14016))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14017))+(((-1.0)*r22*x14018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14020=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14020;
j4eval[1]=IKsign(x14020);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14021=((1.0)*cj5);
IkReal x14022=((((-1.0)*r21*x14021))+(((-1.0)*r20*sj5)));
j4eval[0]=x14022;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14021))))));
j4eval[2]=IKsign(x14022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14023=cj5*cj5;
IkReal x14024=r11*r11;
IkReal x14025=(r11*sj5);
IkReal x14026=(cj5*r10);
IkReal x14027=((r12*r12)+(((-2.0)*x14025*x14026))+(((-1.0)*x14023*x14024))+((x14023*(r10*r10)))+x14024);
j4eval[0]=x14027;
j4eval[1]=IKsign(x14027);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14026))+x14025))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14028=cj5*cj5;
IkReal x14029=r11*r11;
IkReal x14030=(cj5*r10);
IkReal x14031=(r11*sj5);
CheckValue<IkReal> x14032=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14030*x14031))+(((-1.0)*x14028*x14029))+((x14028*(r10*r10)))+x14029)),-1);
if(!x14032.valid){
continue;
}
CheckValue<IkReal> x14033 = IKatan2WithCheck(IkReal(((((-1.0)*x14030))+x14031)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14032.value)))+(x14033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14034=IKcos(j4);
IkReal x14035=IKsin(j4);
IkReal x14036=(cj5*r00);
IkReal x14037=(cj5*r10);
IkReal x14038=(r21*sj5);
IkReal x14039=(cj5*r20);
IkReal x14040=((1.0)*x14034);
IkReal x14041=((1.0)*x14035);
IkReal x14042=(sj5*x14035);
IkReal x14043=(sj5*x14034);
evalcond[0]=(((r11*x14043))+(((-1.0)*x14037*x14040))+((r12*x14035)));
evalcond[1]=((((-1.0)*x14039*x14041))+(((-1.0)*r22*x14040))+((x14035*x14038)));
evalcond[2]=(((r01*x14042))+(((-1.0)*x14036*x14041))+(((-1.0)*r02*x14040)));
evalcond[3]=((-1.0)+((r11*x14042))+(((-1.0)*x14037*x14041))+(((-1.0)*r12*x14040)));
evalcond[4]=(((cj2*sj1))+((r01*x14043))+(((-1.0)*x14036*x14040))+((cj1*sj2))+((r02*x14035)));
evalcond[5]=(((x14034*x14038))+((r22*x14035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14039*x14040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14044=((1.0)*cj5);
CheckValue<IkReal> x14045 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14045.valid){
continue;
}
CheckValue<IkReal> x14046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14044))+(((-1.0)*r20*sj5)))),-1);
if(!x14046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14045.value)+(((1.5707963267949)*(x14046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14047=IKcos(j4);
IkReal x14048=IKsin(j4);
IkReal x14049=(cj5*r00);
IkReal x14050=(cj5*r10);
IkReal x14051=(r21*sj5);
IkReal x14052=(cj5*r20);
IkReal x14053=((1.0)*x14047);
IkReal x14054=((1.0)*x14048);
IkReal x14055=(sj5*x14048);
IkReal x14056=(sj5*x14047);
evalcond[0]=(((r11*x14056))+(((-1.0)*x14050*x14053))+((r12*x14048)));
evalcond[1]=((((-1.0)*r22*x14053))+((x14048*x14051))+(((-1.0)*x14052*x14054)));
evalcond[2]=((((-1.0)*r02*x14053))+(((-1.0)*x14049*x14054))+((r01*x14055)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14053))+((r11*x14055))+(((-1.0)*x14050*x14054)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14049*x14053))+((r02*x14048))+((r01*x14056)));
evalcond[5]=(((r22*x14048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14052*x14053))+((x14047*x14051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14057.valid){
continue;
}
CheckValue<IkReal> x14058=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14057.value)+(((1.5707963267949)*(x14058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14059=IKcos(j4);
IkReal x14060=IKsin(j4);
IkReal x14061=(cj5*r00);
IkReal x14062=(cj5*r10);
IkReal x14063=(r21*sj5);
IkReal x14064=(cj5*r20);
IkReal x14065=((1.0)*x14059);
IkReal x14066=((1.0)*x14060);
IkReal x14067=(sj5*x14060);
IkReal x14068=(sj5*x14059);
evalcond[0]=(((r11*x14068))+((r12*x14060))+(((-1.0)*x14062*x14065)));
evalcond[1]=(((x14060*x14063))+(((-1.0)*r22*x14065))+(((-1.0)*x14064*x14066)));
evalcond[2]=(((r01*x14067))+(((-1.0)*x14061*x14066))+(((-1.0)*r02*x14065)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14065))+((r11*x14067))+(((-1.0)*x14062*x14066)));
evalcond[4]=(((r02*x14060))+((cj2*sj1))+((cj1*sj2))+((r01*x14068))+(((-1.0)*x14061*x14065)));
evalcond[5]=(((r22*x14060))+(((-1.0)*x14064*x14065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14059*x14063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14070 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14070)==0){
continue;
}
IkReal x14069=pow(x14070,-0.5);
CheckValue<IkReal> x14071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14071.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14071.value));
IkReal gconst37=((-1.0)*r01*x14069);
IkReal gconst38=(r00*x14069);
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14072.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14075 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14075.valid){
continue;
}
IkReal x14073=((-1.0)*(x14075.value));
IkReal x14074=x14069;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14073;
IkReal gconst36=x14073;
IkReal gconst37=((-1.0)*r01*x14074);
IkReal gconst38=(r00*x14074);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14078 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14078.valid){
continue;
}
IkReal x14076=((-1.0)*(x14078.value));
IkReal x14077=x14069;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14076;
IkReal gconst36=x14076;
IkReal gconst37=((-1.0)*r01*x14077);
IkReal gconst38=(r00*x14077);
CheckValue<IkReal> x14086=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14086.valid){
continue;
}
IkReal x14079=x14086.value;
IkReal x14080=(sj3*x14079);
IkReal x14081=(r11*x14080);
IkReal x14082=(r21*x14080);
IkReal x14083=(r20*x14080);
IkReal x14084=(r10*x14080);
IkReal x14085=(r00*r01*x14080);
j4eval[0]=IKsign((((r00*r01*r10*x14082))+((r21*x14081*(r01*r01)))+((r10*x14083*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14081))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14087=gconst38*gconst38;
IkReal x14088=gconst37*gconst37;
IkReal x14089=((1.0)*cj3);
IkReal x14090=(r11*r20);
IkReal x14091=(r10*sj3);
IkReal x14092=(gconst37*gconst38);
IkReal x14093=(r11*sj3);
IkReal x14094=(r21*x14088);
IkReal x14095=(cj3*x14092);
CheckValue<IkReal> x14096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14089*x14094))+(((-1.0)*r12*r22*x14089))+((r10*r21*x14095))+((x14090*x14095))+(((-1.0)*r10*r20*x14087*x14089)))),-1);
if(!x14096.valid){
continue;
}
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal((((gconst37*r22*x14091))+((gconst38*r22*x14093)))),IkReal((((x14091*x14094))+(((-1.0)*sj3*x14087*x14090))+((r21*x14092*x14093))+(((-1.0)*r20*x14091*x14092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14096.value)))+(x14097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14098=IKsin(j4);
IkReal x14099=IKcos(j4);
IkReal x14100=(cj2*sj1);
IkReal x14101=(cj1*sj2);
IkReal x14102=(gconst38*r21);
IkReal x14103=(cj3*r20);
IkReal x14104=(gconst38*r10);
IkReal x14105=(cj3*gconst37);
IkReal x14106=(sj1*sj2);
IkReal x14107=(gconst38*r00);
IkReal x14108=(cj1*cj2);
IkReal x14109=(gconst37*sj3);
IkReal x14110=(gconst38*r20);
IkReal x14111=(gconst38*r01);
IkReal x14112=(gconst38*r11);
IkReal x14113=((1.0)*x14099);
IkReal x14114=((1.0)*x14098);
IkReal x14115=(cj3*x14098);
IkReal x14116=(sj3*x14099);
IkReal x14117=(gconst37*x14098);
IkReal x14118=(x14101+x14100);
evalcond[0]=((((-1.0)*x14110*x14114))+(((-1.0)*r22*x14113))+((r21*x14117)));
evalcond[1]=(((r01*x14117))+(((-1.0)*r02*x14113))+(((-1.0)*x14107*x14114)));
evalcond[2]=((-1.0)+((r11*x14117))+(((-1.0)*x14104*x14114))+(((-1.0)*r12*x14113)));
evalcond[3]=(((sj3*x14112))+(((-1.0)*cj3*x14104*x14113))+((r10*x14109))+((r12*x14115))+((r11*x14099*x14105)));
evalcond[4]=((((-1.0)*r11*x14109*x14113))+((cj3*x14112))+((r10*x14105))+((x14104*x14116))+(((-1.0)*r12*sj3*x14114)));
evalcond[5]=(((sj3*x14102))+(((-1.0)*gconst38*x14103*x14113))+((r22*x14115))+x14118+((r20*x14109))+((r21*x14099*x14105)));
evalcond[6]=(((r02*x14115))+((sj3*x14111))+((r00*x14109))+(((-1.0)*x14106))+x14108+((r01*x14099*x14105))+(((-1.0)*cj3*x14107*x14113)));
evalcond[7]=(((r00*x14105))+(((-1.0)*r02*sj3*x14114))+((cj3*x14111))+x14118+((x14107*x14116))+(((-1.0)*r01*x14109*x14113)));
evalcond[8]=(((x14110*x14116))+(((-1.0)*r21*x14109*x14113))+((cj3*x14102))+(((-1.0)*x14108))+x14106+((gconst37*x14103))+(((-1.0)*r22*sj3*x14114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14119=gconst38*gconst38;
IkReal x14120=gconst37*gconst37;
IkReal x14121=(gconst37*r10);
IkReal x14122=(cj3*r22);
IkReal x14123=((1.0)*gconst38);
IkReal x14124=(r21*sj3);
IkReal x14125=(gconst38*r11);
IkReal x14126=(cj3*r20);
IkReal x14127=(cj3*r21);
IkReal x14128=(r20*sj3);
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14121*x14123*x14124))+((r10*x14119*x14128))+(((-1.0)*gconst37*r11*x14123*x14128))+((r12*r22*sj3))+((r11*x14120*x14124)))),-1);
if(!x14129.valid){
continue;
}
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal((((x14122*x14125))+((x14121*x14122)))),IkReal(((((-1.0)*x14121*x14123*x14126))+((r10*x14120*x14127))+((gconst37*x14125*x14127))+(((-1.0)*r11*x14119*x14126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14129.value)))+(x14130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14131=IKsin(j4);
IkReal x14132=IKcos(j4);
IkReal x14133=(cj2*sj1);
IkReal x14134=(cj1*sj2);
IkReal x14135=(gconst38*r21);
IkReal x14136=(cj3*r20);
IkReal x14137=(gconst38*r10);
IkReal x14138=(cj3*gconst37);
IkReal x14139=(sj1*sj2);
IkReal x14140=(gconst38*r00);
IkReal x14141=(cj1*cj2);
IkReal x14142=(gconst37*sj3);
IkReal x14143=(gconst38*r20);
IkReal x14144=(gconst38*r01);
IkReal x14145=(gconst38*r11);
IkReal x14146=((1.0)*x14132);
IkReal x14147=((1.0)*x14131);
IkReal x14148=(cj3*x14131);
IkReal x14149=(sj3*x14132);
IkReal x14150=(gconst37*x14131);
IkReal x14151=(x14133+x14134);
evalcond[0]=((((-1.0)*r22*x14146))+(((-1.0)*x14143*x14147))+((r21*x14150)));
evalcond[1]=(((r01*x14150))+(((-1.0)*r02*x14146))+(((-1.0)*x14140*x14147)));
evalcond[2]=((-1.0)+((r11*x14150))+(((-1.0)*r12*x14146))+(((-1.0)*x14137*x14147)));
evalcond[3]=(((r10*x14142))+(((-1.0)*cj3*x14137*x14146))+((sj3*x14145))+((r11*x14132*x14138))+((r12*x14148)));
evalcond[4]=((((-1.0)*r11*x14142*x14146))+((cj3*x14145))+(((-1.0)*r12*sj3*x14147))+((r10*x14138))+((x14137*x14149)));
evalcond[5]=(((sj3*x14135))+(((-1.0)*gconst38*x14136*x14146))+((r21*x14132*x14138))+((r22*x14148))+x14151+((r20*x14142)));
evalcond[6]=((((-1.0)*x14139))+((r02*x14148))+((sj3*x14144))+((r00*x14142))+(((-1.0)*cj3*x14140*x14146))+x14141+((r01*x14132*x14138)));
evalcond[7]=((((-1.0)*r02*sj3*x14147))+((cj3*x14144))+(((-1.0)*r01*x14142*x14146))+x14151+((r00*x14138))+((x14140*x14149)));
evalcond[8]=((((-1.0)*r22*sj3*x14147))+((x14143*x14149))+((gconst37*x14136))+(((-1.0)*r21*x14142*x14146))+x14139+(((-1.0)*x14141))+((cj3*x14135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14152=((1.0)*gconst38);
CheckValue<IkReal> x14153 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14153.valid){
continue;
}
CheckValue<IkReal> x14154=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14152)))),-1);
if(!x14154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14153.value)+(((1.5707963267949)*(x14154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14155=IKsin(j4);
IkReal x14156=IKcos(j4);
IkReal x14157=(cj2*sj1);
IkReal x14158=(cj1*sj2);
IkReal x14159=(gconst38*r21);
IkReal x14160=(cj3*r20);
IkReal x14161=(gconst38*r10);
IkReal x14162=(cj3*gconst37);
IkReal x14163=(sj1*sj2);
IkReal x14164=(gconst38*r00);
IkReal x14165=(cj1*cj2);
IkReal x14166=(gconst37*sj3);
IkReal x14167=(gconst38*r20);
IkReal x14168=(gconst38*r01);
IkReal x14169=(gconst38*r11);
IkReal x14170=((1.0)*x14156);
IkReal x14171=((1.0)*x14155);
IkReal x14172=(cj3*x14155);
IkReal x14173=(sj3*x14156);
IkReal x14174=(gconst37*x14155);
IkReal x14175=(x14158+x14157);
evalcond[0]=((((-1.0)*x14167*x14171))+((r21*x14174))+(((-1.0)*r22*x14170)));
evalcond[1]=(((r01*x14174))+(((-1.0)*r02*x14170))+(((-1.0)*x14164*x14171)));
evalcond[2]=((-1.0)+((r11*x14174))+(((-1.0)*x14161*x14171))+(((-1.0)*r12*x14170)));
evalcond[3]=(((r11*x14156*x14162))+((r10*x14166))+((sj3*x14169))+(((-1.0)*cj3*x14161*x14170))+((r12*x14172)));
evalcond[4]=(((cj3*x14169))+(((-1.0)*r12*sj3*x14171))+((r10*x14162))+((x14161*x14173))+(((-1.0)*r11*x14166*x14170)));
evalcond[5]=(((r22*x14172))+((sj3*x14159))+((r21*x14156*x14162))+(((-1.0)*gconst38*x14160*x14170))+x14175+((r20*x14166)));
evalcond[6]=(((sj3*x14168))+((r02*x14172))+((r00*x14166))+x14165+(((-1.0)*cj3*x14164*x14170))+(((-1.0)*x14163))+((r01*x14156*x14162)));
evalcond[7]=(((cj3*x14168))+((x14164*x14173))+((r00*x14162))+x14175+(((-1.0)*r01*x14166*x14170))+(((-1.0)*r02*sj3*x14171)));
evalcond[8]=(((cj3*x14159))+((x14167*x14173))+(((-1.0)*r21*x14166*x14170))+((gconst37*x14160))+x14163+(((-1.0)*r22*sj3*x14171))+(((-1.0)*x14165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14177 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14177)==0){
continue;
}
IkReal x14176=pow(x14177,-0.5);
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14178.value))));
IkReal gconst40=((1.0)*r01*x14176);
IkReal gconst41=((-1.0)*r00*x14176);
CheckValue<IkReal> x14179 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14179.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14179.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14182 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14182.valid){
continue;
}
IkReal x14180=((1.0)*(x14182.value));
IkReal x14181=x14176;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14180)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14180)));
IkReal gconst40=((1.0)*r01*x14181);
IkReal gconst41=((-1.0)*r00*x14181);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14185 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14185.valid){
continue;
}
IkReal x14183=((1.0)*(x14185.value));
IkReal x14184=x14176;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14183)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14183)));
IkReal gconst40=((1.0)*r01*x14184);
IkReal gconst41=((-1.0)*r00*x14184);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14186=gconst41*gconst41;
IkReal x14187=gconst40*gconst40;
IkReal x14188=(gconst40*r10);
IkReal x14189=(r22*sj3);
IkReal x14190=(r11*sj3);
IkReal x14191=((1.0)*cj3);
IkReal x14192=(gconst41*r21);
IkReal x14193=(gconst41*r20);
IkReal x14194=(r21*x14187);
IkReal x14195=((1.0)*r20*x14186);
CheckValue<IkReal> x14196 = IKatan2WithCheck(IkReal((((gconst41*r11*x14189))+((x14188*x14189)))),IkReal((((gconst40*x14190*x14192))+((r10*sj3*x14194))+(((-1.0)*sj3*x14188*x14193))+(((-1.0)*x14190*x14195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14196.valid){
continue;
}
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14191))+(((-1.0)*r11*x14191*x14194))+((cj3*x14188*x14192))+(((-1.0)*r10*r20*x14186*x14191))+((cj3*gconst40*r11*x14193)))),-1);
if(!x14197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14196.value)+(((1.5707963267949)*(x14197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14198=IKsin(j4);
IkReal x14199=IKcos(j4);
IkReal x14200=(cj2*sj1);
IkReal x14201=(cj1*sj2);
IkReal x14202=(gconst40*sj3);
IkReal x14203=(gconst41*sj3);
IkReal x14204=(gconst41*r20);
IkReal x14205=(cj3*gconst41);
IkReal x14206=(sj1*sj2);
IkReal x14207=(cj1*cj2);
IkReal x14208=(cj3*gconst40);
IkReal x14209=((1.0)*x14199);
IkReal x14210=((1.0)*x14198);
IkReal x14211=(cj3*x14198);
IkReal x14212=(gconst40*x14198);
IkReal x14213=(x14200+x14201);
IkReal x14214=(x14199*x14208);
evalcond[0]=((((-1.0)*x14204*x14210))+((r21*x14212))+(((-1.0)*r22*x14209)));
evalcond[1]=((((-1.0)*gconst41*r00*x14210))+((r01*x14212))+(((-1.0)*r02*x14209)));
evalcond[2]=((-1.0)+((r11*x14212))+(((-1.0)*r12*x14209))+(((-1.0)*gconst41*r10*x14210)));
evalcond[3]=(((r11*x14214))+((r12*x14211))+((r10*x14202))+((r11*x14203))+(((-1.0)*r10*x14205*x14209)));
evalcond[4]=((((-1.0)*r11*x14202*x14209))+((r10*x14208))+((r10*x14199*x14203))+(((-1.0)*r12*sj3*x14210))+((r11*x14205)));
evalcond[5]=(((r22*x14211))+((r20*x14202))+((r21*x14203))+((r21*x14214))+(((-1.0)*cj3*x14204*x14209))+x14213);
evalcond[6]=((((-1.0)*r00*x14205*x14209))+((r01*x14214))+((r00*x14202))+((r01*x14203))+(((-1.0)*x14206))+((r02*x14211))+x14207);
evalcond[7]=((((-1.0)*r02*sj3*x14210))+((r00*x14199*x14203))+((r00*x14208))+((r01*x14205))+x14213+(((-1.0)*r01*x14202*x14209)));
evalcond[8]=((((-1.0)*r21*x14202*x14209))+((r20*x14208))+((r21*x14205))+((r20*x14199*x14203))+(((-1.0)*r22*sj3*x14210))+(((-1.0)*x14207))+x14206);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14215=((1.0)*gconst41);
CheckValue<IkReal> x14216 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14215))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14216.valid){
continue;
}
CheckValue<IkReal> x14217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14215))+(((-1.0)*gconst40*r20)))),-1);
if(!x14217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14216.value)+(((1.5707963267949)*(x14217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14218=IKsin(j4);
IkReal x14219=IKcos(j4);
IkReal x14220=(cj2*sj1);
IkReal x14221=(cj1*sj2);
IkReal x14222=(gconst40*sj3);
IkReal x14223=(gconst41*sj3);
IkReal x14224=(gconst41*r20);
IkReal x14225=(cj3*gconst41);
IkReal x14226=(sj1*sj2);
IkReal x14227=(cj1*cj2);
IkReal x14228=(cj3*gconst40);
IkReal x14229=((1.0)*x14219);
IkReal x14230=((1.0)*x14218);
IkReal x14231=(cj3*x14218);
IkReal x14232=(gconst40*x14218);
IkReal x14233=(x14220+x14221);
IkReal x14234=(x14219*x14228);
evalcond[0]=(((r21*x14232))+(((-1.0)*x14224*x14230))+(((-1.0)*r22*x14229)));
evalcond[1]=((((-1.0)*gconst41*r00*x14230))+((r01*x14232))+(((-1.0)*r02*x14229)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14230))+(((-1.0)*r12*x14229))+((r11*x14232)));
evalcond[3]=((((-1.0)*r10*x14225*x14229))+((r10*x14222))+((r11*x14223))+((r12*x14231))+((r11*x14234)));
evalcond[4]=(((r10*x14228))+(((-1.0)*r12*sj3*x14230))+((r11*x14225))+((r10*x14219*x14223))+(((-1.0)*r11*x14222*x14229)));
evalcond[5]=(((r20*x14222))+((r21*x14234))+((r21*x14223))+((r22*x14231))+(((-1.0)*cj3*x14224*x14229))+x14233);
evalcond[6]=(((r02*x14231))+(((-1.0)*r00*x14225*x14229))+((r01*x14234))+((r00*x14222))+(((-1.0)*x14226))+((r01*x14223))+x14227);
evalcond[7]=(((r00*x14219*x14223))+(((-1.0)*r02*sj3*x14230))+(((-1.0)*r01*x14222*x14229))+((r00*x14228))+((r01*x14225))+x14233);
evalcond[8]=(((r20*x14219*x14223))+((r20*x14228))+((r21*x14225))+(((-1.0)*r22*sj3*x14230))+(((-1.0)*x14227))+x14226+(((-1.0)*r21*x14222*x14229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14235 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14235.valid){
continue;
}
CheckValue<IkReal> x14236=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14235.value)+(((1.5707963267949)*(x14236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14237=IKsin(j4);
IkReal x14238=IKcos(j4);
IkReal x14239=(cj2*sj1);
IkReal x14240=(cj1*sj2);
IkReal x14241=(gconst40*sj3);
IkReal x14242=(gconst41*sj3);
IkReal x14243=(gconst41*r20);
IkReal x14244=(cj3*gconst41);
IkReal x14245=(sj1*sj2);
IkReal x14246=(cj1*cj2);
IkReal x14247=(cj3*gconst40);
IkReal x14248=((1.0)*x14238);
IkReal x14249=((1.0)*x14237);
IkReal x14250=(cj3*x14237);
IkReal x14251=(gconst40*x14237);
IkReal x14252=(x14239+x14240);
IkReal x14253=(x14238*x14247);
evalcond[0]=(((r21*x14251))+(((-1.0)*r22*x14248))+(((-1.0)*x14243*x14249)));
evalcond[1]=((((-1.0)*gconst41*r00*x14249))+(((-1.0)*r02*x14248))+((r01*x14251)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14249))+((r11*x14251))+(((-1.0)*r12*x14248)));
evalcond[3]=(((r12*x14250))+((r11*x14253))+((r11*x14242))+((r10*x14241))+(((-1.0)*r10*x14244*x14248)));
evalcond[4]=((((-1.0)*r11*x14241*x14248))+((r11*x14244))+((r10*x14238*x14242))+((r10*x14247))+(((-1.0)*r12*sj3*x14249)));
evalcond[5]=(((r21*x14242))+(((-1.0)*cj3*x14243*x14248))+((r21*x14253))+((r20*x14241))+x14252+((r22*x14250)));
evalcond[6]=((((-1.0)*x14245))+((r02*x14250))+((r01*x14242))+x14246+((r00*x14241))+((r01*x14253))+(((-1.0)*r00*x14244*x14248)));
evalcond[7]=((((-1.0)*r02*sj3*x14249))+(((-1.0)*r01*x14241*x14248))+((r01*x14244))+((r00*x14238*x14242))+x14252+((r00*x14247)));
evalcond[8]=(((r21*x14244))+(((-1.0)*r22*sj3*x14249))+(((-1.0)*x14246))+(((-1.0)*r21*x14241*x14248))+((r20*x14247))+x14245+((r20*x14238*x14242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14254=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14254);
rxp1_1=(px*r21);
rxp1_2=(r11*x14254);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14255=(r11*sj5);
IkReal x14256=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14256))+x14255);
j4eval[1]=(((cj3*x14255))+(((-1.0)*cj3*x14256)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14257=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14257);
rxp1_1=(px*r21);
rxp1_2=(r11*x14257);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14258=(cj5*r10);
IkReal x14259=(r11*sj5);
j4eval[0]=(x14259+(((-1.0)*x14258)));
j4eval[1]=((((-1.0)*sj3*x14259))+((sj3*x14258)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14260=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14260);
rxp1_1=(px*r21);
rxp1_2=(r11*x14260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14261=((1.0)*r10);
CheckValue<IkReal> x14262=IKPowWithIntegerCheck(cj3,-1);
if(!x14262.valid){
continue;
}
CheckValue<IkReal> x14263=IKPowWithIntegerCheck(r02,-1);
if(!x14263.valid){
continue;
}
CheckValue<IkReal> x14264=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14261))),-1);
if(!x14264.valid){
continue;
}
if( IKabs(((x14262.value)*(x14263.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14264.value)*(((((-1.0)*sj3*sj5*x14261))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14262.value)*(x14263.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14264.value)*(((((-1.0)*sj3*sj5*x14261))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14262.value)*(x14263.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14264.value)*(((((-1.0)*sj3*sj5*x14261))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14265=IKsin(j4);
IkReal x14266=IKcos(j4);
IkReal x14267=(cj2*sj1);
IkReal x14268=(cj1*sj2);
IkReal x14269=(cj5*r10);
IkReal x14270=(sj1*sj2);
IkReal x14271=(cj5*sj3);
IkReal x14272=(r11*sj5);
IkReal x14273=(cj3*sj5);
IkReal x14274=(r21*sj5);
IkReal x14275=(cj1*cj2);
IkReal x14276=(cj3*cj5);
IkReal x14277=(sj3*sj5);
IkReal x14278=((1.0)*x14265);
IkReal x14279=(r20*x14266);
IkReal x14280=(cj3*x14266);
IkReal x14281=(sj3*x14266);
IkReal x14282=(x14268+x14267);
evalcond[0]=((-1.0)*r02*x14266);
evalcond[1]=((((-1.0)*cj5*r20*x14278))+((x14265*x14274)));
evalcond[2]=((((-1.0)*x14270))+((cj3*r02*x14265))+x14275);
evalcond[3]=((((-1.0)*r02*sj3*x14278))+x14282);
evalcond[4]=((-1.0)+((x14265*x14272))+(((-1.0)*x14269*x14278)));
evalcond[5]=(((x14272*x14280))+(((-1.0)*x14269*x14280))+((r11*x14271))+((r10*x14277)));
evalcond[6]=((((-1.0)*x14272*x14281))+((x14269*x14281))+((r11*x14276))+((r10*x14273)));
evalcond[7]=(((r21*x14271))+((r20*x14277))+((r21*x14266*x14273))+(((-1.0)*x14276*x14279))+x14282);
evalcond[8]=((((-1.0)*x14275))+((r21*x14276))+((r20*x14273))+((x14271*x14279))+(((-1.0)*x14274*x14281))+x14270);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14283=(cj5*r10);
IkReal x14284=((1.0)*r11);
CheckValue<IkReal> x14285=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14283))),-1);
if(!x14285.valid){
continue;
}
CheckValue<IkReal> x14286=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14284))+((sj3*x14283))),-1);
if(!x14286.valid){
continue;
}
if( IKabs(x14285.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14286.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14284)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14285.value)+IKsqr(((x14286.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14284))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14285.value, ((x14286.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14284))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14287=IKsin(j4);
IkReal x14288=IKcos(j4);
IkReal x14289=(cj2*sj1);
IkReal x14290=(cj1*sj2);
IkReal x14291=(cj5*r10);
IkReal x14292=(sj1*sj2);
IkReal x14293=(cj5*sj3);
IkReal x14294=(r11*sj5);
IkReal x14295=(cj3*sj5);
IkReal x14296=(r21*sj5);
IkReal x14297=(cj1*cj2);
IkReal x14298=(cj3*cj5);
IkReal x14299=(sj3*sj5);
IkReal x14300=((1.0)*x14287);
IkReal x14301=(r20*x14288);
IkReal x14302=(cj3*x14288);
IkReal x14303=(sj3*x14288);
IkReal x14304=(x14290+x14289);
evalcond[0]=((-1.0)*r02*x14288);
evalcond[1]=(((x14287*x14296))+(((-1.0)*cj5*r20*x14300)));
evalcond[2]=(((cj3*r02*x14287))+(((-1.0)*x14292))+x14297);
evalcond[3]=((((-1.0)*r02*sj3*x14300))+x14304);
evalcond[4]=((-1.0)+((x14287*x14294))+(((-1.0)*x14291*x14300)));
evalcond[5]=(((r10*x14299))+(((-1.0)*x14291*x14302))+((r11*x14293))+((x14294*x14302)));
evalcond[6]=(((r10*x14295))+((x14291*x14303))+((r11*x14298))+(((-1.0)*x14294*x14303)));
evalcond[7]=(((r20*x14299))+((r21*x14293))+((r21*x14288*x14295))+(((-1.0)*x14298*x14301))+x14304);
evalcond[8]=(((r20*x14295))+((r21*x14298))+((x14293*x14301))+(((-1.0)*x14296*x14303))+(((-1.0)*x14297))+x14292);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14305=((1.0)*r10);
IkReal x14306=(r11*sj5);
CheckValue<IkReal> x14307=IKPowWithIntegerCheck(((((-1.0)*cj5*x14305))+x14306),-1);
if(!x14307.valid){
continue;
}
CheckValue<IkReal> x14308=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14305))+((cj3*x14306))),-1);
if(!x14308.valid){
continue;
}
if( IKabs(x14307.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14308.value)*(((((-1.0)*sj3*sj5*x14305))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14307.value)+IKsqr(((x14308.value)*(((((-1.0)*sj3*sj5*x14305))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14307.value, ((x14308.value)*(((((-1.0)*sj3*sj5*x14305))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14309=IKsin(j4);
IkReal x14310=IKcos(j4);
IkReal x14311=(cj2*sj1);
IkReal x14312=(cj1*sj2);
IkReal x14313=(cj5*r10);
IkReal x14314=(sj1*sj2);
IkReal x14315=(cj5*sj3);
IkReal x14316=(r11*sj5);
IkReal x14317=(cj3*sj5);
IkReal x14318=(r21*sj5);
IkReal x14319=(cj1*cj2);
IkReal x14320=(cj3*cj5);
IkReal x14321=(sj3*sj5);
IkReal x14322=((1.0)*x14309);
IkReal x14323=(r20*x14310);
IkReal x14324=(cj3*x14310);
IkReal x14325=(sj3*x14310);
IkReal x14326=(x14312+x14311);
evalcond[0]=((-1.0)*r02*x14310);
evalcond[1]=(((x14309*x14318))+(((-1.0)*cj5*r20*x14322)));
evalcond[2]=(((cj3*r02*x14309))+(((-1.0)*x14314))+x14319);
evalcond[3]=((((-1.0)*r02*sj3*x14322))+x14326);
evalcond[4]=((-1.0)+((x14309*x14316))+(((-1.0)*x14313*x14322)));
evalcond[5]=(((r11*x14315))+((r10*x14321))+(((-1.0)*x14313*x14324))+((x14316*x14324)));
evalcond[6]=(((r11*x14320))+((r10*x14317))+((x14313*x14325))+(((-1.0)*x14316*x14325)));
evalcond[7]=((((-1.0)*x14320*x14323))+((r21*x14310*x14317))+((r20*x14321))+((r21*x14315))+x14326);
evalcond[8]=(((x14315*x14323))+(((-1.0)*x14319))+((r20*x14317))+((r21*x14320))+(((-1.0)*x14318*x14325))+x14314);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14327=cj5*cj5;
IkReal x14328=((1.0)*cj3);
IkReal x14329=(r10*r21);
IkReal x14330=(cj5*sj5);
IkReal x14331=(r11*r21);
IkReal x14332=(r11*r20);
IkReal x14333=(r22*sj3);
IkReal x14334=(r10*r20);
IkReal x14335=((1.0)*sj3*x14327);
CheckValue<IkReal> x14336 = IKatan2WithCheck(IkReal((((r10*sj5*x14333))+((cj5*r11*x14333)))),IkReal(((((-1.0)*sj3*x14330*x14334))+((sj3*x14330*x14331))+(((-1.0)*x14329*x14335))+((sj3*x14329))+(((-1.0)*x14332*x14335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14336.valid){
continue;
}
CheckValue<IkReal> x14337=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14327*x14328*x14334))+((cj3*x14327*x14331))+((cj3*x14329*x14330))+((cj3*x14330*x14332))+(((-1.0)*x14328*x14331))+(((-1.0)*r12*r22*x14328)))),-1);
if(!x14337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14336.value)+(((1.5707963267949)*(x14337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14338=IKsin(j4);
IkReal x14339=IKcos(j4);
IkReal x14340=(cj2*sj1);
IkReal x14341=(cj1*sj2);
IkReal x14342=(cj5*sj3);
IkReal x14343=(cj5*r10);
IkReal x14344=(r00*sj5);
IkReal x14345=(sj1*sj2);
IkReal x14346=(r11*sj5);
IkReal x14347=(cj3*cj5);
IkReal x14348=(cj3*sj5);
IkReal x14349=(r21*sj5);
IkReal x14350=(cj1*cj2);
IkReal x14351=(sj3*sj5);
IkReal x14352=(r01*sj5);
IkReal x14353=((1.0)*x14339);
IkReal x14354=((1.0)*x14338);
IkReal x14355=(cj3*x14338);
IkReal x14356=(cj3*x14339);
IkReal x14357=(x14341+x14340);
evalcond[0]=(((x14338*x14349))+(((-1.0)*cj5*r20*x14354))+(((-1.0)*r22*x14353)));
evalcond[1]=((((-1.0)*cj5*r00*x14354))+(((-1.0)*r02*x14353))+((x14338*x14352)));
evalcond[2]=((-1.0)+((x14338*x14346))+(((-1.0)*r12*x14353))+(((-1.0)*x14343*x14354)));
evalcond[3]=(((r12*x14355))+((r11*x14342))+((r10*x14351))+((x14346*x14356))+(((-1.0)*cj3*x14343*x14353)));
evalcond[4]=((((-1.0)*sj3*x14346*x14353))+((r11*x14347))+((r10*x14348))+((r10*x14339*x14342))+(((-1.0)*r12*sj3*x14354)));
evalcond[5]=(((r20*x14351))+((r21*x14342))+((r21*x14339*x14348))+(((-1.0)*r20*x14347*x14353))+((r22*x14355))+x14357);
evalcond[6]=(((r02*x14355))+((r01*x14342))+(((-1.0)*r00*x14347*x14353))+(((-1.0)*x14345))+((r01*x14339*x14348))+((sj3*x14344))+x14350);
evalcond[7]=(((cj3*x14344))+((r01*x14347))+((r00*x14339*x14342))+(((-1.0)*r01*x14351*x14353))+x14357+(((-1.0)*r02*sj3*x14354)));
evalcond[8]=(((r20*x14339*x14342))+(((-1.0)*r22*sj3*x14354))+((r21*x14347))+(((-1.0)*x14350))+((r20*x14348))+x14345+(((-1.0)*sj3*x14349*x14353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14358=((1.0)*cj5);
CheckValue<IkReal> x14359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14358))+(((-1.0)*r20*sj5)))),-1);
if(!x14359.valid){
continue;
}
CheckValue<IkReal> x14360 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14359.value)))+(x14360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14361=IKsin(j4);
IkReal x14362=IKcos(j4);
IkReal x14363=(cj2*sj1);
IkReal x14364=(cj1*sj2);
IkReal x14365=(cj5*sj3);
IkReal x14366=(cj5*r10);
IkReal x14367=(r00*sj5);
IkReal x14368=(sj1*sj2);
IkReal x14369=(r11*sj5);
IkReal x14370=(cj3*cj5);
IkReal x14371=(cj3*sj5);
IkReal x14372=(r21*sj5);
IkReal x14373=(cj1*cj2);
IkReal x14374=(sj3*sj5);
IkReal x14375=(r01*sj5);
IkReal x14376=((1.0)*x14362);
IkReal x14377=((1.0)*x14361);
IkReal x14378=(cj3*x14361);
IkReal x14379=(cj3*x14362);
IkReal x14380=(x14363+x14364);
evalcond[0]=(((x14361*x14372))+(((-1.0)*r22*x14376))+(((-1.0)*cj5*r20*x14377)));
evalcond[1]=(((x14361*x14375))+(((-1.0)*cj5*r00*x14377))+(((-1.0)*r02*x14376)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14376))+((x14361*x14369))+(((-1.0)*x14366*x14377)));
evalcond[3]=(((r11*x14365))+(((-1.0)*cj3*x14366*x14376))+((r10*x14374))+((r12*x14378))+((x14369*x14379)));
evalcond[4]=(((r10*x14371))+(((-1.0)*r12*sj3*x14377))+((r11*x14370))+(((-1.0)*sj3*x14369*x14376))+((r10*x14362*x14365)));
evalcond[5]=((((-1.0)*r20*x14370*x14376))+((r21*x14362*x14371))+((r22*x14378))+((r21*x14365))+((r20*x14374))+x14380);
evalcond[6]=((((-1.0)*r00*x14370*x14376))+((sj3*x14367))+(((-1.0)*x14368))+((r01*x14365))+x14373+((r02*x14378))+((r01*x14362*x14371)));
evalcond[7]=(((r01*x14370))+((cj3*x14367))+((r00*x14362*x14365))+(((-1.0)*r02*sj3*x14377))+(((-1.0)*r01*x14374*x14376))+x14380);
evalcond[8]=(((r21*x14370))+(((-1.0)*sj3*x14372*x14376))+(((-1.0)*x14373))+((r20*x14362*x14365))+(((-1.0)*r22*sj3*x14377))+((r20*x14371))+x14368);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14381 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14381.valid){
continue;
}
CheckValue<IkReal> x14382=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14381.value)+(((1.5707963267949)*(x14382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14383=IKsin(j4);
IkReal x14384=IKcos(j4);
IkReal x14385=(cj2*sj1);
IkReal x14386=(cj1*sj2);
IkReal x14387=(cj5*sj3);
IkReal x14388=(cj5*r10);
IkReal x14389=(r00*sj5);
IkReal x14390=(sj1*sj2);
IkReal x14391=(r11*sj5);
IkReal x14392=(cj3*cj5);
IkReal x14393=(cj3*sj5);
IkReal x14394=(r21*sj5);
IkReal x14395=(cj1*cj2);
IkReal x14396=(sj3*sj5);
IkReal x14397=(r01*sj5);
IkReal x14398=((1.0)*x14384);
IkReal x14399=((1.0)*x14383);
IkReal x14400=(cj3*x14383);
IkReal x14401=(cj3*x14384);
IkReal x14402=(x14385+x14386);
evalcond[0]=(((x14383*x14394))+(((-1.0)*cj5*r20*x14399))+(((-1.0)*r22*x14398)));
evalcond[1]=(((x14383*x14397))+(((-1.0)*cj5*r00*x14399))+(((-1.0)*r02*x14398)));
evalcond[2]=((-1.0)+((x14383*x14391))+(((-1.0)*r12*x14398))+(((-1.0)*x14388*x14399)));
evalcond[3]=(((r12*x14400))+((r11*x14387))+((r10*x14396))+((x14391*x14401))+(((-1.0)*cj3*x14388*x14398)));
evalcond[4]=(((r10*x14393))+((r11*x14392))+((r10*x14384*x14387))+(((-1.0)*r12*sj3*x14399))+(((-1.0)*sj3*x14391*x14398)));
evalcond[5]=(((r21*x14387))+(((-1.0)*r20*x14392*x14398))+((r22*x14400))+x14402+((r21*x14384*x14393))+((r20*x14396)));
evalcond[6]=((((-1.0)*x14390))+((r01*x14387))+((r02*x14400))+((r01*x14384*x14393))+(((-1.0)*r00*x14392*x14398))+x14395+((sj3*x14389)));
evalcond[7]=((((-1.0)*r02*sj3*x14399))+((r00*x14384*x14387))+((r01*x14392))+((cj3*x14389))+x14402+(((-1.0)*r01*x14396*x14398)));
evalcond[8]=(((r20*x14384*x14387))+((r21*x14392))+(((-1.0)*x14395))+(((-1.0)*sj3*x14394*x14398))+(((-1.0)*r22*sj3*x14399))+x14390+((r20*x14393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14403=((-1.0)*r00);
IkReal x14405 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14405)==0){
continue;
}
IkReal x14404=pow(x14405,-0.5);
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14403),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14406.value));
IkReal gconst13=(r01*x14404);
IkReal gconst14=(x14403*x14404);
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14407.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14408=((-1.0)*r00);
IkReal x14409=x14404;
CheckValue<IkReal> x14411 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14408),IKFAST_ATAN2_MAGTHRESH);
if(!x14411.valid){
continue;
}
IkReal x14410=((-1.0)*(x14411.value));
sj5=gconst13;
cj5=gconst14;
j5=x14410;
IkReal gconst12=x14410;
IkReal gconst13=(r01*x14409);
IkReal gconst14=(x14408*x14409);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14412=((1.0)*sj0);
IkReal x14413=((1.0)*cj0);
CheckValue<IkReal> x14414 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14413))+(((-1.0)*r12*x14412)))),IkReal(((((-1.0)*gconst13*r11*x14412))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14414.valid){
continue;
}
CheckValue<IkReal> x14415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14414.value)+(((1.5707963267949)*(x14415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14416=IKsin(j4);
IkReal x14417=IKcos(j4);
IkReal x14418=((1.0)*r22);
IkReal x14419=((1.0)*r12);
IkReal x14420=(gconst13*sj3);
IkReal x14421=(gconst13*r01);
IkReal x14422=(sj1*sj2);
IkReal x14423=(gconst14*sj3);
IkReal x14424=(cj2*sj1);
IkReal x14425=((1.0)*sj0);
IkReal x14426=(cj3*gconst13);
IkReal x14427=(cj3*gconst14);
IkReal x14428=((1.0)*cj0);
IkReal x14429=((1.0)*gconst14);
IkReal x14430=(cj1*sj2);
IkReal x14431=(sj3*x14416);
IkReal x14432=((1.0)*cj1*cj2);
IkReal x14433=(cj3*x14417);
IkReal x14434=(cj3*x14416);
IkReal x14435=(gconst13*x14416);
IkReal x14436=((1.0)*x14417);
IkReal x14437=(x14416*x14429);
evalcond[0]=(((r21*x14435))+(((-1.0)*x14417*x14418))+(((-1.0)*r20*x14437)));
evalcond[1]=((((-1.0)*r10*x14437))+cj0+((r11*x14435))+(((-1.0)*x14417*x14419)));
evalcond[2]=((((-1.0)*r00*x14437))+((x14416*x14421))+(((-1.0)*r02*x14436))+(((-1.0)*x14425)));
evalcond[3]=(((r20*x14420))+x14430+x14424+((r22*x14434))+((r21*x14417*x14426))+(((-1.0)*r20*x14427*x14436))+((r21*x14423)));
evalcond[4]=((((-1.0)*r21*x14420*x14436))+(((-1.0)*x14432))+((r20*x14426))+(((-1.0)*x14418*x14431))+x14422+((r20*x14417*x14423))+((r21*x14427)));
evalcond[5]=(((cj0*x14422))+((r01*x14423))+(((-1.0)*r00*x14427*x14436))+((r00*x14420))+((x14421*x14433))+((r02*x14434))+(((-1.0)*cj1*cj2*x14428)));
evalcond[6]=(((r11*x14423))+((sj0*x14422))+((r12*x14434))+((r10*x14420))+((r11*x14417*x14426))+(((-1.0)*r10*x14427*x14436))+(((-1.0)*cj1*cj2*x14425)));
evalcond[7]=(((r00*x14417*x14423))+((r01*x14427))+((r00*x14426))+(((-1.0)*x14428*x14430))+(((-1.0)*r01*x14420*x14436))+(((-1.0)*x14424*x14428))+(((-1.0)*r02*x14431)));
evalcond[8]=(((r10*x14417*x14423))+((r11*x14427))+(((-1.0)*x14425*x14430))+((r10*x14426))+(((-1.0)*x14424*x14425))+(((-1.0)*r11*x14420*x14436))+(((-1.0)*x14419*x14431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14438=((1.0)*gconst14);
CheckValue<IkReal> x14439 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14438))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14439.valid){
continue;
}
CheckValue<IkReal> x14440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14438)))),-1);
if(!x14440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14439.value)+(((1.5707963267949)*(x14440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14441=IKsin(j4);
IkReal x14442=IKcos(j4);
IkReal x14443=((1.0)*r22);
IkReal x14444=((1.0)*r12);
IkReal x14445=(gconst13*sj3);
IkReal x14446=(gconst13*r01);
IkReal x14447=(sj1*sj2);
IkReal x14448=(gconst14*sj3);
IkReal x14449=(cj2*sj1);
IkReal x14450=((1.0)*sj0);
IkReal x14451=(cj3*gconst13);
IkReal x14452=(cj3*gconst14);
IkReal x14453=((1.0)*cj0);
IkReal x14454=((1.0)*gconst14);
IkReal x14455=(cj1*sj2);
IkReal x14456=(sj3*x14441);
IkReal x14457=((1.0)*cj1*cj2);
IkReal x14458=(cj3*x14442);
IkReal x14459=(cj3*x14441);
IkReal x14460=(gconst13*x14441);
IkReal x14461=((1.0)*x14442);
IkReal x14462=(x14441*x14454);
evalcond[0]=(((r21*x14460))+(((-1.0)*x14442*x14443))+(((-1.0)*r20*x14462)));
evalcond[1]=(cj0+(((-1.0)*r10*x14462))+(((-1.0)*x14442*x14444))+((r11*x14460)));
evalcond[2]=((((-1.0)*r00*x14462))+(((-1.0)*x14450))+((x14441*x14446))+(((-1.0)*r02*x14461)));
evalcond[3]=(((r20*x14445))+(((-1.0)*r20*x14452*x14461))+x14455+x14449+((r21*x14442*x14451))+((r22*x14459))+((r21*x14448)));
evalcond[4]=((((-1.0)*x14443*x14456))+(((-1.0)*x14457))+((r20*x14442*x14448))+(((-1.0)*r21*x14445*x14461))+((r20*x14451))+x14447+((r21*x14452)));
evalcond[5]=(((r01*x14448))+((r00*x14445))+(((-1.0)*r00*x14452*x14461))+((x14446*x14458))+(((-1.0)*cj1*cj2*x14453))+((r02*x14459))+((cj0*x14447)));
evalcond[6]=((((-1.0)*r10*x14452*x14461))+((sj0*x14447))+((r12*x14459))+((r10*x14445))+((r11*x14448))+((r11*x14442*x14451))+(((-1.0)*cj1*cj2*x14450)));
evalcond[7]=((((-1.0)*r02*x14456))+(((-1.0)*x14449*x14453))+((r00*x14451))+((r01*x14452))+(((-1.0)*x14453*x14455))+((r00*x14442*x14448))+(((-1.0)*r01*x14445*x14461)));
evalcond[8]=((((-1.0)*r11*x14445*x14461))+(((-1.0)*x14449*x14450))+((r10*x14451))+((r11*x14452))+((r10*x14442*x14448))+(((-1.0)*x14450*x14455))+(((-1.0)*x14444*x14456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14463=((-1.0)*r01);
IkReal x14465 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14465)==0){
continue;
}
IkReal x14464=pow(x14465,-0.5);
CheckValue<IkReal> x14466 = IKatan2WithCheck(IkReal(x14463),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14466.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14466.value))));
IkReal gconst16=(x14463*x14464);
IkReal gconst17=((1.0)*r00*x14464);
CheckValue<IkReal> x14467 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14467.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14467.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14468=((-1.0)*r01);
CheckValue<IkReal> x14471 = IKatan2WithCheck(IkReal(x14468),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14471.valid){
continue;
}
IkReal x14469=((1.0)*(x14471.value));
IkReal x14470=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14469)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14469)));
IkReal gconst16=(x14468*x14470);
IkReal gconst17=((1.0)*r00*x14470);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14472=((-1.0)*r01);
CheckValue<IkReal> x14475 = IKatan2WithCheck(IkReal(x14472),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14475.valid){
continue;
}
IkReal x14473=((1.0)*(x14475.value));
IkReal x14474=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14473)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14473)));
IkReal gconst16=(x14472*x14474);
IkReal gconst17=((1.0)*r00*x14474);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14476=((-1.0)*r01);
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(x14476),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
IkReal x14477=((1.0)*(x14479.value));
IkReal x14478=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14477)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14477)));
IkReal gconst16=(x14476*x14478);
IkReal gconst17=((1.0)*r00*x14478);
IkReal x14480=r02*r02;
IkReal x14481=(r12*sj0);
IkReal x14482=((1.0)*cj0);
IkReal x14483=x14464;
j4eval[0]=((IKabs((((cj0*x14480*x14483))+((r02*x14481*x14483))+(((-1.0)*x14482*x14483)))))+(IKabs(((((-1.0)*x14481))+(((-1.0)*r02*x14482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14484=((-1.0)*r01);
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(x14484),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
IkReal x14485=((1.0)*(x14487.value));
IkReal x14486=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14485)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14485)));
IkReal gconst16=(x14484*x14486);
IkReal gconst17=((1.0)*r00*x14486);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14488=((-1.0)*r01);
CheckValue<IkReal> x14491 = IKatan2WithCheck(IkReal(x14488),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14491.valid){
continue;
}
IkReal x14489=((1.0)*(x14491.value));
IkReal x14490=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14489)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14489)));
IkReal gconst16=(x14488*x14490);
IkReal gconst17=((1.0)*r00*x14490);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14492=gconst16*gconst16;
IkReal x14493=gconst17*gconst17;
IkReal x14494=(r11*sj3);
IkReal x14495=(cj3*r10);
IkReal x14496=((1.0)*cj3);
IkReal x14497=(r10*sj3);
IkReal x14498=(gconst16*gconst17);
IkReal x14499=(r21*x14492);
IkReal x14500=((1.0)*r20*x14493);
CheckValue<IkReal> x14501 = IKatan2WithCheck(IkReal((((gconst17*r22*x14494))+((gconst16*r22*x14497)))),IkReal(((((-1.0)*r20*x14497*x14498))+(((-1.0)*x14494*x14500))+((x14497*x14499))+((r21*x14494*x14498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14501.valid){
continue;
}
CheckValue<IkReal> x14502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14496*x14499))+(((-1.0)*r12*r22*x14496))+((cj3*r11*r20*x14498))+((r21*x14495*x14498))+(((-1.0)*x14495*x14500)))),-1);
if(!x14502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14501.value)+(((1.5707963267949)*(x14502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14503=IKsin(j4);
IkReal x14504=IKcos(j4);
IkReal x14505=(cj2*sj1);
IkReal x14506=(cj1*sj2);
IkReal x14507=(gconst16*r21);
IkReal x14508=(cj3*gconst17);
IkReal x14509=(gconst16*r20);
IkReal x14510=(sj1*sj2);
IkReal x14511=(gconst17*r20);
IkReal x14512=(gconst17*sj3);
IkReal x14513=(gconst16*r10);
IkReal x14514=(cj1*cj2);
IkReal x14515=(gconst16*sj3);
IkReal x14516=((1.0)*x14504);
IkReal x14517=((1.0)*x14503);
IkReal x14518=(gconst16*x14503);
IkReal x14519=(cj3*x14504);
IkReal x14520=(cj3*x14503);
IkReal x14521=(x14506+x14505);
evalcond[0]=((((-1.0)*r22*x14516))+(((-1.0)*x14511*x14517))+((x14503*x14507)));
evalcond[1]=((((-1.0)*gconst17*r00*x14517))+((r01*x14518))+(((-1.0)*r02*x14516)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14517))+((r11*x14518))+(((-1.0)*r12*x14516)));
evalcond[3]=(((sj3*x14513))+((r11*x14512))+((r12*x14520))+(((-1.0)*r10*x14508*x14516))+((gconst16*r11*x14519)));
evalcond[4]=(((cj3*x14513))+(((-1.0)*r11*x14515*x14516))+((r10*x14504*x14512))+((r11*x14508))+(((-1.0)*r12*sj3*x14517)));
evalcond[5]=(((r22*x14520))+(((-1.0)*r20*x14508*x14516))+x14521+((sj3*x14509))+((r21*x14512))+((x14507*x14519)));
evalcond[6]=(((r00*x14515))+((gconst16*r01*x14519))+(((-1.0)*r00*x14508*x14516))+((r01*x14512))+x14514+((r02*x14520))+(((-1.0)*x14510)));
evalcond[7]=((((-1.0)*r01*x14515*x14516))+((r00*x14504*x14512))+(((-1.0)*r02*sj3*x14517))+x14521+((r01*x14508))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14509))+((sj3*x14504*x14511))+((r21*x14508))+x14510+(((-1.0)*r22*sj3*x14517))+(((-1.0)*sj3*x14507*x14516))+(((-1.0)*x14514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14522=((1.0)*gconst17);
CheckValue<IkReal> x14523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14522)))),-1);
if(!x14523.valid){
continue;
}
CheckValue<IkReal> x14524 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14522))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14523.value)))+(x14524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14525=IKsin(j4);
IkReal x14526=IKcos(j4);
IkReal x14527=(cj2*sj1);
IkReal x14528=(cj1*sj2);
IkReal x14529=(gconst16*r21);
IkReal x14530=(cj3*gconst17);
IkReal x14531=(gconst16*r20);
IkReal x14532=(sj1*sj2);
IkReal x14533=(gconst17*r20);
IkReal x14534=(gconst17*sj3);
IkReal x14535=(gconst16*r10);
IkReal x14536=(cj1*cj2);
IkReal x14537=(gconst16*sj3);
IkReal x14538=((1.0)*x14526);
IkReal x14539=((1.0)*x14525);
IkReal x14540=(gconst16*x14525);
IkReal x14541=(cj3*x14526);
IkReal x14542=(cj3*x14525);
IkReal x14543=(x14527+x14528);
evalcond[0]=((((-1.0)*r22*x14538))+((x14525*x14529))+(((-1.0)*x14533*x14539)));
evalcond[1]=(((r01*x14540))+(((-1.0)*gconst17*r00*x14539))+(((-1.0)*r02*x14538)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14539))+(((-1.0)*r12*x14538))+((r11*x14540)));
evalcond[3]=(((r12*x14542))+((gconst16*r11*x14541))+((r11*x14534))+((sj3*x14535))+(((-1.0)*r10*x14530*x14538)));
evalcond[4]=((((-1.0)*r12*sj3*x14539))+((cj3*x14535))+((r11*x14530))+((r10*x14526*x14534))+(((-1.0)*r11*x14537*x14538)));
evalcond[5]=(((r21*x14534))+((x14529*x14541))+((r22*x14542))+x14543+((sj3*x14531))+(((-1.0)*r20*x14530*x14538)));
evalcond[6]=(((r02*x14542))+(((-1.0)*x14532))+((r00*x14537))+((r01*x14534))+x14536+((gconst16*r01*x14541))+(((-1.0)*r00*x14530*x14538)));
evalcond[7]=((((-1.0)*r02*sj3*x14539))+((r01*x14530))+x14543+(((-1.0)*r01*x14537*x14538))+((r00*x14526*x14534))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14536))+((cj3*x14531))+((r21*x14530))+x14532+((sj3*x14526*x14533))+(((-1.0)*sj3*x14529*x14538))+(((-1.0)*r22*sj3*x14539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14544=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14544.valid){
continue;
}
CheckValue<IkReal> x14545 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14544.value)))+(x14545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14546=IKsin(j4);
IkReal x14547=IKcos(j4);
IkReal x14548=(cj2*sj1);
IkReal x14549=(cj1*sj2);
IkReal x14550=(gconst16*r21);
IkReal x14551=(cj3*gconst17);
IkReal x14552=(gconst16*r20);
IkReal x14553=(sj1*sj2);
IkReal x14554=(gconst17*r20);
IkReal x14555=(gconst17*sj3);
IkReal x14556=(gconst16*r10);
IkReal x14557=(cj1*cj2);
IkReal x14558=(gconst16*sj3);
IkReal x14559=((1.0)*x14547);
IkReal x14560=((1.0)*x14546);
IkReal x14561=(gconst16*x14546);
IkReal x14562=(cj3*x14547);
IkReal x14563=(cj3*x14546);
IkReal x14564=(x14549+x14548);
evalcond[0]=((((-1.0)*r22*x14559))+(((-1.0)*x14554*x14560))+((x14546*x14550)));
evalcond[1]=(((r01*x14561))+(((-1.0)*r02*x14559))+(((-1.0)*gconst17*r00*x14560)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14560))+((r11*x14561))+(((-1.0)*r12*x14559)));
evalcond[3]=(((sj3*x14556))+(((-1.0)*r10*x14551*x14559))+((gconst16*r11*x14562))+((r11*x14555))+((r12*x14563)));
evalcond[4]=((((-1.0)*r11*x14558*x14559))+((r11*x14551))+((cj3*x14556))+(((-1.0)*r12*sj3*x14560))+((r10*x14547*x14555)));
evalcond[5]=(((sj3*x14552))+(((-1.0)*r20*x14551*x14559))+x14564+((x14550*x14562))+((r22*x14563))+((r21*x14555)));
evalcond[6]=((((-1.0)*r00*x14551*x14559))+((gconst16*r01*x14562))+((r02*x14563))+x14557+(((-1.0)*x14553))+((r01*x14555))+((r00*x14558)));
evalcond[7]=(((r00*x14547*x14555))+x14564+(((-1.0)*r01*x14558*x14559))+((r01*x14551))+(((-1.0)*r02*sj3*x14560))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14547*x14554))+(((-1.0)*r22*sj3*x14560))+x14553+(((-1.0)*x14557))+((cj3*x14552))+(((-1.0)*sj3*x14550*x14559))+((r21*x14551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14565=((-1.0)*r01);
CheckValue<IkReal> x14568 = IKatan2WithCheck(IkReal(x14565),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14568.valid){
continue;
}
IkReal x14566=((1.0)*(x14568.value));
IkReal x14567=x14464;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14566)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14566)));
IkReal gconst16=(x14565*x14567);
IkReal gconst17=((1.0)*r00*x14567);
IkReal x14569=r02*r02;
IkReal x14570=(r12*sj0);
IkReal x14571=((1.0)*cj0);
IkReal x14572=x14464;
j4eval[0]=((IKabs(((((-1.0)*x14571*x14572))+((r02*x14570*x14572))+((cj0*x14569*x14572)))))+(IKabs(((((-1.0)*r02*x14571))+(((-1.0)*x14570))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14573=((1.0)*r12);
IkReal x14574=(sj1*sj2);
IkReal x14575=(cj1*cj2);
IkReal x14576=((1.0)*sj3);
IkReal x14577=(gconst16*r21);
IkReal x14578=(cj3*gconst16*r20);
IkReal x14579=(gconst17*r20*sj3);
IkReal x14580=(cj3*gconst17*r21);
CheckValue<IkReal> x14581=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14577))+(((-1.0)*gconst16*r11*x14576*x14577))+(((-1.0)*r10*r20*x14576*(gconst17*gconst17)))+((gconst16*r11*x14579))),-1);
if(!x14581.valid){
continue;
}
CheckValue<IkReal> x14582=IKPowWithIntegerCheck(((((-1.0)*x14576*x14577))+x14579),-1);
if(!x14582.valid){
continue;
}
if( IKabs(((x14581.value)*(((((-1.0)*x14573*x14574))+(((-1.0)*x14573*x14578))+((cj0*sj3*x14577))+(((-1.0)*x14573*x14580))+((r12*x14575))+(((-1.0)*cj0*gconst17*r20*x14576)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14582.value)*(((((-1.0)*x14580))+x14575+(((-1.0)*x14574))+(((-1.0)*x14578)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14581.value)*(((((-1.0)*x14573*x14574))+(((-1.0)*x14573*x14578))+((cj0*sj3*x14577))+(((-1.0)*x14573*x14580))+((r12*x14575))+(((-1.0)*cj0*gconst17*r20*x14576))))))+IKsqr(((x14582.value)*(((((-1.0)*x14580))+x14575+(((-1.0)*x14574))+(((-1.0)*x14578))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14581.value)*(((((-1.0)*x14573*x14574))+(((-1.0)*x14573*x14578))+((cj0*sj3*x14577))+(((-1.0)*x14573*x14580))+((r12*x14575))+(((-1.0)*cj0*gconst17*r20*x14576))))), ((x14582.value)*(((((-1.0)*x14580))+x14575+(((-1.0)*x14574))+(((-1.0)*x14578))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14583=IKsin(j4);
IkReal x14584=IKcos(j4);
IkReal x14585=((1.0)*gconst17);
IkReal x14586=(gconst17*sj3);
IkReal x14587=(gconst16*r21);
IkReal x14588=(cj3*gconst17);
IkReal x14589=(sj1*sj2);
IkReal x14590=((1.0)*sj0);
IkReal x14591=(gconst16*sj3);
IkReal x14592=(cj3*gconst16);
IkReal x14593=(cj2*sj1);
IkReal x14594=((1.0)*cj0);
IkReal x14595=((1.0)*sj3);
IkReal x14596=(cj1*sj2);
IkReal x14597=(cj3*x14584);
IkReal x14598=(gconst16*x14583);
IkReal x14599=((1.0)*x14584);
IkReal x14600=((1.0)*cj1*cj2);
IkReal x14601=(r02*x14583);
IkReal x14602=(r12*x14583);
evalcond[0]=((((-1.0)*r20*x14583*x14585))+((x14583*x14587)));
evalcond[1]=(cj0+(((-1.0)*r12*x14599))+((r11*x14598))+(((-1.0)*r10*x14583*x14585)));
evalcond[2]=((((-1.0)*r02*x14599))+(((-1.0)*x14590))+((r01*x14598))+(((-1.0)*r00*x14583*x14585)));
evalcond[3]=(((r20*x14591))+(((-1.0)*r20*x14585*x14597))+((x14587*x14597))+((r21*x14586))+x14596+x14593);
evalcond[4]=(((r20*x14592))+(((-1.0)*x14584*x14587*x14595))+((r20*x14584*x14586))+((r21*x14588))+x14589+(((-1.0)*x14600)));
evalcond[5]=((((-1.0)*cj1*cj2*x14594))+((r01*x14584*x14592))+(((-1.0)*r00*x14585*x14597))+((cj3*x14601))+((r01*x14586))+((r00*x14591))+((cj0*x14589)));
evalcond[6]=(((sj0*x14589))+(((-1.0)*cj1*cj2*x14590))+(((-1.0)*r10*x14585*x14597))+((r10*x14591))+((r11*x14584*x14592))+((cj3*x14602))+((r11*x14586)));
evalcond[7]=(((r00*x14584*x14586))+(((-1.0)*x14594*x14596))+(((-1.0)*x14595*x14601))+(((-1.0)*r01*x14591*x14599))+(((-1.0)*x14593*x14594))+((r01*x14588))+((r00*x14592)));
evalcond[8]=((((-1.0)*x14595*x14602))+((r10*x14584*x14586))+((r10*x14592))+((r11*x14588))+(((-1.0)*r11*x14591*x14599))+(((-1.0)*x14590*x14593))+(((-1.0)*x14590*x14596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14603=((1.0)*sj0);
IkReal x14604=((1.0)*cj0);
CheckValue<IkReal> x14605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14605.valid){
continue;
}
CheckValue<IkReal> x14606 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14603))+(((-1.0)*r02*x14604)))),IkReal(((((-1.0)*gconst16*r01*x14604))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14605.value)))+(x14606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14607=IKsin(j4);
IkReal x14608=IKcos(j4);
IkReal x14609=((1.0)*gconst17);
IkReal x14610=(gconst17*sj3);
IkReal x14611=(gconst16*r21);
IkReal x14612=(cj3*gconst17);
IkReal x14613=(sj1*sj2);
IkReal x14614=((1.0)*sj0);
IkReal x14615=(gconst16*sj3);
IkReal x14616=(cj3*gconst16);
IkReal x14617=(cj2*sj1);
IkReal x14618=((1.0)*cj0);
IkReal x14619=((1.0)*sj3);
IkReal x14620=(cj1*sj2);
IkReal x14621=(cj3*x14608);
IkReal x14622=(gconst16*x14607);
IkReal x14623=((1.0)*x14608);
IkReal x14624=((1.0)*cj1*cj2);
IkReal x14625=(r02*x14607);
IkReal x14626=(r12*x14607);
evalcond[0]=(((x14607*x14611))+(((-1.0)*r20*x14607*x14609)));
evalcond[1]=(cj0+((r11*x14622))+(((-1.0)*r10*x14607*x14609))+(((-1.0)*r12*x14623)));
evalcond[2]=((((-1.0)*r00*x14607*x14609))+(((-1.0)*r02*x14623))+((r01*x14622))+(((-1.0)*x14614)));
evalcond[3]=(((r21*x14610))+((x14611*x14621))+x14617+x14620+((r20*x14615))+(((-1.0)*r20*x14609*x14621)));
evalcond[4]=((((-1.0)*x14624))+((r21*x14612))+x14613+(((-1.0)*x14608*x14611*x14619))+((r20*x14616))+((r20*x14608*x14610)));
evalcond[5]=(((r01*x14608*x14616))+((cj3*x14625))+((cj0*x14613))+((r01*x14610))+(((-1.0)*cj1*cj2*x14618))+((r00*x14615))+(((-1.0)*r00*x14609*x14621)));
evalcond[6]=(((sj0*x14613))+((r10*x14615))+((cj3*x14626))+((r11*x14608*x14616))+(((-1.0)*r10*x14609*x14621))+(((-1.0)*cj1*cj2*x14614))+((r11*x14610)));
evalcond[7]=(((r00*x14608*x14610))+(((-1.0)*x14618*x14620))+(((-1.0)*x14619*x14625))+(((-1.0)*x14617*x14618))+(((-1.0)*r01*x14615*x14623))+((r01*x14612))+((r00*x14616)));
evalcond[8]=((((-1.0)*r11*x14615*x14623))+((r10*x14616))+(((-1.0)*x14619*x14626))+(((-1.0)*x14614*x14617))+(((-1.0)*x14614*x14620))+((r11*x14612))+((r10*x14608*x14610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14627=((1.0)*sj0);
IkReal x14628=((1.0)*cj0);
CheckValue<IkReal> x14629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14629.valid){
continue;
}
CheckValue<IkReal> x14630 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14628))+(((-1.0)*r12*x14627)))),IkReal(((((-1.0)*gconst16*r01*x14628))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14629.value)))+(x14630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14631=IKsin(j4);
IkReal x14632=IKcos(j4);
IkReal x14633=(cj3*gconst17);
IkReal x14634=(gconst16*r21);
IkReal x14635=(gconst17*sj3);
IkReal x14636=(gconst16*r20);
IkReal x14637=(sj1*sj2);
IkReal x14638=(gconst16*r10);
IkReal x14639=(cj2*sj1);
IkReal x14640=(gconst16*sj3);
IkReal x14641=((1.0)*cj0);
IkReal x14642=((1.0)*sj0);
IkReal x14643=(cj1*sj2);
IkReal x14644=((1.0)*x14632);
IkReal x14645=(gconst16*x14631);
IkReal x14646=(cj3*x14632);
IkReal x14647=(cj3*x14631);
IkReal x14648=((1.0)*cj1*cj2);
IkReal x14649=((1.0)*gconst17*x14631);
IkReal x14650=((1.0)*sj3*x14631);
evalcond[0]=((((-1.0)*r22*x14644))+((x14631*x14634))+(((-1.0)*r20*x14649)));
evalcond[1]=(((r11*x14645))+cj0+(((-1.0)*r12*x14644))+(((-1.0)*r10*x14649)));
evalcond[2]=(((r01*x14645))+(((-1.0)*r02*x14644))+(((-1.0)*x14642))+(((-1.0)*r00*x14649)));
evalcond[3]=(((sj3*x14636))+((r22*x14647))+x14643+x14639+((x14634*x14646))+((r21*x14635))+(((-1.0)*r20*x14633*x14644)));
evalcond[4]=((((-1.0)*sj3*x14634*x14644))+(((-1.0)*r22*x14650))+((cj3*x14636))+x14637+(((-1.0)*x14648))+((r21*x14633))+((r20*x14632*x14635)));
evalcond[5]=(((r00*x14640))+(((-1.0)*cj1*cj2*x14641))+((cj0*x14637))+((r01*x14635))+((r02*x14647))+(((-1.0)*r00*x14633*x14644))+((gconst16*r01*x14646)));
evalcond[6]=(((gconst16*r11*x14646))+((r12*x14647))+((sj3*x14638))+(((-1.0)*cj1*cj2*x14642))+((r11*x14635))+((sj0*x14637))+(((-1.0)*r10*x14633*x14644)));
evalcond[7]=((((-1.0)*x14641*x14643))+((r00*x14632*x14635))+(((-1.0)*r02*x14650))+((r01*x14633))+(((-1.0)*r01*x14640*x14644))+(((-1.0)*x14639*x14641))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r12*x14650))+((r10*x14632*x14635))+(((-1.0)*x14642*x14643))+((cj3*x14638))+((r11*x14633))+(((-1.0)*r11*x14640*x14644))+(((-1.0)*x14639*x14642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14651=((1.0)*gconst17);
CheckValue<IkReal> x14652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14651)))),-1);
if(!x14652.valid){
continue;
}
CheckValue<IkReal> x14653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14652.value)))+(x14653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14654=IKsin(j4);
IkReal x14655=IKcos(j4);
IkReal x14656=(cj3*gconst17);
IkReal x14657=(gconst16*r21);
IkReal x14658=(gconst17*sj3);
IkReal x14659=(gconst16*r20);
IkReal x14660=(sj1*sj2);
IkReal x14661=(gconst16*r10);
IkReal x14662=(cj2*sj1);
IkReal x14663=(gconst16*sj3);
IkReal x14664=((1.0)*cj0);
IkReal x14665=((1.0)*sj0);
IkReal x14666=(cj1*sj2);
IkReal x14667=((1.0)*x14655);
IkReal x14668=(gconst16*x14654);
IkReal x14669=(cj3*x14655);
IkReal x14670=(cj3*x14654);
IkReal x14671=((1.0)*cj1*cj2);
IkReal x14672=((1.0)*gconst17*x14654);
IkReal x14673=((1.0)*sj3*x14654);
evalcond[0]=(((x14654*x14657))+(((-1.0)*r22*x14667))+(((-1.0)*r20*x14672)));
evalcond[1]=(cj0+(((-1.0)*r10*x14672))+(((-1.0)*r12*x14667))+((r11*x14668)));
evalcond[2]=((((-1.0)*r00*x14672))+((r01*x14668))+(((-1.0)*r02*x14667))+(((-1.0)*x14665)));
evalcond[3]=(((x14657*x14669))+((sj3*x14659))+x14662+x14666+((r21*x14658))+((r22*x14670))+(((-1.0)*r20*x14656*x14667)));
evalcond[4]=((((-1.0)*sj3*x14657*x14667))+(((-1.0)*x14671))+(((-1.0)*r22*x14673))+x14660+((r21*x14656))+((cj3*x14659))+((r20*x14655*x14658)));
evalcond[5]=(((gconst16*r01*x14669))+((r02*x14670))+(((-1.0)*r00*x14656*x14667))+((r01*x14658))+((cj0*x14660))+((r00*x14663))+(((-1.0)*cj1*cj2*x14664)));
evalcond[6]=(((gconst16*r11*x14669))+((sj0*x14660))+(((-1.0)*r10*x14656*x14667))+(((-1.0)*cj1*cj2*x14665))+((r12*x14670))+((sj3*x14661))+((r11*x14658)));
evalcond[7]=((((-1.0)*x14664*x14666))+(((-1.0)*r01*x14663*x14667))+((r01*x14656))+(((-1.0)*r02*x14673))+((r00*x14655*x14658))+(((-1.0)*x14662*x14664))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x14655*x14658))+(((-1.0)*r11*x14663*x14667))+((cj3*x14661))+(((-1.0)*r12*x14673))+(((-1.0)*x14665*x14666))+(((-1.0)*x14662*x14665))+((r11*x14656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14674=((1.0)*gconst17);
CheckValue<IkReal> x14675 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14674))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14675.valid){
continue;
}
CheckValue<IkReal> x14676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14674)))),-1);
if(!x14676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14675.value)+(((1.5707963267949)*(x14676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14677=IKsin(j4);
IkReal x14678=IKcos(j4);
IkReal x14679=(cj3*gconst17);
IkReal x14680=(gconst16*r21);
IkReal x14681=(gconst17*sj3);
IkReal x14682=(gconst16*r20);
IkReal x14683=(sj1*sj2);
IkReal x14684=(gconst16*r10);
IkReal x14685=(cj2*sj1);
IkReal x14686=(gconst16*sj3);
IkReal x14687=((1.0)*cj0);
IkReal x14688=((1.0)*sj0);
IkReal x14689=(cj1*sj2);
IkReal x14690=((1.0)*x14678);
IkReal x14691=(gconst16*x14677);
IkReal x14692=(cj3*x14678);
IkReal x14693=(cj3*x14677);
IkReal x14694=((1.0)*cj1*cj2);
IkReal x14695=((1.0)*gconst17*x14677);
IkReal x14696=((1.0)*sj3*x14677);
evalcond[0]=((((-1.0)*r20*x14695))+((x14677*x14680))+(((-1.0)*r22*x14690)));
evalcond[1]=(cj0+((r11*x14691))+(((-1.0)*r12*x14690))+(((-1.0)*r10*x14695)));
evalcond[2]=((((-1.0)*r00*x14695))+((r01*x14691))+(((-1.0)*r02*x14690))+(((-1.0)*x14688)));
evalcond[3]=(((r22*x14693))+((sj3*x14682))+((x14680*x14692))+x14685+x14689+(((-1.0)*r20*x14679*x14690))+((r21*x14681)));
evalcond[4]=(((cj3*x14682))+(((-1.0)*sj3*x14680*x14690))+((r21*x14679))+(((-1.0)*x14694))+(((-1.0)*r22*x14696))+x14683+((r20*x14678*x14681)));
evalcond[5]=(((r00*x14686))+((r01*x14681))+(((-1.0)*cj1*cj2*x14687))+((r02*x14693))+((gconst16*r01*x14692))+(((-1.0)*r00*x14679*x14690))+((cj0*x14683)));
evalcond[6]=(((sj3*x14684))+(((-1.0)*cj1*cj2*x14688))+((r11*x14681))+((r12*x14693))+((gconst16*r11*x14692))+((sj0*x14683))+(((-1.0)*r10*x14679*x14690)));
evalcond[7]=((((-1.0)*x14687*x14689))+(((-1.0)*r02*x14696))+((r01*x14679))+(((-1.0)*x14685*x14687))+((r00*x14678*x14681))+(((-1.0)*r01*x14686*x14690))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14686*x14690))+((cj3*x14684))+((r10*x14678*x14681))+(((-1.0)*x14685*x14688))+((r11*x14679))+(((-1.0)*r12*x14696))+(((-1.0)*x14688*x14689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14697=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14697;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14698=((1.0)*cj5);
IkReal x14699=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14698)));
j4eval[0]=x14699;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14698))))));
j4eval[2]=IKsign(x14699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14700=cj5*cj5;
IkReal x14701=(cj3*r01);
IkReal x14702=(cj5*sj5);
IkReal x14703=((1.0)*cj3);
IkReal x14704=((((-1.0)*r21*x14701))+(((-1.0)*r02*r22*x14703))+((cj3*r00*r21*x14702))+((r20*x14701*x14702))+((r21*x14700*x14701))+(((-1.0)*r00*r20*x14700*x14703)));
j4eval[0]=x14704;
j4eval[1]=IKsign(x14704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14705=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14705;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14706=((1.0)*cj5);
IkReal x14707=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14706)));
j4eval[0]=x14707;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14706)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14708=cj5*cj5;
IkReal x14709=r01*r01;
IkReal x14710=(r01*sj5);
IkReal x14711=(cj5*r00);
IkReal x14712=((((-1.0)*x14709))+((x14708*x14709))+(((-1.0)*(r02*r02)))+(((-1.0)*x14708*(r00*r00)))+(((2.0)*x14710*x14711)));
j4eval[0]=x14712;
j4eval[1]=IKsign(x14712);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14710))+x14711))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14713=cj5*cj5;
IkReal x14714=r01*r01;
IkReal x14715=(r01*sj5);
IkReal x14716=(cj5*r00);
CheckValue<IkReal> x14717=IKPowWithIntegerCheck(IKsign(((((2.0)*x14715*x14716))+(((-1.0)*(r02*r02)))+(((-1.0)*x14713*(r00*r00)))+((x14713*x14714))+(((-1.0)*x14714)))),-1);
if(!x14717.valid){
continue;
}
CheckValue<IkReal> x14718 = IKatan2WithCheck(IkReal(((((-1.0)*x14715))+x14716)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14717.value)))+(x14718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14719=IKsin(j4);
IkReal x14720=IKcos(j4);
IkReal x14721=(cj5*r10);
IkReal x14722=(r01*sj5);
IkReal x14723=((1.0)*cj2);
IkReal x14724=(cj5*r00);
IkReal x14725=(cj5*r20);
IkReal x14726=((1.0)*x14720);
IkReal x14727=((1.0)*x14719);
IkReal x14728=(sj5*x14719);
evalcond[0]=(((r21*x14728))+(((-1.0)*r22*x14726))+(((-1.0)*x14725*x14727)));
evalcond[1]=((((-1.0)*r12*x14726))+(((-1.0)*x14721*x14727))+((r11*x14728)));
evalcond[2]=((((-1.0)*x14722*x14726))+((x14720*x14724))+(((-1.0)*r02*x14727)));
evalcond[3]=((-1.0)+((x14719*x14722))+(((-1.0)*r02*x14726))+(((-1.0)*x14724*x14727)));
evalcond[4]=((((-1.0)*r21*sj5*x14726))+((x14720*x14725))+((sj1*sj2))+(((-1.0)*cj1*x14723))+(((-1.0)*r22*x14727)));
evalcond[5]=((((-1.0)*r12*x14727))+(((-1.0)*sj1*x14723))+((x14720*x14721))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14729=((1.0)*cj5);
CheckValue<IkReal> x14730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14729))+(((-1.0)*r10*sj5)))),-1);
if(!x14730.valid){
continue;
}
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14729))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14730.value)))+(x14731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14732=IKsin(j4);
IkReal x14733=IKcos(j4);
IkReal x14734=(cj5*r10);
IkReal x14735=(r01*sj5);
IkReal x14736=((1.0)*cj2);
IkReal x14737=(cj5*r00);
IkReal x14738=(cj5*r20);
IkReal x14739=((1.0)*x14733);
IkReal x14740=((1.0)*x14732);
IkReal x14741=(sj5*x14732);
evalcond[0]=((((-1.0)*x14738*x14740))+((r21*x14741))+(((-1.0)*r22*x14739)));
evalcond[1]=((((-1.0)*r12*x14739))+((r11*x14741))+(((-1.0)*x14734*x14740)));
evalcond[2]=((((-1.0)*r02*x14740))+((x14733*x14737))+(((-1.0)*x14735*x14739)));
evalcond[3]=((-1.0)+((x14732*x14735))+(((-1.0)*r02*x14739))+(((-1.0)*x14737*x14740)));
evalcond[4]=((((-1.0)*r21*sj5*x14739))+((x14733*x14738))+((sj1*sj2))+(((-1.0)*r22*x14740))+(((-1.0)*cj1*x14736)));
evalcond[5]=((((-1.0)*sj1*x14736))+((x14733*x14734))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14739))+(((-1.0)*r12*x14740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14742=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14742.valid){
continue;
}
CheckValue<IkReal> x14743 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14742.value)))+(x14743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14744=IKsin(j4);
IkReal x14745=IKcos(j4);
IkReal x14746=(cj5*r10);
IkReal x14747=(r01*sj5);
IkReal x14748=((1.0)*cj2);
IkReal x14749=(cj5*r00);
IkReal x14750=(cj5*r20);
IkReal x14751=((1.0)*x14745);
IkReal x14752=((1.0)*x14744);
IkReal x14753=(sj5*x14744);
evalcond[0]=((((-1.0)*x14750*x14752))+((r21*x14753))+(((-1.0)*r22*x14751)));
evalcond[1]=((((-1.0)*r12*x14751))+(((-1.0)*x14746*x14752))+((r11*x14753)));
evalcond[2]=(((x14745*x14749))+(((-1.0)*r02*x14752))+(((-1.0)*x14747*x14751)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14751))+(((-1.0)*x14749*x14752))+((x14744*x14747)));
evalcond[4]=(((x14745*x14750))+(((-1.0)*r21*sj5*x14751))+((sj1*sj2))+(((-1.0)*cj1*x14748))+(((-1.0)*r22*x14752)));
evalcond[5]=((((-1.0)*r11*sj5*x14751))+(((-1.0)*r12*x14752))+(((-1.0)*cj1*sj2))+((x14745*x14746))+(((-1.0)*sj1*x14748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14754=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14754;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14755=((1.0)*cj5);
IkReal x14756=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14755)));
j4eval[0]=x14756;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14755))+((r21*sj5))))));
j4eval[2]=IKsign(x14756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14757=cj5*cj5;
IkReal x14758=r01*r01;
IkReal x14759=(cj5*r00);
IkReal x14760=(r01*sj5);
IkReal x14761=((((-2.0)*x14759*x14760))+x14758+(((-1.0)*x14757*x14758))+(r02*r02)+((x14757*(r00*r00))));
j4eval[0]=x14761;
j4eval[1]=IKsign(x14761);
j4eval[2]=((IKabs(r02))+(IKabs((x14760+(((-1.0)*x14759))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14762=cj5*cj5;
IkReal x14763=r01*r01;
IkReal x14764=(r01*sj5);
IkReal x14765=(cj5*r00);
CheckValue<IkReal> x14766=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14762*x14763))+((x14762*(r00*r00)))+x14763+(r02*r02)+(((-2.0)*x14764*x14765)))),-1);
if(!x14766.valid){
continue;
}
CheckValue<IkReal> x14767 = IKatan2WithCheck(IkReal(((((-1.0)*x14765))+x14764)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14766.value)))+(x14767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14768=IKcos(j4);
IkReal x14769=IKsin(j4);
IkReal x14770=(cj5*r00);
IkReal x14771=(cj5*r10);
IkReal x14772=(r21*sj5);
IkReal x14773=((1.0)*cj2);
IkReal x14774=(cj5*r20);
IkReal x14775=((1.0)*x14768);
IkReal x14776=((1.0)*x14769);
IkReal x14777=(sj5*x14769);
IkReal x14778=(sj5*x14768);
evalcond[0]=((((-1.0)*x14770*x14775))+((r01*x14778))+((r02*x14769)));
evalcond[1]=(((x14769*x14772))+(((-1.0)*r22*x14775))+(((-1.0)*x14774*x14776)));
evalcond[2]=((((-1.0)*x14771*x14776))+((r11*x14777))+(((-1.0)*r12*x14775)));
evalcond[3]=((-1.0)+(((-1.0)*x14770*x14776))+(((-1.0)*r02*x14775))+((r01*x14777)));
evalcond[4]=(((sj1*sj2))+((x14768*x14772))+(((-1.0)*cj1*x14773))+(((-1.0)*x14774*x14775))+((r22*x14769)));
evalcond[5]=((((-1.0)*x14771*x14775))+((r11*x14778))+(((-1.0)*cj1*sj2))+((r12*x14769))+(((-1.0)*sj1*x14773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14779=((1.0)*cj5);
CheckValue<IkReal> x14780 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14780.valid){
continue;
}
CheckValue<IkReal> x14781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14779)))),-1);
if(!x14781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14780.value)+(((1.5707963267949)*(x14781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14782=IKcos(j4);
IkReal x14783=IKsin(j4);
IkReal x14784=(cj5*r00);
IkReal x14785=(cj5*r10);
IkReal x14786=(r21*sj5);
IkReal x14787=((1.0)*cj2);
IkReal x14788=(cj5*r20);
IkReal x14789=((1.0)*x14782);
IkReal x14790=((1.0)*x14783);
IkReal x14791=(sj5*x14783);
IkReal x14792=(sj5*x14782);
evalcond[0]=(((r01*x14792))+(((-1.0)*x14784*x14789))+((r02*x14783)));
evalcond[1]=((((-1.0)*x14788*x14790))+((x14783*x14786))+(((-1.0)*r22*x14789)));
evalcond[2]=(((r11*x14791))+(((-1.0)*r12*x14789))+(((-1.0)*x14785*x14790)));
evalcond[3]=((-1.0)+((r01*x14791))+(((-1.0)*x14784*x14790))+(((-1.0)*r02*x14789)));
evalcond[4]=((((-1.0)*x14788*x14789))+((x14782*x14786))+((sj1*sj2))+(((-1.0)*cj1*x14787))+((r22*x14783)));
evalcond[5]=((((-1.0)*x14785*x14789))+(((-1.0)*sj1*x14787))+(((-1.0)*cj1*sj2))+((r11*x14792))+((r12*x14783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14793=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14793.valid){
continue;
}
CheckValue<IkReal> x14794 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14793.value)))+(x14794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14795=IKcos(j4);
IkReal x14796=IKsin(j4);
IkReal x14797=(cj5*r00);
IkReal x14798=(cj5*r10);
IkReal x14799=(r21*sj5);
IkReal x14800=((1.0)*cj2);
IkReal x14801=(cj5*r20);
IkReal x14802=((1.0)*x14795);
IkReal x14803=((1.0)*x14796);
IkReal x14804=(sj5*x14796);
IkReal x14805=(sj5*x14795);
evalcond[0]=((((-1.0)*x14797*x14802))+((r01*x14805))+((r02*x14796)));
evalcond[1]=(((x14796*x14799))+(((-1.0)*r22*x14802))+(((-1.0)*x14801*x14803)));
evalcond[2]=((((-1.0)*r12*x14802))+((r11*x14804))+(((-1.0)*x14798*x14803)));
evalcond[3]=((-1.0)+(((-1.0)*x14797*x14803))+((r01*x14804))+(((-1.0)*r02*x14802)));
evalcond[4]=((((-1.0)*x14801*x14802))+((sj1*sj2))+((x14795*x14799))+((r22*x14796))+(((-1.0)*cj1*x14800)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x14796))+((r11*x14805))+(((-1.0)*sj1*x14800))+(((-1.0)*x14798*x14802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14807 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14807)==0){
continue;
}
IkReal x14806=pow(x14807,-0.5);
CheckValue<IkReal> x14808 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14808.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14808.value));
IkReal gconst49=((-1.0)*r21*x14806);
IkReal gconst50=(r20*x14806);
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14809.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14812 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14812.valid){
continue;
}
IkReal x14810=((-1.0)*(x14812.value));
IkReal x14811=x14806;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14810;
IkReal gconst48=x14810;
IkReal gconst49=((-1.0)*r21*x14811);
IkReal gconst50=(r20*x14811);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14815 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14815.valid){
continue;
}
IkReal x14813=((-1.0)*(x14815.value));
IkReal x14814=x14806;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14813;
IkReal gconst48=x14813;
IkReal gconst49=((-1.0)*r21*x14814);
IkReal gconst50=(r20*x14814);
CheckValue<IkReal> x14823=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14823.valid){
continue;
}
IkReal x14816=x14823.value;
IkReal x14817=(sj3*x14816);
IkReal x14818=(r11*x14817);
IkReal x14819=(r00*x14817);
IkReal x14820=(r01*x14817);
IkReal x14821=(r10*x14817);
IkReal x14822=(r20*r21*x14817);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14818))+((r01*x14818*(r21*r21)))+((r10*x14819*(r20*r20)))+((r10*r20*r21*x14820))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14824=gconst49*gconst49;
IkReal x14825=gconst50*gconst50;
IkReal x14826=((1.0)*cj3);
IkReal x14827=(gconst50*r01);
IkReal x14828=(gconst49*r10);
IkReal x14829=(r12*sj3);
IkReal x14830=(gconst49*r00);
IkReal x14831=(r00*sj3);
IkReal x14832=(r11*x14824);
IkReal x14833=(r10*x14825);
CheckValue<IkReal> x14834 = IKatan2WithCheck(IkReal((((x14827*x14829))+((x14829*x14830)))),IkReal(((((-1.0)*gconst50*x14828*x14831))+(((-1.0)*r01*sj3*x14833))+((x14831*x14832))+((gconst49*r11*sj3*x14827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14834.valid){
continue;
}
CheckValue<IkReal> x14835=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14830))+((cj3*x14827*x14828))+(((-1.0)*r02*r12*x14826))+(((-1.0)*r01*x14826*x14832))+(((-1.0)*r00*x14826*x14833)))),-1);
if(!x14835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14834.value)+(((1.5707963267949)*(x14835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14836=IKsin(j4);
IkReal x14837=IKcos(j4);
IkReal x14838=(sj1*sj2);
IkReal x14839=(gconst50*r20);
IkReal x14840=(gconst50*sj3);
IkReal x14841=(cj3*r01);
IkReal x14842=(gconst50*r10);
IkReal x14843=(gconst49*sj3);
IkReal x14844=((1.0)*cj2);
IkReal x14845=(cj1*sj2);
IkReal x14846=(cj3*r11);
IkReal x14847=(gconst50*r00);
IkReal x14848=(cj3*r21);
IkReal x14849=(cj3*gconst49);
IkReal x14850=(cj1*x14844);
IkReal x14851=((1.0)*x14837);
IkReal x14852=((1.0)*x14836);
IkReal x14853=(gconst49*x14836);
IkReal x14854=(gconst49*x14837);
IkReal x14855=(cj3*x14836);
evalcond[0]=(((r21*x14853))+(((-1.0)*x14839*x14852))+(((-1.0)*r22*x14851)));
evalcond[1]=((((-1.0)*x14842*x14852))+((r11*x14853))+(((-1.0)*r12*x14851)));
evalcond[2]=((-1.0)+(((-1.0)*x14847*x14852))+(((-1.0)*r02*x14851))+((r01*x14853)));
evalcond[3]=(((x14841*x14854))+((r02*x14855))+((r01*x14840))+((r00*x14843))+(((-1.0)*cj3*x14847*x14851)));
evalcond[4]=((((-1.0)*r02*sj3*x14852))+((r00*x14837*x14840))+((gconst50*x14841))+(((-1.0)*r01*x14843*x14851))+((r00*x14849)));
evalcond[5]=(((r20*x14843))+((cj2*sj1))+x14845+(((-1.0)*cj3*x14839*x14851))+((r22*x14855))+((x14848*x14854))+((r21*x14840)));
evalcond[6]=(x14838+((x14846*x14854))+((r11*x14840))+((r10*x14843))+((r12*x14855))+(((-1.0)*x14850))+(((-1.0)*cj3*x14842*x14851)));
evalcond[7]=((((-1.0)*r21*x14843*x14851))+((r20*x14849))+(((-1.0)*r22*sj3*x14852))+x14838+((sj3*x14837*x14839))+((gconst50*x14848))+(((-1.0)*x14850)));
evalcond[8]=((((-1.0)*r11*x14843*x14851))+(((-1.0)*x14845))+(((-1.0)*sj1*x14844))+((r10*x14837*x14840))+((gconst50*x14846))+((r10*x14849))+(((-1.0)*r12*sj3*x14852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14856=gconst49*gconst49;
IkReal x14857=gconst50*gconst50;
IkReal x14858=(cj3*r12);
IkReal x14859=(gconst49*r00);
IkReal x14860=(r01*r11);
IkReal x14861=(r00*r11);
IkReal x14862=(cj3*gconst50);
IkReal x14863=((1.0)*r01*r10);
IkReal x14864=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14865 = IKatan2WithCheck(IkReal((((x14858*x14859))+((gconst50*r01*x14858)))),IkReal(((((-1.0)*cj3*x14857*x14863))+((gconst49*x14860*x14862))+(((-1.0)*r10*x14859*x14862))+((cj3*x14856*x14861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14865.valid){
continue;
}
CheckValue<IkReal> x14866=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14859))+((sj3*x14856*x14860))+(((-1.0)*x14863*x14864))+((r00*r10*sj3*x14857)))),-1);
if(!x14866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14865.value)+(((1.5707963267949)*(x14866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14867=IKsin(j4);
IkReal x14868=IKcos(j4);
IkReal x14869=(sj1*sj2);
IkReal x14870=(gconst50*r20);
IkReal x14871=(gconst50*sj3);
IkReal x14872=(cj3*r01);
IkReal x14873=(gconst50*r10);
IkReal x14874=(gconst49*sj3);
IkReal x14875=((1.0)*cj2);
IkReal x14876=(cj1*sj2);
IkReal x14877=(cj3*r11);
IkReal x14878=(gconst50*r00);
IkReal x14879=(cj3*r21);
IkReal x14880=(cj3*gconst49);
IkReal x14881=(cj1*x14875);
IkReal x14882=((1.0)*x14868);
IkReal x14883=((1.0)*x14867);
IkReal x14884=(gconst49*x14867);
IkReal x14885=(gconst49*x14868);
IkReal x14886=(cj3*x14867);
evalcond[0]=((((-1.0)*r22*x14882))+((r21*x14884))+(((-1.0)*x14870*x14883)));
evalcond[1]=((((-1.0)*x14873*x14883))+((r11*x14884))+(((-1.0)*r12*x14882)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14882))+(((-1.0)*x14878*x14883))+((r01*x14884)));
evalcond[3]=(((x14872*x14885))+((r00*x14874))+((r01*x14871))+(((-1.0)*cj3*x14878*x14882))+((r02*x14886)));
evalcond[4]=(((r00*x14868*x14871))+((r00*x14880))+((gconst50*x14872))+(((-1.0)*r02*sj3*x14883))+(((-1.0)*r01*x14874*x14882)));
evalcond[5]=(((cj2*sj1))+((x14879*x14885))+((r22*x14886))+x14876+((r21*x14871))+((r20*x14874))+(((-1.0)*cj3*x14870*x14882)));
evalcond[6]=(((r11*x14871))+(((-1.0)*cj3*x14873*x14882))+((r10*x14874))+((r12*x14886))+x14869+((x14877*x14885))+(((-1.0)*x14881)));
evalcond[7]=((((-1.0)*r22*sj3*x14883))+x14869+((sj3*x14868*x14870))+((gconst50*x14879))+(((-1.0)*x14881))+(((-1.0)*r21*x14874*x14882))+((r20*x14880)));
evalcond[8]=(((r10*x14880))+(((-1.0)*r12*sj3*x14883))+((r10*x14868*x14871))+((gconst50*x14877))+(((-1.0)*r11*x14874*x14882))+(((-1.0)*x14876))+(((-1.0)*sj1*x14875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14887=((1.0)*gconst50);
CheckValue<IkReal> x14888 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14888.valid){
continue;
}
CheckValue<IkReal> x14889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14887)))),-1);
if(!x14889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14888.value)+(((1.5707963267949)*(x14889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14890=IKsin(j4);
IkReal x14891=IKcos(j4);
IkReal x14892=(sj1*sj2);
IkReal x14893=(gconst50*r20);
IkReal x14894=(gconst50*sj3);
IkReal x14895=(cj3*r01);
IkReal x14896=(gconst50*r10);
IkReal x14897=(gconst49*sj3);
IkReal x14898=((1.0)*cj2);
IkReal x14899=(cj1*sj2);
IkReal x14900=(cj3*r11);
IkReal x14901=(gconst50*r00);
IkReal x14902=(cj3*r21);
IkReal x14903=(cj3*gconst49);
IkReal x14904=(cj1*x14898);
IkReal x14905=((1.0)*x14891);
IkReal x14906=((1.0)*x14890);
IkReal x14907=(gconst49*x14890);
IkReal x14908=(gconst49*x14891);
IkReal x14909=(cj3*x14890);
evalcond[0]=((((-1.0)*x14893*x14906))+((r21*x14907))+(((-1.0)*r22*x14905)));
evalcond[1]=((((-1.0)*r12*x14905))+((r11*x14907))+(((-1.0)*x14896*x14906)));
evalcond[2]=((-1.0)+((r01*x14907))+(((-1.0)*r02*x14905))+(((-1.0)*x14901*x14906)));
evalcond[3]=(((x14895*x14908))+((r01*x14894))+((r00*x14897))+((r02*x14909))+(((-1.0)*cj3*x14901*x14905)));
evalcond[4]=(((r00*x14903))+((gconst50*x14895))+((r00*x14891*x14894))+(((-1.0)*r01*x14897*x14905))+(((-1.0)*r02*sj3*x14906)));
evalcond[5]=(((r22*x14909))+((cj2*sj1))+((x14902*x14908))+x14899+((r21*x14894))+((r20*x14897))+(((-1.0)*cj3*x14893*x14905)));
evalcond[6]=(((r10*x14897))+((r11*x14894))+(((-1.0)*x14904))+x14892+((r12*x14909))+((x14900*x14908))+(((-1.0)*cj3*x14896*x14905)));
evalcond[7]=((((-1.0)*x14904))+x14892+(((-1.0)*r21*x14897*x14905))+(((-1.0)*r22*sj3*x14906))+((sj3*x14891*x14893))+((r20*x14903))+((gconst50*x14902)));
evalcond[8]=((((-1.0)*sj1*x14898))+((r10*x14891*x14894))+(((-1.0)*r11*x14897*x14905))+((gconst50*x14900))+(((-1.0)*x14899))+(((-1.0)*r12*sj3*x14906))+((r10*x14903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14911 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14911)==0){
continue;
}
IkReal x14910=pow(x14911,-0.5);
CheckValue<IkReal> x14912 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14912.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14912.value))));
IkReal gconst52=((1.0)*r21*x14910);
IkReal gconst53=((-1.0)*r20*x14910);
CheckValue<IkReal> x14913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14913.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14913.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14916 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14916.valid){
continue;
}
IkReal x14914=((1.0)*(x14916.value));
IkReal x14915=x14910;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14914)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14914)));
IkReal gconst52=((1.0)*r21*x14915);
IkReal gconst53=((-1.0)*r20*x14915);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14919 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14919.valid){
continue;
}
IkReal x14917=((1.0)*(x14919.value));
IkReal x14918=x14910;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14917)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14917)));
IkReal gconst52=((1.0)*r21*x14918);
IkReal gconst53=((-1.0)*r20*x14918);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14922 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14922.valid){
continue;
}
IkReal x14920=((1.0)*(x14922.value));
IkReal x14921=x14910;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14920)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14920)));
IkReal gconst52=((1.0)*r21*x14921);
IkReal gconst53=((-1.0)*r20*x14921);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14923=gconst52*gconst52;
IkReal x14924=gconst53*gconst53;
IkReal x14925=(gconst53*r01);
IkReal x14926=(cj3*r20);
IkReal x14927=(r22*sj3);
IkReal x14928=((1.0)*cj3);
IkReal x14929=(gconst52*sj3);
IkReal x14930=((1.0)*r00);
IkReal x14931=(gconst52*r00);
IkReal x14932=(r21*x14923);
CheckValue<IkReal> x14933 = IKatan2WithCheck(IkReal((((x14925*x14927))+((x14927*x14931)))),IkReal((((r00*sj3*x14932))+(((-1.0)*gconst53*r20*x14929*x14930))+(((-1.0)*r01*r20*sj3*x14924))+((r21*x14925*x14929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14933.valid){
continue;
}
CheckValue<IkReal> x14934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14928*x14932))+(((-1.0)*x14924*x14926*x14930))+((cj3*gconst53*r21*x14931))+((gconst52*x14925*x14926))+(((-1.0)*r02*r22*x14928)))),-1);
if(!x14934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14933.value)+(((1.5707963267949)*(x14934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14935=IKsin(j4);
IkReal x14936=IKcos(j4);
IkReal x14937=(sj1*sj2);
IkReal x14938=((1.0)*cj1);
IkReal x14939=(cj3*gconst52);
IkReal x14940=(gconst53*sj3);
IkReal x14941=(cj3*gconst53);
IkReal x14942=(cj2*sj1);
IkReal x14943=(gconst52*sj3);
IkReal x14944=(cj2*x14938);
IkReal x14945=((1.0)*x14936);
IkReal x14946=((1.0)*x14935);
IkReal x14947=(gconst52*x14935);
IkReal x14948=(cj3*x14935);
evalcond[0]=((((-1.0)*gconst53*r20*x14946))+((r21*x14947))+(((-1.0)*r22*x14945)));
evalcond[1]=((((-1.0)*r12*x14945))+(((-1.0)*gconst53*r10*x14946))+((r11*x14947)));
evalcond[2]=((-1.0)+((r01*x14947))+(((-1.0)*r02*x14945))+(((-1.0)*gconst53*r00*x14946)));
evalcond[3]=((((-1.0)*r00*x14941*x14945))+((r00*x14943))+((r01*x14940))+((r02*x14948))+((r01*x14936*x14939)));
evalcond[4]=((((-1.0)*r02*sj3*x14946))+(((-1.0)*r01*x14943*x14945))+((r01*x14941))+((r00*x14939))+((r00*x14936*x14940)));
evalcond[5]=(x14942+((r22*x14948))+((cj1*sj2))+(((-1.0)*r20*x14941*x14945))+((r21*x14936*x14939))+((r21*x14940))+((r20*x14943)));
evalcond[6]=(((r12*x14948))+x14937+((r10*x14943))+((r11*x14936*x14939))+(((-1.0)*r10*x14941*x14945))+(((-1.0)*x14944))+((r11*x14940)));
evalcond[7]=((((-1.0)*r21*x14943*x14945))+x14937+((r20*x14936*x14940))+(((-1.0)*x14944))+(((-1.0)*r22*sj3*x14946))+((r21*x14941))+((r20*x14939)));
evalcond[8]=((((-1.0)*r12*sj3*x14946))+((r10*x14936*x14940))+(((-1.0)*r11*x14943*x14945))+((r10*x14939))+(((-1.0)*x14942))+(((-1.0)*sj2*x14938))+((r11*x14941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14949=((1.0)*gconst53);
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14949))+(((-1.0)*gconst52*r10)))),-1);
if(!x14950.valid){
continue;
}
CheckValue<IkReal> x14951 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14949))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14950.value)))+(x14951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14952=IKsin(j4);
IkReal x14953=IKcos(j4);
IkReal x14954=(sj1*sj2);
IkReal x14955=((1.0)*cj1);
IkReal x14956=(cj3*gconst52);
IkReal x14957=(gconst53*sj3);
IkReal x14958=(cj3*gconst53);
IkReal x14959=(cj2*sj1);
IkReal x14960=(gconst52*sj3);
IkReal x14961=(cj2*x14955);
IkReal x14962=((1.0)*x14953);
IkReal x14963=((1.0)*x14952);
IkReal x14964=(gconst52*x14952);
IkReal x14965=(cj3*x14952);
evalcond[0]=((((-1.0)*r22*x14962))+((r21*x14964))+(((-1.0)*gconst53*r20*x14963)));
evalcond[1]=((((-1.0)*r12*x14962))+((r11*x14964))+(((-1.0)*gconst53*r10*x14963)));
evalcond[2]=((-1.0)+((r01*x14964))+(((-1.0)*r02*x14962))+(((-1.0)*gconst53*r00*x14963)));
evalcond[3]=(((r01*x14957))+((r02*x14965))+(((-1.0)*r00*x14958*x14962))+((r01*x14953*x14956))+((r00*x14960)));
evalcond[4]=(((r00*x14953*x14957))+((r01*x14958))+(((-1.0)*r02*sj3*x14963))+((r00*x14956))+(((-1.0)*r01*x14960*x14962)));
evalcond[5]=(((r22*x14965))+x14959+((cj1*sj2))+((r21*x14957))+((r20*x14960))+((r21*x14953*x14956))+(((-1.0)*r20*x14958*x14962)));
evalcond[6]=(x14954+((r12*x14965))+((r11*x14953*x14956))+(((-1.0)*x14961))+(((-1.0)*r10*x14958*x14962))+((r10*x14960))+((r11*x14957)));
evalcond[7]=(x14954+(((-1.0)*r22*sj3*x14963))+(((-1.0)*x14961))+((r20*x14953*x14957))+((r21*x14958))+((r20*x14956))+(((-1.0)*r21*x14960*x14962)));
evalcond[8]=((((-1.0)*sj2*x14955))+((r10*x14956))+(((-1.0)*r11*x14960*x14962))+(((-1.0)*x14959))+((r10*x14953*x14957))+(((-1.0)*r12*sj3*x14963))+((r11*x14958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14966 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14966.valid){
continue;
}
CheckValue<IkReal> x14967=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14966.value)+(((1.5707963267949)*(x14967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14968=IKsin(j4);
IkReal x14969=IKcos(j4);
IkReal x14970=(sj1*sj2);
IkReal x14971=((1.0)*cj1);
IkReal x14972=(cj3*gconst52);
IkReal x14973=(gconst53*sj3);
IkReal x14974=(cj3*gconst53);
IkReal x14975=(cj2*sj1);
IkReal x14976=(gconst52*sj3);
IkReal x14977=(cj2*x14971);
IkReal x14978=((1.0)*x14969);
IkReal x14979=((1.0)*x14968);
IkReal x14980=(gconst52*x14968);
IkReal x14981=(cj3*x14968);
evalcond[0]=((((-1.0)*gconst53*r20*x14979))+(((-1.0)*r22*x14978))+((r21*x14980)));
evalcond[1]=((((-1.0)*r12*x14978))+((r11*x14980))+(((-1.0)*gconst53*r10*x14979)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14979))+((r01*x14980))+(((-1.0)*r02*x14978)));
evalcond[3]=(((r01*x14969*x14972))+(((-1.0)*r00*x14974*x14978))+((r02*x14981))+((r01*x14973))+((r00*x14976)));
evalcond[4]=((((-1.0)*r02*sj3*x14979))+(((-1.0)*r01*x14976*x14978))+((r01*x14974))+((r00*x14969*x14973))+((r00*x14972)));
evalcond[5]=(x14975+((cj1*sj2))+((r21*x14969*x14972))+(((-1.0)*r20*x14974*x14978))+((r22*x14981))+((r20*x14976))+((r21*x14973)));
evalcond[6]=((((-1.0)*r10*x14974*x14978))+x14970+(((-1.0)*x14977))+((r11*x14973))+((r11*x14969*x14972))+((r12*x14981))+((r10*x14976)));
evalcond[7]=((((-1.0)*r22*sj3*x14979))+(((-1.0)*r21*x14976*x14978))+x14970+(((-1.0)*x14977))+((r20*x14969*x14973))+((r20*x14972))+((r21*x14974)));
evalcond[8]=((((-1.0)*sj2*x14971))+(((-1.0)*x14975))+((r11*x14974))+(((-1.0)*r11*x14976*x14978))+((r10*x14969*x14973))+(((-1.0)*r12*sj3*x14979))+((r10*x14972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14982=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14982);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14982);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14983=(r01*sj5);
IkReal x14984=((1.0)*cj5*r00);
j4eval[0]=(x14983+(((-1.0)*x14984)));
j4eval[1]=((((-1.0)*cj3*x14984))+((cj3*x14983)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14985=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14985);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14985);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14986=(cj5*r00);
IkReal x14987=(r01*sj5);
j4eval[0]=(x14987+(((-1.0)*x14986)));
j4eval[1]=(((sj3*x14986))+(((-1.0)*sj3*x14987)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14988=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14988);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14988);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14989=((1.0)*r00);
CheckValue<IkReal> x14990=IKPowWithIntegerCheck(cj3,-1);
if(!x14990.valid){
continue;
}
CheckValue<IkReal> x14991=IKPowWithIntegerCheck(r22,-1);
if(!x14991.valid){
continue;
}
CheckValue<IkReal> x14992=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14989))),-1);
if(!x14992.valid){
continue;
}
if( IKabs(((x14990.value)*(x14991.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14992.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14989)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14990.value)*(x14991.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14992.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14989))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14990.value)*(x14991.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14992.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14989))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14993=IKsin(j4);
IkReal x14994=IKcos(j4);
IkReal x14995=(sj1*sj2);
IkReal x14996=(cj5*sj3);
IkReal x14997=(r11*sj5);
IkReal x14998=(cj3*cj5);
IkReal x14999=((1.0)*cj1);
IkReal x15000=(cj3*sj5);
IkReal x15001=(sj3*sj5);
IkReal x15002=(cj2*sj1);
IkReal x15003=(r01*sj5);
IkReal x15004=((1.0)*sj3);
IkReal x15005=(cj2*x14999);
IkReal x15006=(r10*x14994);
IkReal x15007=(r22*x14993);
IkReal x15008=(cj3*x14994);
IkReal x15009=((1.0)*cj5*x14993);
evalcond[0]=((-1.0)*r22*x14994);
evalcond[1]=(((cj1*sj2))+x15002+((cj3*x15007)));
evalcond[2]=(((x14993*x14997))+(((-1.0)*r10*x15009)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15009))+((x14993*x15003)));
evalcond[4]=(x14995+(((-1.0)*x15004*x15007))+(((-1.0)*x15005)));
evalcond[5]=(((r00*x15001))+((r01*x14994*x15000))+(((-1.0)*r00*x14994*x14998))+((r01*x14996)));
evalcond[6]=(((r00*x15000))+((r00*x14994*x14996))+(((-1.0)*r01*x14994*x15001))+((r01*x14998)));
evalcond[7]=((((-1.0)*x14998*x15006))+x14995+((r10*x15001))+((r11*x14996))+((x14997*x15008))+(((-1.0)*x15005)));
evalcond[8]=(((x14996*x15006))+(((-1.0)*x15002))+(((-1.0)*x14994*x14997*x15004))+((r10*x15000))+((r11*x14998))+(((-1.0)*sj2*x14999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15010=((1.0)*cj3);
IkReal x15011=(cj5*r00);
IkReal x15012=(r01*sj5);
CheckValue<IkReal> x15013=IKPowWithIntegerCheck(((((-1.0)*x15011))+x15012),-1);
if(!x15013.valid){
continue;
}
CheckValue<IkReal> x15014=IKPowWithIntegerCheck((((sj3*x15011))+(((-1.0)*sj3*x15012))),-1);
if(!x15014.valid){
continue;
}
if( IKabs(x15013.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15014.value)*(((((-1.0)*r00*sj5*x15010))+(((-1.0)*cj5*r01*x15010)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15013.value)+IKsqr(((x15014.value)*(((((-1.0)*r00*sj5*x15010))+(((-1.0)*cj5*r01*x15010))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15013.value, ((x15014.value)*(((((-1.0)*r00*sj5*x15010))+(((-1.0)*cj5*r01*x15010))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15015=IKsin(j4);
IkReal x15016=IKcos(j4);
IkReal x15017=(sj1*sj2);
IkReal x15018=(cj5*sj3);
IkReal x15019=(r11*sj5);
IkReal x15020=(cj3*cj5);
IkReal x15021=((1.0)*cj1);
IkReal x15022=(cj3*sj5);
IkReal x15023=(sj3*sj5);
IkReal x15024=(cj2*sj1);
IkReal x15025=(r01*sj5);
IkReal x15026=((1.0)*sj3);
IkReal x15027=(cj2*x15021);
IkReal x15028=(r10*x15016);
IkReal x15029=(r22*x15015);
IkReal x15030=(cj3*x15016);
IkReal x15031=((1.0)*cj5*x15015);
evalcond[0]=((-1.0)*r22*x15016);
evalcond[1]=(((cj1*sj2))+x15024+((cj3*x15029)));
evalcond[2]=(((x15015*x15019))+(((-1.0)*r10*x15031)));
evalcond[3]=((-1.0)+((x15015*x15025))+(((-1.0)*r00*x15031)));
evalcond[4]=((((-1.0)*x15026*x15029))+x15017+(((-1.0)*x15027)));
evalcond[5]=(((r00*x15023))+((r01*x15016*x15022))+(((-1.0)*r00*x15016*x15020))+((r01*x15018)));
evalcond[6]=(((r00*x15022))+((r00*x15016*x15018))+(((-1.0)*r01*x15016*x15023))+((r01*x15020)));
evalcond[7]=(((r10*x15023))+((x15019*x15030))+x15017+(((-1.0)*x15027))+((r11*x15018))+(((-1.0)*x15020*x15028)));
evalcond[8]=((((-1.0)*x15016*x15019*x15026))+(((-1.0)*x15024))+((r10*x15022))+(((-1.0)*sj2*x15021))+((x15018*x15028))+((r11*x15020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15032=((1.0)*sj3);
IkReal x15033=(r01*sj5);
IkReal x15034=((1.0)*cj5*r00);
CheckValue<IkReal> x15035=IKPowWithIntegerCheck(((((-1.0)*x15034))+x15033),-1);
if(!x15035.valid){
continue;
}
CheckValue<IkReal> x15036=IKPowWithIntegerCheck((((cj3*x15033))+(((-1.0)*cj3*x15034))),-1);
if(!x15036.valid){
continue;
}
if( IKabs(x15035.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15036.value)*(((((-1.0)*r00*sj5*x15032))+(((-1.0)*cj5*r01*x15032)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15035.value)+IKsqr(((x15036.value)*(((((-1.0)*r00*sj5*x15032))+(((-1.0)*cj5*r01*x15032))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15035.value, ((x15036.value)*(((((-1.0)*r00*sj5*x15032))+(((-1.0)*cj5*r01*x15032))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15037=IKsin(j4);
IkReal x15038=IKcos(j4);
IkReal x15039=(sj1*sj2);
IkReal x15040=(cj5*sj3);
IkReal x15041=(r11*sj5);
IkReal x15042=(cj3*cj5);
IkReal x15043=((1.0)*cj1);
IkReal x15044=(cj3*sj5);
IkReal x15045=(sj3*sj5);
IkReal x15046=(cj2*sj1);
IkReal x15047=(r01*sj5);
IkReal x15048=((1.0)*sj3);
IkReal x15049=(cj2*x15043);
IkReal x15050=(r10*x15038);
IkReal x15051=(r22*x15037);
IkReal x15052=(cj3*x15038);
IkReal x15053=((1.0)*cj5*x15037);
evalcond[0]=((-1.0)*r22*x15038);
evalcond[1]=(((cj1*sj2))+x15046+((cj3*x15051)));
evalcond[2]=(((x15037*x15041))+(((-1.0)*r10*x15053)));
evalcond[3]=((-1.0)+((x15037*x15047))+(((-1.0)*r00*x15053)));
evalcond[4]=((((-1.0)*x15049))+(((-1.0)*x15048*x15051))+x15039);
evalcond[5]=(((r00*x15045))+(((-1.0)*r00*x15038*x15042))+((r01*x15038*x15044))+((r01*x15040)));
evalcond[6]=((((-1.0)*r01*x15038*x15045))+((r00*x15044))+((r01*x15042))+((r00*x15038*x15040)));
evalcond[7]=((((-1.0)*x15049))+(((-1.0)*x15042*x15050))+((r11*x15040))+x15039+((r10*x15045))+((x15041*x15052)));
evalcond[8]=((((-1.0)*sj2*x15043))+((r11*x15042))+(((-1.0)*x15038*x15041*x15048))+(((-1.0)*x15046))+((r10*x15044))+((x15040*x15050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15054=cj5*cj5;
IkReal x15055=(cj3*r20);
IkReal x15056=(r21*sj3);
IkReal x15057=((1.0)*cj3);
IkReal x15058=(r01*r21);
IkReal x15059=(r01*sj3);
IkReal x15060=(r00*sj5);
IkReal x15061=(cj5*r01*sj5);
IkReal x15062=((1.0)*x15054);
CheckValue<IkReal> x15063 = IKatan2WithCheck(IkReal((((r22*sj3*x15060))+((cj5*r22*x15059)))),IkReal(((((-1.0)*cj5*r20*sj3*x15060))+(((-1.0)*r20*x15059*x15062))+(((-1.0)*r00*x15056*x15062))+((x15056*x15061))+((r00*x15056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15063.valid){
continue;
}
CheckValue<IkReal> x15064=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15057*x15058))+(((-1.0)*r02*r22*x15057))+(((-1.0)*r00*x15055*x15062))+((x15055*x15061))+((cj3*x15054*x15058))+((cj3*cj5*r21*x15060)))),-1);
if(!x15064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15063.value)+(((1.5707963267949)*(x15064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15065=IKsin(j4);
IkReal x15066=IKcos(j4);
IkReal x15067=(sj1*sj2);
IkReal x15068=(r11*sj5);
IkReal x15069=(cj5*r10);
IkReal x15070=(cj5*r01);
IkReal x15071=(cj5*r00);
IkReal x15072=((1.0)*cj1);
IkReal x15073=(cj3*sj5);
IkReal x15074=(r21*sj5);
IkReal x15075=(cj5*sj3);
IkReal x15076=(sj3*sj5);
IkReal x15077=(cj2*sj1);
IkReal x15078=(r01*sj5);
IkReal x15079=(cj3*cj5);
IkReal x15080=(cj5*r20);
IkReal x15081=(cj2*x15072);
IkReal x15082=((1.0)*x15066);
IkReal x15083=((1.0)*x15065);
IkReal x15084=(cj3*x15066);
IkReal x15085=(sj3*x15066);
IkReal x15086=(cj3*x15065);
evalcond[0]=((((-1.0)*r22*x15082))+((x15065*x15074))+(((-1.0)*x15080*x15083)));
evalcond[1]=((((-1.0)*r12*x15082))+((x15065*x15068))+(((-1.0)*x15069*x15083)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15082))+((x15065*x15078))+(((-1.0)*x15071*x15083)));
evalcond[3]=(((r01*x15066*x15073))+((r02*x15086))+(((-1.0)*cj3*x15071*x15082))+((r00*x15076))+((sj3*x15070)));
evalcond[4]=((((-1.0)*r01*x15076*x15082))+((r00*x15073))+((cj3*x15070))+(((-1.0)*r02*sj3*x15083))+((x15071*x15085)));
evalcond[5]=((((-1.0)*r20*x15079*x15082))+((cj1*sj2))+((r22*x15086))+x15077+((r20*x15076))+((r21*x15075))+((r21*x15066*x15073)));
evalcond[6]=(((r12*x15086))+(((-1.0)*x15081))+((r11*x15075))+x15067+((r10*x15076))+(((-1.0)*cj3*x15069*x15082))+((x15068*x15084)));
evalcond[7]=((((-1.0)*sj3*x15074*x15082))+(((-1.0)*x15081))+x15067+((r20*x15066*x15075))+((r20*x15073))+((r21*x15079))+(((-1.0)*r22*sj3*x15083)));
evalcond[8]=((((-1.0)*sj3*x15068*x15082))+(((-1.0)*sj2*x15072))+((r11*x15079))+(((-1.0)*x15077))+((r10*x15073))+(((-1.0)*r12*sj3*x15083))+((x15069*x15085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15087=((1.0)*cj5);
CheckValue<IkReal> x15088 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15088.valid){
continue;
}
CheckValue<IkReal> x15089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15087)))),-1);
if(!x15089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15088.value)+(((1.5707963267949)*(x15089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15090=IKsin(j4);
IkReal x15091=IKcos(j4);
IkReal x15092=(sj1*sj2);
IkReal x15093=(r11*sj5);
IkReal x15094=(cj5*r10);
IkReal x15095=(cj5*r01);
IkReal x15096=(cj5*r00);
IkReal x15097=((1.0)*cj1);
IkReal x15098=(cj3*sj5);
IkReal x15099=(r21*sj5);
IkReal x15100=(cj5*sj3);
IkReal x15101=(sj3*sj5);
IkReal x15102=(cj2*sj1);
IkReal x15103=(r01*sj5);
IkReal x15104=(cj3*cj5);
IkReal x15105=(cj5*r20);
IkReal x15106=(cj2*x15097);
IkReal x15107=((1.0)*x15091);
IkReal x15108=((1.0)*x15090);
IkReal x15109=(cj3*x15091);
IkReal x15110=(sj3*x15091);
IkReal x15111=(cj3*x15090);
evalcond[0]=((((-1.0)*x15105*x15108))+(((-1.0)*r22*x15107))+((x15090*x15099)));
evalcond[1]=((((-1.0)*x15094*x15108))+(((-1.0)*r12*x15107))+((x15090*x15093)));
evalcond[2]=((-1.0)+((x15090*x15103))+(((-1.0)*r02*x15107))+(((-1.0)*x15096*x15108)));
evalcond[3]=(((r01*x15091*x15098))+((sj3*x15095))+((r00*x15101))+(((-1.0)*cj3*x15096*x15107))+((r02*x15111)));
evalcond[4]=(((r00*x15098))+(((-1.0)*r01*x15101*x15107))+((cj3*x15095))+((x15096*x15110))+(((-1.0)*r02*sj3*x15108)));
evalcond[5]=((((-1.0)*r20*x15104*x15107))+((cj1*sj2))+((r21*x15100))+x15102+((r20*x15101))+((r22*x15111))+((r21*x15091*x15098)));
evalcond[6]=(((x15093*x15109))+(((-1.0)*cj3*x15094*x15107))+x15092+((r10*x15101))+((r12*x15111))+(((-1.0)*x15106))+((r11*x15100)));
evalcond[7]=(((r20*x15091*x15100))+((r20*x15098))+((r21*x15104))+x15092+(((-1.0)*sj3*x15099*x15107))+(((-1.0)*r22*sj3*x15108))+(((-1.0)*x15106)));
evalcond[8]=((((-1.0)*sj3*x15093*x15107))+((r10*x15098))+((x15094*x15110))+(((-1.0)*r12*sj3*x15108))+(((-1.0)*x15102))+(((-1.0)*sj2*x15097))+((r11*x15104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15112=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15112.valid){
continue;
}
CheckValue<IkReal> x15113 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15112.value)))+(x15113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15114=IKsin(j4);
IkReal x15115=IKcos(j4);
IkReal x15116=(sj1*sj2);
IkReal x15117=(r11*sj5);
IkReal x15118=(cj5*r10);
IkReal x15119=(cj5*r01);
IkReal x15120=(cj5*r00);
IkReal x15121=((1.0)*cj1);
IkReal x15122=(cj3*sj5);
IkReal x15123=(r21*sj5);
IkReal x15124=(cj5*sj3);
IkReal x15125=(sj3*sj5);
IkReal x15126=(cj2*sj1);
IkReal x15127=(r01*sj5);
IkReal x15128=(cj3*cj5);
IkReal x15129=(cj5*r20);
IkReal x15130=(cj2*x15121);
IkReal x15131=((1.0)*x15115);
IkReal x15132=((1.0)*x15114);
IkReal x15133=(cj3*x15115);
IkReal x15134=(sj3*x15115);
IkReal x15135=(cj3*x15114);
evalcond[0]=((((-1.0)*x15129*x15132))+((x15114*x15123))+(((-1.0)*r22*x15131)));
evalcond[1]=((((-1.0)*r12*x15131))+(((-1.0)*x15118*x15132))+((x15114*x15117)));
evalcond[2]=((-1.0)+(((-1.0)*x15120*x15132))+(((-1.0)*r02*x15131))+((x15114*x15127)));
evalcond[3]=(((r00*x15125))+(((-1.0)*cj3*x15120*x15131))+((sj3*x15119))+((r01*x15115*x15122))+((r02*x15135)));
evalcond[4]=((((-1.0)*r02*sj3*x15132))+((r00*x15122))+(((-1.0)*r01*x15125*x15131))+((cj3*x15119))+((x15120*x15134)));
evalcond[5]=(((r20*x15125))+((r21*x15124))+((cj1*sj2))+((r22*x15135))+x15126+((r21*x15115*x15122))+(((-1.0)*r20*x15128*x15131)));
evalcond[6]=((((-1.0)*x15130))+x15116+((x15117*x15133))+((r12*x15135))+((r10*x15125))+((r11*x15124))+(((-1.0)*cj3*x15118*x15131)));
evalcond[7]=(((r20*x15122))+((r21*x15128))+(((-1.0)*x15130))+(((-1.0)*sj3*x15123*x15131))+(((-1.0)*r22*sj3*x15132))+x15116+((r20*x15115*x15124)));
evalcond[8]=((((-1.0)*r12*sj3*x15132))+(((-1.0)*sj3*x15117*x15131))+((x15118*x15134))+(((-1.0)*x15126))+((r10*x15122))+(((-1.0)*sj2*x15121))+((r11*x15128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15136=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15136;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15137=((1.0)*cj5);
IkReal x15138=((((-1.0)*r21*x15137))+(((-1.0)*r20*sj5)));
j4eval[0]=x15138;
j4eval[1]=((IKabs(((((-1.0)*r10*x15137))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15139=cj5*cj5;
IkReal x15140=(cj3*r01);
IkReal x15141=(cj5*sj5);
IkReal x15142=((1.0)*cj3);
IkReal x15143=(((cj3*r00*r21*x15141))+(((-1.0)*r02*r22*x15142))+((r21*x15139*x15140))+((r20*x15140*x15141))+(((-1.0)*r21*x15140))+(((-1.0)*r00*r20*x15139*x15142)));
j4eval[0]=x15143;
j4eval[1]=IKsign(x15143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15144=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15144;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15145=((1.0)*cj5);
IkReal x15146=((((-1.0)*r21*x15145))+(((-1.0)*r20*sj5)));
j4eval[0]=x15146;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15145))+((r11*sj5))))));
j4eval[2]=IKsign(x15146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15147=cj5*cj5;
IkReal x15148=r01*r01;
IkReal x15149=(cj5*r00);
IkReal x15150=(r01*sj5);
IkReal x15151=((((-1.0)*x15147*x15148))+(((-2.0)*x15149*x15150))+x15148+((x15147*(r00*r00)))+(r02*r02));
j4eval[0]=x15151;
j4eval[1]=((IKabs(r02))+(IKabs((x15149+(((-1.0)*x15150))))));
j4eval[2]=IKsign(x15151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15152=cj5*cj5;
IkReal x15153=r01*r01;
IkReal x15154=(r01*sj5);
IkReal x15155=(cj5*r00);
CheckValue<IkReal> x15156=IKPowWithIntegerCheck(IKsign((((x15152*(r00*r00)))+x15153+(((-1.0)*x15152*x15153))+(r02*r02)+(((-2.0)*x15154*x15155)))),-1);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157 = IKatan2WithCheck(IkReal((x15155+(((-1.0)*x15154)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15156.value)))+(x15157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15158=IKsin(j4);
IkReal x15159=IKcos(j4);
IkReal x15160=(cj5*r10);
IkReal x15161=(r01*sj5);
IkReal x15162=(cj5*r00);
IkReal x15163=(cj5*r20);
IkReal x15164=((1.0)*x15159);
IkReal x15165=((1.0)*x15158);
IkReal x15166=(sj5*x15158);
evalcond[0]=((((-1.0)*x15163*x15165))+((r21*x15166))+(((-1.0)*r22*x15164)));
evalcond[1]=((((-1.0)*x15160*x15165))+((r11*x15166))+(((-1.0)*r12*x15164)));
evalcond[2]=(((x15159*x15162))+(((-1.0)*r02*x15165))+(((-1.0)*x15161*x15164)));
evalcond[3]=((1.0)+((x15158*x15161))+(((-1.0)*x15162*x15165))+(((-1.0)*r02*x15164)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15159*x15160))+(((-1.0)*r11*sj5*x15164))+(((-1.0)*r12*x15165)));
evalcond[5]=((((-1.0)*r21*sj5*x15164))+((x15159*x15163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=((1.0)*cj5);
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15167))+(((-1.0)*r20*sj5)))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15170=IKsin(j4);
IkReal x15171=IKcos(j4);
IkReal x15172=(cj5*r10);
IkReal x15173=(r01*sj5);
IkReal x15174=(cj5*r00);
IkReal x15175=(cj5*r20);
IkReal x15176=((1.0)*x15171);
IkReal x15177=((1.0)*x15170);
IkReal x15178=(sj5*x15170);
evalcond[0]=((((-1.0)*x15175*x15177))+((r21*x15178))+(((-1.0)*r22*x15176)));
evalcond[1]=(((r11*x15178))+(((-1.0)*r12*x15176))+(((-1.0)*x15172*x15177)));
evalcond[2]=((((-1.0)*x15173*x15176))+((x15171*x15174))+(((-1.0)*r02*x15177)));
evalcond[3]=((1.0)+((x15170*x15173))+(((-1.0)*x15174*x15177))+(((-1.0)*r02*x15176)));
evalcond[4]=(((cj2*sj1))+((x15171*x15172))+((cj1*sj2))+(((-1.0)*r11*sj5*x15176))+(((-1.0)*r12*x15177)));
evalcond[5]=(((x15171*x15175))+(((-1.0)*r21*sj5*x15176))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15179 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15179.valid){
continue;
}
CheckValue<IkReal> x15180=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15179.value)+(((1.5707963267949)*(x15180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15181=IKsin(j4);
IkReal x15182=IKcos(j4);
IkReal x15183=(cj5*r10);
IkReal x15184=(r01*sj5);
IkReal x15185=(cj5*r00);
IkReal x15186=(cj5*r20);
IkReal x15187=((1.0)*x15182);
IkReal x15188=((1.0)*x15181);
IkReal x15189=(sj5*x15181);
evalcond[0]=((((-1.0)*x15186*x15188))+((r21*x15189))+(((-1.0)*r22*x15187)));
evalcond[1]=(((r11*x15189))+(((-1.0)*r12*x15187))+(((-1.0)*x15183*x15188)));
evalcond[2]=((((-1.0)*x15184*x15187))+(((-1.0)*r02*x15188))+((x15182*x15185)));
evalcond[3]=((1.0)+(((-1.0)*x15185*x15188))+(((-1.0)*r02*x15187))+((x15181*x15184)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15187))+((cj1*sj2))+((x15182*x15183))+(((-1.0)*r12*x15188)));
evalcond[5]=((((-1.0)*r21*sj5*x15187))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15182*x15186))+(((-1.0)*r22*x15188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15190=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15190;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15191=((1.0)*cj5);
IkReal x15192=((((-1.0)*r21*x15191))+(((-1.0)*r20*sj5)));
j4eval[0]=x15192;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15191))+((r11*sj5))))));
j4eval[2]=IKsign(x15192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15193=cj5*cj5;
IkReal x15194=r01*r01;
IkReal x15195=(r01*sj5);
IkReal x15196=(cj5*r00);
IkReal x15197=(((x15193*x15194))+(((2.0)*x15195*x15196))+(((-1.0)*(r02*r02)))+(((-1.0)*x15194))+(((-1.0)*x15193*(r00*r00))));
j4eval[0]=x15197;
j4eval[1]=IKsign(x15197);
j4eval[2]=((IKabs(r02))+(IKabs((x15195+(((-1.0)*x15196))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15198=cj5*cj5;
IkReal x15199=r01*r01;
IkReal x15200=(r01*sj5);
IkReal x15201=(cj5*r00);
CheckValue<IkReal> x15202=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x15200*x15201))+(((-1.0)*x15198*(r00*r00)))+(((-1.0)*x15199))+((x15198*x15199)))),-1);
if(!x15202.valid){
continue;
}
CheckValue<IkReal> x15203 = IKatan2WithCheck(IkReal(((((-1.0)*x15201))+x15200)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15202.value)))+(x15203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15204=IKcos(j4);
IkReal x15205=IKsin(j4);
IkReal x15206=(cj5*r00);
IkReal x15207=(cj5*r10);
IkReal x15208=(r21*sj5);
IkReal x15209=(cj5*r20);
IkReal x15210=((1.0)*x15204);
IkReal x15211=((1.0)*x15205);
IkReal x15212=(sj5*x15205);
IkReal x15213=(sj5*x15204);
evalcond[0]=(((r01*x15213))+((r02*x15205))+(((-1.0)*x15206*x15210)));
evalcond[1]=((((-1.0)*r22*x15210))+((x15205*x15208))+(((-1.0)*x15209*x15211)));
evalcond[2]=(((r11*x15212))+(((-1.0)*r12*x15210))+(((-1.0)*x15207*x15211)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15210))+((r01*x15212))+(((-1.0)*x15206*x15211)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15213))+((r12*x15205))+(((-1.0)*x15207*x15210)));
evalcond[5]=(((x15204*x15208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15205))+(((-1.0)*x15209*x15210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15214=((1.0)*cj5);
CheckValue<IkReal> x15215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15214))+(((-1.0)*r20*sj5)))),-1);
if(!x15215.valid){
continue;
}
CheckValue<IkReal> x15216 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15215.value)))+(x15216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15217=IKcos(j4);
IkReal x15218=IKsin(j4);
IkReal x15219=(cj5*r00);
IkReal x15220=(cj5*r10);
IkReal x15221=(r21*sj5);
IkReal x15222=(cj5*r20);
IkReal x15223=((1.0)*x15217);
IkReal x15224=((1.0)*x15218);
IkReal x15225=(sj5*x15218);
IkReal x15226=(sj5*x15217);
evalcond[0]=((((-1.0)*x15219*x15223))+((r02*x15218))+((r01*x15226)));
evalcond[1]=((((-1.0)*x15222*x15224))+(((-1.0)*r22*x15223))+((x15218*x15221)));
evalcond[2]=((((-1.0)*x15220*x15224))+(((-1.0)*r12*x15223))+((r11*x15225)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15223))+(((-1.0)*x15219*x15224))+((r01*x15225)));
evalcond[4]=((((-1.0)*x15220*x15223))+((cj2*sj1))+((cj1*sj2))+((r12*x15218))+((r11*x15226)));
evalcond[5]=((((-1.0)*x15222*x15223))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15218))+((x15217*x15221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
CheckValue<IkReal> x15228=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15227.value)+(((1.5707963267949)*(x15228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15229=IKcos(j4);
IkReal x15230=IKsin(j4);
IkReal x15231=(cj5*r00);
IkReal x15232=(cj5*r10);
IkReal x15233=(r21*sj5);
IkReal x15234=(cj5*r20);
IkReal x15235=((1.0)*x15229);
IkReal x15236=((1.0)*x15230);
IkReal x15237=(sj5*x15230);
IkReal x15238=(sj5*x15229);
evalcond[0]=(((r02*x15230))+((r01*x15238))+(((-1.0)*x15231*x15235)));
evalcond[1]=((((-1.0)*r22*x15235))+((x15230*x15233))+(((-1.0)*x15234*x15236)));
evalcond[2]=((((-1.0)*x15232*x15236))+(((-1.0)*r12*x15235))+((r11*x15237)));
evalcond[3]=((1.0)+((r01*x15237))+(((-1.0)*x15231*x15236))+(((-1.0)*r02*x15235)));
evalcond[4]=((((-1.0)*x15232*x15235))+((cj2*sj1))+((cj1*sj2))+((r12*x15230))+((r11*x15238)));
evalcond[5]=(((x15229*x15233))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15230))+(((-1.0)*x15234*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15240 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15240)==0){
continue;
}
IkReal x15239=pow(x15240,-0.5);
CheckValue<IkReal> x15241 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15241.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15241.value));
IkReal gconst61=((-1.0)*r11*x15239);
IkReal gconst62=(r10*x15239);
CheckValue<IkReal> x15242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15245 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15245.valid){
continue;
}
IkReal x15243=((-1.0)*(x15245.value));
IkReal x15244=x15239;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15243;
IkReal gconst60=x15243;
IkReal gconst61=((-1.0)*r11*x15244);
IkReal gconst62=(r10*x15244);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15248 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15248.valid){
continue;
}
IkReal x15246=((-1.0)*(x15248.value));
IkReal x15247=x15239;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15246;
IkReal gconst60=x15246;
IkReal gconst61=((-1.0)*r11*x15247);
IkReal gconst62=(r10*x15247);
CheckValue<IkReal> x15256=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15256.valid){
continue;
}
IkReal x15249=x15256.value;
IkReal x15250=(sj3*x15249);
IkReal x15251=(r20*x15250);
IkReal x15252=(r00*x15250);
IkReal x15253=(r01*x15250);
IkReal x15254=(r21*x15250);
IkReal x15255=(r10*r11*x15250);
j4eval[0]=IKsign((((r10*r11*r21*x15252))+((r01*r10*r11*x15251))+((r00*x15251*(r10*r10)))+((r02*r22*sj3))+((r21*x15253*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15257=gconst61*gconst61;
IkReal x15258=gconst62*gconst62;
IkReal x15259=(cj3*r01);
IkReal x15260=(r22*sj3);
IkReal x15261=(gconst61*r00);
IkReal x15262=((1.0)*cj3);
IkReal x15263=(gconst62*r01);
IkReal x15264=((1.0)*sj3);
IkReal x15265=(gconst61*gconst62*r20);
IkReal x15266=(r21*x15257);
IkReal x15267=(r20*x15258);
CheckValue<IkReal> x15268=IKPowWithIntegerCheck(IKsign((((x15259*x15265))+((cj3*gconst62*r21*x15261))+(((-1.0)*x15259*x15266))+(((-1.0)*r00*x15262*x15267))+(((-1.0)*r02*r22*x15262)))),-1);
if(!x15268.valid){
continue;
}
CheckValue<IkReal> x15269 = IKatan2WithCheck(IkReal((((x15260*x15263))+((x15260*x15261)))),IkReal(((((-1.0)*gconst62*r20*x15261*x15264))+((r00*sj3*x15266))+(((-1.0)*r01*x15264*x15267))+((gconst61*r21*sj3*x15263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15268.value)))+(x15269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15270=IKsin(j4);
IkReal x15271=IKcos(j4);
IkReal x15272=(cj2*sj1);
IkReal x15273=(cj1*sj2);
IkReal x15274=(gconst61*sj3);
IkReal x15275=(cj3*gconst61);
IkReal x15276=(cj3*gconst62);
IkReal x15277=(sj1*sj2);
IkReal x15278=(gconst62*sj3);
IkReal x15279=(cj1*cj2);
IkReal x15280=((1.0)*x15271);
IkReal x15281=((1.0)*x15270);
IkReal x15282=(gconst61*x15270);
IkReal x15283=(cj3*x15270);
IkReal x15284=(x15272+x15273);
evalcond[0]=((((-1.0)*gconst62*r20*x15281))+(((-1.0)*r22*x15280))+((r21*x15282)));
evalcond[1]=((((-1.0)*r12*x15280))+((r11*x15282))+(((-1.0)*gconst62*r10*x15281)));
evalcond[2]=((1.0)+((r01*x15282))+(((-1.0)*gconst62*r00*x15281))+(((-1.0)*r02*x15280)));
evalcond[3]=(((r02*x15283))+(((-1.0)*r00*x15276*x15280))+((r01*x15271*x15275))+((r01*x15278))+((r00*x15274)));
evalcond[4]=(((r00*x15271*x15278))+(((-1.0)*r01*x15274*x15280))+(((-1.0)*r02*sj3*x15281))+((r01*x15276))+((r00*x15275)));
evalcond[5]=(((r22*x15283))+((r21*x15271*x15275))+x15284+(((-1.0)*r20*x15276*x15280))+((r20*x15274))+((r21*x15278)));
evalcond[6]=(((r11*x15271*x15275))+((r11*x15278))+x15279+((r10*x15274))+(((-1.0)*x15277))+(((-1.0)*r10*x15276*x15280))+((r12*x15283)));
evalcond[7]=(((r10*x15271*x15278))+((r11*x15276))+(((-1.0)*r12*sj3*x15281))+x15284+(((-1.0)*r11*x15274*x15280))+((r10*x15275)));
evalcond[8]=((((-1.0)*r22*sj3*x15281))+x15277+((r20*x15275))+(((-1.0)*r21*x15274*x15280))+((r21*x15276))+((r20*x15271*x15278))+(((-1.0)*x15279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15285=gconst61*gconst61;
IkReal x15286=gconst62*gconst62;
IkReal x15287=(cj3*r22);
IkReal x15288=(gconst62*r01);
IkReal x15289=(gconst61*r00);
IkReal x15290=((1.0)*r20);
IkReal x15291=(cj3*r21);
IkReal x15292=(r21*sj3);
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal((((x15287*x15288))+((x15287*x15289)))),IkReal((((r00*x15285*x15291))+((gconst61*x15288*x15291))+(((-1.0)*cj3*gconst62*x15289*x15290))+(((-1.0)*cj3*r01*x15286*x15290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
CheckValue<IkReal> x15294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15289*x15292))+((r01*x15285*x15292))+(((-1.0)*gconst61*sj3*x15288*x15290))+((r00*r20*sj3*x15286))+((r02*r22*sj3)))),-1);
if(!x15294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15293.value)+(((1.5707963267949)*(x15294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15295=IKsin(j4);
IkReal x15296=IKcos(j4);
IkReal x15297=(cj2*sj1);
IkReal x15298=(cj1*sj2);
IkReal x15299=(gconst61*sj3);
IkReal x15300=(cj3*gconst61);
IkReal x15301=(cj3*gconst62);
IkReal x15302=(sj1*sj2);
IkReal x15303=(gconst62*sj3);
IkReal x15304=(cj1*cj2);
IkReal x15305=((1.0)*x15296);
IkReal x15306=((1.0)*x15295);
IkReal x15307=(gconst61*x15295);
IkReal x15308=(cj3*x15295);
IkReal x15309=(x15298+x15297);
evalcond[0]=((((-1.0)*gconst62*r20*x15306))+((r21*x15307))+(((-1.0)*r22*x15305)));
evalcond[1]=((((-1.0)*gconst62*r10*x15306))+(((-1.0)*r12*x15305))+((r11*x15307)));
evalcond[2]=((1.0)+((r01*x15307))+(((-1.0)*r02*x15305))+(((-1.0)*gconst62*r00*x15306)));
evalcond[3]=((((-1.0)*r00*x15301*x15305))+((r02*x15308))+((r01*x15303))+((r00*x15299))+((r01*x15296*x15300)));
evalcond[4]=((((-1.0)*r02*sj3*x15306))+((r00*x15300))+((r01*x15301))+((r00*x15296*x15303))+(((-1.0)*r01*x15299*x15305)));
evalcond[5]=(((r21*x15296*x15300))+((r20*x15299))+((r21*x15303))+x15309+(((-1.0)*r20*x15301*x15305))+((r22*x15308)));
evalcond[6]=(((r10*x15299))+(((-1.0)*x15302))+x15304+((r11*x15296*x15300))+(((-1.0)*r10*x15301*x15305))+((r12*x15308))+((r11*x15303)));
evalcond[7]=((((-1.0)*r12*sj3*x15306))+x15309+((r10*x15296*x15303))+(((-1.0)*r11*x15299*x15305))+((r10*x15300))+((r11*x15301)));
evalcond[8]=(((r20*x15296*x15303))+(((-1.0)*r21*x15299*x15305))+((r20*x15300))+(((-1.0)*x15304))+((r21*x15301))+x15302+(((-1.0)*r22*sj3*x15306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15310=((1.0)*gconst62);
CheckValue<IkReal> x15311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15310)))),-1);
if(!x15311.valid){
continue;
}
CheckValue<IkReal> x15312 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15311.value)))+(x15312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15313=IKsin(j4);
IkReal x15314=IKcos(j4);
IkReal x15315=(cj2*sj1);
IkReal x15316=(cj1*sj2);
IkReal x15317=(gconst61*sj3);
IkReal x15318=(cj3*gconst61);
IkReal x15319=(cj3*gconst62);
IkReal x15320=(sj1*sj2);
IkReal x15321=(gconst62*sj3);
IkReal x15322=(cj1*cj2);
IkReal x15323=((1.0)*x15314);
IkReal x15324=((1.0)*x15313);
IkReal x15325=(gconst61*x15313);
IkReal x15326=(cj3*x15313);
IkReal x15327=(x15315+x15316);
evalcond[0]=((((-1.0)*gconst62*r20*x15324))+((r21*x15325))+(((-1.0)*r22*x15323)));
evalcond[1]=(((r11*x15325))+(((-1.0)*gconst62*r10*x15324))+(((-1.0)*r12*x15323)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15324))+((r01*x15325))+(((-1.0)*r02*x15323)));
evalcond[3]=(((r00*x15317))+((r01*x15321))+((r01*x15314*x15318))+((r02*x15326))+(((-1.0)*r00*x15319*x15323)));
evalcond[4]=(((r01*x15319))+((r00*x15318))+((r00*x15314*x15321))+(((-1.0)*r02*sj3*x15324))+(((-1.0)*r01*x15317*x15323)));
evalcond[5]=((((-1.0)*r20*x15319*x15323))+((r22*x15326))+x15327+((r21*x15314*x15318))+((r21*x15321))+((r20*x15317)));
evalcond[6]=(((r11*x15321))+(((-1.0)*x15320))+((r12*x15326))+x15322+(((-1.0)*r10*x15319*x15323))+((r10*x15317))+((r11*x15314*x15318)));
evalcond[7]=(((r11*x15319))+(((-1.0)*r11*x15317*x15323))+x15327+(((-1.0)*r12*sj3*x15324))+((r10*x15318))+((r10*x15314*x15321)));
evalcond[8]=(((r20*x15314*x15321))+(((-1.0)*x15322))+(((-1.0)*r21*x15317*x15323))+x15320+((r21*x15319))+(((-1.0)*r22*sj3*x15324))+((r20*x15318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15329 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15329)==0){
continue;
}
IkReal x15328=pow(x15329,-0.5);
CheckValue<IkReal> x15330 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15330.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15330.value))));
IkReal gconst64=((1.0)*r11*x15328);
IkReal gconst65=((-1.0)*r10*x15328);
CheckValue<IkReal> x15331 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15331.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15331.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15334 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15334.valid){
continue;
}
IkReal x15332=((1.0)*(x15334.value));
IkReal x15333=x15328;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15332)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15332)));
IkReal gconst64=((1.0)*r11*x15333);
IkReal gconst65=((-1.0)*r10*x15333);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15335=gconst64*gconst64;
IkReal x15336=gconst65*gconst65;
IkReal x15337=(gconst65*r01);
IkReal x15338=(cj3*r22);
IkReal x15339=(gconst64*r00);
IkReal x15340=(cj3*r21);
IkReal x15341=((1.0)*gconst64*sj3);
IkReal x15342=((1.0)*cj3*r20);
CheckValue<IkReal> x15343 = IKatan2WithCheck(IkReal((((x15337*x15338))+((x15338*x15339)))),IkReal(((((-1.0)*r01*x15336*x15342))+((gconst64*x15337*x15340))+(((-1.0)*gconst65*x15339*x15342))+((r00*x15335*x15340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15343.valid){
continue;
}
CheckValue<IkReal> x15344=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15335))+((r00*r20*sj3*x15336))+(((-1.0)*r20*x15337*x15341))+(((-1.0)*gconst65*r21*sj3*x15339))+((r02*r22*sj3)))),-1);
if(!x15344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15343.value)+(((1.5707963267949)*(x15344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15345=IKsin(j4);
IkReal x15346=IKcos(j4);
IkReal x15347=(cj2*sj1);
IkReal x15348=(cj1*sj2);
IkReal x15349=(cj3*gconst64);
IkReal x15350=(gconst65*r21);
IkReal x15351=(sj1*sj2);
IkReal x15352=(gconst65*sj3);
IkReal x15353=(gconst64*sj3);
IkReal x15354=(cj3*gconst65);
IkReal x15355=(cj1*cj2);
IkReal x15356=((1.0)*x15346);
IkReal x15357=((1.0)*x15345);
IkReal x15358=(cj3*x15345);
IkReal x15359=(gconst64*x15345);
IkReal x15360=(x15347+x15348);
evalcond[0]=((((-1.0)*r22*x15356))+(((-1.0)*gconst65*r20*x15357))+((r21*x15359)));
evalcond[1]=((((-1.0)*r12*x15356))+((r11*x15359))+(((-1.0)*gconst65*r10*x15357)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15357))+(((-1.0)*r02*x15356))+((r01*x15359)));
evalcond[3]=(((r01*x15346*x15349))+((r02*x15358))+(((-1.0)*r00*x15354*x15356))+((r01*x15352))+((r00*x15353)));
evalcond[4]=(((r00*x15349))+((r00*x15346*x15352))+(((-1.0)*r01*x15353*x15356))+((r01*x15354))+(((-1.0)*r02*sj3*x15357)));
evalcond[5]=(((r21*x15346*x15349))+((r22*x15358))+(((-1.0)*r20*x15354*x15356))+x15360+((r20*x15353))+((sj3*x15350)));
evalcond[6]=(((r10*x15353))+((r12*x15358))+(((-1.0)*r10*x15354*x15356))+x15355+((r11*x15352))+(((-1.0)*x15351))+((r11*x15346*x15349)));
evalcond[7]=((((-1.0)*r12*sj3*x15357))+(((-1.0)*r11*x15353*x15356))+((r10*x15349))+x15360+((r10*x15346*x15352))+((r11*x15354)));
evalcond[8]=((((-1.0)*r21*x15353*x15356))+(((-1.0)*r22*sj3*x15357))+((cj3*x15350))+x15351+((r20*x15349))+(((-1.0)*x15355))+((r20*x15346*x15352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15361=((1.0)*gconst65);
CheckValue<IkReal> x15362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15361)))),-1);
if(!x15362.valid){
continue;
}
CheckValue<IkReal> x15363 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15361))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15362.value)))+(x15363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15364=IKsin(j4);
IkReal x15365=IKcos(j4);
IkReal x15366=(cj2*sj1);
IkReal x15367=(cj1*sj2);
IkReal x15368=(cj3*gconst64);
IkReal x15369=(gconst65*r21);
IkReal x15370=(sj1*sj2);
IkReal x15371=(gconst65*sj3);
IkReal x15372=(gconst64*sj3);
IkReal x15373=(cj3*gconst65);
IkReal x15374=(cj1*cj2);
IkReal x15375=((1.0)*x15365);
IkReal x15376=((1.0)*x15364);
IkReal x15377=(cj3*x15364);
IkReal x15378=(gconst64*x15364);
IkReal x15379=(x15366+x15367);
evalcond[0]=(((r21*x15378))+(((-1.0)*gconst65*r20*x15376))+(((-1.0)*r22*x15375)));
evalcond[1]=((((-1.0)*gconst65*r10*x15376))+(((-1.0)*r12*x15375))+((r11*x15378)));
evalcond[2]=((1.0)+((r01*x15378))+(((-1.0)*gconst65*r00*x15376))+(((-1.0)*r02*x15375)));
evalcond[3]=(((r02*x15377))+((r00*x15372))+((r01*x15371))+(((-1.0)*r00*x15373*x15375))+((r01*x15365*x15368)));
evalcond[4]=((((-1.0)*r02*sj3*x15376))+((r00*x15365*x15371))+((r01*x15373))+(((-1.0)*r01*x15372*x15375))+((r00*x15368)));
evalcond[5]=(((r20*x15372))+((r21*x15365*x15368))+x15379+(((-1.0)*r20*x15373*x15375))+((sj3*x15369))+((r22*x15377)));
evalcond[6]=(((r11*x15365*x15368))+(((-1.0)*x15370))+x15374+((r10*x15372))+(((-1.0)*r10*x15373*x15375))+((r12*x15377))+((r11*x15371)));
evalcond[7]=(((r10*x15365*x15371))+((r10*x15368))+(((-1.0)*r11*x15372*x15375))+(((-1.0)*r12*sj3*x15376))+x15379+((r11*x15373)));
evalcond[8]=((((-1.0)*r21*x15372*x15375))+((r20*x15365*x15371))+((cj3*x15369))+(((-1.0)*x15374))+x15370+((r20*x15368))+(((-1.0)*r22*sj3*x15376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15380=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15380);
rxp0_2=(py*r00);
rxp1_0=(r21*x15380);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15381=(r01*sj5);
IkReal x15382=((1.0)*cj5*r00);
j4eval[0]=(x15381+(((-1.0)*x15382)));
j4eval[1]=(((cj3*x15381))+(((-1.0)*cj3*x15382)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15383=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15383);
rxp0_2=(py*r00);
rxp1_0=(r21*x15383);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15384=(cj5*r00);
IkReal x15385=(r01*sj5);
j4eval[0]=(x15385+(((-1.0)*x15384)));
j4eval[1]=((((-1.0)*sj3*x15385))+((sj3*x15384)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15386=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15386);
rxp0_2=(py*r00);
rxp1_0=(r21*x15386);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15387=((1.0)*r00);
CheckValue<IkReal> x15388=IKPowWithIntegerCheck(cj3,-1);
if(!x15388.valid){
continue;
}
CheckValue<IkReal> x15389=IKPowWithIntegerCheck(r12,-1);
if(!x15389.valid){
continue;
}
CheckValue<IkReal> x15390=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15387))),-1);
if(!x15390.valid){
continue;
}
if( IKabs(((x15388.value)*(x15389.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15390.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15387)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15388.value)*(x15389.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15390.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15387))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15388.value)*(x15389.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15390.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15387))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15391=IKsin(j4);
IkReal x15392=IKcos(j4);
IkReal x15393=(cj2*sj1);
IkReal x15394=(cj1*sj2);
IkReal x15395=(sj1*sj2);
IkReal x15396=(cj5*sj3);
IkReal x15397=(cj3*cj5);
IkReal x15398=(r21*sj5);
IkReal x15399=(cj1*cj2);
IkReal x15400=(r00*sj5);
IkReal x15401=(r01*sj5);
IkReal x15402=(r20*sj5);
IkReal x15403=((1.0)*x15391);
IkReal x15404=(r20*x15392);
IkReal x15405=(r00*x15392);
IkReal x15406=(cj3*x15392);
IkReal x15407=(x15393+x15394);
IkReal x15408=((1.0)*sj3*x15392);
evalcond[0]=((-1.0)*r12*x15392);
evalcond[1]=(((x15391*x15398))+(((-1.0)*cj5*r20*x15403)));
evalcond[2]=(x15399+(((-1.0)*x15395))+((cj3*r12*x15391)));
evalcond[3]=(x15407+(((-1.0)*r12*sj3*x15403)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15403))+((x15391*x15401)));
evalcond[5]=(((x15401*x15406))+(((-1.0)*x15397*x15405))+((sj3*x15400))+((r01*x15396)));
evalcond[6]=((((-1.0)*x15401*x15408))+((r01*x15397))+((x15396*x15405))+((cj3*x15400)));
evalcond[7]=(((r21*x15396))+(((-1.0)*x15397*x15404))+((sj3*x15402))+((x15398*x15406))+x15407);
evalcond[8]=(((r21*x15397))+x15395+(((-1.0)*x15399))+(((-1.0)*x15398*x15408))+((x15396*x15404))+((cj3*x15402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15409=((1.0)*r01);
IkReal x15410=(cj5*r00);
CheckValue<IkReal> x15411=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15410))),-1);
if(!x15411.valid){
continue;
}
CheckValue<IkReal> x15412=IKPowWithIntegerCheck((((sj3*x15410))+(((-1.0)*sj3*sj5*x15409))),-1);
if(!x15412.valid){
continue;
}
if( IKabs(((-1.0)*(x15411.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15412.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15409)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15411.value)))+IKsqr(((x15412.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15409))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15411.value)), ((x15412.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15409))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15413=IKsin(j4);
IkReal x15414=IKcos(j4);
IkReal x15415=(cj2*sj1);
IkReal x15416=(cj1*sj2);
IkReal x15417=(sj1*sj2);
IkReal x15418=(cj5*sj3);
IkReal x15419=(cj3*cj5);
IkReal x15420=(r21*sj5);
IkReal x15421=(cj1*cj2);
IkReal x15422=(r00*sj5);
IkReal x15423=(r01*sj5);
IkReal x15424=(r20*sj5);
IkReal x15425=((1.0)*x15413);
IkReal x15426=(r20*x15414);
IkReal x15427=(r00*x15414);
IkReal x15428=(cj3*x15414);
IkReal x15429=(x15416+x15415);
IkReal x15430=((1.0)*sj3*x15414);
evalcond[0]=((-1.0)*r12*x15414);
evalcond[1]=(((x15413*x15420))+(((-1.0)*cj5*r20*x15425)));
evalcond[2]=((((-1.0)*x15417))+x15421+((cj3*r12*x15413)));
evalcond[3]=((((-1.0)*r12*sj3*x15425))+x15429);
evalcond[4]=((1.0)+((x15413*x15423))+(((-1.0)*cj5*r00*x15425)));
evalcond[5]=(((sj3*x15422))+(((-1.0)*x15419*x15427))+((r01*x15418))+((x15423*x15428)));
evalcond[6]=((((-1.0)*x15423*x15430))+((r01*x15419))+((x15418*x15427))+((cj3*x15422)));
evalcond[7]=(((x15420*x15428))+((sj3*x15424))+(((-1.0)*x15419*x15426))+x15429+((r21*x15418)));
evalcond[8]=(((x15418*x15426))+(((-1.0)*x15421))+((cj3*x15424))+x15417+(((-1.0)*x15420*x15430))+((r21*x15419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15431=((1.0)*r00);
IkReal x15432=(r01*sj5);
CheckValue<IkReal> x15433=IKPowWithIntegerCheck(((((-1.0)*cj5*x15431))+x15432),-1);
if(!x15433.valid){
continue;
}
CheckValue<IkReal> x15434=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15431))+((cj3*x15432))),-1);
if(!x15434.valid){
continue;
}
if( IKabs(((-1.0)*(x15433.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15434.value)*(((((-1.0)*sj3*sj5*x15431))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15433.value)))+IKsqr(((x15434.value)*(((((-1.0)*sj3*sj5*x15431))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15433.value)), ((x15434.value)*(((((-1.0)*sj3*sj5*x15431))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15435=IKsin(j4);
IkReal x15436=IKcos(j4);
IkReal x15437=(cj2*sj1);
IkReal x15438=(cj1*sj2);
IkReal x15439=(sj1*sj2);
IkReal x15440=(cj5*sj3);
IkReal x15441=(cj3*cj5);
IkReal x15442=(r21*sj5);
IkReal x15443=(cj1*cj2);
IkReal x15444=(r00*sj5);
IkReal x15445=(r01*sj5);
IkReal x15446=(r20*sj5);
IkReal x15447=((1.0)*x15435);
IkReal x15448=(r20*x15436);
IkReal x15449=(r00*x15436);
IkReal x15450=(cj3*x15436);
IkReal x15451=(x15437+x15438);
IkReal x15452=((1.0)*sj3*x15436);
evalcond[0]=((-1.0)*r12*x15436);
evalcond[1]=(((x15435*x15442))+(((-1.0)*cj5*r20*x15447)));
evalcond[2]=(((cj3*r12*x15435))+(((-1.0)*x15439))+x15443);
evalcond[3]=(x15451+(((-1.0)*r12*sj3*x15447)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15447))+((x15435*x15445)));
evalcond[5]=(((sj3*x15444))+((r01*x15440))+((x15445*x15450))+(((-1.0)*x15441*x15449)));
evalcond[6]=(((r01*x15441))+(((-1.0)*x15445*x15452))+((x15440*x15449))+((cj3*x15444)));
evalcond[7]=(((sj3*x15446))+((x15442*x15450))+x15451+(((-1.0)*x15441*x15448))+((r21*x15440)));
evalcond[8]=((((-1.0)*x15442*x15452))+((x15440*x15448))+x15439+(((-1.0)*x15443))+((r21*x15441))+((cj3*x15446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15453=cj5*cj5;
IkReal x15454=(cj3*r20);
IkReal x15455=(r21*sj3);
IkReal x15456=((1.0)*cj3);
IkReal x15457=(r01*r21);
IkReal x15458=(r01*sj3);
IkReal x15459=(r00*sj5);
IkReal x15460=(cj5*r01*sj5);
IkReal x15461=((1.0)*x15453);
CheckValue<IkReal> x15462=IKPowWithIntegerCheck(IKsign((((cj3*x15453*x15457))+((x15454*x15460))+((cj3*cj5*r21*x15459))+(((-1.0)*x15456*x15457))+(((-1.0)*r02*r22*x15456))+(((-1.0)*r00*x15454*x15461)))),-1);
if(!x15462.valid){
continue;
}
CheckValue<IkReal> x15463 = IKatan2WithCheck(IkReal((((cj5*r22*x15458))+((r22*sj3*x15459)))),IkReal(((((-1.0)*r00*x15455*x15461))+((x15455*x15460))+((r00*x15455))+(((-1.0)*cj5*r20*sj3*x15459))+(((-1.0)*r20*x15458*x15461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15462.value)))+(x15463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15464=IKsin(j4);
IkReal x15465=IKcos(j4);
IkReal x15466=(cj2*sj1);
IkReal x15467=(cj1*sj2);
IkReal x15468=(r11*sj5);
IkReal x15469=(cj5*r10);
IkReal x15470=(sj1*sj2);
IkReal x15471=(cj5*r01);
IkReal x15472=(cj5*r00);
IkReal x15473=(cj3*sj5);
IkReal x15474=(r21*sj5);
IkReal x15475=(cj1*cj2);
IkReal x15476=(cj5*sj3);
IkReal x15477=(sj3*sj5);
IkReal x15478=(r01*sj5);
IkReal x15479=(cj3*cj5);
IkReal x15480=(cj5*r20);
IkReal x15481=((1.0)*x15465);
IkReal x15482=((1.0)*x15464);
IkReal x15483=(cj3*x15465);
IkReal x15484=(sj3*x15465);
IkReal x15485=(cj3*x15464);
IkReal x15486=(x15467+x15466);
evalcond[0]=((((-1.0)*x15480*x15482))+((x15464*x15474))+(((-1.0)*r22*x15481)));
evalcond[1]=((((-1.0)*r12*x15481))+(((-1.0)*x15469*x15482))+((x15464*x15468)));
evalcond[2]=((1.0)+(((-1.0)*x15472*x15482))+(((-1.0)*r02*x15481))+((x15464*x15478)));
evalcond[3]=(((r02*x15485))+(((-1.0)*cj3*x15472*x15481))+((r01*x15465*x15473))+((r00*x15477))+((sj3*x15471)));
evalcond[4]=((((-1.0)*r01*x15477*x15481))+((r00*x15473))+((x15472*x15484))+(((-1.0)*r02*sj3*x15482))+((cj3*x15471)));
evalcond[5]=(((r21*x15465*x15473))+(((-1.0)*r20*x15479*x15481))+((r22*x15485))+((r21*x15476))+x15486+((r20*x15477)));
evalcond[6]=((((-1.0)*x15470))+((r12*x15485))+x15475+(((-1.0)*cj3*x15469*x15481))+((x15468*x15483))+((r11*x15476))+((r10*x15477)));
evalcond[7]=((((-1.0)*sj3*x15468*x15481))+(((-1.0)*r12*sj3*x15482))+((x15469*x15484))+x15486+((r11*x15479))+((r10*x15473)));
evalcond[8]=(((r20*x15465*x15476))+(((-1.0)*x15475))+(((-1.0)*r22*sj3*x15482))+((r21*x15479))+x15470+(((-1.0)*sj3*x15474*x15481))+((r20*x15473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15487=((1.0)*cj5);
CheckValue<IkReal> x15488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15487))+(((-1.0)*r20*sj5)))),-1);
if(!x15488.valid){
continue;
}
CheckValue<IkReal> x15489 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15488.value)))+(x15489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15490=IKsin(j4);
IkReal x15491=IKcos(j4);
IkReal x15492=(cj2*sj1);
IkReal x15493=(cj1*sj2);
IkReal x15494=(r11*sj5);
IkReal x15495=(cj5*r10);
IkReal x15496=(sj1*sj2);
IkReal x15497=(cj5*r01);
IkReal x15498=(cj5*r00);
IkReal x15499=(cj3*sj5);
IkReal x15500=(r21*sj5);
IkReal x15501=(cj1*cj2);
IkReal x15502=(cj5*sj3);
IkReal x15503=(sj3*sj5);
IkReal x15504=(r01*sj5);
IkReal x15505=(cj3*cj5);
IkReal x15506=(cj5*r20);
IkReal x15507=((1.0)*x15491);
IkReal x15508=((1.0)*x15490);
IkReal x15509=(cj3*x15491);
IkReal x15510=(sj3*x15491);
IkReal x15511=(cj3*x15490);
IkReal x15512=(x15492+x15493);
evalcond[0]=(((x15490*x15500))+(((-1.0)*r22*x15507))+(((-1.0)*x15506*x15508)));
evalcond[1]=(((x15490*x15494))+(((-1.0)*r12*x15507))+(((-1.0)*x15495*x15508)));
evalcond[2]=((1.0)+((x15490*x15504))+(((-1.0)*x15498*x15508))+(((-1.0)*r02*x15507)));
evalcond[3]=(((r00*x15503))+((r01*x15491*x15499))+((r02*x15511))+(((-1.0)*cj3*x15498*x15507))+((sj3*x15497)));
evalcond[4]=(((r00*x15499))+(((-1.0)*r02*sj3*x15508))+(((-1.0)*r01*x15503*x15507))+((cj3*x15497))+((x15498*x15510)));
evalcond[5]=(((r21*x15491*x15499))+(((-1.0)*r20*x15505*x15507))+((r21*x15502))+x15512+((r20*x15503))+((r22*x15511)));
evalcond[6]=(((r10*x15503))+((r11*x15502))+(((-1.0)*cj3*x15495*x15507))+((r12*x15511))+x15501+(((-1.0)*x15496))+((x15494*x15509)));
evalcond[7]=(((r10*x15499))+((r11*x15505))+((x15495*x15510))+(((-1.0)*r12*sj3*x15508))+x15512+(((-1.0)*sj3*x15494*x15507)));
evalcond[8]=(((r20*x15491*x15502))+(((-1.0)*sj3*x15500*x15507))+(((-1.0)*r22*sj3*x15508))+((r20*x15499))+x15496+(((-1.0)*x15501))+((r21*x15505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15513 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15513.valid){
continue;
}
CheckValue<IkReal> x15514=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15513.value)+(((1.5707963267949)*(x15514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15515=IKsin(j4);
IkReal x15516=IKcos(j4);
IkReal x15517=(cj2*sj1);
IkReal x15518=(cj1*sj2);
IkReal x15519=(r11*sj5);
IkReal x15520=(cj5*r10);
IkReal x15521=(sj1*sj2);
IkReal x15522=(cj5*r01);
IkReal x15523=(cj5*r00);
IkReal x15524=(cj3*sj5);
IkReal x15525=(r21*sj5);
IkReal x15526=(cj1*cj2);
IkReal x15527=(cj5*sj3);
IkReal x15528=(sj3*sj5);
IkReal x15529=(r01*sj5);
IkReal x15530=(cj3*cj5);
IkReal x15531=(cj5*r20);
IkReal x15532=((1.0)*x15516);
IkReal x15533=((1.0)*x15515);
IkReal x15534=(cj3*x15516);
IkReal x15535=(sj3*x15516);
IkReal x15536=(cj3*x15515);
IkReal x15537=(x15518+x15517);
evalcond[0]=((((-1.0)*r22*x15532))+(((-1.0)*x15531*x15533))+((x15515*x15525)));
evalcond[1]=((((-1.0)*x15520*x15533))+(((-1.0)*r12*x15532))+((x15515*x15519)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15532))+(((-1.0)*x15523*x15533))+((x15515*x15529)));
evalcond[3]=(((r02*x15536))+((sj3*x15522))+(((-1.0)*cj3*x15523*x15532))+((r00*x15528))+((r01*x15516*x15524)));
evalcond[4]=(((cj3*x15522))+((x15523*x15535))+((r00*x15524))+(((-1.0)*r02*sj3*x15533))+(((-1.0)*r01*x15528*x15532)));
evalcond[5]=(((r20*x15528))+((r21*x15527))+((r21*x15516*x15524))+(((-1.0)*r20*x15530*x15532))+x15537+((r22*x15536)));
evalcond[6]=(((r10*x15528))+(((-1.0)*cj3*x15520*x15532))+((x15519*x15534))+(((-1.0)*x15521))+((r12*x15536))+x15526+((r11*x15527)));
evalcond[7]=((((-1.0)*r12*sj3*x15533))+((r10*x15524))+((x15520*x15535))+x15537+((r11*x15530))+(((-1.0)*sj3*x15519*x15532)));
evalcond[8]=((((-1.0)*sj3*x15525*x15532))+((r20*x15524))+((r21*x15530))+(((-1.0)*x15526))+(((-1.0)*r22*sj3*x15533))+x15521+((r20*x15516*x15527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15540=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15540)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15540)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15541=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15541);
rxp1_1=(px*r21);
rxp1_2=(r11*x15541);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15542=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15542);
rxp1_1=(px*r21);
rxp1_2=(r11*x15542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15543=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15543);
rxp1_1=(px*r21);
rxp1_2=(r11*x15543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15544=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15544);
rxp1_1=(px*r21);
rxp1_2=(r11*x15544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15547=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15547.valid){
continue;
}
IkReal x15545=x15547.value;
IkReal x15546=(sj0*x15545);
cj4array[0]=(((cj2*sj1*x15546))+((cj1*sj2*x15546)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15548=IKsin(j4);
IkReal x15549=IKcos(j4);
IkReal x15550=(cj5*r20);
IkReal x15551=(r21*sj5);
IkReal x15552=((1.0)*x15548);
IkReal x15553=((1.0)*x15549);
evalcond[0]=((-1.0)*r02*x15548);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15553)));
evalcond[2]=((((-1.0)*x15550*x15552))+((x15548*x15551)));
evalcond[3]=(((r11*sj5*x15548))+(((-1.0)*cj5*r10*x15552)));
evalcond[4]=((((-1.0)*x15551*x15553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15549*x15550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15555=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15555.valid){
continue;
}
IkReal x15554=x15555.value;
cj4array[0]=(((cj1*cj2*x15554))+(((-1.0)*sj1*sj2*x15554)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15556=IKsin(j4);
IkReal x15557=IKcos(j4);
IkReal x15558=(r11*sj5);
IkReal x15559=((1.0)*sj0);
IkReal x15560=((1.0)*x15557);
IkReal x15561=((1.0)*cj5*x15556);
evalcond[0]=((-1.0)*r02*x15556);
evalcond[1]=((((-1.0)*r02*x15560))+(((-1.0)*x15559)));
evalcond[2]=((((-1.0)*r20*x15561))+((r21*sj5*x15556)));
evalcond[3]=(((x15556*x15558))+(((-1.0)*r10*x15561)));
evalcond[4]=((((-1.0)*x15558*x15560))+((cj5*r10*x15557))+(((-1.0)*cj1*sj2*x15559))+(((-1.0)*cj2*sj1*x15559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15562=IKPowWithIntegerCheck(r02,-1);
if(!x15562.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15562.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15563=IKsin(j4);
IkReal x15564=IKcos(j4);
IkReal x15565=((1.0)*sj0);
IkReal x15566=(cj5*x15564);
IkReal x15567=(sj5*x15563);
IkReal x15568=((1.0)*sj5*x15564);
IkReal x15569=((1.0)*cj5*x15563);
evalcond[0]=((-1.0)*r02*x15563);
evalcond[1]=(((r21*x15567))+(((-1.0)*r20*x15569)));
evalcond[2]=((((-1.0)*r10*x15569))+((r11*x15567)));
evalcond[3]=((((-1.0)*r21*x15568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15566)));
evalcond[4]=((((-1.0)*r11*x15568))+((r10*x15566))+(((-1.0)*cj1*sj2*x15565))+(((-1.0)*cj2*sj1*x15565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15570=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15570);
rxp1_1=(px*r21);
rxp1_2=(r11*x15570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15571=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15571);
rxp1_1=(px*r21);
rxp1_2=(r11*x15571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15572=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15572);
rxp1_1=(px*r21);
rxp1_2=(r11*x15572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15575=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15575.valid){
continue;
}
IkReal x15573=x15575.value;
IkReal x15574=(sj0*x15573);
cj4array[0]=(((cj2*sj1*x15574))+((cj1*sj2*x15574)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15576=IKsin(j4);
IkReal x15577=IKcos(j4);
IkReal x15578=(r21*sj5);
IkReal x15579=((1.0)*cj5*r20);
evalcond[0]=(r02*x15576);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15577)));
evalcond[2]=(((x15576*x15578))+(((-1.0)*x15576*x15579)));
evalcond[3]=(((r11*sj5*x15576))+(((-1.0)*cj5*r10*x15576)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15577*x15579))+((x15577*x15578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15581=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15581.valid){
continue;
}
IkReal x15580=x15581.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15580))+((cj1*cj2*x15580)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15582=IKsin(j4);
IkReal x15583=IKcos(j4);
IkReal x15584=((1.0)*sj0);
IkReal x15585=((1.0)*cj5);
IkReal x15586=(sj5*x15582);
evalcond[0]=(r02*x15582);
evalcond[1]=((((-1.0)*x15584))+(((-1.0)*r02*x15583)));
evalcond[2]=((((-1.0)*r20*x15582*x15585))+((r21*x15586)));
evalcond[3]=((((-1.0)*r10*x15582*x15585))+((r11*x15586)));
evalcond[4]=((((-1.0)*r10*x15583*x15585))+(((-1.0)*cj1*sj2*x15584))+(((-1.0)*cj2*sj1*x15584))+((r11*sj5*x15583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15587=IKPowWithIntegerCheck(r02,-1);
if(!x15587.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15587.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15588=IKsin(j4);
IkReal x15589=IKcos(j4);
IkReal x15590=((1.0)*cj1);
IkReal x15591=(r21*sj5);
IkReal x15592=((1.0)*cj5);
IkReal x15593=(r11*sj5);
evalcond[0]=(r02*x15588);
evalcond[1]=(((x15588*x15591))+(((-1.0)*r20*x15588*x15592)));
evalcond[2]=((((-1.0)*r10*x15588*x15592))+((x15588*x15593)));
evalcond[3]=((((-1.0)*r20*x15589*x15592))+(((-1.0)*cj2*x15590))+((sj1*sj2))+((x15589*x15591)));
evalcond[4]=((((-1.0)*sj0*sj2*x15590))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15589*x15592))+((x15589*x15593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15594 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15594.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15594.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15595 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15595.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15595.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15596=((-1.0)*r10);
CheckValue<IkReal> x15598 = IKatan2WithCheck(IkReal(x15596),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15598.valid){
continue;
}
IkReal x15597=((-1.0)*(x15598.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15596);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15597;
IkReal gconst66=x15597;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15599=((-1.0)*r10);
CheckValue<IkReal> x15601 = IKatan2WithCheck(IkReal(x15599),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15601.valid){
continue;
}
IkReal x15600=((-1.0)*(x15601.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15599);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15600;
IkReal gconst66=x15600;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15602=((-1.0)*r10);
CheckValue<IkReal> x15604 = IKatan2WithCheck(IkReal(x15602),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15604.valid){
continue;
}
IkReal x15603=((-1.0)*(x15604.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15602);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15603;
IkReal gconst66=x15603;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15605=((1.0)*gconst67);
IkReal x15606=(cj1*cj2);
IkReal x15607=((1.0)*sj1*sj2);
CheckValue<IkReal> x15608=IKPowWithIntegerCheck(cj3,-1);
if(!x15608.valid){
continue;
}
CheckValue<IkReal> x15609=IKPowWithIntegerCheck(r02,-1);
if(!x15609.valid){
continue;
}
CheckValue<IkReal> x15610=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15605))+((gconst68*r20*sj3))),-1);
if(!x15610.valid){
continue;
}
if( IKabs(((x15608.value)*(x15609.value)*((((cj0*x15606))+(((-1.0)*cj0*x15607)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15610.value)*(((((-1.0)*x15607))+x15606+(((-1.0)*cj3*r20*x15605))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15608.value)*(x15609.value)*((((cj0*x15606))+(((-1.0)*cj0*x15607))))))+IKsqr(((x15610.value)*(((((-1.0)*x15607))+x15606+(((-1.0)*cj3*r20*x15605))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15608.value)*(x15609.value)*((((cj0*x15606))+(((-1.0)*cj0*x15607))))), ((x15610.value)*(((((-1.0)*x15607))+x15606+(((-1.0)*cj3*r20*x15605))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15611=IKsin(j4);
IkReal x15612=IKcos(j4);
IkReal x15613=(sj1*sj2);
IkReal x15614=(gconst68*sj3);
IkReal x15615=(gconst67*r11);
IkReal x15616=(gconst67*sj3);
IkReal x15617=((1.0)*gconst68);
IkReal x15618=(cj2*sj1);
IkReal x15619=((1.0)*cj0);
IkReal x15620=((1.0)*sj0);
IkReal x15621=(cj3*gconst67);
IkReal x15622=(cj3*gconst68);
IkReal x15623=(cj1*sj2);
IkReal x15624=(gconst67*r21);
IkReal x15625=((1.0)*cj1*cj2);
IkReal x15626=(cj3*x15612);
IkReal x15627=((1.0)*x15612);
IkReal x15628=(r02*x15611);
evalcond[0]=((((-1.0)*x15620))+(((-1.0)*r02*x15627)));
evalcond[1]=(((x15611*x15624))+(((-1.0)*r20*x15611*x15617)));
evalcond[2]=(cj0+((x15611*x15615))+(((-1.0)*r10*x15611*x15617)));
evalcond[3]=(((cj0*x15613))+((cj3*x15628))+(((-1.0)*cj1*cj2*x15619)));
evalcond[4]=((((-1.0)*x15619*x15623))+(((-1.0)*sj3*x15628))+(((-1.0)*x15618*x15619)));
evalcond[5]=(((r21*x15614))+(((-1.0)*r20*x15617*x15626))+((r21*x15612*x15621))+x15618+x15623+((r20*x15616)));
evalcond[6]=(((r21*x15622))+(((-1.0)*x15625))+(((-1.0)*r21*x15616*x15627))+x15613+((r20*x15621))+((r20*x15612*x15614)));
evalcond[7]=(((sj0*x15613))+((x15615*x15626))+((r11*x15614))+((r10*x15616))+(((-1.0)*cj1*cj2*x15620))+(((-1.0)*r10*x15617*x15626)));
evalcond[8]=((((-1.0)*x15620*x15623))+((r10*x15612*x15614))+(((-1.0)*x15618*x15620))+((r11*x15622))+((r10*x15621))+(((-1.0)*sj3*x15615*x15627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15631=IKPowWithIntegerCheck(r02,-1);
if(!x15631.valid){
continue;
}
IkReal x15629=x15631.value;
IkReal x15630=((1.0)*cj0);
CheckValue<IkReal> x15632=IKPowWithIntegerCheck(sj3,-1);
if(!x15632.valid){
continue;
}
if( IKabs((x15629*(x15632.value)*(((((-1.0)*cj2*sj1*x15630))+(((-1.0)*cj1*sj2*x15630)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15629)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15629*(x15632.value)*(((((-1.0)*cj2*sj1*x15630))+(((-1.0)*cj1*sj2*x15630))))))+IKsqr(((-1.0)*sj0*x15629))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15629*(x15632.value)*(((((-1.0)*cj2*sj1*x15630))+(((-1.0)*cj1*sj2*x15630))))), ((-1.0)*sj0*x15629));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15633=IKsin(j4);
IkReal x15634=IKcos(j4);
IkReal x15635=(sj1*sj2);
IkReal x15636=(gconst68*sj3);
IkReal x15637=(gconst67*r11);
IkReal x15638=(gconst67*sj3);
IkReal x15639=((1.0)*gconst68);
IkReal x15640=(cj2*sj1);
IkReal x15641=((1.0)*cj0);
IkReal x15642=((1.0)*sj0);
IkReal x15643=(cj3*gconst67);
IkReal x15644=(cj3*gconst68);
IkReal x15645=(cj1*sj2);
IkReal x15646=(gconst67*r21);
IkReal x15647=((1.0)*cj1*cj2);
IkReal x15648=(cj3*x15634);
IkReal x15649=((1.0)*x15634);
IkReal x15650=(r02*x15633);
evalcond[0]=((((-1.0)*r02*x15649))+(((-1.0)*x15642)));
evalcond[1]=((((-1.0)*r20*x15633*x15639))+((x15633*x15646)));
evalcond[2]=(cj0+((x15633*x15637))+(((-1.0)*r10*x15633*x15639)));
evalcond[3]=(((cj3*x15650))+((cj0*x15635))+(((-1.0)*cj1*cj2*x15641)));
evalcond[4]=((((-1.0)*x15641*x15645))+(((-1.0)*sj3*x15650))+(((-1.0)*x15640*x15641)));
evalcond[5]=(((r20*x15638))+(((-1.0)*r20*x15639*x15648))+((r21*x15634*x15643))+x15645+x15640+((r21*x15636)));
evalcond[6]=((((-1.0)*r21*x15638*x15649))+x15635+((r21*x15644))+(((-1.0)*x15647))+((r20*x15634*x15636))+((r20*x15643)));
evalcond[7]=((((-1.0)*r10*x15639*x15648))+((r11*x15636))+((sj0*x15635))+((r10*x15638))+((x15637*x15648))+(((-1.0)*cj1*cj2*x15642)));
evalcond[8]=((((-1.0)*sj3*x15637*x15649))+((r10*x15634*x15636))+((r11*x15644))+(((-1.0)*x15642*x15645))+((r10*x15643))+(((-1.0)*x15640*x15642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15652=IKPowWithIntegerCheck(r02,-1);
if(!x15652.valid){
continue;
}
IkReal x15651=x15652.value;
CheckValue<IkReal> x15653=IKPowWithIntegerCheck(cj3,-1);
if(!x15653.valid){
continue;
}
if( IKabs((x15651*(x15653.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15651)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15651*(x15653.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15651))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15651*(x15653.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15651));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15654=IKsin(j4);
IkReal x15655=IKcos(j4);
IkReal x15656=(sj1*sj2);
IkReal x15657=(gconst68*sj3);
IkReal x15658=(gconst67*r11);
IkReal x15659=(gconst67*sj3);
IkReal x15660=((1.0)*gconst68);
IkReal x15661=(cj2*sj1);
IkReal x15662=((1.0)*cj0);
IkReal x15663=((1.0)*sj0);
IkReal x15664=(cj3*gconst67);
IkReal x15665=(cj3*gconst68);
IkReal x15666=(cj1*sj2);
IkReal x15667=(gconst67*r21);
IkReal x15668=((1.0)*cj1*cj2);
IkReal x15669=(cj3*x15655);
IkReal x15670=((1.0)*x15655);
IkReal x15671=(r02*x15654);
evalcond[0]=((((-1.0)*x15663))+(((-1.0)*r02*x15670)));
evalcond[1]=(((x15654*x15667))+(((-1.0)*r20*x15654*x15660)));
evalcond[2]=(cj0+((x15654*x15658))+(((-1.0)*r10*x15654*x15660)));
evalcond[3]=(((cj3*x15671))+(((-1.0)*cj1*cj2*x15662))+((cj0*x15656)));
evalcond[4]=((((-1.0)*x15662*x15666))+(((-1.0)*x15661*x15662))+(((-1.0)*sj3*x15671)));
evalcond[5]=((((-1.0)*r20*x15660*x15669))+x15661+x15666+((r21*x15655*x15664))+((r21*x15657))+((r20*x15659)));
evalcond[6]=((((-1.0)*x15668))+(((-1.0)*r21*x15659*x15670))+((r20*x15664))+x15656+((r21*x15665))+((r20*x15655*x15657)));
evalcond[7]=(((r10*x15659))+((x15658*x15669))+((r11*x15657))+(((-1.0)*r10*x15660*x15669))+(((-1.0)*cj1*cj2*x15663))+((sj0*x15656)));
evalcond[8]=((((-1.0)*sj3*x15658*x15670))+((r10*x15655*x15657))+((r10*x15664))+((r11*x15665))+(((-1.0)*x15661*x15663))+(((-1.0)*x15663*x15666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15672=((-1.0)*r10);
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal(x15672),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15673.value))));
IkReal gconst70=x15672;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15674 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15674.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15674.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15675=((-1.0)*r10);
IkReal x15676=((-1.0)*r11);
CheckValue<IkReal> x15678 = IKatan2WithCheck(IkReal(x15675),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15678.valid){
continue;
}
IkReal x15677=((1.0)*(x15678.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15675);
rxp1_1=(px*r21);
rxp1_2=(px*x15676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15677)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15677)));
IkReal gconst70=x15675;
IkReal gconst71=x15676;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15679=((-1.0)*r10);
IkReal x15680=((-1.0)*r11);
CheckValue<IkReal> x15682 = IKatan2WithCheck(IkReal(x15679),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15682.valid){
continue;
}
IkReal x15681=((1.0)*(x15682.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15679);
rxp1_1=(px*r21);
rxp1_2=(px*x15680);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15681)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15681)));
IkReal gconst70=x15679;
IkReal gconst71=x15680;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15683=((-1.0)*r10);
IkReal x15684=((-1.0)*r11);
CheckValue<IkReal> x15686 = IKatan2WithCheck(IkReal(x15683),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15686.valid){
continue;
}
IkReal x15685=((1.0)*(x15686.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15683);
rxp1_1=(px*r21);
rxp1_2=(px*x15684);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15685)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15685)));
IkReal gconst70=x15683;
IkReal gconst71=x15684;
IkReal x15687=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15687))+(((-1.0)*r11*r20*x15687)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15688=((1.0)*r21);
IkReal x15689=(cj1*cj2);
IkReal x15690=((1.0)*sj1*sj2);
CheckValue<IkReal> x15691=IKPowWithIntegerCheck(cj3,-1);
if(!x15691.valid){
continue;
}
CheckValue<IkReal> x15692=IKPowWithIntegerCheck(r02,-1);
if(!x15692.valid){
continue;
}
CheckValue<IkReal> x15693=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15688))+((gconst71*r20*sj3))),-1);
if(!x15693.valid){
continue;
}
if( IKabs(((x15691.value)*(x15692.value)*((((cj0*x15689))+(((-1.0)*cj0*x15690)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15693.value)*(((((-1.0)*x15690))+(((-1.0)*cj3*gconst71*x15688))+x15689+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15691.value)*(x15692.value)*((((cj0*x15689))+(((-1.0)*cj0*x15690))))))+IKsqr(((x15693.value)*(((((-1.0)*x15690))+(((-1.0)*cj3*gconst71*x15688))+x15689+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15691.value)*(x15692.value)*((((cj0*x15689))+(((-1.0)*cj0*x15690))))), ((x15693.value)*(((((-1.0)*x15690))+(((-1.0)*cj3*gconst71*x15688))+x15689+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15694=IKsin(j4);
IkReal x15695=IKcos(j4);
IkReal x15696=(cj3*gconst70);
IkReal x15697=(sj1*sj2);
IkReal x15698=((1.0)*gconst71);
IkReal x15699=(gconst71*sj3);
IkReal x15700=(cj2*sj1);
IkReal x15701=((1.0)*sj0);
IkReal x15702=(gconst70*r11);
IkReal x15703=(gconst70*sj3);
IkReal x15704=((1.0)*cj0);
IkReal x15705=(cj3*gconst71);
IkReal x15706=(cj1*sj2);
IkReal x15707=((1.0)*cj1*cj2);
IkReal x15708=(r21*x15695);
IkReal x15709=(r10*x15695);
IkReal x15710=((1.0)*x15695);
IkReal x15711=(r02*x15694);
IkReal x15712=(r20*x15695);
evalcond[0]=((((-1.0)*x15701))+(((-1.0)*r02*x15710)));
evalcond[1]=((((-1.0)*r20*x15694*x15698))+((gconst70*r21*x15694)));
evalcond[2]=((((-1.0)*r10*x15694*x15698))+cj0+((x15694*x15702)));
evalcond[3]=((((-1.0)*cj1*cj2*x15704))+((cj3*x15711))+((cj0*x15697)));
evalcond[4]=((((-1.0)*x15704*x15706))+(((-1.0)*sj3*x15711))+(((-1.0)*x15700*x15704)));
evalcond[5]=((((-1.0)*cj3*x15698*x15712))+((r20*x15703))+((x15696*x15708))+((r21*x15699))+x15700+x15706);
evalcond[6]=((((-1.0)*x15707))+((r20*x15696))+x15697+((x15699*x15712))+((r21*x15705))+(((-1.0)*x15703*x15708)));
evalcond[7]=((((-1.0)*cj3*x15698*x15709))+((r11*x15699))+((sj0*x15697))+(((-1.0)*cj1*cj2*x15701))+((r11*x15695*x15696))+((r10*x15703)));
evalcond[8]=(((r11*x15705))+(((-1.0)*sj3*x15702*x15710))+((r10*x15696))+(((-1.0)*x15701*x15706))+(((-1.0)*x15700*x15701))+((x15699*x15709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15715=IKPowWithIntegerCheck(r02,-1);
if(!x15715.valid){
continue;
}
IkReal x15713=x15715.value;
IkReal x15714=((1.0)*cj0);
CheckValue<IkReal> x15716=IKPowWithIntegerCheck(sj3,-1);
if(!x15716.valid){
continue;
}
if( IKabs((x15713*(x15716.value)*(((((-1.0)*cj2*sj1*x15714))+(((-1.0)*cj1*sj2*x15714)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15713)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15713*(x15716.value)*(((((-1.0)*cj2*sj1*x15714))+(((-1.0)*cj1*sj2*x15714))))))+IKsqr(((-1.0)*sj0*x15713))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15713*(x15716.value)*(((((-1.0)*cj2*sj1*x15714))+(((-1.0)*cj1*sj2*x15714))))), ((-1.0)*sj0*x15713));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15717=IKsin(j4);
IkReal x15718=IKcos(j4);
IkReal x15719=(cj3*gconst70);
IkReal x15720=(sj1*sj2);
IkReal x15721=((1.0)*gconst71);
IkReal x15722=(gconst71*sj3);
IkReal x15723=(cj2*sj1);
IkReal x15724=((1.0)*sj0);
IkReal x15725=(gconst70*r11);
IkReal x15726=(gconst70*sj3);
IkReal x15727=((1.0)*cj0);
IkReal x15728=(cj3*gconst71);
IkReal x15729=(cj1*sj2);
IkReal x15730=((1.0)*cj1*cj2);
IkReal x15731=(r21*x15718);
IkReal x15732=(r10*x15718);
IkReal x15733=((1.0)*x15718);
IkReal x15734=(r02*x15717);
IkReal x15735=(r20*x15718);
evalcond[0]=((((-1.0)*x15724))+(((-1.0)*r02*x15733)));
evalcond[1]=((((-1.0)*r20*x15717*x15721))+((gconst70*r21*x15717)));
evalcond[2]=(cj0+(((-1.0)*r10*x15717*x15721))+((x15717*x15725)));
evalcond[3]=((((-1.0)*cj1*cj2*x15727))+((cj0*x15720))+((cj3*x15734)));
evalcond[4]=((((-1.0)*sj3*x15734))+(((-1.0)*x15723*x15727))+(((-1.0)*x15727*x15729)));
evalcond[5]=(((r20*x15726))+((r21*x15722))+(((-1.0)*cj3*x15721*x15735))+x15723+x15729+((x15719*x15731)));
evalcond[6]=(((x15722*x15735))+(((-1.0)*x15730))+((r20*x15719))+((r21*x15728))+(((-1.0)*x15726*x15731))+x15720);
evalcond[7]=(((r11*x15722))+(((-1.0)*cj1*cj2*x15724))+(((-1.0)*cj3*x15721*x15732))+((r11*x15718*x15719))+((sj0*x15720))+((r10*x15726)));
evalcond[8]=(((x15722*x15732))+(((-1.0)*sj3*x15725*x15733))+((r11*x15728))+(((-1.0)*x15723*x15724))+(((-1.0)*x15724*x15729))+((r10*x15719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15737=IKPowWithIntegerCheck(r02,-1);
if(!x15737.valid){
continue;
}
IkReal x15736=x15737.value;
CheckValue<IkReal> x15738=IKPowWithIntegerCheck(cj3,-1);
if(!x15738.valid){
continue;
}
if( IKabs((x15736*(x15738.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15736)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15736*(x15738.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15736))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15736*(x15738.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15736));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15739=IKsin(j4);
IkReal x15740=IKcos(j4);
IkReal x15741=(cj3*gconst70);
IkReal x15742=(sj1*sj2);
IkReal x15743=((1.0)*gconst71);
IkReal x15744=(gconst71*sj3);
IkReal x15745=(cj2*sj1);
IkReal x15746=((1.0)*sj0);
IkReal x15747=(gconst70*r11);
IkReal x15748=(gconst70*sj3);
IkReal x15749=((1.0)*cj0);
IkReal x15750=(cj3*gconst71);
IkReal x15751=(cj1*sj2);
IkReal x15752=((1.0)*cj1*cj2);
IkReal x15753=(r21*x15740);
IkReal x15754=(r10*x15740);
IkReal x15755=((1.0)*x15740);
IkReal x15756=(r02*x15739);
IkReal x15757=(r20*x15740);
evalcond[0]=((((-1.0)*x15746))+(((-1.0)*r02*x15755)));
evalcond[1]=(((gconst70*r21*x15739))+(((-1.0)*r20*x15739*x15743)));
evalcond[2]=(((x15739*x15747))+cj0+(((-1.0)*r10*x15739*x15743)));
evalcond[3]=(((cj3*x15756))+((cj0*x15742))+(((-1.0)*cj1*cj2*x15749)));
evalcond[4]=((((-1.0)*x15749*x15751))+(((-1.0)*x15745*x15749))+(((-1.0)*sj3*x15756)));
evalcond[5]=(((x15741*x15753))+((r21*x15744))+x15745+x15751+((r20*x15748))+(((-1.0)*cj3*x15743*x15757)));
evalcond[6]=((((-1.0)*x15752))+((r21*x15750))+x15742+((r20*x15741))+((x15744*x15757))+(((-1.0)*x15748*x15753)));
evalcond[7]=(((r11*x15740*x15741))+((r11*x15744))+((sj0*x15742))+(((-1.0)*cj3*x15743*x15754))+(((-1.0)*cj1*cj2*x15746))+((r10*x15748)));
evalcond[8]=((((-1.0)*sj3*x15747*x15755))+(((-1.0)*x15746*x15751))+(((-1.0)*x15745*x15746))+((x15744*x15754))+((r11*x15750))+((r10*x15741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15759=IKPowWithIntegerCheck(r02,-1);
if(!x15759.valid){
continue;
}
IkReal x15758=x15759.value;
CheckValue<IkReal> x15760=IKPowWithIntegerCheck(cj3,-1);
if(!x15760.valid){
continue;
}
if( IKabs((x15758*(x15760.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15758)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15758*(x15760.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15758))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15758*(x15760.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15758));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15761=IKsin(j4);
IkReal x15762=IKcos(j4);
IkReal x15763=(cj5*r10);
IkReal x15764=(sj1*sj2);
IkReal x15765=(cj5*sj3);
IkReal x15766=(r11*sj5);
IkReal x15767=(cj3*cj5);
IkReal x15768=(cj3*sj5);
IkReal x15769=(r21*sj5);
IkReal x15770=(cj2*sj1);
IkReal x15771=((1.0)*sj0);
IkReal x15772=((1.0)*cj0);
IkReal x15773=(sj3*sj5);
IkReal x15774=(cj1*sj2);
IkReal x15775=((1.0)*cj1*cj2);
IkReal x15776=((1.0)*x15761);
IkReal x15777=(r20*x15762);
IkReal x15778=(cj3*x15762);
IkReal x15779=(sj3*x15762);
evalcond[0]=((((-1.0)*r02*x15762))+(((-1.0)*x15771)));
evalcond[1]=(((x15761*x15769))+(((-1.0)*cj5*r20*x15776)));
evalcond[2]=(cj0+(((-1.0)*x15763*x15776))+((x15761*x15766)));
evalcond[3]=(((cj0*x15764))+(((-1.0)*cj1*cj2*x15772))+((cj3*r02*x15761)));
evalcond[4]=((((-1.0)*x15772*x15774))+(((-1.0)*r02*sj3*x15776))+(((-1.0)*x15770*x15772)));
evalcond[5]=(((r21*x15765))+(((-1.0)*x15767*x15777))+((r20*x15773))+x15774+x15770+((r21*x15762*x15768)));
evalcond[6]=(((r21*x15767))+((x15765*x15777))+(((-1.0)*x15769*x15779))+(((-1.0)*x15775))+((r20*x15768))+x15764);
evalcond[7]=(((r10*x15773))+((x15766*x15778))+((sj0*x15764))+(((-1.0)*cj1*cj2*x15771))+((r11*x15765))+(((-1.0)*x15763*x15778)));
evalcond[8]=(((r10*x15768))+(((-1.0)*x15766*x15779))+(((-1.0)*x15770*x15771))+((x15763*x15779))+((r11*x15767))+(((-1.0)*x15771*x15774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15780=((1.0)*sj3);
IkReal x15781=((1.0)*cj5);
CheckValue<IkReal> x15782=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15781))),-1);
if(!x15782.valid){
continue;
}
CheckValue<IkReal> x15783=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15781))),-1);
if(!x15783.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15782.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15783.value)*(((((-1.0)*r20*sj5*x15780))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15780)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15782.value)))+IKsqr(((x15783.value)*(((((-1.0)*r20*sj5*x15780))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15780))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15782.value)), ((x15783.value)*(((((-1.0)*r20*sj5*x15780))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15780))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15784=IKsin(j4);
IkReal x15785=IKcos(j4);
IkReal x15786=(cj5*r10);
IkReal x15787=(sj1*sj2);
IkReal x15788=(cj5*sj3);
IkReal x15789=(r11*sj5);
IkReal x15790=(cj3*cj5);
IkReal x15791=(cj3*sj5);
IkReal x15792=(r21*sj5);
IkReal x15793=(cj2*sj1);
IkReal x15794=((1.0)*sj0);
IkReal x15795=((1.0)*cj0);
IkReal x15796=(sj3*sj5);
IkReal x15797=(cj1*sj2);
IkReal x15798=((1.0)*cj1*cj2);
IkReal x15799=((1.0)*x15784);
IkReal x15800=(r20*x15785);
IkReal x15801=(cj3*x15785);
IkReal x15802=(sj3*x15785);
evalcond[0]=((((-1.0)*x15794))+(((-1.0)*r02*x15785)));
evalcond[1]=((((-1.0)*cj5*r20*x15799))+((x15784*x15792)));
evalcond[2]=(cj0+((x15784*x15789))+(((-1.0)*x15786*x15799)));
evalcond[3]=(((cj3*r02*x15784))+(((-1.0)*cj1*cj2*x15795))+((cj0*x15787)));
evalcond[4]=((((-1.0)*r02*sj3*x15799))+(((-1.0)*x15795*x15797))+(((-1.0)*x15793*x15795)));
evalcond[5]=(((r21*x15788))+((r20*x15796))+x15797+x15793+((r21*x15785*x15791))+(((-1.0)*x15790*x15800)));
evalcond[6]=((((-1.0)*x15792*x15802))+((x15788*x15800))+(((-1.0)*x15798))+((r20*x15791))+((r21*x15790))+x15787);
evalcond[7]=(((sj0*x15787))+((x15789*x15801))+(((-1.0)*cj1*cj2*x15794))+((r10*x15796))+(((-1.0)*x15786*x15801))+((r11*x15788)));
evalcond[8]=(((r11*x15790))+(((-1.0)*x15794*x15797))+(((-1.0)*x15789*x15802))+(((-1.0)*x15793*x15794))+((x15786*x15802))+((r10*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15803=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15803.valid){
continue;
}
CheckValue<IkReal> x15804=IKPowWithIntegerCheck(r02,-1);
if(!x15804.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15804.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15803.value)))+IKsqr(((-1.0)*sj0*(x15804.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15803.value)), ((-1.0)*sj0*(x15804.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15805=IKsin(j4);
IkReal x15806=IKcos(j4);
IkReal x15807=(cj5*r10);
IkReal x15808=(sj1*sj2);
IkReal x15809=(cj5*sj3);
IkReal x15810=(r11*sj5);
IkReal x15811=(cj3*cj5);
IkReal x15812=(cj3*sj5);
IkReal x15813=(r21*sj5);
IkReal x15814=(cj2*sj1);
IkReal x15815=((1.0)*sj0);
IkReal x15816=((1.0)*cj0);
IkReal x15817=(sj3*sj5);
IkReal x15818=(cj1*sj2);
IkReal x15819=((1.0)*cj1*cj2);
IkReal x15820=((1.0)*x15805);
IkReal x15821=(r20*x15806);
IkReal x15822=(cj3*x15806);
IkReal x15823=(sj3*x15806);
evalcond[0]=((((-1.0)*x15815))+(((-1.0)*r02*x15806)));
evalcond[1]=((((-1.0)*cj5*r20*x15820))+((x15805*x15813)));
evalcond[2]=(cj0+((x15805*x15810))+(((-1.0)*x15807*x15820)));
evalcond[3]=((((-1.0)*cj1*cj2*x15816))+((cj0*x15808))+((cj3*r02*x15805)));
evalcond[4]=((((-1.0)*x15814*x15816))+(((-1.0)*r02*sj3*x15820))+(((-1.0)*x15816*x15818)));
evalcond[5]=(((r21*x15809))+(((-1.0)*x15811*x15821))+((r20*x15817))+((r21*x15806*x15812))+x15818+x15814);
evalcond[6]=((((-1.0)*x15819))+(((-1.0)*x15813*x15823))+((x15809*x15821))+((r21*x15811))+((r20*x15812))+x15808);
evalcond[7]=((((-1.0)*cj1*cj2*x15815))+((r10*x15817))+((r11*x15809))+(((-1.0)*x15807*x15822))+((x15810*x15822))+((sj0*x15808)));
evalcond[8]=(((r11*x15811))+(((-1.0)*x15810*x15823))+(((-1.0)*x15814*x15815))+((r10*x15812))+((x15807*x15823))+(((-1.0)*x15815*x15818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15824=((1.0)*sj0);
IkReal x15825=((1.0)*cj0);
CheckValue<IkReal> x15826 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15825))+(((-1.0)*r12*x15824)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15824))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15826.valid){
continue;
}
CheckValue<IkReal> x15827=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15826.value)+(((1.5707963267949)*(x15827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15828=IKsin(j4);
IkReal x15829=IKcos(j4);
IkReal x15830=(r11*sj5);
IkReal x15831=(cj5*r10);
IkReal x15832=(sj1*sj2);
IkReal x15833=(cj5*sj3);
IkReal x15834=((1.0)*sj0);
IkReal x15835=(cj3*cj5);
IkReal x15836=(cj3*sj5);
IkReal x15837=(r21*sj5);
IkReal x15838=(cj2*sj1);
IkReal x15839=(sj3*sj5);
IkReal x15840=(r01*sj5);
IkReal x15841=((1.0)*cj0);
IkReal x15842=(cj1*sj2);
IkReal x15843=((1.0)*x15829);
IkReal x15844=((1.0)*x15828);
IkReal x15845=(cj3*x15829);
IkReal x15846=((1.0)*cj1*cj2);
IkReal x15847=(cj3*x15828);
evalcond[0]=((((-1.0)*cj5*r20*x15844))+((x15828*x15837))+(((-1.0)*r22*x15843)));
evalcond[1]=((((-1.0)*x15831*x15844))+cj0+((x15828*x15830))+(((-1.0)*r12*x15843)));
evalcond[2]=(((x15828*x15840))+(((-1.0)*cj5*r00*x15844))+(((-1.0)*x15834))+(((-1.0)*r02*x15843)));
evalcond[3]=(((r20*x15839))+((r21*x15829*x15836))+((r22*x15847))+(((-1.0)*r20*x15835*x15843))+x15838+x15842+((r21*x15833)));
evalcond[4]=(((r20*x15829*x15833))+(((-1.0)*sj3*x15837*x15843))+((r20*x15836))+(((-1.0)*r22*sj3*x15844))+(((-1.0)*x15846))+x15832+((r21*x15835)));
evalcond[5]=(((r01*x15829*x15836))+((cj0*x15832))+(((-1.0)*cj1*cj2*x15841))+((r01*x15833))+((r02*x15847))+((r00*x15839))+(((-1.0)*r00*x15835*x15843)));
evalcond[6]=(((r10*x15839))+((sj0*x15832))+((r11*x15833))+(((-1.0)*cj1*cj2*x15834))+(((-1.0)*cj3*x15831*x15843))+((r12*x15847))+((x15830*x15845)));
evalcond[7]=((((-1.0)*r02*sj3*x15844))+(((-1.0)*x15841*x15842))+(((-1.0)*r01*x15839*x15843))+((r01*x15835))+((r00*x15836))+((r00*x15829*x15833))+(((-1.0)*x15838*x15841)));
evalcond[8]=(((r10*x15836))+((r11*x15835))+((sj3*x15829*x15831))+(((-1.0)*r12*sj3*x15844))+(((-1.0)*sj3*x15830*x15843))+(((-1.0)*x15834*x15838))+(((-1.0)*x15834*x15842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15848=((1.0)*cj5);
CheckValue<IkReal> x15849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15848)))),-1);
if(!x15849.valid){
continue;
}
CheckValue<IkReal> x15850 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15849.value)))+(x15850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15851=IKsin(j4);
IkReal x15852=IKcos(j4);
IkReal x15853=(r11*sj5);
IkReal x15854=(cj5*r10);
IkReal x15855=(sj1*sj2);
IkReal x15856=(cj5*sj3);
IkReal x15857=((1.0)*sj0);
IkReal x15858=(cj3*cj5);
IkReal x15859=(cj3*sj5);
IkReal x15860=(r21*sj5);
IkReal x15861=(cj2*sj1);
IkReal x15862=(sj3*sj5);
IkReal x15863=(r01*sj5);
IkReal x15864=((1.0)*cj0);
IkReal x15865=(cj1*sj2);
IkReal x15866=((1.0)*x15852);
IkReal x15867=((1.0)*x15851);
IkReal x15868=(cj3*x15852);
IkReal x15869=((1.0)*cj1*cj2);
IkReal x15870=(cj3*x15851);
evalcond[0]=((((-1.0)*r22*x15866))+((x15851*x15860))+(((-1.0)*cj5*r20*x15867)));
evalcond[1]=(((x15851*x15853))+cj0+(((-1.0)*x15854*x15867))+(((-1.0)*r12*x15866)));
evalcond[2]=((((-1.0)*cj5*r00*x15867))+((x15851*x15863))+(((-1.0)*r02*x15866))+(((-1.0)*x15857)));
evalcond[3]=(((r21*x15852*x15859))+((r21*x15856))+((r22*x15870))+((r20*x15862))+(((-1.0)*r20*x15858*x15866))+x15865+x15861);
evalcond[4]=((((-1.0)*x15869))+(((-1.0)*r22*sj3*x15867))+((r20*x15859))+(((-1.0)*sj3*x15860*x15866))+((r20*x15852*x15856))+((r21*x15858))+x15855);
evalcond[5]=(((r01*x15852*x15859))+((cj0*x15855))+((r01*x15856))+(((-1.0)*r00*x15858*x15866))+((r00*x15862))+((r02*x15870))+(((-1.0)*cj1*cj2*x15864)));
evalcond[6]=((((-1.0)*cj3*x15854*x15866))+((x15853*x15868))+(((-1.0)*cj1*cj2*x15857))+((r11*x15856))+((r12*x15870))+((r10*x15862))+((sj0*x15855)));
evalcond[7]=(((r00*x15852*x15856))+(((-1.0)*x15864*x15865))+((r00*x15859))+((r01*x15858))+(((-1.0)*x15861*x15864))+(((-1.0)*r02*sj3*x15867))+(((-1.0)*r01*x15862*x15866)));
evalcond[8]=(((sj3*x15852*x15854))+(((-1.0)*sj3*x15853*x15866))+(((-1.0)*x15857*x15865))+(((-1.0)*x15857*x15861))+((r10*x15859))+((r11*x15858))+(((-1.0)*r12*sj3*x15867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15871=((1.0)*cj5);
CheckValue<IkReal> x15872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15871))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15872.valid){
continue;
}
CheckValue<IkReal> x15873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15871)))),-1);
if(!x15873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15872.value)+(((1.5707963267949)*(x15873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15874=IKsin(j4);
IkReal x15875=IKcos(j4);
IkReal x15876=(r11*sj5);
IkReal x15877=(cj5*r10);
IkReal x15878=(sj1*sj2);
IkReal x15879=(cj5*sj3);
IkReal x15880=((1.0)*sj0);
IkReal x15881=(cj3*cj5);
IkReal x15882=(cj3*sj5);
IkReal x15883=(r21*sj5);
IkReal x15884=(cj2*sj1);
IkReal x15885=(sj3*sj5);
IkReal x15886=(r01*sj5);
IkReal x15887=((1.0)*cj0);
IkReal x15888=(cj1*sj2);
IkReal x15889=((1.0)*x15875);
IkReal x15890=((1.0)*x15874);
IkReal x15891=(cj3*x15875);
IkReal x15892=((1.0)*cj1*cj2);
IkReal x15893=(cj3*x15874);
evalcond[0]=((((-1.0)*cj5*r20*x15890))+((x15874*x15883))+(((-1.0)*r22*x15889)));
evalcond[1]=(cj0+(((-1.0)*r12*x15889))+(((-1.0)*x15877*x15890))+((x15874*x15876)));
evalcond[2]=(((x15874*x15886))+(((-1.0)*r02*x15889))+(((-1.0)*x15880))+(((-1.0)*cj5*r00*x15890)));
evalcond[3]=((((-1.0)*r20*x15881*x15889))+((r20*x15885))+((r21*x15879))+((r22*x15893))+x15884+x15888+((r21*x15875*x15882)));
evalcond[4]=(((r20*x15882))+(((-1.0)*sj3*x15883*x15889))+(((-1.0)*x15892))+(((-1.0)*r22*sj3*x15890))+((r20*x15875*x15879))+x15878+((r21*x15881)));
evalcond[5]=(((r01*x15879))+((r00*x15885))+((r01*x15875*x15882))+(((-1.0)*cj1*cj2*x15887))+((r02*x15893))+(((-1.0)*r00*x15881*x15889))+((cj0*x15878)));
evalcond[6]=(((r11*x15879))+((r10*x15885))+(((-1.0)*cj3*x15877*x15889))+((r12*x15893))+(((-1.0)*cj1*cj2*x15880))+((x15876*x15891))+((sj0*x15878)));
evalcond[7]=(((r00*x15882))+((r01*x15881))+((r00*x15875*x15879))+(((-1.0)*x15884*x15887))+(((-1.0)*x15887*x15888))+(((-1.0)*r01*x15885*x15889))+(((-1.0)*r02*sj3*x15890)));
evalcond[8]=(((r10*x15882))+((sj3*x15875*x15877))+(((-1.0)*sj3*x15876*x15889))+(((-1.0)*x15880*x15884))+(((-1.0)*x15880*x15888))+((r11*x15881))+(((-1.0)*r12*sj3*x15890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15894=cj5*cj5;
IkReal x15895=r21*r21;
IkReal x15896=r20*r20;
IkReal x15897=(r20*r21);
IkReal x15898=((1.0)*cj3);
IkReal x15899=((1.0)*cj5);
IkReal x15900=(cj1*sj2);
IkReal x15901=(cj5*sj5);
IkReal x15902=(sj3*sj5);
IkReal x15903=(cj2*sj1);
IkReal x15904=(r21*sj5);
CheckValue<IkReal> x15905=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15898*(r22*r22)))+(((2.0)*cj3*x15897*x15901))+(((-1.0)*x15895*x15898))+((cj3*x15894*x15895))+(((-1.0)*x15894*x15896*x15898)))),-1);
if(!x15905.valid){
continue;
}
CheckValue<IkReal> x15906 = IKatan2WithCheck(IkReal((((r22*x15900))+((r22*x15903))+((cj5*r21*r22*sj3))+((r20*r22*x15902)))),IkReal((((x15903*x15904))+((x15900*x15904))+(((-1.0)*r20*x15899*x15900))+(((-1.0)*r20*x15899*x15903))+(((-2.0)*sj3*x15894*x15897))+((sj3*x15895*x15901))+((sj3*x15897))+(((-1.0)*x15896*x15899*x15902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15905.value)))+(x15906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15907=IKsin(j4);
IkReal x15908=IKcos(j4);
IkReal x15909=(cj3*r21);
IkReal x15910=(r21*sj5);
IkReal x15911=(r20*sj5);
IkReal x15912=(cj5*r20);
IkReal x15913=((1.0)*x15908);
IkReal x15914=((1.0)*x15907);
evalcond[0]=(((x15907*x15910))+(((-1.0)*x15912*x15914))+(((-1.0)*r22*x15913)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15912*x15913))+((sj3*x15911))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15908*x15909))+((cj3*r22*x15907)));
evalcond[2]=(((sj3*x15908*x15912))+((cj5*x15909))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15914))+((cj3*x15911))+(((-1.0)*sj3*x15910*x15913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15915=(cj5*sj4);
IkReal x15916=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15916))+(((-1.0)*r00*x15915)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15915))+(((-1.0)*r11*x15916))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15916))+(((-1.0)*r00*x15915))))+IKsqr((((r10*x15915))+(((-1.0)*r11*x15916))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15916))+(((-1.0)*r00*x15915))), (((r10*x15915))+(((-1.0)*r11*x15916))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15917=IKcos(j0);
IkReal x15918=IKsin(j0);
IkReal x15919=(r02*sj4);
IkReal x15920=((1.0)*sj3);
IkReal x15921=(r12*sj4);
IkReal x15922=(cj3*cj4);
IkReal x15923=((1.0)*cj5);
IkReal x15924=(r11*sj5);
IkReal x15925=((1.0)*cj1);
IkReal x15926=((0.39225)*sj1);
IkReal x15927=(cj5*r01);
IkReal x15928=(r01*sj5);
IkReal x15929=(r00*sj5);
IkReal x15930=((1.0)*sj1);
IkReal x15931=((0.39225)*cj2);
IkReal x15932=(cj5*r11);
IkReal x15933=(r10*sj5);
IkReal x15934=((1.0)*cj4);
IkReal x15935=(sj2*x15917);
IkReal x15936=(sj2*x15918);
IkReal x15937=(cj4*cj5*sj3);
IkReal x15938=(cj1*x15917);
IkReal x15939=(cj2*x15917);
IkReal x15940=(cj1*x15918);
IkReal x15941=(cj2*x15918);
evalcond[0]=((((-1.0)*r10*sj4*x15923))+(((-1.0)*r12*x15934))+((sj4*x15924))+x15917);
evalcond[1]=((((-1.0)*r00*sj4*x15923))+(((-1.0)*x15918))+(((-1.0)*r02*x15934))+((sj4*x15928)));
evalcond[2]=(((x15931*x15938))+(((-0.09465)*x15929))+(((-0.09465)*x15927))+(((-1.0)*px))+(((-1.0)*x15926*x15935))+(((0.425)*x15938))+(((-0.10915)*x15918)));
evalcond[3]=((((-0.09465)*x15933))+(((-0.09465)*x15932))+(((0.10915)*x15917))+(((-1.0)*py))+(((0.425)*x15940))+((x15931*x15940))+(((-1.0)*x15926*x15936)));
evalcond[4]=((((-1.0)*r00*x15922*x15923))+((sj3*x15927))+((sj3*x15929))+((cj3*x15919))+((x15922*x15928))+(((-1.0)*x15925*x15939))+((sj1*x15935)));
evalcond[5]=(((cj3*x15921))+(((-1.0)*r10*x15922*x15923))+(((-1.0)*x15925*x15941))+((x15922*x15924))+((sj1*x15936))+((sj3*x15932))+((sj3*x15933)));
evalcond[6]=((((-1.0)*cj4*x15920*x15928))+((cj3*x15929))+((cj3*x15927))+((r00*x15937))+(((-1.0)*x15930*x15939))+(((-1.0)*x15919*x15920))+(((-1.0)*x15925*x15935)));
evalcond[7]=((((-1.0)*x15920*x15921))+(((-1.0)*x15930*x15941))+(((-1.0)*cj4*x15920*x15924))+((cj3*x15933))+((cj3*x15932))+(((-1.0)*x15925*x15936))+((r10*x15937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15942=cj5*cj5;
IkReal x15943=r21*r21;
IkReal x15944=r20*r20;
IkReal x15945=(r20*r21);
IkReal x15946=(sj1*sj2);
IkReal x15947=(r21*sj5);
IkReal x15948=(cj1*cj2);
IkReal x15949=(cj5*r20);
IkReal x15950=(cj5*sj5);
IkReal x15951=(cj3*r22);
IkReal x15952=(sj3*x15943);
CheckValue<IkReal> x15953=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15945*x15950))+(((-1.0)*x15942*x15952))+((sj3*x15942*x15944))+x15952)),-1);
if(!x15953.valid){
continue;
}
CheckValue<IkReal> x15954 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15948))+((r20*sj5*x15951))+((cj5*r21*x15951))+((r22*x15946)))),IkReal((((cj3*x15945))+(((-1.0)*cj3*x15944*x15950))+(((-2.0)*cj3*x15942*x15945))+(((-1.0)*x15947*x15948))+((x15946*x15947))+((cj3*x15943*x15950))+((x15948*x15949))+(((-1.0)*x15946*x15949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15953.value)))+(x15954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15955=IKsin(j4);
IkReal x15956=IKcos(j4);
IkReal x15957=(cj3*r21);
IkReal x15958=(r21*sj5);
IkReal x15959=(r20*sj5);
IkReal x15960=(cj5*r20);
IkReal x15961=((1.0)*x15956);
IkReal x15962=((1.0)*x15955);
evalcond[0]=(((x15955*x15958))+(((-1.0)*x15960*x15962))+(((-1.0)*r22*x15961)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15960*x15961))+((sj5*x15956*x15957))+((cj3*r22*x15955))+((sj3*x15959)));
evalcond[2]=((((-1.0)*r22*sj3*x15962))+((cj5*x15957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15958*x15961))+((sj3*x15956*x15960))+((cj3*x15959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15963=(cj5*sj4);
IkReal x15964=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15964))+(((-1.0)*r00*x15963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15964))+((r10*x15963))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15964))+(((-1.0)*r00*x15963))))+IKsqr(((((-1.0)*r11*x15964))+((r10*x15963))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15964))+(((-1.0)*r00*x15963))), ((((-1.0)*r11*x15964))+((r10*x15963))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15965=IKcos(j0);
IkReal x15966=IKsin(j0);
IkReal x15967=(r02*sj4);
IkReal x15968=((1.0)*sj3);
IkReal x15969=(r12*sj4);
IkReal x15970=(cj3*cj4);
IkReal x15971=((1.0)*cj5);
IkReal x15972=(r11*sj5);
IkReal x15973=((1.0)*cj1);
IkReal x15974=((0.39225)*sj1);
IkReal x15975=(cj5*r01);
IkReal x15976=(r01*sj5);
IkReal x15977=(r00*sj5);
IkReal x15978=((1.0)*sj1);
IkReal x15979=((0.39225)*cj2);
IkReal x15980=(cj5*r11);
IkReal x15981=(r10*sj5);
IkReal x15982=((1.0)*cj4);
IkReal x15983=(sj2*x15965);
IkReal x15984=(sj2*x15966);
IkReal x15985=(cj4*cj5*sj3);
IkReal x15986=(cj1*x15965);
IkReal x15987=(cj2*x15965);
IkReal x15988=(cj1*x15966);
IkReal x15989=(cj2*x15966);
evalcond[0]=(((sj4*x15972))+(((-1.0)*r10*sj4*x15971))+(((-1.0)*r12*x15982))+x15965);
evalcond[1]=((((-1.0)*r00*sj4*x15971))+(((-1.0)*r02*x15982))+((sj4*x15976))+(((-1.0)*x15966)));
evalcond[2]=((((-0.09465)*x15975))+(((-0.09465)*x15977))+(((-0.10915)*x15966))+(((0.425)*x15986))+(((-1.0)*px))+((x15979*x15986))+(((-1.0)*x15974*x15983)));
evalcond[3]=((((0.425)*x15988))+(((0.10915)*x15965))+(((-1.0)*py))+((x15979*x15988))+(((-1.0)*x15974*x15984))+(((-0.09465)*x15980))+(((-0.09465)*x15981)));
evalcond[4]=((((-1.0)*r00*x15970*x15971))+((x15970*x15976))+(((-1.0)*x15973*x15987))+((sj1*x15983))+((sj3*x15975))+((sj3*x15977))+((cj3*x15967)));
evalcond[5]=(((x15970*x15972))+(((-1.0)*x15973*x15989))+(((-1.0)*r10*x15970*x15971))+((sj1*x15984))+((sj3*x15981))+((sj3*x15980))+((cj3*x15969)));
evalcond[6]=(((r00*x15985))+(((-1.0)*x15967*x15968))+(((-1.0)*x15973*x15983))+(((-1.0)*x15978*x15987))+((cj3*x15975))+((cj3*x15977))+(((-1.0)*cj4*x15968*x15976)));
evalcond[7]=(((cj3*x15981))+((cj3*x15980))+(((-1.0)*x15973*x15984))+((r10*x15985))+(((-1.0)*x15978*x15989))+(((-1.0)*cj4*x15968*x15972))+(((-1.0)*x15968*x15969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1db89f893b559945177220d92df7668c"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif


// start python bindings
// https://github.com/caelan/ss-pybullet/blob/c5efe7ad32381a7a7a15c2bd147b5a8731d21342/pybullet_tools/ikfast/pr2/left_arm_ik.cpp#L12972
// https://github.com/yijiangh/conrob_pybullet/blob/master/utils/ikfast/kuka_kr6_r900/ikfast0x1000004a.Transform6D.0_1_2_3_4_5.cpp#L9923

static PyObject *get_ik(PyObject *self, PyObject *args)
{
    IkSolutionList<IkReal> solutions;

    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];

    // First list if 3x3 rotation matrix, easier to compute in Python.
    // Next list is [x, y, z] translation matrix.
    // Last list is free joints.
    PyObject *rotList; // 3x3 rotation matrix
    PyObject *transList; // [x,y,z]
    PyObject *freeList; // can be empty

    // format 'O!': pass C object pointer with the pointer's address.
    if(!PyArg_ParseTuple(args, "O!O!O!", &PyList_Type, &rotList, &PyList_Type, &transList, &PyList_Type, &freeList))
    {
        fprintf(stderr,"Failed to parse input to python objects\n");
        return NULL;
    }

    for(std::size_t i = 0; i < 3; ++i)
    {
        eetrans[i] = PyFloat_AsDouble(PyList_GetItem(transList, i));

        PyObject* rowList = PyList_GetItem(rotList, i);
        for( std::size_t j = 0; j < 3; ++j)
        {
            eerot[3*i + j] = PyFloat_AsDouble(PyList_GetItem(rowList, j));
            // fprintf(stderr,"eerot[%d] = %f\n", 3*i + j, eerot[3*i + j]);
        }
    }

    for(int i = 0; i < GetNumFreeParameters(); ++i)
    {
        vfree[i] = PyFloat_AsDouble(PyList_GetItem(freeList, i));
        // fprintf(stderr,"vfree[%d] = %f\n", i, vfree[i]);
    }

    // call ikfast routine
    bool bSuccess = ComputeIk(eetrans, eerot, &vfree[0], solutions);

    if (!bSuccess)
    {
        //fprintf(stderr,"Failed to get ik solution\n");
        return Py_BuildValue(""); // Equivalent to returning None in python
    }

    std::vector<IkReal> solvalues(GetNumJoints());
    PyObject *solutionList = PyList_New(solutions.GetNumSolutions());

    // convert all ikfast solutions into a python list
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        PyObject *individualSolution = PyList_New(GetNumJoints());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            // I think IkReal is just a wrapper for double. So this should work.
            PyList_SetItem(individualSolution, j, PyFloat_FromDouble(solvalues[j]));
        }
        PyList_SetItem(solutionList, i, individualSolution);
    }

    return solutionList;
}

static PyObject *get_fk(PyObject *self, PyObject *args)
{
    std::vector<IkReal> joints(GetNumJoints());
    // eerot is a flattened 3x3 rotation matrix
    IkReal eerot[9], eetrans[3];

    PyObject *jointList;
    if(!PyArg_ParseTuple(args, "O!", &PyList_Type, &jointList))
    {
        return NULL;
    }

    for(std::size_t i = 0; i < GetNumJoints(); ++i)
    {
        joints[i] = PyFloat_AsDouble(PyList_GetItem(jointList, i));
    }

    // call ikfast routine
    ComputeFk(&joints[0], eetrans, eerot);

    // convert computed EE pose to a python object
    PyObject *pose = PyList_New(2);
    PyObject *pos = PyList_New(3);
    PyObject *rot = PyList_New(3);

    for(std::size_t i = 0; i < 3; ++i)
    {
        PyList_SetItem(pos, i, PyFloat_FromDouble(eetrans[i]));

        PyObject *row = PyList_New(3);
        for( std::size_t j = 0; j < 3; ++j)
        {
            PyList_SetItem(row, j, PyFloat_FromDouble(eerot[3*i + j]));
        }
        PyList_SetItem(rot, i, row);
    }

    PyList_SetItem(pose, 0, pos);
    PyList_SetItem(pose, 1, rot);

    return pose;
}

static PyMethodDef ikfast_methods[] =
{
    {"get_ik", get_ik, METH_VARARGS, "Compute ik solutions using ikfast."},
    {"get_fk", get_fk, METH_VARARGS, "Compute fk solutions using ikfast."},
    {NULL, NULL, 0, NULL}
    // Not sure why/if this is needed. It shows up in the examples though(something about Sentinel).
};

#if PY_MAJOR_VERSION >= 3

static struct PyModuleDef ikfast_ur5_module = {
    PyModuleDef_HEAD_INIT,
    "ikfast_ur5",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    ikfast_methods
};

#define INITERROR return NULL

PyMODINIT_FUNC
PyInit_ikfast_ur5(void)

#else // PY_MAJOR_VERSION < 3
#define INITERROR return

PyMODINIT_FUNC
initikfast_ur5(void)
#endif
{
#if PY_MAJOR_VERSION >= 3
    PyObject *module = PyModule_Create(&ikfast_ur5_module);
#else
    PyObject *module = Py_InitModule("ikfast_ur5", ikfast_methods);
#endif

if (module == NULL)
    INITERROR;

#if PY_MAJOR_VERSION >= 3
    return module;
#endif
}

// end python bindings
