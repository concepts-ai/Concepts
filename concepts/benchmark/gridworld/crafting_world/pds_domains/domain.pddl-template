(define
 (domain crafting-world-v20230404-teleport)
 (:requirements :strips)
 (:types
   tile
   object
   inventory
   object-type
 )
 (:predicates
   ;; in this teleport environment, we don't need the map definition.
   ; (tile-up ?t1 - tile ?t2 - tile)     ;; t2 is up of t1
   ; (tile-down ?t1 - tile ?t2 - tile)   ;; t2 is down of t1
   ; (tile-left ?t1 - tile ?t2 - tile)   ;; t2 is left of t1
   ; (tile-right ?t1 - tile ?t2 - tile)  ;; t2 is right of t1

   (agent-at ?t - tile)
   (object-at ?x - object ?t - tile)
   (inventory-holding ?i - inventory ?x - object)
   (inventory-empty ?i - inventory)

   (object-of-type ?x - object ?ot - object-type)
 )
 (:constants
  Key - object-type
  WorkStation - object-type
  Pickaxe - object-type
  IronOreVein - object-type
  IronOre - object-type
  IronIngot - object-type
  CoalOreVein - object-type
  Coal - object-type
  GoldOreVein - object-type
  GoldOre - object-type
  GoldIngot - object-type
  CobblestoneStash - object-type
  Cobblestone - object-type
  Axe - object-type
  Tree - object-type
  Wood - object-type
  WoodPlank - object-type
  Stick - object-type
  WeaponStation - object-type
  Sword - object-type
  Chicken - object-type
  Feather - object-type
  Arrow - object-type
  ToolStation - object-type
  Shears - object-type
  Sheep - object-type
  Wool - object-type
  Bed - object-type
  BedStation - object-type
  BoatStation - object-type
  Boat - object-type
  SugarCanePlant - object-type
  SugarCane - object-type
  Paper - object-type
  Furnace - object-type
  FoodStation - object-type
  Bowl - object-type
  PotatoPlant - object-type
  Potato - object-type
  CookedPotato - object-type
  BeetrootCrop - object-type
  Beetroot - object-type
  BeetrootSoup - object-type

  Hypothetical - object-type
  Trash - object-type
 )
 (:action move-to
  :parameters (?t1 - tile ?t2 - tile)
  :precondition (and (agent-at ?t1))
  :effect (and (agent-at ?t2) (not (agent-at ?t1)))
 )
 (:action pick-up
  :parameters (?i - inventory ?x - object ?t - tile)
  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))
  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))
 )
 (:action place-down
  :parameters (?i - inventory ?x - object ?t - tile)
  :precondition (and (agent-at ?t) (inventory-holding ?i ?x))
  :effect (and (object-at ?x ?t) (not (inventory-holding ?i ?x)) (inventory-empty ?i))
 )

 (:regression move [always]
  :parameters ((forall ?t1 - tile) ?t2 - tile)
  :goal (agent-at ?t2)
  :precondition (and (agent-at ?t1))
  :rule (then
    (move-to ?t1 ?t2)
  )
 )
 (:regression pick-up [always]
  :parameters (?target-type - object-type (forall ?target-inventory - inventory) (forall ?target - object) (forall ?t - tile))
  :goal (exists (?i - inventory) (exists (?x - object) (and (inventory-holding ?i ?x) (object-of-type ?x ?target-type))))
  :precondition (and (object-at ?target ?t) (object-of-type ?target ?target-type) (inventory-empty ?target-inventory))
  :rule (then
    (achieve (agent-at ?t))
    (pick-up ?target-inventory ?target ?t)
  )
 )

{mining_rules}
{crafting_rules}
)
